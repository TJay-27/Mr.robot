0
00:00:01,280 --> 00:00:06,400
Hey everyone and welcome to the security

1
00:00:03,360 --> 00:00:08,800
operations 101 course presented by TCM

2
00:00:06,400 --> 00:00:11,679
security academy. If you want to become

3
00:00:08,800 --> 00:00:13,200
a sock analyst or a security analyst or

4
00:00:11,679 --> 00:00:15,040
if you're already an analyst and want to

5
00:00:13,200 --> 00:00:17,039
fill in some knowledge or methodology

6
00:00:15,040 --> 00:00:19,439
and practical skill gaps, well, you've

7
00:00:17,039 --> 00:00:20,960
come to the right place. And before we

8
00:00:19,439 --> 00:00:23,279
dive in, let's cover some standard

9
00:00:20,960 --> 00:00:25,199
housekeeping tasks and set the stage for

10
00:00:23,279 --> 00:00:26,720
what we're going to be learning. And the

11
00:00:25,199 --> 00:00:28,800
first thing I'll mention is that we're

12
00:00:26,720 --> 00:00:31,519
actually limited to 12-hour uploads on

13
00:00:28,800 --> 00:00:33,520
YouTube and SOCK 101 is a long course.

14
00:00:31,519 --> 00:00:34,880
Uh it's about 35 hours at the time of

15
00:00:33,520 --> 00:00:37,280
recording and we're always adding new

16
00:00:34,880 --> 00:00:39,360
lessons and challenges and just making

17
00:00:37,280 --> 00:00:40,800
changes over time, right? Um and so

18
00:00:39,360 --> 00:00:42,239
doing some mental math here, we'll be

19
00:00:40,800 --> 00:00:43,520
able to carve through about a third of

20
00:00:42,239 --> 00:00:45,440
the way through the course during our

21
00:00:43,520 --> 00:00:47,600
time together here, but just know that

22
00:00:45,440 --> 00:00:49,200
it's sort of far from the full SOC 111

23
00:00:47,600 --> 00:00:50,960
curriculum. And if we take a look at the

24
00:00:49,200 --> 00:00:52,480
core syllabus, uh, you know, we'll be

25
00:00:50,960 --> 00:00:54,480
able to cover up to sort of our lab

26
00:00:52,480 --> 00:00:56,239
setup and, uh, the security operations

27
00:00:54,480 --> 00:00:58,160
fundamentals and understanding where our

28
00:00:56,239 --> 00:00:59,680
role fits in in the sort of grander

29
00:00:58,160 --> 00:01:01,600
scheme of things. Uh, we're going to

30
00:00:59,680 --> 00:01:02,960
deep dive into fishing analysis, right?

31
00:01:01,600 --> 00:01:04,400
And talking about all the different

32
00:01:02,960 --> 00:01:06,400
tools and methodologies that we have

33
00:01:04,400 --> 00:01:08,479
available to us to identify suspicious

34
00:01:06,400 --> 00:01:10,000
or fishing emails. And then we're really

35
00:01:08,479 --> 00:01:11,200
going to get into network security as

36
00:01:10,000 --> 00:01:13,520
well, right? And learning how we can

37
00:01:11,200 --> 00:01:14,799
both collect and analyze and sort of

38
00:01:13,520 --> 00:01:17,040
make meaningful connections and

39
00:01:14,799 --> 00:01:18,159
correlations from network traffic. And

40
00:01:17,040 --> 00:01:20,240
we're probably going to cap it off

41
00:01:18,159 --> 00:01:21,680
around the endpoint security module here

42
00:01:20,240 --> 00:01:23,200
and sort of just getting into talking

43
00:01:21,680 --> 00:01:25,200
about how we can hunt malware at the

44
00:01:23,200 --> 00:01:26,560
endpoint level. Uh but just know there

45
00:01:25,200 --> 00:01:28,560
is so much more to this course that

46
00:01:26,560 --> 00:01:30,400
unfortunately we cannot really fit in in

47
00:01:28,560 --> 00:01:31,840
12 hours. Uh of course we're going to be

48
00:01:30,400 --> 00:01:33,840
talking about the SIM or the security

49
00:01:31,840 --> 00:01:35,680
information and event management system

50
00:01:33,840 --> 00:01:37,280
all the way into threat intelligence and

51
00:01:35,680 --> 00:01:39,200
even digital forensics and incident

52
00:01:37,280 --> 00:01:41,200
response. So a very jam-packed

53
00:01:39,200 --> 00:01:42,880
curriculum here. And so if you find that

54
00:01:41,200 --> 00:01:45,280
you've enjoyed this sort of mini version

55
00:01:42,880 --> 00:01:47,399
here, feel free to join us over at TCM

56
00:01:45,280 --> 00:01:49,680
Academy for the full

57
00:01:47,399 --> 00:01:51,600
course. I just want to take a moment to

58
00:01:49,680 --> 00:01:53,759
talk about our sponsor for this video,

59
00:01:51,600 --> 00:01:55,840
Flare Academy. Cyber threats are

60
00:01:53,759 --> 00:01:58,000
evolving fast. And staying ahead is not

61
00:01:55,840 --> 00:01:59,840
just an advantage, it's a necessity. And

62
00:01:58,000 --> 00:02:01,840
that's where Flare Academy comes in.

63
00:01:59,840 --> 00:02:03,920
Flare Academy is an educational hub

64
00:02:01,840 --> 00:02:05,759
designed to democratize cyber security

65
00:02:03,920 --> 00:02:07,280
knowledge. Backed by the Flair research

66
00:02:05,759 --> 00:02:09,440
team and leading threat intelligence

67
00:02:07,280 --> 00:02:11,760
experts, they provide accessible

68
00:02:09,440 --> 00:02:14,160
training, collaborative discussions, and

69
00:02:11,760 --> 00:02:16,000
cutting edge resources. With the support

70
00:02:14,160 --> 00:02:18,319
of Flair's industry-leading research

71
00:02:16,000 --> 00:02:20,160
team, members gain access to hands-on

72
00:02:18,319 --> 00:02:22,000
insights and training while connecting

73
00:02:20,160 --> 00:02:23,840
with peers and experts to tackle the

74
00:02:22,000 --> 00:02:25,280
toughest and newest challenges together.

75
00:02:23,840 --> 00:02:26,879
This is through practical sessions

76
00:02:25,280 --> 00:02:28,879
designed to solve real world cyber

77
00:02:26,879 --> 00:02:30,560
security challenges. The opportunity to

78
00:02:28,879 --> 00:02:32,319
engage with industry leaders,

79
00:02:30,560 --> 00:02:34,239
researchers, and fellow professionals to

80
00:02:32,319 --> 00:02:36,080
grow your skills, community meetups to

81
00:02:34,239 --> 00:02:37,680
share insights and experiences in both

82
00:02:36,080 --> 00:02:39,680
virtual and in-person events, and

83
00:02:37,680 --> 00:02:41,840
exclusive research and tools such as

84
00:02:39,680 --> 00:02:44,080
access to cutting edge reports, tooling,

85
00:02:41,840 --> 00:02:46,000
and intelligence from Flair's experts

86
00:02:44,080 --> 00:02:47,440
tailored specifically for the community.

87
00:02:46,000 --> 00:02:49,040
With Flare, you can learn and grow

88
00:02:47,440 --> 00:02:50,879
through in-depth training sessions on

89
00:02:49,040 --> 00:02:53,120
credential management, reconnaissance

90
00:02:50,879 --> 00:02:54,959
techniques, OSENT, and much more.

91
00:02:53,120 --> 00:02:56,879
Delivered by industry leaders like Jason

92
00:02:54,959 --> 00:02:58,800
Hadex, and backed by Flair's research

93
00:02:56,879 --> 00:03:01,200
team. You'll get exclusive access to

94
00:02:58,800 --> 00:03:02,800
expertly crafted solutions, playbooks,

95
00:03:01,200 --> 00:03:04,159
and session materials designed to

96
00:03:02,800 --> 00:03:05,599
address real world cyber security

97
00:03:04,159 --> 00:03:07,440
challenges. You'll be able to

98
00:03:05,599 --> 00:03:09,519
participate in expert-led discussions

99
00:03:07,440 --> 00:03:11,680
and Q&A channels and stay ahead of

100
00:03:09,519 --> 00:03:13,360
emerging threats with exclusive reports,

101
00:03:11,680 --> 00:03:15,200
feeds, and insights from Flair's

102
00:03:13,360 --> 00:03:17,040
comprehensive cyber crime intelligence.

103
00:03:15,200 --> 00:03:19,200
And verified members gain access to

104
00:03:17,040 --> 00:03:20,879
premium resources and private insights

105
00:03:19,200 --> 00:03:22,720
while contributing to a community that

106
00:03:20,879 --> 00:03:24,480
thrives on shared knowledge. And so, if

107
00:03:22,720 --> 00:03:28,040
you're ready to level up, join Flare

108
00:03:24,480 --> 00:03:30,400
Academy today through the link in the

109
00:03:28,040 --> 00:03:32,400
description. And so, first, I want to

110
00:03:30,400 --> 00:03:34,319
quickly introduce myself. And so, my

111
00:03:32,400 --> 00:03:36,879
name is Andrew Prince. I'm a security

112
00:03:34,319 --> 00:03:38,480
nerd, a a sort of blue teamer by day,

113
00:03:36,879 --> 00:03:40,000
and I've worked in sock environments for

114
00:03:38,480 --> 00:03:41,840
a number of years. Uh, and I've even

115
00:03:40,000 --> 00:03:44,560
dabbled into a bit of offensive security

116
00:03:41,840 --> 00:03:46,159
as well. I work as an instructor for TCM

117
00:03:44,560 --> 00:03:47,920
where I've trained thousands of analysts

118
00:03:46,159 --> 00:03:49,760
across many large organizations and

119
00:03:47,920 --> 00:03:51,680
industries, uh, including managed

120
00:03:49,760 --> 00:03:53,920
security providers, healthcare,

121
00:03:51,680 --> 00:03:55,599
manufacturing, uh, even academia and

122
00:03:53,920 --> 00:03:56,799
department of defense and much more. Uh,

123
00:03:55,599 --> 00:03:58,959
and to sort of balance out the

124
00:03:56,799 --> 00:04:01,200
practitioner side, I also work in DFIR

125
00:03:58,959 --> 00:04:02,480
consulting and security research. I have

126
00:04:01,200 --> 00:04:04,959
some of my background listed here,

127
00:04:02,480 --> 00:04:06,720
right? some education, previous roles,

128
00:04:04,959 --> 00:04:08,480
uh some credentials and affiliations,

129
00:04:06,720 --> 00:04:10,159
and some shiny collectible badges over

130
00:04:08,480 --> 00:04:12,239
in the lower right along with some links

131
00:04:10,159 --> 00:04:14,560
where you can reach myself and TCM

132
00:04:12,239 --> 00:04:16,239
security. And so, just to preface, I

133
00:04:14,560 --> 00:04:17,919
truly believe that anyone is capable of

134
00:04:16,239 --> 00:04:19,519
breaking into this field. And most of

135
00:04:17,919 --> 00:04:21,919
the industry professionals that I work

136
00:04:19,519 --> 00:04:23,840
with and or look up to the most did not

137
00:04:21,919 --> 00:04:25,520
come from a securityoriented background,

138
00:04:23,840 --> 00:04:27,120
right? And I can attest to that for

139
00:04:25,520 --> 00:04:29,199
myself as well. I used to work in

140
00:04:27,120 --> 00:04:31,199
graphic and web design before carving my

141
00:04:29,199 --> 00:04:33,040
way into the industry and uh taking more

142
00:04:31,199 --> 00:04:35,199
of a traditional path of help desk to

143
00:04:33,040 --> 00:04:36,880
system administration to networking and

144
00:04:35,199 --> 00:04:38,400
then finally security operations and

145
00:04:36,880 --> 00:04:40,160
engineering. So it took me a bit to find

146
00:04:38,400 --> 00:04:41,520
sort of my calling there. But if working

147
00:04:40,160 --> 00:04:43,199
on the sort of blue team and

148
00:04:41,520 --> 00:04:44,880
sockoriented work is something that you

149
00:04:43,199 --> 00:04:46,880
want to do or a path that you want to

150
00:04:44,880 --> 00:04:48,400
start going down as you gain experience.

151
00:04:46,880 --> 00:04:50,400
Well, I want to help you as much as I

152
00:04:48,400 --> 00:04:52,240
can, right? Um and that's really why I

153
00:04:50,400 --> 00:04:54,479
created this course to share my

154
00:04:52,240 --> 00:04:56,080
knowledge and experience and basically

155
00:04:54,479 --> 00:04:58,000
just my lessons learned, right? all of

156
00:04:56,080 --> 00:04:59,440
the things that I wish I knew as I was

157
00:04:58,000 --> 00:05:00,880
becoming a security professional. You

158
00:04:59,440 --> 00:05:02,479
know, uh these are all the things that I

159
00:05:00,880 --> 00:05:04,639
wish someone had sat me down and showed

160
00:05:02,479 --> 00:05:06,400
me during my first sock analyst job. And

161
00:05:04,639 --> 00:05:08,080
so I'm lucky to have this course as a

162
00:05:06,400 --> 00:05:09,919
platform or an outlet to share my

163
00:05:08,080 --> 00:05:12,160
stories and struggles from the field uh

164
00:05:09,919 --> 00:05:13,520
or different insights and present all of

165
00:05:12,160 --> 00:05:15,440
this along with endless hours of

166
00:05:13,520 --> 00:05:17,039
research and compilation putting all of

167
00:05:15,440 --> 00:05:18,720
this together into an engaging and

168
00:05:17,039 --> 00:05:20,320
practical format for you to learn from.

169
00:05:18,720 --> 00:05:22,240
And so all of that to say, I really hope

170
00:05:20,320 --> 00:05:24,880
you enjoy the course and find value from

171
00:05:22,240 --> 00:05:27,039
the passion that was put into it. Before

172
00:05:24,880 --> 00:05:28,560
we cover the course objectives, well,

173
00:05:27,039 --> 00:05:29,759
let's first talk about why would you

174
00:05:28,560 --> 00:05:32,000
want to take this course in the first

175
00:05:29,759 --> 00:05:33,919
place. You're here, right? So, you're

176
00:05:32,000 --> 00:05:35,199
obviously interested in the topic, but

177
00:05:33,919 --> 00:05:37,039
specifically, there are a number of

178
00:05:35,199 --> 00:05:39,680
important tangible takeaways that I want

179
00:05:37,039 --> 00:05:41,120
you to get out of this course. The first

180
00:05:39,680 --> 00:05:43,479
one here is well, something that we

181
00:05:41,120 --> 00:05:45,840
truly stand for at TCM, which is

182
00:05:43,479 --> 00:05:47,680
practicality. And so, this course, save

183
00:05:45,840 --> 00:05:50,400
for the foundation section, is going to

184
00:05:47,680 --> 00:05:52,479
have a practical focus. First, I'm going

185
00:05:50,400 --> 00:05:54,560
to dive into real tools and realistic

186
00:05:52,479 --> 00:05:56,160
scenarios and walk you through hands-on

187
00:05:54,560 --> 00:05:58,479
labs that you can follow along with and

188
00:05:56,160 --> 00:06:01,160
complete yourself and treat as projects

189
00:05:58,479 --> 00:06:04,000
and discussion points during job

190
00:06:01,160 --> 00:06:05,919
interviews. Additionally, there is

191
00:06:04,000 --> 00:06:07,199
absolutely a shortage of skilled sock

192
00:06:05,919 --> 00:06:09,360
analysts and blue teamers in the

193
00:06:07,199 --> 00:06:10,880
industry, especially right now.

194
00:06:09,360 --> 00:06:12,639
Organizations are looking for talent

195
00:06:10,880 --> 00:06:15,120
with hands-on experience and practical

196
00:06:12,639 --> 00:06:17,120
skills. And it's true that many skills

197
00:06:15,120 --> 00:06:19,600
and tools can and will be taught on the

198
00:06:17,120 --> 00:06:21,280
job, but having exposure to the domains

199
00:06:19,600 --> 00:06:23,360
covered in this course is going to give

200
00:06:21,280 --> 00:06:25,039
you such a strong leg up and an ability

201
00:06:23,360 --> 00:06:26,919
to speak intelligently with hiring

202
00:06:25,039 --> 00:06:29,080
managers and future

203
00:06:26,919 --> 00:06:31,440
colleagues, which ties into job

204
00:06:29,080 --> 00:06:32,880
readiness, right? And so having tangible

205
00:06:31,440 --> 00:06:34,880
skills and experience within these

206
00:06:32,880 --> 00:06:36,319
domains is going to build up such a

207
00:06:34,880 --> 00:06:38,400
strong holistic view of blue team

208
00:06:36,319 --> 00:06:40,160
operations and fill any knowledge gaps

209
00:06:38,400 --> 00:06:42,479
that you had previously and honestly

210
00:06:40,160 --> 00:06:44,000
just set you on the right path.

211
00:06:42,479 --> 00:06:46,080
And even if you're already in the

212
00:06:44,000 --> 00:06:47,440
industry, even as a sock analyst, well,

213
00:06:46,080 --> 00:06:49,039
I trust that we'll be able to fill in

214
00:06:47,440 --> 00:06:51,120
some gaps here and level up your blue

215
00:06:49,039 --> 00:06:52,880
team skill set, right? There might be

216
00:06:51,120 --> 00:06:54,560
tools or methodologies that you don't

217
00:06:52,880 --> 00:06:56,560
typically see or interact with in your

218
00:06:54,560 --> 00:06:58,560
day-to-day operations. And so, once

219
00:06:56,560 --> 00:07:00,160
again, giving you that holistic view and

220
00:06:58,560 --> 00:07:01,319
making you as strong of an analyst as

221
00:07:00,160 --> 00:07:03,759
you can

222
00:07:01,319 --> 00:07:05,360
be. All right, and here we go. These are

223
00:07:03,759 --> 00:07:06,960
the course objectives and all of the

224
00:07:05,360 --> 00:07:09,360
topics and methodologies that I want to

225
00:07:06,960 --> 00:07:11,120
cover throughout this course. And so

226
00:07:09,360 --> 00:07:13,520
first of all, we want to understand the

227
00:07:11,120 --> 00:07:16,080
foundational principles and practices of

228
00:07:13,520 --> 00:07:17,680
a security operation center, right? And

229
00:07:16,080 --> 00:07:19,360
this is really important. You know, we

230
00:07:17,680 --> 00:07:21,360
need to know what makes up a sock or

231
00:07:19,360 --> 00:07:23,520
even what does a sock analyst actually

232
00:07:21,360 --> 00:07:25,080
do? What different tools or metrics do

233
00:07:23,520 --> 00:07:27,520
they use and

234
00:07:25,080 --> 00:07:29,120
follow? We want to learn techniques for

235
00:07:27,520 --> 00:07:31,199
analyzing and identifying fishing

236
00:07:29,120 --> 00:07:32,800
attacks, right? So, how can we safely

237
00:07:31,199 --> 00:07:36,080
and accurately analyze potential

238
00:07:32,800 --> 00:07:37,759
malicious emails? and also how can we

239
00:07:36,080 --> 00:07:39,479
proactively protect our organizations

240
00:07:37,759 --> 00:07:42,160
from fishing as

241
00:07:39,479 --> 00:07:43,840
well. We want to develop skills in

242
00:07:42,160 --> 00:07:46,080
monitoring network traffic for security

243
00:07:43,840 --> 00:07:47,680
threats and anomalies, right? So, how

244
00:07:46,080 --> 00:07:50,080
can we analyze network traffic and

245
00:07:47,680 --> 00:07:51,759
gather artifacts or how can we create

246
00:07:50,080 --> 00:07:53,080
detection and prevention rules to block

247
00:07:51,759 --> 00:07:55,039
malicious

248
00:07:53,080 --> 00:07:56,720
traffic? We're going to learn how to

249
00:07:55,039 --> 00:07:59,120
monitor and analyze endpoint security

250
00:07:56,720 --> 00:08:00,720
events as well, right? So, how can we

251
00:07:59,120 --> 00:08:02,960
identify suspicious happenings in

252
00:08:00,720 --> 00:08:04,400
processes on a system? Or how can we

253
00:08:02,960 --> 00:08:05,879
work with our endpoint detection tools

254
00:08:04,400 --> 00:08:07,759
to triage

255
00:08:05,879 --> 00:08:10,240
alerts? We're going to learn how to use

256
00:08:07,759 --> 00:08:12,080
a SIM for security event correlation and

257
00:08:10,240 --> 00:08:13,919
analysis and incident management, right?

258
00:08:12,080 --> 00:08:15,039
And so, this is a big one here, but

259
00:08:13,919 --> 00:08:16,720
we're not just going to stick to the

260
00:08:15,039 --> 00:08:18,879
SIM. So, we're going to learn how can we

261
00:08:16,720 --> 00:08:21,039
analyze logs manually and also with

262
00:08:18,879 --> 00:08:23,360
tools. And so, how can we search through

263
00:08:21,039 --> 00:08:26,479
our SIM to investigate and correlate and

264
00:08:23,360 --> 00:08:27,599
identify security incidents?

265
00:08:26,479 --> 00:08:29,520
And next, we're going to take all of

266
00:08:27,599 --> 00:08:30,960
this and sort of converge to learn how

267
00:08:29,520 --> 00:08:32,640
to leverage threat intelligence to

268
00:08:30,960 --> 00:08:34,800
enhance our security operations and

269
00:08:32,640 --> 00:08:36,560
incident response, right? And so, what

270
00:08:34,800 --> 00:08:39,120
indicators or models or frameworks can

271
00:08:36,560 --> 00:08:40,880
we use to understand attacks better? And

272
00:08:39,120 --> 00:08:43,159
how can we write and consume detection

273
00:08:40,880 --> 00:08:45,440
rules to enhance our detection

274
00:08:43,159 --> 00:08:47,120
capabilities? We're going to develop an

275
00:08:45,440 --> 00:08:48,880
understanding of digital forensic

276
00:08:47,120 --> 00:08:50,000
processes and common tools and

277
00:08:48,880 --> 00:08:52,160
methodologies when it comes to

278
00:08:50,000 --> 00:08:54,160
forensics, right? So, how can we acquire

279
00:08:52,160 --> 00:08:56,160
and analyze forensic data and artifacts

280
00:08:54,160 --> 00:08:57,519
and make conclusions?

281
00:08:56,160 --> 00:08:59,519
And lastly here, we're going to

282
00:08:57,519 --> 00:09:01,200
understand the process and procedures

283
00:08:59,519 --> 00:09:03,360
and best practices for incident

284
00:09:01,200 --> 00:09:05,040
response. And so technically everything

285
00:09:03,360 --> 00:09:07,440
we're doing up to this point involves

286
00:09:05,040 --> 00:09:08,560
incident response in some way, right?

287
00:09:07,440 --> 00:09:10,640
We're going to talk about the core

288
00:09:08,560 --> 00:09:13,120
concepts of a sock analyst to monitor,

289
00:09:10,640 --> 00:09:14,800
detect, analyze, and respond. And the

290
00:09:13,120 --> 00:09:16,160
response effort, well, is always going

291
00:09:14,800 --> 00:09:18,160
to trickle up to any domain that we

292
00:09:16,160 --> 00:09:20,240
cover here. And so we're going to learn

293
00:09:18,160 --> 00:09:22,240
how organizations respond to incidents.

294
00:09:20,240 --> 00:09:25,680
And what role do us as analysts play in

295
00:09:22,240 --> 00:09:27,279
incident response or IR as well? And you

296
00:09:25,680 --> 00:09:29,200
can see how the objectives that we just

297
00:09:27,279 --> 00:09:31,000
covered here start to map nicely with

298
00:09:29,200 --> 00:09:33,120
the domains and the outline of this

299
00:09:31,000 --> 00:09:34,640
course. And I've kind of structured

300
00:09:33,120 --> 00:09:37,040
everything in a way that builds off of

301
00:09:34,640 --> 00:09:39,120
each other and flows nicely. And if

302
00:09:37,040 --> 00:09:40,480
you've taken a TCM course before, well,

303
00:09:39,120 --> 00:09:42,880
you'll notice that we're following a

304
00:09:40,480 --> 00:09:44,640
very similar structure and format here.

305
00:09:42,880 --> 00:09:46,080
And so the bulk of this course is going

306
00:09:44,640 --> 00:09:48,160
to be delivered through these byite-size

307
00:09:46,080 --> 00:09:50,640
video lessons. And there's going to be a

308
00:09:48,160 --> 00:09:52,240
major practical focus here as well. And

309
00:09:50,640 --> 00:09:53,920
so you'll be able to follow along and

310
00:09:52,240 --> 00:09:55,680
set up your own lab machines to

311
00:09:53,920 --> 00:09:58,240
configure security tools and install

312
00:09:55,680 --> 00:10:00,560
appliances or applications and perform a

313
00:09:58,240 --> 00:10:02,399
lot of hands-on analysis. And the course

314
00:10:00,560 --> 00:10:04,160
will also be full of resources and links

315
00:10:02,399 --> 00:10:06,399
and bookmarks for you to get your hands

316
00:10:04,160 --> 00:10:08,240
on additional practice or paths or

317
00:10:06,399 --> 00:10:10,640
research options to investigate anything

318
00:10:08,240 --> 00:10:12,720
we cover here in more detail. And within

319
00:10:10,640 --> 00:10:14,399
the public repository for this course,

320
00:10:12,720 --> 00:10:15,680
there will be a bookmarks file that's

321
00:10:14,399 --> 00:10:17,839
full of this kind of thing for you to

322
00:10:15,680 --> 00:10:20,000
add to your own browser for reference.

323
00:10:17,839 --> 00:10:21,760
And so with all of this, I'm super

324
00:10:20,000 --> 00:10:22,880
excited to jump in and I really look

325
00:10:21,760 --> 00:10:23,640
forward to going through all of this

326
00:10:22,880 --> 00:10:26,320
with

327
00:10:23,640 --> 00:10:28,560
you. Okay. And so before we get into the

328
00:10:26,320 --> 00:10:30,920
lab setup, I want to quickly talk about

329
00:10:28,560 --> 00:10:33,360
prerequisites and the available course

330
00:10:30,920 --> 00:10:35,040
resources. And so on the prerequisite

331
00:10:33,360 --> 00:10:37,279
side, there aren't too many to be

332
00:10:35,040 --> 00:10:39,120
honest. This is a beginner aimed course,

333
00:10:37,279 --> 00:10:41,440
but I do have to mention that in my

334
00:10:39,120 --> 00:10:43,920
opinion, cyber security itself isn't

335
00:10:41,440 --> 00:10:46,000
truly an entry-level field. Or to put

336
00:10:43,920 --> 00:10:48,320
that another way, not always a truly

337
00:10:46,000 --> 00:10:50,560
beginner-friendly field. And what I mean

338
00:10:48,320 --> 00:10:52,560
by that is there's some knowledge that

339
00:10:50,560 --> 00:10:55,519
is often assumed when it comes to basic

340
00:10:52,560 --> 00:10:57,279
IT concepts or networking fundamentals.

341
00:10:55,519 --> 00:10:59,600
And while it's not impossible to get by

342
00:10:57,279 --> 00:11:01,279
without having this, well, having this

343
00:10:59,600 --> 00:11:03,040
foundational understanding of these

344
00:11:01,279 --> 00:11:04,880
topics will certainly make the learning

345
00:11:03,040 --> 00:11:07,600
process smoother and less confusing

346
00:11:04,880 --> 00:11:09,680
during certain sections. And so in terms

347
00:11:07,600 --> 00:11:11,040
of some of the areas or concepts that

348
00:11:09,680 --> 00:11:12,959
would be beneficial for you to be

349
00:11:11,040 --> 00:11:15,279
familiar with well we have things like

350
00:11:12,959 --> 00:11:17,440
networking fundamentals like I mentioned

351
00:11:15,279 --> 00:11:19,680
right and so understanding the TCP IP or

352
00:11:17,440 --> 00:11:21,600
the OSI model you know you don't have to

353
00:11:19,680 --> 00:11:23,600
be an expert here and know it at a PhD

354
00:11:21,600 --> 00:11:24,800
level and I will say I do break down the

355
00:11:23,600 --> 00:11:26,640
protocols here during the network

356
00:11:24,800 --> 00:11:28,240
section but knowing how different

357
00:11:26,640 --> 00:11:30,000
systems interact with each other over

358
00:11:28,240 --> 00:11:32,320
the network and being able to understand

359
00:11:30,000 --> 00:11:34,399
things like what a subnet is an internal

360
00:11:32,320 --> 00:11:36,720
versus external IP address network

361
00:11:34,399 --> 00:11:38,560
address translation and how routers are

362
00:11:36,720 --> 00:11:39,959
used in the network to well route

363
00:11:38,560 --> 00:11:42,320
traffic through different

364
00:11:39,959 --> 00:11:43,680
networks. And again, I do cover this

365
00:11:42,320 --> 00:11:45,600
actually during the network security

366
00:11:43,680 --> 00:11:46,920
module. And I cover the main protocols

367
00:11:45,600 --> 00:11:49,040
that you're going to want to know as

368
00:11:46,920 --> 00:11:52,000
well. But you know, knowing common

369
00:11:49,040 --> 00:11:54,959
protocols like SSH or FTP or the

370
00:11:52,000 --> 00:11:57,120
differences between HTTP and HTTPS, you

371
00:11:54,959 --> 00:11:59,440
know, that kind of stuff. And then on

372
00:11:57,120 --> 00:12:01,040
the endpoint side, well, it would be

373
00:11:59,440 --> 00:12:02,959
beneficial to know how to navigate

374
00:12:01,040 --> 00:12:04,320
Windows and Linux a little bit, you

375
00:12:02,959 --> 00:12:06,079
know, and so you don't have to be an

376
00:12:04,320 --> 00:12:07,920
expert in the terminal or in the command

377
00:12:06,079 --> 00:12:10,079
line or PowerShell, but even just

378
00:12:07,920 --> 00:12:12,639
knowing what they are, you know, basic

379
00:12:10,079 --> 00:12:14,639
commands like cd and ls or cat, that

380
00:12:12,639 --> 00:12:16,079
kind of thing, because we're going to be

381
00:12:14,639 --> 00:12:18,480
jumping into the command line and the

382
00:12:16,079 --> 00:12:20,240
terminal a lot throughout the course.

383
00:12:18,480 --> 00:12:22,160
And there's no real way to throw in an

384
00:12:20,240 --> 00:12:24,160
operating systems 101 section in the

385
00:12:22,160 --> 00:12:26,240
course. It's already pretty bloated as

386
00:12:24,160 --> 00:12:27,839
it is, but again, I'm always doing my

387
00:12:26,240 --> 00:12:29,839
best to explain what commands I'm

388
00:12:27,839 --> 00:12:32,639
running or what arguments or parameters

389
00:12:29,839 --> 00:12:34,760
I'm using and why I'm using them. And

390
00:12:32,639 --> 00:12:36,639
so, lastly, on the infosc side

391
00:12:34,760 --> 00:12:38,800
specifically, there's going to be some

392
00:12:36,639 --> 00:12:40,480
assumed knowledge on, you know, the

393
00:12:38,800 --> 00:12:43,360
foundational security concepts like the

394
00:12:40,480 --> 00:12:46,320
CIA triad or different security controls

395
00:12:43,360 --> 00:12:47,839
and concepts like encryption or hashing.

396
00:12:46,320 --> 00:12:49,600
Again, just knowing about these things

397
00:12:47,839 --> 00:12:50,839
and why they're used is, you know, more

398
00:12:49,600 --> 00:12:54,000
than good enough for

399
00:12:50,839 --> 00:12:56,079
me. And while I know I do speak a bit

400
00:12:54,000 --> 00:12:58,160
fast sometimes, I do try to cover

401
00:12:56,079 --> 00:13:00,480
everything as verbose as possible,

402
00:12:58,160 --> 00:13:01,920
sometimes to my own detriment, but just

403
00:13:00,480 --> 00:13:04,240
know that I do this to make sure that

404
00:13:01,920 --> 00:13:05,760
you're able to follow along, right? And

405
00:13:04,240 --> 00:13:07,440
so I try not to just copy and paste

406
00:13:05,760 --> 00:13:10,000
commands and run them unless they're

407
00:13:07,440 --> 00:13:11,760
super redundant or not super important.

408
00:13:10,000 --> 00:13:13,760
And I try to write out exactly what I'm

409
00:13:11,760 --> 00:13:15,279
running and break down commands by their

410
00:13:13,760 --> 00:13:16,440
arguments to give you more of that

411
00:13:15,279 --> 00:13:19,200
contextual

412
00:13:16,440 --> 00:13:22,000
knowledge. And so now we should also

413
00:13:19,200 --> 00:13:23,600
talk about the system requirements.

414
00:13:22,000 --> 00:13:24,959
And so to get the most out of this

415
00:13:23,600 --> 00:13:27,000
course, I want you to be able to follow

416
00:13:24,959 --> 00:13:29,519
along with the labs as much as

417
00:13:27,000 --> 00:13:31,120
possible. And to do that, well, there

418
00:13:29,519 --> 00:13:33,279
will be times where we need to run two

419
00:13:31,120 --> 00:13:34,720
virtual machines simultaneously. And

420
00:13:33,279 --> 00:13:37,279
we'll talk more about that in the lab

421
00:13:34,720 --> 00:13:39,000
install section. And so we're going to

422
00:13:37,279 --> 00:13:41,680
need to install a Windows and a Linux

423
00:13:39,000 --> 00:13:42,880
VM. And I'll admit, I'm really not a

424
00:13:41,680 --> 00:13:45,200
hardware guy. I don't really do

425
00:13:42,880 --> 00:13:47,200
hardware. I more so do software. But

426
00:13:45,200 --> 00:13:48,639
after basing it on my own lab setup and

427
00:13:47,200 --> 00:13:50,639
looking at requirements for similar

428
00:13:48,639 --> 00:13:52,720
demands, you're ideally going to want to

429
00:13:50,639 --> 00:13:56,000
be running something like a 64-bit Intel

430
00:13:52,720 --> 00:13:58,480
i5 or an i7, you know, like a modern

431
00:13:56,000 --> 00:14:00,079
host machine with at least 8 GB of RAM

432
00:13:58,480 --> 00:14:02,000
and a multi-core processor is

433
00:14:00,079 --> 00:14:05,040
recommended to efficiently run multiple

434
00:14:02,000 --> 00:14:06,320
VMs. And worst case scenario, you know,

435
00:14:05,040 --> 00:14:08,560
if you just don't have the system

436
00:14:06,320 --> 00:14:10,480
resources to run two VMs simultaneously,

437
00:14:08,560 --> 00:14:12,240
or if it's just running too slow for

438
00:14:10,480 --> 00:14:13,680
you, you know, feel free to just sit

439
00:14:12,240 --> 00:14:15,839
back during some sections and just

440
00:14:13,680 --> 00:14:17,519
follow along on a single VM. You know,

441
00:14:15,839 --> 00:14:19,199
you can always up the resources for a

442
00:14:17,519 --> 00:14:20,800
single VM if you're just using one at a

443
00:14:19,199 --> 00:14:22,399
time, but there are always going to be

444
00:14:20,800 --> 00:14:24,480
workarounds.

445
00:14:22,399 --> 00:14:25,600
On the disk space and storage side,

446
00:14:24,480 --> 00:14:28,240
well, you're going to want to have

447
00:14:25,600 --> 00:14:30,000
around 80 to 100 GB of free storage

448
00:14:28,240 --> 00:14:32,160
space on the hard drive to host the

449
00:14:30,000 --> 00:14:34,800
different VMs and install tools and work

450
00:14:32,160 --> 00:14:36,800
with the course files. And SSDs or

451
00:14:34,800 --> 00:14:37,920
solidstate drives are recommended.

452
00:14:36,800 --> 00:14:40,320
You're going to get a lot better

453
00:14:37,920 --> 00:14:41,920
performance out of them, but we won't

454
00:14:40,320 --> 00:14:43,760
likely get anywhere near filling up the

455
00:14:41,920 --> 00:14:45,600
drives. It's more so just a theoretical

456
00:14:43,760 --> 00:14:47,440
limit. And we'll be setting up dynamic

457
00:14:45,600 --> 00:14:49,600
hard discs as well, and so it's only

458
00:14:47,440 --> 00:14:50,639
going to fill up as much as we use them.

459
00:14:49,600 --> 00:14:53,680
And again, these are just the

460
00:14:50,639 --> 00:14:53,680
recommended specs.

461
00:14:55,199 --> 00:14:58,639
And lastly, I just want to point you to

462
00:14:56,800 --> 00:15:00,639
the public course repository which I'll

463
00:14:58,639 --> 00:15:02,480
have linked down below. And I'm going to

464
00:15:00,639 --> 00:15:04,399
cover this in more detail along with its

465
00:15:02,480 --> 00:15:05,440
contents during the lab setup. But I

466
00:15:04,399 --> 00:15:07,360
just wanted to mention that this

467
00:15:05,440 --> 00:15:08,880
repository also contains some resources

468
00:15:07,360 --> 00:15:10,959
that might be useful to you as you go

469
00:15:08,880 --> 00:15:13,519
throughout the course and also takeaways

470
00:15:10,959 --> 00:15:16,560
for you after you finish the course. And

471
00:15:13,519 --> 00:15:18,399
so if you go under resources here and go

472
00:15:16,560 --> 00:15:20,880
under bookmarks for example, well,

473
00:15:18,399 --> 00:15:23,040
you'll see this sock_bookmarks.html HTML

474
00:15:20,880 --> 00:15:25,920
file. And this is a bookmarks file that

475
00:15:23,040 --> 00:15:28,839
you can download by clicking on it and

476
00:15:25,920 --> 00:15:31,519
then clicking on the download icon

477
00:15:28,839 --> 00:15:33,279
here. And once it's been downloaded, you

478
00:15:31,519 --> 00:15:35,760
can then import it into the web browser

479
00:15:33,279 --> 00:15:37,440
of your choice. And so I'll link some

480
00:15:35,760 --> 00:15:39,040
documentation below on how to actually

481
00:15:37,440 --> 00:15:40,519
import a bookmarks file for a number of

482
00:15:39,040 --> 00:15:42,480
different

483
00:15:40,519 --> 00:15:44,000
browsers. And when you do that, you're

484
00:15:42,480 --> 00:15:46,320
going to have access to a number of

485
00:15:44,000 --> 00:15:47,760
different curated resources and links.

486
00:15:46,320 --> 00:15:49,920
and a lot of which we cover in the

487
00:15:47,760 --> 00:15:52,079
course and some just for your additional

488
00:15:49,920 --> 00:15:53,519
reference or learning. And it's all just

489
00:15:52,079 --> 00:15:55,440
meant to be a nice takeaway for you to

490
00:15:53,519 --> 00:15:57,920
reference in the field or just for you

491
00:15:55,440 --> 00:15:59,519
to have as you continue on your journey.

492
00:15:57,920 --> 00:16:01,199
And so I just wanted to shout out the

493
00:15:59,519 --> 00:16:02,800
course repository here. And it might be

494
00:16:01,199 --> 00:16:04,639
a good idea to occasionally check up on

495
00:16:02,800 --> 00:16:08,079
this in case additional resources are

496
00:16:04,639 --> 00:16:09,360
added in the future. Now obviously

497
00:16:08,079 --> 00:16:11,360
because we want to be doing a lot of

498
00:16:09,360 --> 00:16:13,199
hands-on and practical work during this

499
00:16:11,360 --> 00:16:15,440
course, well, we're going to need to set

500
00:16:13,199 --> 00:16:17,639
up a lab environment. And we're going to

501
00:16:15,440 --> 00:16:19,680
do this using the concept of virtual

502
00:16:17,639 --> 00:16:22,480
machines. And if you've never worked

503
00:16:19,680 --> 00:16:24,240
with a virtual machine or a VM before or

504
00:16:22,480 --> 00:16:26,320
set up any kind of lab environment like

505
00:16:24,240 --> 00:16:28,160
this, well, don't worry cuz we're going

506
00:16:26,320 --> 00:16:29,519
to walk through it together. But

507
00:16:28,160 --> 00:16:32,079
basically, we can think of virtual

508
00:16:29,519 --> 00:16:34,720
machines as a separate computer or a

509
00:16:32,079 --> 00:16:36,959
system that's running on top or inside

510
00:16:34,720 --> 00:16:38,800
of our host system.

511
00:16:36,959 --> 00:16:40,800
And the reason why we want to use

512
00:16:38,800 --> 00:16:42,880
virtual machines is so that we can

513
00:16:40,800 --> 00:16:44,959
deploy things like a separate isolated

514
00:16:42,880 --> 00:16:48,160
Windows instance to install our security

515
00:16:44,959 --> 00:16:50,079
tools on and generate artifacts and data

516
00:16:48,160 --> 00:16:52,399
all without having to configure anything

517
00:16:50,079 --> 00:16:54,240
or mess with anything on our host like

518
00:16:52,399 --> 00:16:57,199
our normal operating system that we use

519
00:16:54,240 --> 00:16:58,959
for day-to-day work. And the other thing

520
00:16:57,199 --> 00:17:00,800
is we're going to be creating some

521
00:16:58,959 --> 00:17:02,320
different lab scenarios where we're

522
00:17:00,800 --> 00:17:04,079
looking at artifacts that we generate

523
00:17:02,320 --> 00:17:05,919
from one system onto another in real

524
00:17:04,079 --> 00:17:08,959
time. And so we're going to need to

525
00:17:05,919 --> 00:17:10,480
simulate aworked environment to do that.

526
00:17:08,959 --> 00:17:12,360
And at most we're going to have two

527
00:17:10,480 --> 00:17:15,360
separate machines or systems

528
00:17:12,360 --> 00:17:17,600
running. And so with that, we're going

529
00:17:15,360 --> 00:17:19,280
to need both a Windows virtual machine

530
00:17:17,600 --> 00:17:21,039
to run all of our Windows commands on

531
00:17:19,280 --> 00:17:24,000
and install tools and, you know, learn

532
00:17:21,039 --> 00:17:25,760
to investigate Windows hosts, but also

533
00:17:24,000 --> 00:17:28,400
we're going to need a Unix based or a

534
00:17:25,760 --> 00:17:29,760
Linux- based operating system. Because

535
00:17:28,400 --> 00:17:31,679
of course, when we think about being a

536
00:17:29,760 --> 00:17:33,200
sock analyst, well, we're not just going

537
00:17:31,679 --> 00:17:36,160
to be investigating and working with

538
00:17:33,200 --> 00:17:38,080
Windows endpoints. Right. Many servers

539
00:17:36,160 --> 00:17:39,600
run Linux and so it's just as important

540
00:17:38,080 --> 00:17:42,000
for us to get a good handle on both

541
00:17:39,600 --> 00:17:44,240
operating systems. And so we're going to

542
00:17:42,000 --> 00:17:46,640
install a Windows 10 machine as well as

543
00:17:44,240 --> 00:17:48,880
an Ubuntu machine. And to run our

544
00:17:46,640 --> 00:17:51,360
virtual machines, well, we need to

545
00:17:48,880 --> 00:17:53,120
install what is known as a hypervisor.

546
00:17:51,360 --> 00:17:55,120
And the hypervisor is the thing that

547
00:17:53,120 --> 00:17:57,360
actually creates and manages our virtual

548
00:17:55,120 --> 00:17:59,760
machines and allows multiple operating

549
00:17:57,360 --> 00:18:02,000
systems to, you know, share a single set

550
00:17:59,760 --> 00:18:03,760
of hardware. and it provides that layer

551
00:18:02,000 --> 00:18:06,440
of abstraction between the physical

552
00:18:03,760 --> 00:18:08,880
hardware of our machine and our

553
00:18:06,440 --> 00:18:10,400
VMs. And so the hypervisor I'm going to

554
00:18:08,880 --> 00:18:13,120
be using and the one I recommend for the

555
00:18:10,400 --> 00:18:14,799
course is Oracle's Virtual Box. And

556
00:18:13,120 --> 00:18:16,799
that's because it's free, it's ready to

557
00:18:14,799 --> 00:18:18,960
go, and it's highly featured. And so we

558
00:18:16,799 --> 00:18:21,240
can use it to create snapshots. And the

559
00:18:18,960 --> 00:18:23,200
installation is also really

560
00:18:21,240 --> 00:18:25,200
simple. And so what we're going to want

561
00:18:23,200 --> 00:18:27,440
to do on our host machine is just open

562
00:18:25,200 --> 00:18:28,960
up our internet browser.

563
00:18:27,440 --> 00:18:31,679
And I'm just going to do a search for

564
00:18:28,960 --> 00:18:31,679
Virtual Box

565
00:18:33,080 --> 00:18:37,440
download. And we should come across this

566
00:18:35,280 --> 00:18:39,160
download page here. In reality, we can

567
00:18:37,440 --> 00:18:41,120
just go to

568
00:18:39,160 --> 00:18:43,919
virtualbox.org and then just click on

569
00:18:41,120 --> 00:18:46,080
download Virtual Box. And so I will

570
00:18:43,919 --> 00:18:47,440
include this actual link down below as

571
00:18:46,080 --> 00:18:49,679
well as some guides if you're trying to

572
00:18:47,440 --> 00:18:50,880
install Virtual Box on Mac or Linux

573
00:18:49,679 --> 00:18:52,640
because you can see there's different

574
00:18:50,880 --> 00:18:54,880
host packages here for whatever

575
00:18:52,640 --> 00:18:56,480
operating system you're running. And so

576
00:18:54,880 --> 00:18:57,919
in my case, I'm obviously on Windows.

577
00:18:56,480 --> 00:19:00,000
And so I'm going to click on the Windows

578
00:18:57,919 --> 00:19:02,640
host option. And that's going to start

579
00:19:00,000 --> 00:19:04,240
downloading here. And once we have it

580
00:19:02,640 --> 00:19:05,520
downloaded, well, we can locate the

581
00:19:04,240 --> 00:19:07,360
installer file. And it should be in our

582
00:19:05,520 --> 00:19:09,480
downloads folder. And so I'm just going

583
00:19:07,360 --> 00:19:11,880
to open up Explorer here, go under

584
00:19:09,480 --> 00:19:13,919
downloads, and we can see the installer

585
00:19:11,880 --> 00:19:15,559
file. And so I'm just going to double

586
00:19:13,919 --> 00:19:20,960
click on it to

587
00:19:15,559 --> 00:19:22,400
run. Hit yes to this UAC prompt here.

588
00:19:20,960 --> 00:19:24,080
And if you're running into this error

589
00:19:22,400 --> 00:19:27,799
message here, well, we can see that we

590
00:19:24,080 --> 00:19:30,080
need to have Microsoft Visual C++ 2019

591
00:19:27,799 --> 00:19:32,320
installed. And so we can just search for

592
00:19:30,080 --> 00:19:32,320
this

593
00:19:33,720 --> 00:19:37,360
package. And so I'm going to click on

594
00:19:35,600 --> 00:19:38,760
this Microsoft link here. And again,

595
00:19:37,360 --> 00:19:41,039
I'll have this link down

596
00:19:38,760 --> 00:19:43,120
below. And here we can find the latest

597
00:19:41,039 --> 00:19:45,559
version that we need to download. And so

598
00:19:43,120 --> 00:19:48,080
I'm just going to click on x64

599
00:19:45,559 --> 00:19:49,440
here. And then in my downloads folder,

600
00:19:48,080 --> 00:19:52,080
I'm just going to run this installer

601
00:19:49,440 --> 00:19:52,080
file.

602
00:19:57,280 --> 00:20:01,240
All right. So, that's been installed and

603
00:19:58,640 --> 00:20:03,440
we should be good to go

604
00:20:01,240 --> 00:20:06,840
now. And so, I'm just going to double

605
00:20:03,440 --> 00:20:10,200
click on the Virtual Box installer

606
00:20:06,840 --> 00:20:12,400
now. And we're ready to start

607
00:20:10,200 --> 00:20:13,679
installing. And so, I'm pretty much just

608
00:20:12,400 --> 00:20:15,960
going to roll with all the default

609
00:20:13,679 --> 00:20:18,000
settings here. So, I'm just going to hit

610
00:20:15,960 --> 00:20:19,440
next. We're going to get a warning about

611
00:20:18,000 --> 00:20:20,960
our network interface here. It's just

612
00:20:19,440 --> 00:20:23,120
going to temporarily reset and

613
00:20:20,960 --> 00:20:25,039
disconnect our connection. Just keep all

614
00:20:23,120 --> 00:20:27,440
the defaults selected here and then

615
00:20:25,039 --> 00:20:27,440
click on

616
00:20:34,600 --> 00:20:37,919
install. All right, looks like that's

617
00:20:36,559 --> 00:20:41,159
finished. And so I'm just going to click

618
00:20:37,919 --> 00:20:43,360
on finish here to start up Virtual

619
00:20:41,159 --> 00:20:44,960
Box. And there we go. So if you're

620
00:20:43,360 --> 00:20:46,799
seeing this window here, well, you're

621
00:20:44,960 --> 00:20:48,559
good to go. This is the Oracle VM

622
00:20:46,799 --> 00:20:50,960
Virtual Box Manager and we've

623
00:20:48,559 --> 00:20:52,559
successfully installed it on our host.

624
00:20:50,960 --> 00:20:53,840
And now we can use it to build out our

625
00:20:52,559 --> 00:20:56,159
virtual machines that we use throughout

626
00:20:53,840 --> 00:20:58,360
the course. And so let's go ahead and do

627
00:20:56,159 --> 00:21:00,480
just that in the next

628
00:20:58,360 --> 00:21:02,799
lesson. All right. So now that we have

629
00:21:00,480 --> 00:21:04,799
our hypervisor installed, let's go ahead

630
00:21:02,799 --> 00:21:06,640
and install our first operating system

631
00:21:04,799 --> 00:21:09,039
that we need for the course, and that's

632
00:21:06,640 --> 00:21:10,960
going to be a Windows operating system.

633
00:21:09,039 --> 00:21:12,480
And so what we need to do here, I'm just

634
00:21:10,960 --> 00:21:14,880
going to exit out of Virtual Box for

635
00:21:12,480 --> 00:21:17,679
now. Then head back to Edge or whatever

636
00:21:14,880 --> 00:21:19,120
better browser you're using. And what we

637
00:21:17,679 --> 00:21:21,440
need to do is find the Windows

638
00:21:19,120 --> 00:21:23,039
evaluation copy. And so we can do a

639
00:21:21,440 --> 00:21:25,200
quick Google search here for the Windows

640
00:21:23,039 --> 00:21:27,320
evaluation center. And I can click on

641
00:21:25,200 --> 00:21:30,159
this Windows 10 Enterprise link

642
00:21:27,320 --> 00:21:32,640
here. And what we could do is find the

643
00:21:30,159 --> 00:21:35,120
Windows 10 Enterprise image, right? We

644
00:21:32,640 --> 00:21:36,880
can download the ISO here. And we could

645
00:21:35,120 --> 00:21:38,720
give Microsoft all of our information

646
00:21:36,880 --> 00:21:40,480
and register. And then we'll get a link

647
00:21:38,720 --> 00:21:42,880
to the ISO file which we could use to

648
00:21:40,480 --> 00:21:44,799
install the VM into our hypervisor.

649
00:21:42,880 --> 00:21:46,080
However, I've included a link below that

650
00:21:44,799 --> 00:21:47,679
will take you right to the download

651
00:21:46,080 --> 00:21:50,640
page. And so we can essentially skip

652
00:21:47,679 --> 00:21:52,480
this form. And so just navigate to that

653
00:21:50,640 --> 00:21:54,000
URL. And you'll see here we can select

654
00:21:52,480 --> 00:21:55,840
the version that we want to download or

655
00:21:54,000 --> 00:21:57,679
the language. And so I'm just going to

656
00:21:55,840 --> 00:22:00,760
go under English here and make sure to

657
00:21:57,679 --> 00:22:02,799
click on 64-bit

658
00:22:00,760 --> 00:22:04,480
edition. And in doing that, that's going

659
00:22:02,799 --> 00:22:07,360
to kick off the download for our ISO

660
00:22:04,480 --> 00:22:09,200
file. And just to note here that we're

661
00:22:07,360 --> 00:22:10,640
downloading a, you know, an operating

662
00:22:09,200 --> 00:22:12,320
system. And so essentially, this is

663
00:22:10,640 --> 00:22:15,200
going to be a pretty big file and it's

664
00:22:12,320 --> 00:22:16,640
around 5 GB. And so depending on the

665
00:22:15,200 --> 00:22:18,640
speed of your connection, this could

666
00:22:16,640 --> 00:22:20,080
take a little bit to run. And so I'm

667
00:22:18,640 --> 00:22:21,640
just going to fast forward here to when

668
00:22:20,080 --> 00:22:23,919
my download's

669
00:22:21,640 --> 00:22:26,400
finished. All right. And there we go.

670
00:22:23,919 --> 00:22:28,880
The Windows 10 ISO file just about

671
00:22:26,400 --> 00:22:31,200
finished. Yeah, there we go. And so I

672
00:22:28,880 --> 00:22:34,480
now have Virtual Box installed and my

673
00:22:31,200 --> 00:22:36,400
Windows ISO file has been downloaded.

674
00:22:34,480 --> 00:22:38,240
And so let's get a bit of organization

675
00:22:36,400 --> 00:22:39,760
going here. And feel free to do this

676
00:22:38,240 --> 00:22:41,360
however you like, but I'm just going to

677
00:22:39,760 --> 00:22:42,960
head to my documents folder here. And

678
00:22:41,360 --> 00:22:45,360
I'm going to create a folder called

679
00:22:42,960 --> 00:22:45,360
virtual

680
00:22:49,559 --> 00:22:53,840
machines. And within my virtual machines

681
00:22:51,919 --> 00:22:56,280
folder, I'm just going to create another

682
00:22:53,840 --> 00:22:58,559
subfolder here called sock

683
00:22:56,280 --> 00:22:59,760
101. And this is basically where I'm

684
00:22:58,559 --> 00:23:02,400
going to store all of the virtual

685
00:22:59,760 --> 00:23:04,000
machine information for the course.

686
00:23:02,400 --> 00:23:07,559
And so I'm just going to open up another

687
00:23:04,000 --> 00:23:10,320
explorer window here under the downloads

688
00:23:07,559 --> 00:23:13,640
folder and then locate the actual ISO

689
00:23:10,320 --> 00:23:16,640
file and just drag it into this sock 101

690
00:23:13,640 --> 00:23:20,000
folder. All right, there we go. And so

691
00:23:16,640 --> 00:23:20,000
now let's open up Virtual

692
00:23:20,039 --> 00:23:25,240
Box and then click on the new button

693
00:23:22,559 --> 00:23:27,440
here within this main toolbar

694
00:23:25,240 --> 00:23:29,039
section. And from here we can start to

695
00:23:27,440 --> 00:23:31,520
fill in all the information about the

696
00:23:29,039 --> 00:23:32,960
Windows virtual machine we're creating.

697
00:23:31,520 --> 00:23:36,880
And so for the name, I'm just going to

698
00:23:32,960 --> 00:23:36,880
call it sock 101- Windows

699
00:23:36,919 --> 00:23:41,640
10. And for the machine folder, well,

700
00:23:39,679 --> 00:23:44,720
I'm just going to override the default

701
00:23:41,640 --> 00:23:46,720
here. And so I'm going to click on other

702
00:23:44,720 --> 00:23:48,320
and then locate the sock 101 folder

703
00:23:46,720 --> 00:23:50,120
under virtual machines that I just

704
00:23:48,320 --> 00:23:52,000
created under

705
00:23:50,120 --> 00:23:55,440
documents. So I'm just going to select

706
00:23:52,000 --> 00:23:57,039
that folder. And for the ISO image,

707
00:23:55,440 --> 00:23:58,720
well, as expected, this is where we're

708
00:23:57,039 --> 00:24:01,039
going to locate the actual ISO file that

709
00:23:58,720 --> 00:24:02,720
we just downloaded. So again for me

710
00:24:01,039 --> 00:24:05,440
that's going to be under documents

711
00:24:02,720 --> 00:24:07,919
virtual machines sock 101 and this ISO

712
00:24:05,440 --> 00:24:07,919
file right

713
00:24:07,960 --> 00:24:11,840
here and when we do that it should

714
00:24:10,320 --> 00:24:14,400
automatically recognize things like the

715
00:24:11,840 --> 00:24:17,440
addition and type in version and so that

716
00:24:14,400 --> 00:24:19,039
all looks good to me and so next I'm

717
00:24:17,440 --> 00:24:21,840
going to make sure that I check skip

718
00:24:19,039 --> 00:24:24,159
unattended installation here and then

719
00:24:21,840 --> 00:24:26,880
I'm just going to click on next. Now,

720
00:24:24,159 --> 00:24:28,320
for a RAM or memory size here, it's

721
00:24:26,880 --> 00:24:30,240
technically possible to keep it at the

722
00:24:28,320 --> 00:24:31,440
default here of 2 gigs, but I can

723
00:24:30,240 --> 00:24:33,440
anticipate that you're going to run into

724
00:24:31,440 --> 00:24:35,360
some limitations. And so, if you have

725
00:24:33,440 --> 00:24:37,919
the capacity, it's best to bump it up a

726
00:24:35,360 --> 00:24:39,600
bit. And I have quite a bit of RAM on my

727
00:24:37,919 --> 00:24:41,360
physical host, and I'm actually running

728
00:24:39,600 --> 00:24:43,679
a VM inside of this. And so, there's a

729
00:24:41,360 --> 00:24:46,000
bit of VMion going on, but on my

730
00:24:43,679 --> 00:24:47,840
physical host, I have 32 gigs. And so,

731
00:24:46,000 --> 00:24:50,320
again, it all depends on what your max

732
00:24:47,840 --> 00:24:53,039
capacity is. And we're eventually going

733
00:24:50,320 --> 00:24:55,120
to be running two VMs at once. And so if

734
00:24:53,039 --> 00:24:57,440
you can bump it up to around 6 or 8 gigs

735
00:24:55,120 --> 00:24:58,799
each, well that would be great, but it

736
00:24:57,440 --> 00:25:02,000
shouldn't be the end of the world and we

737
00:24:58,799 --> 00:25:02,000
can always bump it up later if

738
00:25:02,039 --> 00:25:07,279
needed. And so next we can add a virtual

739
00:25:05,440 --> 00:25:08,960
hard disk to our machine. And

740
00:25:07,279 --> 00:25:11,840
specifically, we can create a virtual

741
00:25:08,960 --> 00:25:14,080
hard disk and we can keep our disc here

742
00:25:11,840 --> 00:25:15,600
dynamically allocated rather than

743
00:25:14,080 --> 00:25:17,679
setting aside the total amount of disc

744
00:25:15,600 --> 00:25:18,720
space needed immediately. And so to do

745
00:25:17,679 --> 00:25:21,679
that, just make sure you have

746
00:25:18,720 --> 00:25:23,919
pre-allocate full size unchecked. And

747
00:25:21,679 --> 00:25:26,240
for the storage amount, well, you can

748
00:25:23,919 --> 00:25:28,960
leave it at the default of 50 GB here if

749
00:25:26,240 --> 00:25:31,159
you need to. And again, if needed, we

750
00:25:28,960 --> 00:25:33,720
can always adjust these values later

751
00:25:31,159 --> 00:25:36,240
on. And so I'm just going to hit next

752
00:25:33,720 --> 00:25:38,480
here. And we will get a machine summary

753
00:25:36,240 --> 00:25:40,720
here. And this all looks good. So I'm

754
00:25:38,480 --> 00:25:43,440
going to hit finish. And there we go. So

755
00:25:40,720 --> 00:25:45,279
our machine's been created. And so our

756
00:25:43,440 --> 00:25:47,919
new Windows VM here is staged and ready

757
00:25:45,279 --> 00:25:49,919
to go. and to kick off the Windows

758
00:25:47,919 --> 00:25:52,880
installation, but we can just hit start

759
00:25:49,919 --> 00:25:52,880
here to start up our

760
00:25:53,799 --> 00:25:57,679
machine. This might just take a

761
00:26:02,600 --> 00:26:06,720
second. All right, and so here we go.

762
00:26:05,120 --> 00:26:08,240
So, if you saw that Windows loading

763
00:26:06,720 --> 00:26:10,320
screen and if you're now looking at the

764
00:26:08,240 --> 00:26:12,960
setup window here, well, then you've

765
00:26:10,320 --> 00:26:14,640
correctly set this all up. And a lot of

766
00:26:12,960 --> 00:26:16,640
the install process here is going to be

767
00:26:14,640 --> 00:26:19,039
pretty self-explanatory, but we can walk

768
00:26:16,640 --> 00:26:20,720
through it together. And so we can first

769
00:26:19,039 --> 00:26:22,960
select things like the language and the

770
00:26:20,720 --> 00:26:24,520
time and the keyboard input. And all

771
00:26:22,960 --> 00:26:27,720
that looks good. So I'm going to hit

772
00:26:24,520 --> 00:26:31,960
next. And then just click on install

773
00:26:27,720 --> 00:26:33,600
now. And this could take a moment to

774
00:26:31,960 --> 00:26:35,600
initialize. And we're going to be

775
00:26:33,600 --> 00:26:37,360
presented with the Windows license here.

776
00:26:35,600 --> 00:26:39,520
And so feel free to read through this if

777
00:26:37,360 --> 00:26:42,679
you want to take a nap.

778
00:26:39,520 --> 00:26:45,640
And we can just hit accept and then

779
00:26:42,679 --> 00:26:47,440
next. From here we can select the custom

780
00:26:45,640 --> 00:26:49,440
installation. And now we need to

781
00:26:47,440 --> 00:26:51,679
allocate the drive space. And remember

782
00:26:49,440 --> 00:26:53,840
this is all virtualized. And so what I'm

783
00:26:51,679 --> 00:26:55,360
going to do here is just click on new.

784
00:26:53,840 --> 00:26:57,120
And it's going to automatically fill the

785
00:26:55,360 --> 00:26:57,960
size of our drive. And so I'm just going

786
00:26:57,120 --> 00:27:00,080
to hit

787
00:26:57,960 --> 00:27:01,039
apply. And here it mentions that it's

788
00:27:00,080 --> 00:27:02,480
going to create some additional

789
00:27:01,039 --> 00:27:04,000
partitions which is fine. So I'm going

790
00:27:02,480 --> 00:27:05,919
to hit okay. We should see another

791
00:27:04,000 --> 00:27:09,159
partition there. There we go. And just

792
00:27:05,919 --> 00:27:09,159
hit next.

793
00:27:09,200 --> 00:27:13,120
And so now it's finally installing the

794
00:27:11,120 --> 00:27:14,720
operating system. And again, this could

795
00:27:13,120 --> 00:27:17,799
take a little while to complete. And so

796
00:27:14,720 --> 00:27:19,840
I'll just cut ahead to when mine's

797
00:27:17,799 --> 00:27:20,880
finished. All right. Now we should see

798
00:27:19,840 --> 00:27:23,760
this screen here. And it's going to

799
00:27:20,880 --> 00:27:23,760
mention that it needs to

800
00:27:25,559 --> 00:27:29,760
restart. And once we load back in here,

801
00:27:28,080 --> 00:27:32,760
we should see the main Windows

802
00:27:29,760 --> 00:27:32,760
installer.

803
00:27:32,880 --> 00:27:35,919
And so this is where it's going to ask

804
00:27:34,240 --> 00:27:37,440
us a bunch of setup questions and

805
00:27:35,919 --> 00:27:39,679
annoying little prompts until we can

806
00:27:37,440 --> 00:27:42,559
finally get to our desktop. And so I'm

807
00:27:39,679 --> 00:27:42,559
just going to run through this

808
00:27:42,760 --> 00:27:46,279
quickly. We can select our keyboard

809
00:27:44,960 --> 00:27:49,039
layout. This looks

810
00:27:46,279 --> 00:27:50,440
fine. We do not need to add a secondary

811
00:27:49,039 --> 00:27:53,399
keyboard

812
00:27:50,440 --> 00:27:56,159
layout. It's going to do some networking

813
00:27:53,399 --> 00:27:59,159
shenanigans or I guess magic they call

814
00:27:56,159 --> 00:27:59,159
it.

815
00:28:01,600 --> 00:28:05,039
Now again, this is going to be a lab

816
00:28:03,039 --> 00:28:07,440
machine, right? And so we can kind of

817
00:28:05,039 --> 00:28:09,200
skip all of the standard employee or the

818
00:28:07,440 --> 00:28:11,360
intended user setup features that

819
00:28:09,200 --> 00:28:13,120
Windows always asks for. And one of

820
00:28:11,360 --> 00:28:16,080
these is to sign in with a Microsoft

821
00:28:13,120 --> 00:28:18,600
account. And I think not. So let's click

822
00:28:16,080 --> 00:28:20,960
on domain join

823
00:28:18,600 --> 00:28:23,520
instead. And from here, we can set up a

824
00:28:20,960 --> 00:28:26,960
local account. And so for the username

825
00:28:23,520 --> 00:28:28,399
here, I'm just going to call it TCM.

826
00:28:26,960 --> 00:28:32,640
And for the password, I'm going to use

827
00:28:28,399 --> 00:28:32,640
the super strong password of

828
00:28:34,200 --> 00:28:38,320
password. And then we just need to fill

829
00:28:36,320 --> 00:28:39,960
in some security questions. So my first

830
00:28:38,320 --> 00:28:43,480
pet was named

831
00:28:39,960 --> 00:28:46,440
one, my childhood nickname was

832
00:28:43,480 --> 00:28:50,000
two,

833
00:28:46,440 --> 00:28:53,000
and and the city where I was born was

834
00:28:50,000 --> 00:28:53,000
three.

835
00:28:53,919 --> 00:28:58,880
And so now we can turn off all of this

836
00:28:55,840 --> 00:29:00,880
dystopian you know spying and tracking

837
00:28:58,880 --> 00:29:04,000
and privacy enrichment features that

838
00:29:00,880 --> 00:29:05,799
Microsoft is offering. And with that we

839
00:29:04,000 --> 00:29:08,640
can just click on

840
00:29:05,799 --> 00:29:11,360
accept. We can ignore Cortana here. So

841
00:29:08,640 --> 00:29:11,360
just click not

842
00:29:16,279 --> 00:29:23,360
now. And in a moment after this little

843
00:29:18,880 --> 00:29:23,360
message here we should be ready to go.

844
00:29:25,520 --> 00:29:29,440
All right. And if you see this Windows

845
00:29:27,200 --> 00:29:31,279
desktop here with this nice blue bright

846
00:29:29,440 --> 00:29:34,240
wallpaper, well then we're good. We're

847
00:29:31,279 --> 00:29:35,919
good to go. We're set up. And now there

848
00:29:34,240 --> 00:29:38,120
are a few more housekeeping things that

849
00:29:35,919 --> 00:29:40,720
we should do and we have to do before we

850
00:29:38,120 --> 00:29:42,480
continue. And the first being, well,

851
00:29:40,720 --> 00:29:44,240
let's get a bit of a quality of life

852
00:29:42,480 --> 00:29:46,559
improvement up in here. And so we're not

853
00:29:44,240 --> 00:29:49,440
stuck using this tiny croppedin box for

854
00:29:46,559 --> 00:29:51,760
our desktop. And so to do this and use

855
00:29:49,440 --> 00:29:54,640
an actual usable resolution, what we can

856
00:29:51,760 --> 00:29:57,840
do here is go under devices and click on

857
00:29:54,640 --> 00:29:59,760
insert guest edition CD image. And this

858
00:29:57,840 --> 00:30:02,240
is going to load in an actual CD drive

859
00:29:59,760 --> 00:30:03,919
into our VM. And so what we can do after

860
00:30:02,240 --> 00:30:05,080
clicking on that is go under our

861
00:30:03,919 --> 00:30:08,640
explorer window

862
00:30:05,080 --> 00:30:10,559
here and then click on this PC and we

863
00:30:08,640 --> 00:30:12,720
should see this CD drive for Virtual Box

864
00:30:10,559 --> 00:30:15,360
guest editions. So I'm going to double

865
00:30:12,720 --> 00:30:17,200
click on that to open it up. And from

866
00:30:15,360 --> 00:30:20,679
here, I can just double click to run

867
00:30:17,200 --> 00:30:23,880
this VBox Windows Edition- AMD

868
00:30:20,679 --> 00:30:26,559
64. So, I'll just run this, hit

869
00:30:23,880 --> 00:30:30,080
yes, and just run through the very basic

870
00:30:26,559 --> 00:30:30,080
installer here. Just leave everything

871
00:30:30,200 --> 00:30:35,360
default. Should take a

872
00:30:33,399 --> 00:30:36,799
second. All right, sounds good. And

873
00:30:35,360 --> 00:30:40,039
we're just going to reboot now after

874
00:30:36,799 --> 00:30:40,039
doing that.

875
00:30:42,799 --> 00:30:46,720
And when we return here, the VM tools is

876
00:30:45,120 --> 00:30:47,840
going to start up as a service and we

877
00:30:46,720 --> 00:30:49,520
should be able to do some more

878
00:30:47,840 --> 00:30:51,120
interesting things, more interactive

879
00:30:49,520 --> 00:30:53,279
things and more, you know, visually

880
00:30:51,120 --> 00:30:56,039
pleasing uh, you know, integrations

881
00:30:53,279 --> 00:31:00,919
within our VM

882
00:30:56,039 --> 00:31:00,919
here. So, I'm just going to sign in.

883
00:31:06,720 --> 00:31:10,640
And so now what I can do here is go

884
00:31:08,559 --> 00:31:13,919
under the view tab and click on full

885
00:31:10,640 --> 00:31:15,960
screen mode and just hit switch. And

886
00:31:13,919 --> 00:31:18,640
there we go. That looks much

887
00:31:15,960 --> 00:31:21,360
better. Awesome. And the other thing

888
00:31:18,640 --> 00:31:23,760
that we can do now is so now our toolbar

889
00:31:21,360 --> 00:31:26,000
is going to be at the bottom here. And

890
00:31:23,760 --> 00:31:28,559
I'm going to go under the devices tab

891
00:31:26,000 --> 00:31:30,399
and go under shared clipboard. And then

892
00:31:28,559 --> 00:31:32,399
I'm going to change this from disabled

893
00:31:30,399 --> 00:31:34,000
to birectional.

894
00:31:32,399 --> 00:31:35,760
And so this is going to allow us to

895
00:31:34,000 --> 00:31:37,960
essentially share the same clipboard

896
00:31:35,760 --> 00:31:40,240
between our host machine and our Windows

897
00:31:37,960 --> 00:31:42,240
VM. And so that's going to be really

898
00:31:40,240 --> 00:31:44,320
useful when we want to copy and paste

899
00:31:42,240 --> 00:31:47,360
commands, you know, from our host into

900
00:31:44,320 --> 00:31:50,159
our VM or copy and paste output from our

901
00:31:47,360 --> 00:31:52,399
VM into our host. And so just to prove

902
00:31:50,159 --> 00:31:55,000
that it works, I'm going to open up the

903
00:31:52,399 --> 00:31:57,279
Notepad application

904
00:31:55,000 --> 00:31:58,799
here. And I know you can't see this

905
00:31:57,279 --> 00:32:01,120
right now. That's off screen, but I'm

906
00:31:58,799 --> 00:32:03,360
just copying the phrase hello world into

907
00:32:01,120 --> 00:32:04,279
my clipboard. And if I paste it, well,

908
00:32:03,360 --> 00:32:07,039
there we

909
00:32:04,279 --> 00:32:09,360
go. And for example, if I just copy the

910
00:32:07,039 --> 00:32:11,039
word hi here, and again, you can't see

911
00:32:09,360 --> 00:32:13,760
it, but I can paste this back into my

912
00:32:11,039 --> 00:32:14,919
host machine. And so our VM now is a lot

913
00:32:13,760 --> 00:32:17,600
more

914
00:32:14,919 --> 00:32:19,600
usable. And lastly, before we move on to

915
00:32:17,600 --> 00:32:21,919
customizing this install, well, let's

916
00:32:19,600 --> 00:32:23,600
take a snapshot of our base image. And

917
00:32:21,919 --> 00:32:25,360
this is really important in case you

918
00:32:23,600 --> 00:32:26,960
need to revert anything on your system

919
00:32:25,360 --> 00:32:29,200
or if anything goes wrong throughout the

920
00:32:26,960 --> 00:32:31,039
course. Well, you can always then just

921
00:32:29,200 --> 00:32:32,799
revert to your base image and not have

922
00:32:31,039 --> 00:32:34,480
to go through the entire install process

923
00:32:32,799 --> 00:32:36,399
again, right? And you can be confident

924
00:32:34,480 --> 00:32:38,960
that your VM is set up and in a state

925
00:32:36,399 --> 00:32:41,200
that's ready to go. And so to do this,

926
00:32:38,960 --> 00:32:42,679
I'm going to go down to our options here

927
00:32:41,200 --> 00:32:44,399
and click on

928
00:32:42,679 --> 00:32:45,799
machine. And then I'm just going to

929
00:32:44,399 --> 00:32:48,519
click on take

930
00:32:45,799 --> 00:32:51,159
snapshot. And I'm just going to title

931
00:32:48,519 --> 00:32:53,120
this

932
00:32:51,159 --> 00:32:56,159
base-install so I can reference it

933
00:32:53,120 --> 00:32:57,840
later. Hit okay. And now our VM is going

934
00:32:56,159 --> 00:33:00,519
to freeze up for a second just as it's

935
00:32:57,840 --> 00:33:03,039
taking the actual snapshot, which is all

936
00:33:00,519 --> 00:33:04,640
good. And so that's all finished. And

937
00:33:03,039 --> 00:33:06,919
with that, we now have our base image

938
00:33:04,640 --> 00:33:10,080
and we're ready for the next

939
00:33:06,919 --> 00:33:11,679
steps. Okay, so in a previous lesson, we

940
00:33:10,080 --> 00:33:14,000
installed our base Windows image that

941
00:33:11,679 --> 00:33:15,919
you can see here. However, to get ready

942
00:33:14,000 --> 00:33:17,600
for the course, we're going to need to

943
00:33:15,919 --> 00:33:19,600
do a couple of quality of life

944
00:33:17,600 --> 00:33:21,760
configurations and also get our course

945
00:33:19,600 --> 00:33:23,519
files onto the machine. And so, let's

946
00:33:21,760 --> 00:33:25,440
start up our Windows 10 VM again if you

947
00:33:23,519 --> 00:33:27,760
don't already have it running. And once

948
00:33:25,440 --> 00:33:29,519
we're loaded in and we're on this lovely

949
00:33:27,760 --> 00:33:31,919
desktop screen here, well, what we want

950
00:33:29,519 --> 00:33:33,840
to do first is some things that we would

951
00:33:31,919 --> 00:33:35,039
honestly never want to do if this was a

952
00:33:33,840 --> 00:33:37,200
real production system in the

953
00:33:35,039 --> 00:33:39,200
enterprise. But in the case for our lab

954
00:33:37,200 --> 00:33:41,039
environment and being able to interact

955
00:33:39,200 --> 00:33:42,600
with our Ubuntu VM and set up some

956
00:33:41,039 --> 00:33:44,880
really cool attack and defense

957
00:33:42,600 --> 00:33:46,880
scenarios, well, we're going to turn off

958
00:33:44,880 --> 00:33:47,960
Windows Defender, our sort of built-in

959
00:33:46,880 --> 00:33:50,480
endpoint

960
00:33:47,960 --> 00:33:51,840
antivirus. And again, this is because

961
00:33:50,480 --> 00:33:53,919
we're going to be creating some very

962
00:33:51,840 --> 00:33:55,360
basic malware later on in the course so

963
00:33:53,919 --> 00:33:57,200
that we can see what kind of artifacts

964
00:33:55,360 --> 00:33:59,440
it leaves on our system. And if we don't

965
00:33:57,200 --> 00:34:01,120
do this step, then Defender is going to

966
00:33:59,440 --> 00:34:03,200
get in the way and be really annoying

967
00:34:01,120 --> 00:34:04,720
and basically just yell at us a ton,

968
00:34:03,200 --> 00:34:06,559
which is nice. I really appreciate it.

969
00:34:04,720 --> 00:34:08,879
But for the case of trying to showcase

970
00:34:06,559 --> 00:34:11,760
some safe examples of malware, it's not

971
00:34:08,879 --> 00:34:13,679
really ideal for a use case. And to

972
00:34:11,760 --> 00:34:15,440
demonstrate that, well, I can just open

973
00:34:13,679 --> 00:34:16,800
up a PowerShell window here. And you

974
00:34:15,440 --> 00:34:19,440
don't have to follow along. Don't worry.

975
00:34:16,800 --> 00:34:21,440
I'm just kind of demonstrating here. And

976
00:34:19,440 --> 00:34:23,919
within PowerShell, well, I can just run

977
00:34:21,440 --> 00:34:24,800
the invoke mimikats commandlet. And

978
00:34:23,919 --> 00:34:26,320
don't worry if you don't know what

979
00:34:24,800 --> 00:34:28,320
mimiats is. We're going to talk about it

980
00:34:26,320 --> 00:34:31,359
later on in the course. Just know that

981
00:34:28,320 --> 00:34:33,040
it's bad. And even if I try to run it, I

982
00:34:31,359 --> 00:34:35,040
don't even have Mimiats installed on my

983
00:34:33,040 --> 00:34:36,639
machine, but it's already yelling at me

984
00:34:35,040 --> 00:34:38,159
that this script contains malicious

985
00:34:36,639 --> 00:34:40,639
content, even though the script doesn't

986
00:34:38,159 --> 00:34:41,960
even exist. It's already been blocked by

987
00:34:40,639 --> 00:34:44,000
again Windows

988
00:34:41,960 --> 00:34:45,760
antivirus. Another way to demonstrate

989
00:34:44,000 --> 00:34:48,480
this, I'm just going to open up my

990
00:34:45,760 --> 00:34:53,240
browser here, and I'm going to do a

991
00:34:48,480 --> 00:34:53,240
search for the EIC test file.

992
00:34:54,960 --> 00:34:58,480
And this is basically a test file

993
00:34:56,560 --> 00:35:00,359
developed specifically to test out

994
00:34:58,480 --> 00:35:02,800
things like the response of antivirus

995
00:35:00,359 --> 00:35:05,040
programs. And it's completely harmless,

996
00:35:02,800 --> 00:35:06,720
but Windows Defender should kick in and

997
00:35:05,040 --> 00:35:08,240
pick it up immediately and say, you

998
00:35:06,720 --> 00:35:10,480
know, hey, this might be malware as soon

999
00:35:08,240 --> 00:35:11,960
as we try to download it. And so what

1000
00:35:10,480 --> 00:35:13,880
I'm going to do is scroll

1001
00:35:11,960 --> 00:35:16,480
down to the

1002
00:35:13,880 --> 00:35:18,480
EIC.txt file and I'm going to try to

1003
00:35:16,480 --> 00:35:20,079
download it. Smart screen is probably

1004
00:35:18,480 --> 00:35:22,200
going to yell at us and so I'll click on

1005
00:35:20,079 --> 00:35:24,560
more information and just click on

1006
00:35:22,200 --> 00:35:26,560
continue. And this is it. This is the

1007
00:35:24,560 --> 00:35:28,640
malware that uh Defender is already

1008
00:35:26,560 --> 00:35:31,680
piping up against. And so I'm just going

1009
00:35:28,640 --> 00:35:34,440
to rightclick and save as and just try

1010
00:35:31,680 --> 00:35:37,040
to save it to my downloads

1011
00:35:34,440 --> 00:35:39,040
folder. And immediately we got an alert

1012
00:35:37,040 --> 00:35:40,960
that Microsoft Defender found threats

1013
00:35:39,040 --> 00:35:42,119
and this file should not exist anymore.

1014
00:35:40,960 --> 00:35:46,079
Yeah, there we

1015
00:35:42,119 --> 00:35:48,400
go. And so to disable Windows Defender,

1016
00:35:46,079 --> 00:35:50,320
well, first what I'm going to do here is

1017
00:35:48,400 --> 00:35:53,720
go under the Start menu and type in

1018
00:35:50,320 --> 00:35:53,720
Windows Security.

1019
00:35:54,079 --> 00:35:58,079
and I'm going to click on the Windows

1020
00:35:55,280 --> 00:35:59,320
security application and go under virus

1021
00:35:58,079 --> 00:36:01,200
and threat

1022
00:35:59,320 --> 00:36:02,560
protection. From here, I'm going to go

1023
00:36:01,200 --> 00:36:05,200
under virus and threat protection

1024
00:36:02,560 --> 00:36:06,640
settings and click on manage settings.

1025
00:36:05,200 --> 00:36:09,200
I'm going to scroll down to tamper

1026
00:36:06,640 --> 00:36:10,280
protection and just check it off to turn

1027
00:36:09,200 --> 00:36:12,240
it

1028
00:36:10,280 --> 00:36:15,079
off. We're getting a warning here that

1029
00:36:12,240 --> 00:36:17,520
our device may be vulnerable. That's

1030
00:36:15,079 --> 00:36:20,079
okay. And what we want to do now is open

1031
00:36:17,520 --> 00:36:21,440
up a PowerShell window as administrator.

1032
00:36:20,079 --> 00:36:23,920
And so to do that, I'm going to go under

1033
00:36:21,440 --> 00:36:25,480
the start menu. I'm going to do a search

1034
00:36:23,920 --> 00:36:27,280
for

1035
00:36:25,480 --> 00:36:29,040
PowerShell. And when we see the

1036
00:36:27,280 --> 00:36:30,320
PowerShell application, we can either

1037
00:36:29,040 --> 00:36:32,400
rightclick and click run as

1038
00:36:30,320 --> 00:36:34,960
administrator or go down here and just

1039
00:36:32,400 --> 00:36:37,599
click on run as administrator. We just

1040
00:36:34,960 --> 00:36:40,760
hit yes to this UAC prompt. And we're

1041
00:36:37,599 --> 00:36:42,720
now in PowerShell as an

1042
00:36:40,760 --> 00:36:44,720
administrator. And from here, we just

1043
00:36:42,720 --> 00:36:46,960
need to run a couple of commands, which

1044
00:36:44,720 --> 00:36:51,119
fortunately now we can copy and paste.

1045
00:36:46,960 --> 00:36:51,119
And I'll have them listed down below.

1046
00:36:51,440 --> 00:36:55,720
The first one here is going to disable

1047
00:36:52,960 --> 00:36:57,839
the real-time monitoring features of

1048
00:36:55,720 --> 00:36:59,440
Defender. And this next one here is

1049
00:36:57,839 --> 00:37:00,720
going to disable the scanning of network

1050
00:36:59,440 --> 00:37:02,000
files. You can see we're already getting

1051
00:37:00,720 --> 00:37:04,240
notifications that Defender has been

1052
00:37:02,000 --> 00:37:04,240
turned

1053
00:37:04,280 --> 00:37:09,440
off. And then a couple more commands

1054
00:37:06,839 --> 00:37:11,440
here. And lastly, we're going to add a

1055
00:37:09,440 --> 00:37:14,000
key to our registry to actually turn off

1056
00:37:11,440 --> 00:37:15,440
Windows Defender. And so this is a long

1057
00:37:14,000 --> 00:37:17,680
command, so you don't have to type this

1058
00:37:15,440 --> 00:37:19,280
out. Again, you can just copy and paste.

1059
00:37:17,680 --> 00:37:20,560
And to paste into PowerShell, you can

1060
00:37:19,280 --> 00:37:21,240
just rightclick if you have something on

1061
00:37:20,560 --> 00:37:22,960
your

1062
00:37:21,240 --> 00:37:25,079
clipboard. So I'm just going to run

1063
00:37:22,960 --> 00:37:27,520
that. We can see it completed

1064
00:37:25,079 --> 00:37:30,680
successfully. And now if I search

1065
00:37:27,520 --> 00:37:33,760
Windows security again in the start

1066
00:37:30,680 --> 00:37:36,920
menu, go to virus and threat protection.

1067
00:37:33,760 --> 00:37:39,520
And you can see we have no antivirus

1068
00:37:36,920 --> 00:37:41,920
provider. So now what I can do is open

1069
00:37:39,520 --> 00:37:43,680
up PowerShell again. Again, you don't

1070
00:37:41,920 --> 00:37:46,720
have to follow along here. I'm just kind

1071
00:37:43,680 --> 00:37:47,880
of demonstrating that we can now run

1072
00:37:46,720 --> 00:37:49,839
invoke

1073
00:37:47,880 --> 00:37:50,960
mimicats. And this is not going to do

1074
00:37:49,839 --> 00:37:52,800
anything. So, we're going to get a

1075
00:37:50,960 --> 00:37:54,480
different error, but it's not going to

1076
00:37:52,800 --> 00:37:57,119
be the same error that it was, you know,

1077
00:37:54,480 --> 00:38:00,320
disabled or blocked by our antivirus.

1078
00:37:57,119 --> 00:38:04,880
And so, that is a plus. And if I return

1079
00:38:00,320 --> 00:38:07,920
to this EIC file, click on continue, and

1080
00:38:04,880 --> 00:38:11,280
just rightclick save as, we should be

1081
00:38:07,920 --> 00:38:13,119
able to save it now and open the file

1082
00:38:11,280 --> 00:38:16,400
with no issue.

1083
00:38:13,119 --> 00:38:18,079
So good. That's great. And so next, with

1084
00:38:16,400 --> 00:38:19,760
that out of the way, we can go ahead and

1085
00:38:18,079 --> 00:38:21,520
actually get our course files onto the

1086
00:38:19,760 --> 00:38:23,040
system. We didn't need to disable

1087
00:38:21,520 --> 00:38:24,640
Defender to get our course files on the

1088
00:38:23,040 --> 00:38:25,760
system. I'll just make that clear. But

1089
00:38:24,640 --> 00:38:28,640
it's for stuff that we're going to be

1090
00:38:25,760 --> 00:38:30,160
doing later on in the course. And so to

1091
00:38:28,640 --> 00:38:32,320
do this, we're going to need to install

1092
00:38:30,160 --> 00:38:33,839
Git, which is the version control system

1093
00:38:32,320 --> 00:38:36,640
that we're going to be using to clone

1094
00:38:33,839 --> 00:38:38,560
the course repository from GitHub. And

1095
00:38:36,640 --> 00:38:39,839
this is all kind of in an effort to make

1096
00:38:38,560 --> 00:38:41,599
sure that we're starting with the latest

1097
00:38:39,839 --> 00:38:43,359
files in case anything changes over

1098
00:38:41,599 --> 00:38:46,480
time. And so what I'm going to do here

1099
00:38:43,359 --> 00:38:46,480
in my browser is go to

1100
00:38:48,839 --> 00:38:53,440
git-cm.com. We're now on the web page

1101
00:38:50,880 --> 00:38:55,359
for the Git version control manager. And

1102
00:38:53,440 --> 00:38:56,680
under the latest source release here,

1103
00:38:55,359 --> 00:38:58,560
you can see in my case

1104
00:38:56,680 --> 00:39:00,599
2.45.2. I'm just going to click on

1105
00:38:58,560 --> 00:39:02,880
download for

1106
00:39:00,599 --> 00:39:04,160
Windows. And then under standalone

1107
00:39:02,880 --> 00:39:08,920
installer, I'm just going to click on

1108
00:39:04,160 --> 00:39:08,920
the 64-bit for Windows setup.

1109
00:39:09,520 --> 00:39:13,000
Once that's downloaded, I can just open

1110
00:39:11,520 --> 00:39:15,560
up the installer

1111
00:39:13,000 --> 00:39:17,440
file. Hit

1112
00:39:15,560 --> 00:39:20,079
yes. And I'm just going to leave

1113
00:39:17,440 --> 00:39:21,640
everything as the default option here.

1114
00:39:20,079 --> 00:39:25,480
So, I'm just going to run through this

1115
00:39:21,640 --> 00:39:28,000
installer. Everything looks good to

1116
00:39:25,480 --> 00:39:30,800
me. If you wanted to, you know, you can

1117
00:39:28,000 --> 00:39:32,160
read these options and make sure, you

1118
00:39:30,800 --> 00:39:34,720
know, you're not signing away your life

1119
00:39:32,160 --> 00:39:38,119
or anything like that. And it's now

1120
00:39:34,720 --> 00:39:38,119
going to install

1121
00:39:39,359 --> 00:39:42,560
All right, so Git's been installed. I'm

1122
00:39:41,040 --> 00:39:43,640
going to uncheck view release notes.

1123
00:39:42,560 --> 00:39:46,000
Don't really

1124
00:39:43,640 --> 00:39:47,920
care. And now what we can do is run the

1125
00:39:46,000 --> 00:39:50,040
git command in our command line and

1126
00:39:47,920 --> 00:39:52,000
actually clone

1127
00:39:50,040 --> 00:39:54,240
repositories. And so to do that, I'm

1128
00:39:52,000 --> 00:39:56,560
just going to type in cmd to open up the

1129
00:39:54,240 --> 00:39:56,560
command

1130
00:39:58,040 --> 00:40:01,320
prompt. And from here, you can see I'm

1131
00:40:00,160 --> 00:40:03,599
in my

1132
00:40:01,320 --> 00:40:05,280
cuser/tcm directory. I'm going to go

1133
00:40:03,599 --> 00:40:08,320
into my documents folder. So, I'm going

1134
00:40:05,280 --> 00:40:08,320
to CD over into

1135
00:40:08,520 --> 00:40:11,960
documents. And now I'm going to clone

1136
00:40:10,400 --> 00:40:14,160
the course

1137
00:40:11,960 --> 00:40:15,760
repository. And I will have the link to

1138
00:40:14,160 --> 00:40:17,200
this repository down below if you want

1139
00:40:15,760 --> 00:40:18,400
to check out the individual files. But

1140
00:40:17,200 --> 00:40:21,200
we're going to be cloning the entire

1141
00:40:18,400 --> 00:40:22,440
thing. And so what we can do here is

1142
00:40:21,200 --> 00:40:24,800
just run git

1143
00:40:22,440 --> 00:40:25,960
clone and then paste in the link to the

1144
00:40:24,800 --> 00:40:28,960
git

1145
00:40:25,960 --> 00:40:30,599
file and just hit enter. And that's just

1146
00:40:28,960 --> 00:40:34,240
going to take a second to

1147
00:40:30,599 --> 00:40:36,200
download. And there we go. And so now

1148
00:40:34,240 --> 00:40:38,560
with this newly downloaded

1149
00:40:36,200 --> 00:40:40,880
folder, well, we can unzip the course

1150
00:40:38,560 --> 00:40:42,320
files onto our desktop. And so to do

1151
00:40:40,880 --> 00:40:44,320
that, I'm going to open up an explorer

1152
00:40:42,320 --> 00:40:47,040
window just with this little folder

1153
00:40:44,320 --> 00:40:48,200
explorer icon here. And go into the

1154
00:40:47,040 --> 00:40:50,720
documents

1155
00:40:48,200 --> 00:40:52,240
folder. And we can see this sock 101

1156
00:40:50,720 --> 00:40:54,400
folder here. Well, this is the git

1157
00:40:52,240 --> 00:40:55,760
repository that we just cloned. And can

1158
00:40:54,400 --> 00:40:57,319
see all of the different files and

1159
00:40:55,760 --> 00:40:59,599
folders within

1160
00:40:57,319 --> 00:41:01,680
this. And so I'm going to open up the

1161
00:40:59,599 --> 00:41:03,599
course file directory here. And you can

1162
00:41:01,680 --> 00:41:05,680
see we have a number of zip files

1163
00:41:03,599 --> 00:41:07,839
relating to each domain or section in

1164
00:41:05,680 --> 00:41:10,319
the course. And so all we need to do now

1165
00:41:07,839 --> 00:41:12,960
is just extract each of these folders so

1166
00:41:10,319 --> 00:41:15,040
we get access to the contents inside.

1167
00:41:12,960 --> 00:41:17,119
And so all we need to do is just select

1168
00:41:15,040 --> 00:41:20,160
the first file here, right click on it,

1169
00:41:17,119 --> 00:41:22,000
and then I can click on extract all. And

1170
00:41:20,160 --> 00:41:23,839
what I can do is change the location of

1171
00:41:22,000 --> 00:41:26,160
the extracted files. And so I'll click

1172
00:41:23,839 --> 00:41:28,240
on browse, and then I'll just send it

1173
00:41:26,160 --> 00:41:30,960
over to the desktop. So I'll click on

1174
00:41:28,240 --> 00:41:32,480
desktop and then select folder.

1175
00:41:30,960 --> 00:41:34,480
I'm just going to uncheck this to show

1176
00:41:32,480 --> 00:41:35,720
extracted files when complete. And then

1177
00:41:34,480 --> 00:41:38,240
I'll just click on

1178
00:41:35,720 --> 00:41:39,760
extract. And all we need to do now is

1179
00:41:38,240 --> 00:41:42,079
just repeat that same process for the

1180
00:41:39,760 --> 00:41:45,800
remaining files. So I'll right click on

1181
00:41:42,079 --> 00:41:50,160
this one, extract all, send it to the

1182
00:41:45,800 --> 00:41:50,160
desktop, extract, and

1183
00:41:56,280 --> 00:42:00,800
repeat. All right. And so with that

1184
00:41:58,800 --> 00:42:02,560
done, if you wanted to, you can just

1185
00:42:00,800 --> 00:42:04,280
organize them the way you want to. Or

1186
00:42:02,560 --> 00:42:06,240
you can create a folder here on the

1187
00:42:04,280 --> 00:42:09,920
desktop. And I can just call this

1188
00:42:06,240 --> 00:42:09,920
something like sock 101 course

1189
00:42:10,520 --> 00:42:15,280
files. And I can just move that up to

1190
00:42:12,800 --> 00:42:17,119
the top here. And just highlight and

1191
00:42:15,280 --> 00:42:18,119
drag in everything into this folder just

1192
00:42:17,119 --> 00:42:20,200
so it's more

1193
00:42:18,119 --> 00:42:22,400
organized. And within this containing

1194
00:42:20,200 --> 00:42:23,760
folder, well, you can in fact see we

1195
00:42:22,400 --> 00:42:26,880
have all of our course files and

1196
00:42:23,760 --> 00:42:28,720
directories. Nice.

1197
00:42:26,880 --> 00:42:30,400
And to make our lives easier, you don't

1198
00:42:28,720 --> 00:42:32,400
have to do this step, but I will just

1199
00:42:30,400 --> 00:42:34,160
show it just in case. I want to add

1200
00:42:32,400 --> 00:42:35,920
PowerShell and the command line as

1201
00:42:34,160 --> 00:42:38,160
shortcuts on my desktop just cuz we're

1202
00:42:35,920 --> 00:42:39,359
going to be accessing them a lot. And so

1203
00:42:38,160 --> 00:42:42,440
to do that, I'm just going to go down to

1204
00:42:39,359 --> 00:42:44,400
the start menu here and type in

1205
00:42:42,440 --> 00:42:46,480
PowerShell. I'm going to right click on

1206
00:42:44,400 --> 00:42:48,160
the application and click on open file

1207
00:42:46,480 --> 00:42:50,079
location.

1208
00:42:48,160 --> 00:42:52,640
And from here under Windows PowerShell,

1209
00:42:50,079 --> 00:42:54,880
I'm going to rightclick, go under send

1210
00:42:52,640 --> 00:42:57,200
to, and then select desktop to create

1211
00:42:54,880 --> 00:42:59,040
the shortcut. There we go. So, we have

1212
00:42:57,200 --> 00:43:01,440
PowerShell. And now for the command

1213
00:42:59,040 --> 00:43:03,200
prompt, I'm just going to type in cmd.

1214
00:43:01,440 --> 00:43:06,079
And once again, same thing. Open the

1215
00:43:03,200 --> 00:43:09,640
file location, right click on it, go to

1216
00:43:06,079 --> 00:43:12,560
send to desktop.

1217
00:43:09,640 --> 00:43:14,560
Nice. And with that, well, we're now

1218
00:43:12,560 --> 00:43:15,920
good to go with our Windows VM. We're

1219
00:43:14,560 --> 00:43:17,599
going to install a number of different

1220
00:43:15,920 --> 00:43:19,920
things and tools as we go throughout the

1221
00:43:17,599 --> 00:43:22,359
course, but for now, we have our base

1222
00:43:19,920 --> 00:43:24,800
image and our base installation ready to

1223
00:43:22,359 --> 00:43:26,400
go. All right. And so now back on our

1224
00:43:24,800 --> 00:43:28,960
host, we can go ahead and install our

1225
00:43:26,400 --> 00:43:30,400
Linux machine. And the flavor or the

1226
00:43:28,960 --> 00:43:33,520
distribution of Linux that we're going

1227
00:43:30,400 --> 00:43:35,720
to be using is called Ubuntu Linux. And

1228
00:43:33,520 --> 00:43:38,480
so I'm just going to open up my browser

1229
00:43:35,720 --> 00:43:40,079
here and do a search for Ubuntu

1230
00:43:38,480 --> 00:43:41,920
download. And we should see this get

1231
00:43:40,079 --> 00:43:44,560
Ubuntu link here. And I'll have it

1232
00:43:41,920 --> 00:43:46,079
linked down below.

1233
00:43:44,560 --> 00:43:48,160
And from here we can go under the

1234
00:43:46,079 --> 00:43:49,920
desktop version because we want to have

1235
00:43:48,160 --> 00:43:52,400
that graphical user interface or that

1236
00:43:49,920 --> 00:43:54,359
desktop environment and then click on

1237
00:43:52,400 --> 00:43:57,440
download Ubuntu

1238
00:43:54,359 --> 00:43:59,200
desktop. And from here what we can do is

1239
00:43:57,440 --> 00:44:02,000
download the long-term support version

1240
00:43:59,200 --> 00:44:03,920
or the LTS version here. And for

1241
00:44:02,000 --> 00:44:05,640
reference in my case the release number

1242
00:44:03,920 --> 00:44:08,160
here is

1243
00:44:05,640 --> 00:44:09,760
24.04. And if you need to find older

1244
00:44:08,160 --> 00:44:12,480
versions for example if you're not

1245
00:44:09,760 --> 00:44:14,560
seeing the 24.04 04 link here. Well, you

1246
00:44:12,480 --> 00:44:16,280
can go down to check out our alternative

1247
00:44:14,560 --> 00:44:18,800
downloads

1248
00:44:16,280 --> 00:44:19,960
link. And from here, just go down to

1249
00:44:18,800 --> 00:44:22,920
past

1250
00:44:19,960 --> 00:44:24,880
releases and click on all past

1251
00:44:22,920 --> 00:44:26,800
releases. And from here, you can go

1252
00:44:24,880 --> 00:44:29,280
through this repository here of all the

1253
00:44:26,800 --> 00:44:30,400
different past versions. However, we

1254
00:44:29,280 --> 00:44:32,880
don't need to do that. So, I'm going to

1255
00:44:30,400 --> 00:44:33,920
go back. And from this download page

1256
00:44:32,880 --> 00:44:35,880
here, I'm just going to click on the

1257
00:44:33,920 --> 00:44:38,160
green download

1258
00:44:35,880 --> 00:44:40,800
button. And within a second, it should

1259
00:44:38,160 --> 00:44:43,359
start downloading.

1260
00:44:40,800 --> 00:44:44,960
And so again, this is a 6 GB file. And

1261
00:44:43,359 --> 00:44:46,960
so just be patient with the download and

1262
00:44:44,960 --> 00:44:48,240
let it transfer over. And once it's

1263
00:44:46,960 --> 00:44:49,640
complete, I'll see you again for the

1264
00:44:48,240 --> 00:44:52,160
next

1265
00:44:49,640 --> 00:44:54,079
steps. And now that we have our Ubuntu

1266
00:44:52,160 --> 00:44:56,440
ISO file downloaded, well, we can head

1267
00:44:54,079 --> 00:44:58,960
back to Virtual Box and create our new

1268
00:44:56,440 --> 00:45:00,560
VM. But first, what I'm going to do is

1269
00:44:58,960 --> 00:45:02,400
some more organization here. So I'm

1270
00:45:00,560 --> 00:45:05,280
going to go under my documents, virtual

1271
00:45:02,400 --> 00:45:06,640
machines, and the SOC 101 folder. And

1272
00:45:05,280 --> 00:45:08,880
I'm going to open up a second window

1273
00:45:06,640 --> 00:45:11,359
here to my downloads folder and just

1274
00:45:08,880 --> 00:45:12,920
drag over that Ubuntu ISO file into this

1275
00:45:11,359 --> 00:45:15,520
sock 101

1276
00:45:12,920 --> 00:45:18,400
folder. All right. And so from here, I'm

1277
00:45:15,520 --> 00:45:18,400
just going to open up Virtual

1278
00:45:19,000 --> 00:45:22,760
Box. And from the main page here, click

1279
00:45:21,520 --> 00:45:24,800
on the new

1280
00:45:22,760 --> 00:45:29,319
button. For the name, I'm just going to

1281
00:45:24,800 --> 00:45:29,319
call it sock 101- Ubuntu.

1282
00:45:30,640 --> 00:45:35,760
For the folder again I'm going to update

1283
00:45:33,000 --> 00:45:38,520
this do point to documents virtual

1284
00:45:35,760 --> 00:45:42,000
machines sock

1285
00:45:38,520 --> 00:45:45,040
101 for the ISO image of course that's

1286
00:45:42,000 --> 00:45:46,800
going to be our Ubuntu ISO file and we

1287
00:45:45,040 --> 00:45:48,319
should be good to go and so again I'm

1288
00:45:46,800 --> 00:45:52,240
going to check off skip unattended

1289
00:45:48,319 --> 00:45:54,200
installation here and hit next and so

1290
00:45:52,240 --> 00:45:56,640
again same kind of deal here like with

1291
00:45:54,200 --> 00:45:58,560
Windows and so allocate as much memory

1292
00:45:56,640 --> 00:46:00,319
as you can here to reasonably run both

1293
00:45:58,560 --> 00:46:02,400
VMs at the same time alongside ongside

1294
00:46:00,319 --> 00:46:04,240
your host. And to be honest, you can

1295
00:46:02,400 --> 00:46:06,960
kind of strategize here and sort of

1296
00:46:04,240 --> 00:46:08,000
overresource your Linux VM first since

1297
00:46:06,960 --> 00:46:09,599
we're not going to be working with our

1298
00:46:08,000 --> 00:46:11,920
Windows VM as much during the first

1299
00:46:09,599 --> 00:46:13,599
section or two. But then once we start

1300
00:46:11,920 --> 00:46:16,079
working with Windows more, you can then

1301
00:46:13,599 --> 00:46:18,720
reallocate your RAM. And so I'm going to

1302
00:46:16,079 --> 00:46:20,400
set my RAM to around 8 gigs here. And

1303
00:46:18,720 --> 00:46:21,720
for the processors, going to bump it up

1304
00:46:20,400 --> 00:46:24,079
to

1305
00:46:21,720 --> 00:46:25,520
two. For the storage space, you can

1306
00:46:24,079 --> 00:46:27,680
leave it at default, but I would

1307
00:46:25,520 --> 00:46:30,000
recommend we kind of match our Windows,

1308
00:46:27,680 --> 00:46:31,119
you know, storage here.

1309
00:46:30,000 --> 00:46:34,000
And again, make sure you have

1310
00:46:31,119 --> 00:46:36,400
pre-allocate full size unchecked. And we

1311
00:46:34,000 --> 00:46:39,319
can just hit next. Review everything.

1312
00:46:36,400 --> 00:46:41,520
Make sure it looks good. And I'll hit

1313
00:46:39,319 --> 00:46:43,359
finish. All right. And so now we have

1314
00:46:41,520 --> 00:46:44,720
our two virtual machines ready to go.

1315
00:46:43,359 --> 00:46:47,280
And now we just need to run through the

1316
00:46:44,720 --> 00:46:48,560
installation process for our Ubuntu VM.

1317
00:46:47,280 --> 00:46:51,119
And so I'm going to click on the green

1318
00:46:48,560 --> 00:46:52,520
start icon here. And it's going to start

1319
00:46:51,119 --> 00:46:54,800
booting everything

1320
00:46:52,520 --> 00:46:56,800
up. All right. And when this starts up

1321
00:46:54,800 --> 00:46:58,640
here, we can just leave it as is. You

1322
00:46:56,800 --> 00:47:01,040
can see it's counting down. Or we can

1323
00:46:58,640 --> 00:47:03,280
click into the actual machine here,

1324
00:47:01,040 --> 00:47:05,040
click on capture, and then we can select

1325
00:47:03,280 --> 00:47:06,319
the different options. And so I'm going

1326
00:47:05,040 --> 00:47:08,640
to keep it at the, you know, first

1327
00:47:06,319 --> 00:47:11,119
selection here at try or install Ubuntu

1328
00:47:08,640 --> 00:47:11,119
and hit

1329
00:47:13,640 --> 00:47:17,440
enter. And if you see this loading

1330
00:47:15,839 --> 00:47:19,680
screen here, well then you're good to go

1331
00:47:17,440 --> 00:47:19,680
so

1332
00:47:20,119 --> 00:47:24,240
far. And from here, we can just run

1333
00:47:22,319 --> 00:47:27,800
through the installation process. And so

1334
00:47:24,240 --> 00:47:30,400
we can choose our language. Hit

1335
00:47:27,800 --> 00:47:32,839
next. We can turn on some accessibility

1336
00:47:30,400 --> 00:47:35,920
settings if you need

1337
00:47:32,839 --> 00:47:37,480
to. We can set the keyboard layout, the

1338
00:47:35,920 --> 00:47:39,359
internet

1339
00:47:37,480 --> 00:47:41,040
connection. It's going to say there's an

1340
00:47:39,359 --> 00:47:41,960
update. You can either update now or we

1341
00:47:41,040 --> 00:47:44,079
can do it

1342
00:47:41,960 --> 00:47:46,400
later. And from here, we're going to

1343
00:47:44,079 --> 00:47:48,240
keep it on install Ubuntu. And then hit

1344
00:47:46,400 --> 00:47:51,720
next.

1345
00:47:48,240 --> 00:47:53,920
And we'll keep it on interactive

1346
00:47:51,720 --> 00:47:56,200
installation and leave it again on

1347
00:47:53,920 --> 00:47:58,720
default selection

1348
00:47:56,200 --> 00:48:00,560
here. For the recommended proprietary

1349
00:47:58,720 --> 00:48:02,800
software here, we can just ignore this

1350
00:48:00,560 --> 00:48:02,800
for

1351
00:48:05,640 --> 00:48:09,680
now. And for the installation screen,

1352
00:48:08,079 --> 00:48:11,680
well, we can leave it again on erase

1353
00:48:09,680 --> 00:48:13,280
disc and install Ubuntu. And don't

1354
00:48:11,680 --> 00:48:15,040
worry, it's not your host disc that's

1355
00:48:13,280 --> 00:48:17,680
going to be erased. It is the virtual

1356
00:48:15,040 --> 00:48:20,400
hard disk that we just created.

1357
00:48:17,680 --> 00:48:22,480
And so I'll just hit next. We can set up

1358
00:48:20,400 --> 00:48:25,599
our account. And so I'm just going to

1359
00:48:22,480 --> 00:48:27,280
call my account TCM. Of course, for the

1360
00:48:25,599 --> 00:48:28,559
computer name here, I mean, you can set

1361
00:48:27,280 --> 00:48:30,920
this to whatever you like. I'm just

1362
00:48:28,559 --> 00:48:33,200
going to call it sock

1363
00:48:30,920 --> 00:48:36,400
101. Again, for the username, just call

1364
00:48:33,200 --> 00:48:39,480
it TCM. Password. The very strong

1365
00:48:36,400 --> 00:48:42,319
password of password. Once

1366
00:48:39,480 --> 00:48:44,680
again, actually for the computer name,

1367
00:48:42,319 --> 00:48:46,640
I'll just change this to sock 101-

1368
00:48:44,680 --> 00:48:48,160
Ubuntu just in case when we're looking

1369
00:48:46,640 --> 00:48:51,400
at it in the logs, we can actually, you

1370
00:48:48,160 --> 00:48:54,920
know, differentiate it and then hit

1371
00:48:51,400 --> 00:48:58,240
next. We can select our time

1372
00:48:54,920 --> 00:48:59,839
zone and review all of our selections,

1373
00:48:58,240 --> 00:49:02,040
which looks good to me. So, I'm just

1374
00:48:59,839 --> 00:49:04,559
going to hit

1375
00:49:02,040 --> 00:49:06,800
install. And so, now it's installing the

1376
00:49:04,559 --> 00:49:08,400
actual operating system. And so, like

1377
00:49:06,800 --> 00:49:09,599
with everything here, this could take a

1378
00:49:08,400 --> 00:49:12,000
little bit. And so, we just need to wait

1379
00:49:09,599 --> 00:49:12,000
for it to

1380
00:49:12,040 --> 00:49:16,240
finish. All right. And so, that install

1381
00:49:14,400 --> 00:49:18,800
finally finished. We can just hit

1382
00:49:16,240 --> 00:49:18,800
restart.

1383
00:49:21,880 --> 00:49:26,160
Now, it's going to ask us to remove the

1384
00:49:24,319 --> 00:49:28,720
installation medium. And so, essentially

1385
00:49:26,160 --> 00:49:29,920
just eject the ISO file, but Virtual Box

1386
00:49:28,720 --> 00:49:33,040
should have done this automatically for

1387
00:49:29,920 --> 00:49:33,040
us. So, we can just hit enter

1388
00:49:33,319 --> 00:49:38,119
here. And we're now going to be taken

1389
00:49:35,839 --> 00:49:40,640
hopefully to the

1390
00:49:38,119 --> 00:49:42,440
desktop. And there we go. And so we can

1391
00:49:40,640 --> 00:49:46,400
see the login screen here for the user

1392
00:49:42,440 --> 00:49:46,400
TCM. Just going to type in my

1393
00:49:49,160 --> 00:49:53,359
password. And there we go. And so if

1394
00:49:51,839 --> 00:49:56,960
you're seeing this message here, well,

1395
00:49:53,359 --> 00:49:59,119
you successfully installed Ubuntu Linux.

1396
00:49:56,960 --> 00:50:00,880
Now, like we did with Windows, let's get

1397
00:49:59,119 --> 00:50:03,119
our Ubuntu machine looking better by

1398
00:50:00,880 --> 00:50:04,640
installing the guest editions image so

1399
00:50:03,119 --> 00:50:06,359
we can increase the screen resolution

1400
00:50:04,640 --> 00:50:08,480
and allow for things like the shared

1401
00:50:06,359 --> 00:50:10,559
clipboard. And so to do this, we can

1402
00:50:08,480 --> 00:50:11,680
open up the terminal window. And I'm

1403
00:50:10,559 --> 00:50:15,000
just going to right click anywhere on

1404
00:50:11,680 --> 00:50:16,960
the screen and click on open in

1405
00:50:15,000 --> 00:50:19,119
terminal. And this is going to open up

1406
00:50:16,960 --> 00:50:22,079
the terminal window, which is a lot like

1407
00:50:19,119 --> 00:50:24,319
the command line in Windows.

1408
00:50:22,079 --> 00:50:26,599
And so from here we can just run the

1409
00:50:24,319 --> 00:50:28,720
clear command to clear out that warning

1410
00:50:26,599 --> 00:50:31,720
message. And the first command we want

1411
00:50:28,720 --> 00:50:34,160
to run here is pseudoapp

1412
00:50:31,720 --> 00:50:35,920
update. And this command and argument

1413
00:50:34,160 --> 00:50:38,160
like the name suggests is going to

1414
00:50:35,920 --> 00:50:40,079
update all of the system package well on

1415
00:50:38,160 --> 00:50:41,280
our system. And so I'm just going to hit

1416
00:50:40,079 --> 00:50:42,960
enter there. And it's going to ask us

1417
00:50:41,280 --> 00:50:44,400
for a password because we're invoking

1418
00:50:42,960 --> 00:50:48,280
this with pseudo. And so we're running

1419
00:50:44,400 --> 00:50:48,280
it with elevated permissions.

1420
00:50:49,920 --> 00:50:52,960
And so if you run into this yellow

1421
00:50:51,440 --> 00:50:54,720
warning here about the unit file like I

1422
00:50:52,960 --> 00:50:57,119
did, well, we just need to run this

1423
00:50:54,720 --> 00:50:59,119
command here. So systemct ctl damon

1424
00:50:57,119 --> 00:51:03,240
reload. And we want to prepend it with

1425
00:50:59,119 --> 00:51:06,240
pseudo once again. So pseudo

1426
00:51:03,240 --> 00:51:06,240
systemctl

1427
00:51:07,000 --> 00:51:10,800
damon-reload. So there we go. And so now

1428
00:51:09,119 --> 00:51:13,200
what I can do is just hit the up arrow

1429
00:51:10,800 --> 00:51:14,680
twice to run our pseudo apt update

1430
00:51:13,200 --> 00:51:16,720
command once

1431
00:51:14,680 --> 00:51:19,079
again. And there we go. It looks like

1432
00:51:16,720 --> 00:51:21,680
everything is running just as

1433
00:51:19,079 --> 00:51:23,599
expected. And from here, we need to

1434
00:51:21,680 --> 00:51:25,200
install a couple of required packages

1435
00:51:23,599 --> 00:51:27,839
before we can actually install the guest

1436
00:51:25,200 --> 00:51:31,640
edition CD. And so the command we're

1437
00:51:27,839 --> 00:51:33,839
going to run here is pseudo apt or a

1438
00:51:31,640 --> 00:51:37,440
install. And then the packages we need

1439
00:51:33,839 --> 00:51:43,920
to install are the following. Bzip 2,

1440
00:51:37,440 --> 00:51:45,760
tar, gcc, make, pearl, and lastly, git.

1441
00:51:43,920 --> 00:51:47,599
And I'll have all these commands listed

1442
00:51:45,760 --> 00:51:49,040
down below. We just can't really copy

1443
00:51:47,599 --> 00:51:51,480
and paste them yet because we don't have

1444
00:51:49,040 --> 00:51:54,040
our, you know, shared clipboard ready to

1445
00:51:51,480 --> 00:51:56,240
go. And so I'm just going to hit

1446
00:51:54,040 --> 00:51:58,240
run. And when we run this, it's going to

1447
00:51:56,240 --> 00:52:00,000
ask us if we want to continue. And so

1448
00:51:58,240 --> 00:52:03,839
I'm just going to press shift Y here to

1449
00:52:00,000 --> 00:52:03,839
put in a capital Y and hit

1450
00:52:05,079 --> 00:52:09,200
enter. And those packages have now been

1451
00:52:07,520 --> 00:52:11,000
installed.

1452
00:52:09,200 --> 00:52:12,520
The next command I'm going to run is

1453
00:52:11,000 --> 00:52:17,359
pseudoapp

1454
00:52:12,520 --> 00:52:17,359
install linux- headers-g

1455
00:52:17,960 --> 00:52:21,760
generic. And this is going to install

1456
00:52:19,920 --> 00:52:23,040
the generic kernel headers, which again

1457
00:52:21,760 --> 00:52:24,400
is kind of high level, but it's

1458
00:52:23,040 --> 00:52:26,359
something we're going to need to

1459
00:52:24,400 --> 00:52:28,800
actually install the guest editions

1460
00:52:26,359 --> 00:52:30,480
image. And now what we can do is run the

1461
00:52:28,800 --> 00:52:32,800
same command again, but I'm just going

1462
00:52:30,480 --> 00:52:35,200
to modify the end here after the last

1463
00:52:32,800 --> 00:52:37,520
dash here. and basically just run a

1464
00:52:35,200 --> 00:52:39,119
subshell with the dollar sign and then

1465
00:52:37,520 --> 00:52:41,599
within parenthesis here I'm just going

1466
00:52:39,119 --> 00:52:43,440
to run the uname command with the tac r

1467
00:52:41,599 --> 00:52:46,079
option to essentially just sub in here

1468
00:52:43,440 --> 00:52:47,520
our own kernel version and you might see

1469
00:52:46,079 --> 00:52:49,040
this message here that we already have

1470
00:52:47,520 --> 00:52:52,160
you know the newest version and that's

1471
00:52:49,040 --> 00:52:54,400
all good and so now what we can do I'm

1472
00:52:52,160 --> 00:52:56,119
just going to minimize our terminal here

1473
00:52:54,400 --> 00:52:58,559
I'm going to go under

1474
00:52:56,119 --> 00:53:00,280
devices and click on insert guest

1475
00:52:58,559 --> 00:53:02,640
edition CD

1476
00:53:00,280 --> 00:53:04,480
image when we do that we should see this

1477
00:53:02,640 --> 00:53:07,440
little CD icon appear

1478
00:53:04,480 --> 00:53:09,520
I can just click on that and we can see

1479
00:53:07,440 --> 00:53:11,599
we have a actual directory structure

1480
00:53:09,520 --> 00:53:13,040
mapping to this CD. And so what I'm

1481
00:53:11,599 --> 00:53:14,559
going to do is open up our terminal

1482
00:53:13,040 --> 00:53:16,400
again. Again, that's just going to be on

1483
00:53:14,559 --> 00:53:19,200
the left, you know, side navigation here

1484
00:53:16,400 --> 00:53:21,280
under this little terminal icon. And I'm

1485
00:53:19,200 --> 00:53:24,119
going to CD or change directory over to

1486
00:53:21,280 --> 00:53:28,119
the / media

1487
00:53:24,119 --> 00:53:30,800
directory. Okay. And if I run an

1488
00:53:28,119 --> 00:53:33,640
ls, we can see the directory for my user

1489
00:53:30,800 --> 00:53:36,720
TCM. So I'm going to hop into there with

1490
00:53:33,640 --> 00:53:39,280
cdtcm and then run an ls and we can now

1491
00:53:36,720 --> 00:53:41,200
see the virtual box image. And so again

1492
00:53:39,280 --> 00:53:43,359
I'm going to change directory here into

1493
00:53:41,200 --> 00:53:44,720
that actual directory structure. And so

1494
00:53:43,359 --> 00:53:46,960
I'm just going to start typing it with

1495
00:53:44,720 --> 00:53:48,800
vb here for vbox. And then I'm going to

1496
00:53:46,960 --> 00:53:50,240
hit the tab key and it's going to

1497
00:53:48,800 --> 00:53:52,800
automatically fill in the name of the

1498
00:53:50,240 --> 00:53:54,880
directory. So I'll just hit enter. And

1499
00:53:52,800 --> 00:53:56,119
if I run an ls we can see a number of

1500
00:53:54,880 --> 00:53:58,640
different

1501
00:53:56,119 --> 00:54:00,559
files. And specifically this is the one

1502
00:53:58,640 --> 00:54:03,280
that we want to run. This vbox linux

1503
00:54:00,559 --> 00:54:05,599
additions.run. run file. And so to run

1504
00:54:03,280 --> 00:54:08,400
this file, I'm just going to run pseudo

1505
00:54:05,599 --> 00:54:10,680
with a dot slash here and put in the

1506
00:54:08,400 --> 00:54:12,880
name of the file. And that's going to be

1507
00:54:10,680 --> 00:54:14,559
vbox. I'm just going to start typing in

1508
00:54:12,880 --> 00:54:16,480
Linux and just hit tab. It's going to

1509
00:54:14,559 --> 00:54:17,400
autocomplete there. And then I can just

1510
00:54:16,480 --> 00:54:19,280
hit

1511
00:54:17,400 --> 00:54:22,480
enter. And that's going to start

1512
00:54:19,280 --> 00:54:22,480
installing everything it needs

1513
00:54:25,640 --> 00:54:29,839
to. And you can see it actually kind of

1514
00:54:28,160 --> 00:54:31,839
shrunk our resolution here. So, I

1515
00:54:29,839 --> 00:54:33,920
promise I didn't just troll you. This is

1516
00:54:31,839 --> 00:54:36,880
part of the process. And so, what we

1517
00:54:33,920 --> 00:54:39,480
need to do is just restart our VM now.

1518
00:54:36,880 --> 00:54:41,839
And so, I'm just going to run pseudo

1519
00:54:39,480 --> 00:54:43,839
reboot and then just give it the now

1520
00:54:41,839 --> 00:54:46,400
argument to make sure it reboots right

1521
00:54:43,839 --> 00:54:46,400
at this very

1522
00:54:48,200 --> 00:54:52,720
moment. And now that we're back in, what

1523
00:54:50,800 --> 00:54:55,559
I can do now is go under the view option

1524
00:54:52,720 --> 00:54:59,280
here and click on once again full screen

1525
00:54:55,559 --> 00:55:02,000
mode. Just hit switch. There we go.

1526
00:54:59,280 --> 00:55:03,280
That's looking much better now. I'm just

1527
00:55:02,000 --> 00:55:05,440
going to sign in here. Make sure

1528
00:55:03,280 --> 00:55:06,520
everything is going well. Make sure

1529
00:55:05,440 --> 00:55:09,200
everything's

1530
00:55:06,520 --> 00:55:10,720
good. Nice. There we go. And so again,

1531
00:55:09,200 --> 00:55:13,119
our toolbar here is now going to be on

1532
00:55:10,720 --> 00:55:15,920
the bottom. And what I can do is click

1533
00:55:13,119 --> 00:55:17,119
on devices, go under shared clipboard,

1534
00:55:15,920 --> 00:55:19,359
and once again, make sure that's

1535
00:55:17,119 --> 00:55:22,079
birectional because it's going to really

1536
00:55:19,359 --> 00:55:23,280
save a lot of time and a lot of typos uh

1537
00:55:22,079 --> 00:55:25,119
when it comes to, you know, copy and

1538
00:55:23,280 --> 00:55:26,800
pasting commands or outputs back and

1539
00:55:25,119 --> 00:55:28,160
forth.

1540
00:55:26,800 --> 00:55:31,800
And just to demonstrate this, I'm going

1541
00:55:28,160 --> 00:55:34,319
to rightclick, click on open in

1542
00:55:31,800 --> 00:55:36,319
terminal. And again on my clipboard, I

1543
00:55:34,319 --> 00:55:39,920
have hello world from my host. Going to

1544
00:55:36,319 --> 00:55:41,359
paste that in. Looks good. And to double

1545
00:55:39,920 --> 00:55:44,280
check it's working, I'm just going to

1546
00:55:41,359 --> 00:55:48,440
copy this. And I know you can't see

1547
00:55:44,280 --> 00:55:51,359
it, but that pasted in no problem on my

1548
00:55:48,440 --> 00:55:53,920
host. All right. And so with that, we

1549
00:55:51,359 --> 00:55:55,920
now have our Ubuntu VM ready to go. And

1550
00:55:53,920 --> 00:55:58,520
our lab is starting to come together.

1551
00:55:55,920 --> 00:56:00,880
And so I will see you in the next

1552
00:55:58,520 --> 00:56:03,040
lesson. All right, now it's time to

1553
00:56:00,880 --> 00:56:04,640
actually configure our Ubuntu machine.

1554
00:56:03,040 --> 00:56:07,359
And we just have a couple of things to

1555
00:56:04,640 --> 00:56:09,119
do. And so first, let's make sure we

1556
00:56:07,359 --> 00:56:11,200
have git installed so we can clone the

1557
00:56:09,119 --> 00:56:12,640
actual course repository. And we did

1558
00:56:11,200 --> 00:56:14,319
install it earlier. I just want to make

1559
00:56:12,640 --> 00:56:15,680
sure that it is actually installed in

1560
00:56:14,319 --> 00:56:17,680
case you didn't run, you know, one of

1561
00:56:15,680 --> 00:56:19,760
the commands earlier or something. Let

1562
00:56:17,680 --> 00:56:22,000
me just zoom in for you.

1563
00:56:19,760 --> 00:56:23,520
I'm just going to type in which git and

1564
00:56:22,000 --> 00:56:25,599
this is going to locate the actual file

1565
00:56:23,520 --> 00:56:27,599
itself or the binary. And fortunately we

1566
00:56:25,599 --> 00:56:31,240
do have it. But if you don't, you can

1567
00:56:27,599 --> 00:56:33,559
just run pseudo apt install

1568
00:56:31,240 --> 00:56:35,839
git. Type in a

1569
00:56:33,559 --> 00:56:37,640
password. And you can see in my case I

1570
00:56:35,839 --> 00:56:39,240
already have it

1571
00:56:37,640 --> 00:56:41,599
installed. All

1572
00:56:39,240 --> 00:56:43,359
right. And so now I'm just going to head

1573
00:56:41,599 --> 00:56:45,200
into the documents folder. So I'm going

1574
00:56:43,359 --> 00:56:48,079
to give it the tilda here to go to my

1575
00:56:45,200 --> 00:56:50,280
home directory. and then with a slash

1576
00:56:48,079 --> 00:56:52,240
type in the documents

1577
00:56:50,280 --> 00:56:54,480
folder. And from here, I'm going to

1578
00:56:52,240 --> 00:56:55,920
clone in the course repository. And

1579
00:56:54,480 --> 00:56:58,400
again, I will have this command linked

1580
00:56:55,920 --> 00:57:00,000
down below with the URL and everything,

1581
00:56:58,400 --> 00:57:02,319
but it's just going to be a get clone

1582
00:57:00,000 --> 00:57:04,680
command here. And then pasting in the

1583
00:57:02,319 --> 00:57:07,839
actual URL of the git

1584
00:57:04,680 --> 00:57:10,040
file. So, if I hit enter, we're going to

1585
00:57:07,839 --> 00:57:12,240
clone this into its own

1586
00:57:10,040 --> 00:57:14,440
directory. I run an ls, you can see we

1587
00:57:12,240 --> 00:57:17,599
have the sock 101 directory ready to

1588
00:57:14,440 --> 00:57:20,799
go. If I just run an ls inside of it,

1589
00:57:17,599 --> 00:57:22,960
well, we are good to go. And so what I'm

1590
00:57:20,799 --> 00:57:24,640
going to do now is open up a file

1591
00:57:22,960 --> 00:57:27,520
browser. And that's just going to be

1592
00:57:24,640 --> 00:57:27,520
this folder icon

1593
00:57:28,040 --> 00:57:32,480
here. And I'm going to head to my

1594
00:57:30,160 --> 00:57:34,960
documents folder under the sock 101

1595
00:57:32,480 --> 00:57:37,440
folder that we just cloned. And I'm

1596
00:57:34,960 --> 00:57:39,520
going to go into course files here. And

1597
00:57:37,440 --> 00:57:41,280
within this directory, what we can see a

1598
00:57:39,520 --> 00:57:44,000
zip folder containing all of the course

1599
00:57:41,280 --> 00:57:45,760
files for each domain in the course. And

1600
00:57:44,000 --> 00:57:48,000
what we need to do now is just extract

1601
00:57:45,760 --> 00:57:49,520
each of these folders. And you can

1602
00:57:48,000 --> 00:57:51,839
either extract them all at once, which

1603
00:57:49,520 --> 00:57:53,760
I'm going to do, or you can extract each

1604
00:57:51,839 --> 00:57:55,400
of them one at a time as you make it

1605
00:57:53,760 --> 00:57:57,680
through each section in the

1606
00:57:55,400 --> 00:57:59,680
course. However, the process is going to

1607
00:57:57,680 --> 00:58:01,119
be the same no matter what. It's just a

1608
00:57:59,680 --> 00:58:02,640
little repetitive, and I'm sorry about

1609
00:58:01,119 --> 00:58:04,319
that, but it really makes the course

1610
00:58:02,640 --> 00:58:07,040
more modular, so I can update each

1611
00:58:04,319 --> 00:58:08,720
section as time goes on.

1612
00:58:07,040 --> 00:58:10,720
And so what I'm going to do is just

1613
00:58:08,720 --> 00:58:11,839
select and highlight everything here.

1614
00:58:10,720 --> 00:58:13,960
And I'm going to right click on one of

1615
00:58:11,839 --> 00:58:16,319
the files and click on

1616
00:58:13,960 --> 00:58:18,160
extract. Excellent. So there we go. And

1617
00:58:16,319 --> 00:58:19,839
so we have every zip file here, which we

1618
00:58:18,160 --> 00:58:22,319
don't actually need anymore along with

1619
00:58:19,839 --> 00:58:23,760
the corresponding extracted folders. And

1620
00:58:22,319 --> 00:58:25,960
with them all highlighted, I'm just

1621
00:58:23,760 --> 00:58:29,400
going to drag them all to the

1622
00:58:25,960 --> 00:58:31,760
desktop. I can close out of this folder

1623
00:58:29,400 --> 00:58:33,559
here. Excellent. And there we go. And so

1624
00:58:31,760 --> 00:58:36,319
that's starting to look a lot

1625
00:58:33,559 --> 00:58:38,240
better. All right. And what I also like

1626
00:58:36,319 --> 00:58:40,240
to do is move this side navigation down

1627
00:58:38,240 --> 00:58:42,160
to the bottom like kind of like a more

1628
00:58:40,240 --> 00:58:43,839
standard Windows desktop environment.

1629
00:58:42,160 --> 00:58:45,520
Again, totally optional, but if you want

1630
00:58:43,839 --> 00:58:47,680
to do it, we just need to right click

1631
00:58:45,520 --> 00:58:50,640
anywhere on the desktop and click on

1632
00:58:47,680 --> 00:58:50,640
desktop icon

1633
00:58:50,760 --> 00:58:55,440
settings. And from this window here,

1634
00:58:53,280 --> 00:58:58,000
just need to scroll down to position on

1635
00:58:55,440 --> 00:59:02,960
screen under the dock and change this

1636
00:58:58,000 --> 00:59:04,640
from left oh to bottom. And there we go.

1637
00:59:02,960 --> 00:59:06,240
And we can also start to clean up the

1638
00:59:04,640 --> 00:59:08,559
different items on our taskbar as well

1639
00:59:06,240 --> 00:59:10,240
or our you know doc bar. And so the

1640
00:59:08,559 --> 00:59:12,319
first thing we can do is right click on

1641
00:59:10,240 --> 00:59:14,280
the actual CD icon here for the guest

1642
00:59:12,319 --> 00:59:16,720
editions and just click on

1643
00:59:14,280 --> 00:59:18,440
eject from this little help window here.

1644
00:59:16,720 --> 00:59:20,240
We can unpin this again by

1645
00:59:18,440 --> 00:59:22,480
rightclicking. Same kind of deal with

1646
00:59:20,240 --> 00:59:25,359
the app center here as well. And what I

1647
00:59:22,480 --> 00:59:26,720
will do is pin the terminal icon to the

1648
00:59:25,359 --> 00:59:27,960
dash because we're going to be using it

1649
00:59:26,720 --> 00:59:31,280
quite a

1650
00:59:27,960 --> 00:59:33,040
bit. And that looks good to me. And so

1651
00:59:31,280 --> 00:59:34,720
with all of that out of the way, there

1652
00:59:33,040 --> 00:59:36,799
is an install script located in the

1653
00:59:34,720 --> 00:59:38,720
course repository that we need to run to

1654
00:59:36,799 --> 00:59:41,119
install any necessary packages or

1655
00:59:38,720 --> 00:59:42,720
dependencies before we start jumping in.

1656
00:59:41,119 --> 00:59:44,799
And part of the reason why we have this

1657
00:59:42,720 --> 00:59:46,960
repository is in case I need to update

1658
00:59:44,799 --> 00:59:48,799
the list of packages that is included in

1659
00:59:46,960 --> 00:59:50,400
this install script, right? If I need to

1660
00:59:48,799 --> 00:59:52,640
include any additional packages later

1661
00:59:50,400 --> 00:59:54,160
on. And so if that's the case, well,

1662
00:59:52,640 --> 00:59:55,599
it's easy because the process doesn't

1663
00:59:54,160 --> 00:59:58,240
change for you. I just need to update

1664
00:59:55,599 --> 01:00:01,440
the script on my end. And so I'm going

1665
00:59:58,240 --> 01:00:02,960
to open up the terminal here.

1666
01:00:01,440 --> 01:00:05,040
and I'm going to head to the documents

1667
01:00:02,960 --> 01:00:08,079
folder. So, I'm just going to CD back

1668
01:00:05,040 --> 01:00:08,079
into my documents folder

1669
01:00:08,520 --> 01:00:13,040
here and I'm going to go into that sock

1670
01:00:11,040 --> 01:00:15,319
101 directory within my documents

1671
01:00:13,040 --> 01:00:18,920
folder. And then I'm going to go into

1672
01:00:15,319 --> 01:00:21,520
resources and then into the install

1673
01:00:18,920 --> 01:00:23,960
directory. And if I run an ls, you can

1674
01:00:21,520 --> 01:00:27,200
see we have this install.sh

1675
01:00:23,960 --> 01:00:29,319
script. And so to make it executable, we

1676
01:00:27,200 --> 01:00:32,240
can run the change mode command or

1677
01:00:29,319 --> 01:00:34,480
chmod. Give it the plus x to add that

1678
01:00:32,240 --> 01:00:36,440
executable bit and then provide the name

1679
01:00:34,480 --> 01:00:38,720
of

1680
01:00:36,440 --> 01:00:41,359
install.sh. And now if I run an ls,

1681
01:00:38,720 --> 01:00:42,720
well, it should be green. There we go.

1682
01:00:41,359 --> 01:00:45,599
And so now I'm just going to run the

1683
01:00:42,720 --> 01:00:45,599
file with dot

1684
01:00:47,319 --> 01:00:51,440
/install.sh. And it's just going to

1685
01:00:49,280 --> 01:00:52,799
update our packages and just install a

1686
01:00:51,440 --> 01:00:55,359
couple of things. So it shouldn't take

1687
01:00:52,799 --> 01:00:57,119
long at all. And just like that, the

1688
01:00:55,359 --> 01:00:58,200
installation has been completed and we

1689
01:00:57,119 --> 01:01:01,200
are good to

1690
01:00:58,200 --> 01:01:03,200
go. And so lastly, this is completely

1691
01:01:01,200 --> 01:01:04,799
optional once again, but I'm going to be

1692
01:01:03,200 --> 01:01:06,960
super slick here and just update the

1693
01:01:04,799 --> 01:01:08,400
desktop wallpaper. And so to get there,

1694
01:01:06,960 --> 01:01:10,599
I just rightclicked anywhere on the

1695
01:01:08,400 --> 01:01:12,559
desktop and clicked on change

1696
01:01:10,599 --> 01:01:14,920
background. And from here, I'm going to

1697
01:01:12,559 --> 01:01:17,040
go down to background and click on add

1698
01:01:14,920 --> 01:01:19,960
picture. I'm going to locate under

1699
01:01:17,040 --> 01:01:22,640
documents the sock 101 folder. Go under

1700
01:01:19,960 --> 01:01:24,839
resources under the wallpapers directory

1701
01:01:22,640 --> 01:01:27,400
and click on wallpaper.png.

1702
01:01:24,839 --> 01:01:29,599
png. And I'm just going to click on that

1703
01:01:27,400 --> 01:01:31,240
there. And now we're looking a lot

1704
01:01:29,599 --> 01:01:33,440
better in my

1705
01:01:31,240 --> 01:01:35,200
opinion. However, this did kind of mess

1706
01:01:33,440 --> 01:01:36,599
up my ordering here. So, I'm just going

1707
01:01:35,200 --> 01:01:38,799
to fix

1708
01:01:36,599 --> 01:01:40,480
this. All right. And so now we're good

1709
01:01:38,799 --> 01:01:42,400
to go. We just need to do a quick

1710
01:01:40,480 --> 01:01:45,839
networking setup and then we're ready to

1711
01:01:42,400 --> 01:01:48,640
jump into the course.

1712
01:01:45,839 --> 01:01:50,160
Now lastly, we just need to make a

1713
01:01:48,640 --> 01:01:52,319
couple of networking configurations

1714
01:01:50,160 --> 01:01:54,240
between our two VMs that will allow them

1715
01:01:52,319 --> 01:01:56,880
to talk to each other but not to our

1716
01:01:54,240 --> 01:01:58,720
physical host. And this is important to

1717
01:01:56,880 --> 01:02:00,720
ensure that you know both our VMs are

1718
01:01:58,720 --> 01:02:03,040
physically separated from our host but

1719
01:02:00,720 --> 01:02:05,280
logically connected to each other. And

1720
01:02:03,040 --> 01:02:07,760
to do this in Virtual Box, we just need

1721
01:02:05,280 --> 01:02:09,640
to create a network and then apply it to

1722
01:02:07,760 --> 01:02:12,000
the network adapters for our

1723
01:02:09,640 --> 01:02:14,960
VMs. And it kind of sounds complicated,

1724
01:02:12,000 --> 01:02:16,720
but it's really easy. And so under tools

1725
01:02:14,960 --> 01:02:19,440
here, I'm just going to click on the

1726
01:02:16,720 --> 01:02:21,079
little hamburger icon here and go down

1727
01:02:19,440 --> 01:02:23,680
to

1728
01:02:21,079 --> 01:02:25,640
network. All right. And from here, I'm

1729
01:02:23,680 --> 01:02:28,839
going to click on the NAT networks

1730
01:02:25,640 --> 01:02:31,280
tab. And then I'm just going to click on

1731
01:02:28,839 --> 01:02:32,839
create. And now with our sampleN or

1732
01:02:31,280 --> 01:02:35,119
network address translation network

1733
01:02:32,839 --> 01:02:36,119
created, well, I can right click on it

1734
01:02:35,119 --> 01:02:38,160
and go to

1735
01:02:36,119 --> 01:02:40,720
properties. And from here, what we want

1736
01:02:38,160 --> 01:02:43,760
to do well is first name it. So I'm just

1737
01:02:40,720 --> 01:02:46,400
going to call it TCM.

1738
01:02:43,760 --> 01:02:47,920
And next we need to set the IPv4 prefix.

1739
01:02:46,400 --> 01:02:49,680
And so this is basically going to be the

1740
01:02:47,920 --> 01:02:52,119
network range that our network is going

1741
01:02:49,680 --> 01:02:55,200
to utilize. And you can leave it at

1742
01:02:52,119 --> 01:02:57,680
10.0.2.0 here if you want. It doesn't

1743
01:02:55,200 --> 01:02:59,359
really matter. And best practice is to

1744
01:02:57,680 --> 01:03:01,440
keep the actual range here separate from

1745
01:02:59,359 --> 01:03:03,040
what your physical host is using. Or in

1746
01:03:01,440 --> 01:03:05,640
other words, make it look different.

1747
01:03:03,040 --> 01:03:08,160
Right? So if my host machine is using

1748
01:03:05,640 --> 01:03:10,960
192.168, you know, well, I can make my

1749
01:03:08,160 --> 01:03:12,680
NAT network here 10.0.2. And so they

1750
01:03:10,960 --> 01:03:14,960
just kind of look visually

1751
01:03:12,680 --> 01:03:17,119
different. But anyways, in my case, what

1752
01:03:14,960 --> 01:03:18,880
I'm going to do is just change this to

1753
01:03:17,119 --> 01:03:20,640
192. And feel free to follow along.

1754
01:03:18,880 --> 01:03:22,559
Again, it doesn't really matter. It's

1755
01:03:20,640 --> 01:03:24,079
just that anytime I reference my own IP

1756
01:03:22,559 --> 01:03:25,280
range during the course, well, yours

1757
01:03:24,079 --> 01:03:26,880
might be different if you set something

1758
01:03:25,280 --> 01:03:29,160
different here. And that's fine.

1759
01:03:26,880 --> 01:03:31,960
Completely fine. Just keep that in

1760
01:03:29,160 --> 01:03:33,760
mind. So

1761
01:03:31,960 --> 01:03:36,720
192.168.1.0. And again, I'm just going

1762
01:03:33,760 --> 01:03:39,839
to make it a/24 network. Going to keep

1763
01:03:36,720 --> 01:03:41,720
DHCP enabled. And that's basically it.

1764
01:03:39,839 --> 01:03:43,960
So, I'm just going to click on

1765
01:03:41,720 --> 01:03:46,160
apply. Now that that's ready and

1766
01:03:43,960 --> 01:03:49,359
created, we just need to tell our two

1767
01:03:46,160 --> 01:03:50,799
VMs here to use this network. And so,

1768
01:03:49,359 --> 01:03:52,000
I'll start with the Windows machine. I'm

1769
01:03:50,799 --> 01:03:54,119
just going to right click on the actual

1770
01:03:52,000 --> 01:03:57,000
VM name here and go to

1771
01:03:54,119 --> 01:03:59,119
settings and then go down to the network

1772
01:03:57,000 --> 01:04:00,799
tab. And the first thing I want to do

1773
01:03:59,119 --> 01:04:02,559
here is click through all of these

1774
01:04:00,799 --> 01:04:04,640
different tabs here, listing out the

1775
01:04:02,559 --> 01:04:06,480
different network adapter cards. And I

1776
01:04:04,640 --> 01:04:09,359
just want to make sure that none of them

1777
01:04:06,480 --> 01:04:11,359
are checked aside from adapter one here.

1778
01:04:09,359 --> 01:04:13,559
And under adapter 1, I'm going to make

1779
01:04:11,359 --> 01:04:17,240
sure it's enabled, obviously. And under

1780
01:04:13,559 --> 01:04:19,359
attach, I'm going to change this to NAT

1781
01:04:17,240 --> 01:04:21,440
network. And under name here, I'm going

1782
01:04:19,359 --> 01:04:24,079
to make sure it's set to TCM or whatever

1783
01:04:21,440 --> 01:04:25,559
you just named it. And that's all good.

1784
01:04:24,079 --> 01:04:27,839
I'm going to click on

1785
01:04:25,559 --> 01:04:29,480
okay. And I'm going to do the same thing

1786
01:04:27,839 --> 01:04:32,720
here for my Ubuntu

1787
01:04:29,480 --> 01:04:34,440
machine. Go under network again. Make

1788
01:04:32,720 --> 01:04:37,119
sure none of the other adapters are

1789
01:04:34,440 --> 01:04:38,760
selected. and under attach to net

1790
01:04:37,119 --> 01:04:42,240
network and make sure it's

1791
01:04:38,760 --> 01:04:43,839
TCM. And there we go. And so if you

1792
01:04:42,240 --> 01:04:45,520
want, we can verify connectivity here.

1793
01:04:43,839 --> 01:04:47,280
So we just need to spin up both machines

1794
01:04:45,520 --> 01:04:48,920
at the same time. And so we can just

1795
01:04:47,280 --> 01:04:51,359
click on

1796
01:04:48,920 --> 01:04:53,200
start. All right. And with my two VMs

1797
01:04:51,359 --> 01:04:54,720
running, you can see I just have them on

1798
01:04:53,200 --> 01:04:56,720
different windows here. I'm going to

1799
01:04:54,720 --> 01:04:58,640
start off with my Ubuntu machine and

1800
01:04:56,720 --> 01:05:01,520
open up the terminal so I can get my IP

1801
01:04:58,640 --> 01:05:03,280
address.

1802
01:05:01,520 --> 01:05:06,200
And with the terminal open, I'm just

1803
01:05:03,280 --> 01:05:08,680
going to run the if config

1804
01:05:06,200 --> 01:05:11,119
command. And so if I just hit

1805
01:05:08,680 --> 01:05:12,839
enter, you can see I'm getting my IP

1806
01:05:11,119 --> 01:05:16,160
address here under

1807
01:05:12,839 --> 01:05:18,799
ENP03 under inet. You can see my IP

1808
01:05:16,160 --> 01:05:18,799
address is

1809
01:05:21,000 --> 01:05:26,400
192.168.13. Over on Windows now, I'm

1810
01:05:23,440 --> 01:05:26,400
going to open up the command

1811
01:05:26,520 --> 01:05:31,440
prompt. And this time I'm going to type

1812
01:05:28,720 --> 01:05:31,440
in IP

1813
01:05:32,039 --> 01:05:37,039
config. And you can see that my IP

1814
01:05:34,240 --> 01:05:37,039
address is 1

1815
01:05:37,880 --> 01:05:43,839
192.168.1.12. And so on Windows we

1816
01:05:40,119 --> 01:05:45,440
have.12 and on Ubuntu here we have.13.

1817
01:05:43,839 --> 01:05:47,920
And so that's a good sign. It looks like

1818
01:05:45,440 --> 01:05:49,680
they might be on the same network. And

1819
01:05:47,920 --> 01:05:52,160
so what I can do now from my Windows

1820
01:05:49,680 --> 01:05:55,119
host is try to ping the IP address of my

1821
01:05:52,160 --> 01:05:56,680
Ubuntu host. And if I get a response,

1822
01:05:55,119 --> 01:05:58,480
well, it means they can in fact

1823
01:05:56,680 --> 01:06:01,359
communicate. And so that's just going to

1824
01:05:58,480 --> 01:06:03,359
be ping and then the IP address. And

1825
01:06:01,359 --> 01:06:04,559
remember, your IP addresses here might

1826
01:06:03,359 --> 01:06:05,920
be different, and that's completely

1827
01:06:04,559 --> 01:06:07,680
fine. Just make sure you're using the

1828
01:06:05,920 --> 01:06:09,359
right one. Don't just use mine if yours

1829
01:06:07,680 --> 01:06:11,440
is different. In that case, you're not

1830
01:06:09,359 --> 01:06:14,440
going to get the result that you want.

1831
01:06:11,440 --> 01:06:17,720
And so I'm going to type in

1832
01:06:14,440 --> 01:06:20,359
192.168.1. And my Ubuntu host ends in

1833
01:06:17,720 --> 01:06:23,200
13. And so if I run

1834
01:06:20,359 --> 01:06:26,119
this, you can see we are in fact getting

1835
01:06:23,200 --> 01:06:28,880
replies from our host, which is a great

1836
01:06:26,119 --> 01:06:31,359
sign. And just a note here, I'm pinging

1837
01:06:28,880 --> 01:06:32,880
my Linux host from my Windows machine.

1838
01:06:31,359 --> 01:06:34,720
If you try to do it the other way around

1839
01:06:32,880 --> 01:06:36,079
and ping your Windows machine, well, the

1840
01:06:34,720 --> 01:06:38,240
pings are going to fail because by

1841
01:06:36,079 --> 01:06:40,799
default, Windows machines block pings or

1842
01:06:38,240 --> 01:06:42,319
ICMP traffic. You can resolve this by

1843
01:06:40,799 --> 01:06:45,359
going into the Windows firewall and

1844
01:06:42,319 --> 01:06:47,039
allowing IPv4 ICMP packets. But don't

1845
01:06:45,359 --> 01:06:48,160
worry, we don't need to do that. If

1846
01:06:47,039 --> 01:06:49,680
you're getting pings back from your

1847
01:06:48,160 --> 01:06:51,200
Linux or Ubuntu machine, then you're

1848
01:06:49,680 --> 01:06:53,440
good. And the two systems can talk to

1849
01:06:51,200 --> 01:06:55,440
each other. And so there we go. So we've

1850
01:06:53,440 --> 01:06:57,520
finally set up our VMs. We've configured

1851
01:06:55,440 --> 01:07:00,160
them, customized them, and now we have

1852
01:06:57,520 --> 01:07:01,520
the networking set up, too. And so,

1853
01:07:00,160 --> 01:07:03,599
thank you for following along for this

1854
01:07:01,520 --> 01:07:05,520
lab setup. I know it was quite a bit,

1855
01:07:03,599 --> 01:07:07,799
but now we get to jump into the fun. And

1856
01:07:05,520 --> 01:07:10,079
so I will see you in the next

1857
01:07:07,799 --> 01:07:12,079
lesson. Before we get into the main

1858
01:07:10,079 --> 01:07:14,319
practical sections of this course, let's

1859
01:07:12,079 --> 01:07:16,160
first understand what a sock is, the

1860
01:07:14,319 --> 01:07:17,839
components that make up a sock, as well

1861
01:07:16,160 --> 01:07:19,680
as some important terminology that we

1862
01:07:17,839 --> 01:07:21,200
should be familiar with. Now, I have a

1863
01:07:19,680 --> 01:07:22,960
confession here, and it's that this

1864
01:07:21,200 --> 01:07:24,880
section of the course is going to be a

1865
01:07:22,960 --> 01:07:26,880
bit of a death by PowerPoint section.

1866
01:07:24,880 --> 01:07:28,400
And I'm really sorry in advance, but

1867
01:07:26,880 --> 01:07:29,920
trust me, every other section of this

1868
01:07:28,400 --> 01:07:31,839
course is going to be hands-on and

1869
01:07:29,920 --> 01:07:33,760
practical. It's just that it's really

1870
01:07:31,839 --> 01:07:36,160
hard to present some of this stuff in a

1871
01:07:33,760 --> 01:07:37,760
less theoretical way. But I promise you

1872
01:07:36,160 --> 01:07:39,760
that this is the only section that is

1873
01:07:37,760 --> 01:07:41,599
going to be very slideheavy like this.

1874
01:07:39,760 --> 01:07:43,359
And trust me that this is going to lay a

1875
01:07:41,599 --> 01:07:45,559
necessary foundation that we're going to

1876
01:07:43,359 --> 01:07:48,160
build upon to grasp some of the hands-on

1877
01:07:45,559 --> 01:07:49,920
topics. So within this section, we aim

1878
01:07:48,160 --> 01:07:52,079
to gain a holistic understanding of

1879
01:07:49,920 --> 01:07:54,480
security operations within organizations

1880
01:07:52,079 --> 01:07:56,079
that you might find yourself in. So when

1881
01:07:54,480 --> 01:07:57,839
we talk about the domain objectives for

1882
01:07:56,079 --> 01:07:59,680
this section, we want to understand the

1883
01:07:57,839 --> 01:08:00,960
core functions within a sock as well as

1884
01:07:59,680 --> 01:08:02,799
the role that it plays within

1885
01:08:00,960 --> 01:08:04,880
organizations. So we want to answer

1886
01:08:02,799 --> 01:08:06,640
questions like why do we have a sock and

1887
01:08:04,880 --> 01:08:08,559
what is the business justification for

1888
01:08:06,640 --> 01:08:10,559
maintaining a sock from a resource or

1889
01:08:08,559 --> 01:08:12,079
financial aspect. We also want to

1890
01:08:10,559 --> 01:08:14,079
explore the daily tasks and

1891
01:08:12,079 --> 01:08:15,520
responsibilities of a sock analyst. We

1892
01:08:14,079 --> 01:08:17,679
want to understand what the day-to-day

1893
01:08:15,520 --> 01:08:19,120
looks like in an average sock. We also

1894
01:08:17,679 --> 01:08:21,040
want to familiarize ourselves with

1895
01:08:19,120 --> 01:08:22,960
different sock models, roles and

1896
01:08:21,040 --> 01:08:24,799
organizational structures. You know so

1897
01:08:22,960 --> 01:08:25,920
how is the team actually structured and

1898
01:08:24,799 --> 01:08:28,000
how do various roles and

1899
01:08:25,920 --> 01:08:29,759
responsibilities disseminate amongst the

1900
01:08:28,000 --> 01:08:31,359
team. We also want to learn several

1901
01:08:29,759 --> 01:08:32,640
metrics that are used to evaluate the

1902
01:08:31,359 --> 01:08:34,640
effectiveness of our security

1903
01:08:32,640 --> 01:08:36,319
operations. Right? So what does success

1904
01:08:34,640 --> 01:08:38,560
look like for a sock team and how can

1905
01:08:36,319 --> 01:08:40,239
areas of improvement be identified. We

1906
01:08:38,560 --> 01:08:42,080
want to understand various tools that

1907
01:08:40,239 --> 01:08:45,120
are used within the sock for monitoring,

1908
01:08:42,080 --> 01:08:46,799
detection, analysis and response. And

1909
01:08:45,120 --> 01:08:48,799
lastly, we want to identify and

1910
01:08:46,799 --> 01:08:50,719
understand common cyber security threats

1911
01:08:48,799 --> 01:08:52,640
faced by organizations because of course

1912
01:08:50,719 --> 01:08:54,319
as our technology landscape grows, so

1913
01:08:52,640 --> 01:08:56,480
does our attack surface. And we need to

1914
01:08:54,319 --> 01:08:59,040
be able as sock analysts to quickly

1915
01:08:56,480 --> 01:09:00,719
identify common threats.

1916
01:08:59,040 --> 01:09:03,520
So the first question we should probably

1917
01:09:00,719 --> 01:09:06,239
ask is what is a sock? Well, a sock is

1918
01:09:03,520 --> 01:09:07,600
short for a security operations center

1919
01:09:06,239 --> 01:09:09,279
and you're going to see many different

1920
01:09:07,600 --> 01:09:10,960
definitions of socks out there. You

1921
01:09:09,279 --> 01:09:12,880
know, some sources might define a sock

1922
01:09:10,960 --> 01:09:15,359
as the heartbeat of an organization

1923
01:09:12,880 --> 01:09:16,960
security posture. And some sources might

1924
01:09:15,359 --> 01:09:19,279
describe it as the frontline defense

1925
01:09:16,960 --> 01:09:21,520
against cyber attacks. And all of these

1926
01:09:19,279 --> 01:09:23,120
are essentially true. And part of this

1927
01:09:21,520 --> 01:09:24,560
reason, and something that's continually

1928
01:09:23,120 --> 01:09:26,640
going to come up throughout the course,

1929
01:09:24,560 --> 01:09:29,040
is that socks can vary greatly between

1930
01:09:26,640 --> 01:09:32,400
organizations based on their size or

1931
01:09:29,040 --> 01:09:34,799
industry or budget or maturity level.

1932
01:09:32,400 --> 01:09:37,000
But regardless of the terminology used,

1933
01:09:34,799 --> 01:09:39,920
the core essence of a sock remains the

1934
01:09:37,000 --> 01:09:41,920
same. A security operation center is a

1935
01:09:39,920 --> 01:09:44,000
centralized unit within an organization

1936
01:09:41,920 --> 01:09:45,319
that deals with security issues,

1937
01:09:44,000 --> 01:09:48,560
incidents, and

1938
01:09:45,319 --> 01:09:50,480
events. And this definition casts a wide

1939
01:09:48,560 --> 01:09:52,480
net. And that's kind of purposeful

1940
01:09:50,480 --> 01:09:54,159
because socks serve many different areas

1941
01:09:52,480 --> 01:09:56,880
of the business which we're going to

1942
01:09:54,159 --> 01:09:59,199
cover shortly. But the primary objective

1943
01:09:56,880 --> 01:10:01,600
of a sock is to minimize the impact of

1944
01:09:59,199 --> 01:10:03,760
cyber attacks and protect sensitive data

1945
01:10:01,600 --> 01:10:05,520
and to ensure the confidentiality,

1946
01:10:03,760 --> 01:10:08,400
integrity and availability of the

1947
01:10:05,520 --> 01:10:09,920
organization's assets. And so of course

1948
01:10:08,400 --> 01:10:11,600
a sock is going to be staffed with a

1949
01:10:09,920 --> 01:10:13,840
team and that team is going to consist

1950
01:10:11,600 --> 01:10:15,679
of security analysts and engineers and

1951
01:10:13,840 --> 01:10:16,880
incident responders and basically a

1952
01:10:15,679 --> 01:10:19,120
number of people that collaborate

1953
01:10:16,880 --> 01:10:20,960
together in order to monitor, detect,

1954
01:10:19,120 --> 01:10:23,120
analyze and respond to cyber security

1955
01:10:20,960 --> 01:10:24,840
incidents in real time. So let's cover

1956
01:10:23,120 --> 01:10:27,040
all these different stages in more

1957
01:10:24,840 --> 01:10:29,040
detail. So the first step in any

1958
01:10:27,040 --> 01:10:30,880
security operations is monitoring and

1959
01:10:29,040 --> 01:10:33,199
that involves continually observing the

1960
01:10:30,880 --> 01:10:35,040
organization's networks and systems and

1961
01:10:33,199 --> 01:10:37,760
digital assets for any signs of

1962
01:10:35,040 --> 01:10:39,120
suspicious activity. And so we use

1963
01:10:37,760 --> 01:10:41,600
things like our monitoring tools and

1964
01:10:39,120 --> 01:10:43,199
technologies like our SIMs, our security

1965
01:10:41,600 --> 01:10:45,800
information and event management systems

1966
01:10:43,199 --> 01:10:48,000
or our IDS or intrusion detection

1967
01:10:45,800 --> 01:10:50,000
systems. And we use these tools to

1968
01:10:48,000 --> 01:10:52,400
provide real-time visibility into things

1969
01:10:50,000 --> 01:10:54,080
like our network traffic or log data.

1970
01:10:52,400 --> 01:10:55,679
For example, suppose a sock team has

1971
01:10:54,080 --> 01:10:57,199
deployed an endpoint detection and

1972
01:10:55,679 --> 01:10:59,040
response solution like Crowdstrike

1973
01:10:57,199 --> 01:11:01,040
Falcon to all of the company's servers

1974
01:10:59,040 --> 01:11:03,199
and workstations and we use it to track

1975
01:11:01,040 --> 01:11:06,159
things like file access or suspicious

1976
01:11:03,199 --> 01:11:07,520
processes or login attempts. And so once

1977
01:11:06,159 --> 01:11:09,360
potential security incidents are

1978
01:11:07,520 --> 01:11:11,040
identified through our monitoring, sock

1979
01:11:09,360 --> 01:11:12,719
analysts employ various detection

1980
01:11:11,040 --> 01:11:14,880
techniques to confirm the actual

1981
01:11:12,719 --> 01:11:16,400
presence of threats. So this might

1982
01:11:14,880 --> 01:11:18,080
involve things like correlating multiple

1983
01:11:16,400 --> 01:11:20,159
security events together and searching

1984
01:11:18,080 --> 01:11:22,560
through our SIM to analyze patterns of

1985
01:11:20,159 --> 01:11:24,640
behavior based on the logs or statistics

1986
01:11:22,560 --> 01:11:26,640
or even threat intelligence feeds to

1987
01:11:24,640 --> 01:11:28,960
identify known indicators of compromise

1988
01:11:26,640 --> 01:11:31,280
or IOC's.

1989
01:11:28,960 --> 01:11:32,880
So to continue our example, suppose an

1990
01:11:31,280 --> 01:11:34,960
alert is triggered within our EDR

1991
01:11:32,880 --> 01:11:37,040
software, signifying that an employee,

1992
01:11:34,960 --> 01:11:39,040
Bob Jones, is attempting to access

1993
01:11:37,040 --> 01:11:41,280
sensitive files outside of their normal

1994
01:11:39,040 --> 01:11:42,880
working hours and location. So in that

1995
01:11:41,280 --> 01:11:44,560
case, we're actually analyzing Bob

1996
01:11:42,880 --> 01:11:46,560
Jones's behavior on his system, and

1997
01:11:44,560 --> 01:11:48,400
we're noticing, hey, this is an anomaly.

1998
01:11:46,560 --> 01:11:50,239
You know, Bob Jones typically operates

1999
01:11:48,400 --> 01:11:52,560
between 9:00 to 5, and in this case,

2000
01:11:50,239 --> 01:11:54,480
it's 3:00 a.m. his time. Why is he

2001
01:11:52,560 --> 01:11:56,000
trying to access files at this time? And

2002
01:11:54,480 --> 01:11:58,800
so we're going to get an alert on that.

2003
01:11:56,000 --> 01:12:00,560
and we're going to detect the event. And

2004
01:11:58,800 --> 01:12:02,640
so here we move on to the analysis

2005
01:12:00,560 --> 01:12:04,719
section. This is where analysts conduct

2006
01:12:02,640 --> 01:12:07,280
in-depth investigations to understand

2007
01:12:04,719 --> 01:12:08,719
the nature and scope of the incident. So

2008
01:12:07,280 --> 01:12:10,960
this will involve things like examining

2009
01:12:08,719 --> 01:12:12,800
the affected system or analyzing malware

2010
01:12:10,960 --> 01:12:14,640
samples or tracing an attacker's

2011
01:12:12,800 --> 01:12:17,000
tactics, techniques, and procedures or

2012
01:12:14,640 --> 01:12:19,360
TTPs to determine the extent of the

2013
01:12:17,000 --> 01:12:20,880
compromise. So in the case of our EDR

2014
01:12:19,360 --> 01:12:22,480
alert, an analyst would need to

2015
01:12:20,880 --> 01:12:24,400
investigate the alert to get more

2016
01:12:22,480 --> 01:12:26,560
information. They might have to review

2017
01:12:24,400 --> 01:12:28,800
Bob Jones's access history, right? His

2018
01:12:26,560 --> 01:12:30,280
recent login, the IP addresses of these

2019
01:12:28,800 --> 01:12:32,159
login to see if there's anything

2020
01:12:30,280 --> 01:12:33,760
anomalous. We might need to look at

2021
01:12:32,159 --> 01:12:35,679
other data points that we have available

2022
01:12:33,760 --> 01:12:36,760
to us to determine if that access

2023
01:12:35,679 --> 01:12:39,199
attempt is

2024
01:12:36,760 --> 01:12:41,360
malicious. And next, we have response,

2025
01:12:39,199 --> 01:12:43,360
right? So based on our findings, sock

2026
01:12:41,360 --> 01:12:45,360
analysts need to formulate and execute a

2027
01:12:43,360 --> 01:12:47,280
response plan to contain the threat or

2028
01:12:45,360 --> 01:12:49,520
mitigate its impact and restore normal

2029
01:12:47,280 --> 01:12:51,520
operations. So this might involve things

2030
01:12:49,520 --> 01:12:53,360
like isolating the affected system or

2031
01:12:51,520 --> 01:12:55,040
deploying patches or updates or

2032
01:12:53,360 --> 01:12:56,560
coordinating with other internal teams

2033
01:12:55,040 --> 01:12:58,440
like stakeholders or even law

2034
01:12:56,560 --> 01:13:00,960
enforcement or regulatory bodies as

2035
01:12:58,440 --> 01:13:02,640
needed. So to wrap up our EDR alert

2036
01:13:00,960 --> 01:13:04,640
example, maybe after thorough

2037
01:13:02,640 --> 01:13:06,719
investigation, we as an analyst find

2038
01:13:04,640 --> 01:13:09,040
that Bob Jones's access attempt is in

2039
01:13:06,719 --> 01:13:10,640
fact malicious, in which case we need to

2040
01:13:09,040 --> 01:13:12,239
respond and mitigate the threat and

2041
01:13:10,640 --> 01:13:14,800
contain the threat and do things like

2042
01:13:12,239 --> 01:13:16,640
revoke Bob Jones's access. we would need

2043
01:13:14,800 --> 01:13:17,760
to reset his credentials and maybe look

2044
01:13:16,640 --> 01:13:19,280
through our sim to see if we can

2045
01:13:17,760 --> 01:13:21,040
correlate other events and try to figure

2046
01:13:19,280 --> 01:13:22,800
out the root cause. We might need to

2047
01:13:21,040 --> 01:13:24,960
inform relevant stakeholders and conduct

2048
01:13:22,800 --> 01:13:26,320
a deeper investigation. And lastly, you

2049
01:13:24,960 --> 01:13:28,159
can see here on the right how this all

2050
01:13:26,320 --> 01:13:30,560
sort of works together and feeds into

2051
01:13:28,159 --> 01:13:32,320
each other within this life cycle. So,

2052
01:13:30,560 --> 01:13:34,239
as we're able to improve our monitoring,

2053
01:13:32,320 --> 01:13:35,920
we can then detect more incidents. And

2054
01:13:34,239 --> 01:13:38,080
as we analyze these incidents, we're

2055
01:13:35,920 --> 01:13:39,280
able to have more effective response.

2056
01:13:38,080 --> 01:13:40,880
And through everything we've learned

2057
01:13:39,280 --> 01:13:42,640
through our response and all of the

2058
01:13:40,880 --> 01:13:44,560
indicators that we've collected, we can

2059
01:13:42,640 --> 01:13:46,560
then feed that back into our monitoring

2060
01:13:44,560 --> 01:13:47,920
to enhance our detection capabilities.

2061
01:13:46,560 --> 01:13:49,760
So you can see how this all sort of

2062
01:13:47,920 --> 01:13:51,440
feeds into each other and they all build

2063
01:13:49,760 --> 01:13:53,080
upon each other.

2064
01:13:51,440 --> 01:13:55,120
So when we say that a sock is

2065
01:13:53,080 --> 01:13:56,640
centralized, you might be picturing in

2066
01:13:55,120 --> 01:13:58,320
your head something like the image on

2067
01:13:56,640 --> 01:14:00,719
the screen here where we have a giant

2068
01:13:58,320 --> 01:14:02,120
bustling room filled with rows and desks

2069
01:14:00,719 --> 01:14:03,840
and a bunch of analysts sitting

2070
01:14:02,120 --> 01:14:05,360
shoulder-to-shoulder and hundreds of

2071
01:14:03,840 --> 01:14:07,840
monitors at the front all displaying

2072
01:14:05,360 --> 01:14:09,520
intricate graphs and charts. And you

2073
01:14:07,840 --> 01:14:11,360
know, an image like this has long been

2074
01:14:09,520 --> 01:14:13,920
the common depiction of a sock in many

2075
01:14:11,360 --> 01:14:16,159
people's minds. However, as the modern

2076
01:14:13,920 --> 01:14:17,840
sock has evolved, especially in the wake

2077
01:14:16,159 --> 01:14:19,440
of things like the rise of remote work

2078
01:14:17,840 --> 01:14:21,760
and the digital transformation of

2079
01:14:19,440 --> 01:14:24,239
businesses, well, this sentiment is no

2080
01:14:21,760 --> 01:14:25,760
longer as common. Instead, the concept

2081
01:14:24,239 --> 01:14:28,080
of a centralized sock has kind of

2082
01:14:25,760 --> 01:14:29,840
undergone a transformation. So, rather

2083
01:14:28,080 --> 01:14:32,159
than a physical room housing a large

2084
01:14:29,840 --> 01:14:34,000
team of analysts, today's sock is

2085
01:14:32,159 --> 01:14:36,320
increasingly virtualized and distributed

2086
01:14:34,000 --> 01:14:38,000
in many cases. And you know with the

2087
01:14:36,320 --> 01:14:39,679
advancement of cloud technologies and

2088
01:14:38,000 --> 01:14:42,159
things like virtual private networks and

2089
01:14:39,679 --> 01:14:43,600
collaboration platforms well now sock

2090
01:14:42,159 --> 01:14:45,040
teams are able to operate from almost

2091
01:14:43,600 --> 01:14:47,360
anywhere in the world without the need

2092
01:14:45,040 --> 01:14:49,520
for a centralized physical location.

2093
01:14:47,360 --> 01:14:51,400
However, the sock still logically refers

2094
01:14:49,520 --> 01:14:53,600
to that centralized team within the

2095
01:14:51,400 --> 01:14:55,920
organization. And we can also take a

2096
01:14:53,600 --> 01:14:58,400
step back in time and understand how the

2097
01:14:55,920 --> 01:15:00,080
concept of a sock has evolved over time.

2098
01:14:58,400 --> 01:15:02,000
And maybe in doing so we can better

2099
01:15:00,080 --> 01:15:03,920
understand how the priorities and the

2100
01:15:02,000 --> 01:15:05,600
functions within a soach have shifted to

2101
01:15:03,920 --> 01:15:08,159
meet the changing landscape of threats

2102
01:15:05,600 --> 01:15:09,920
and challenges. But at a high level

2103
01:15:08,159 --> 01:15:11,760
we've essentially seen changes from a

2104
01:15:09,920 --> 01:15:14,320
primary focus on just availability

2105
01:15:11,760 --> 01:15:15,760
monitoring to more reactive monitoring.

2106
01:15:14,320 --> 01:15:17,520
And from there we've moved on to

2107
01:15:15,760 --> 01:15:20,400
proactive monitoring and now to

2108
01:15:17,520 --> 01:15:22,800
proactive automation. And so the initial

2109
01:15:20,400 --> 01:15:24,800
concept of a sock well started well

2110
01:15:22,800 --> 01:15:26,880
before the 2000s and traces back to the

2111
01:15:24,800 --> 01:15:28,679
early days of network security primarily

2112
01:15:26,880 --> 01:15:30,800
with government and defense

2113
01:15:28,679 --> 01:15:33,440
organizations. In fact, we can go all

2114
01:15:30,800 --> 01:15:35,360
the way back to 1975 with the United

2115
01:15:33,440 --> 01:15:37,600
States National Security Operations

2116
01:15:35,360 --> 01:15:39,120
Center. And this picture is so cool

2117
01:15:37,600 --> 01:15:41,440
because it laid the groundwork for what

2118
01:15:39,120 --> 01:15:43,199
would eventually become the modern sock

2119
01:15:41,440 --> 01:15:45,440
because back then every security

2120
01:15:43,199 --> 01:15:47,280
solution and control and tool was

2121
01:15:45,440 --> 01:15:48,800
customuilt to detect very specific

2122
01:15:47,280 --> 01:15:50,560
threats. and most commonly back then

2123
01:15:48,800 --> 01:15:52,199
were dealing with availability issues

2124
01:15:50,560 --> 01:15:54,560
and malicious code running within a

2125
01:15:52,199 --> 01:15:56,719
network. But during the late '9s and

2126
01:15:54,560 --> 01:15:58,719
early 2000s, cyber threats kind of

2127
01:15:56,719 --> 01:16:00,560
evolved and organizations began to

2128
01:15:58,719 --> 01:16:02,719
recognize the importance of fortifying

2129
01:16:00,560 --> 01:16:04,080
their digital perimeter. And the

2130
01:16:02,719 --> 01:16:06,080
emphasis shifted from initial

2131
01:16:04,080 --> 01:16:08,080
availability monitoring towards

2132
01:16:06,080 --> 01:16:09,520
perimeter defense with companies

2133
01:16:08,080 --> 01:16:11,679
spending investments in technologies

2134
01:16:09,520 --> 01:16:14,320
like firewalls and antivirus software

2135
01:16:11,679 --> 01:16:16,400
and intrusion detection systems. But the

2136
01:16:14,320 --> 01:16:18,320
focus was still largely reactive and

2137
01:16:16,400 --> 01:16:20,320
sock teams were more so responding to

2138
01:16:18,320 --> 01:16:22,080
incidents as they occurred. But of

2139
01:16:20,320 --> 01:16:24,880
course, the landscape of cyber threats

2140
01:16:22,080 --> 01:16:26,640
continued to evolve. And around 2007, we

2141
01:16:24,880 --> 01:16:29,520
saw the rise of advanced persistent

2142
01:16:26,640 --> 01:16:31,280
threats or a kind of introduced a new

2143
01:16:29,520 --> 01:16:33,280
breed of attacks that haven't previously

2144
01:16:31,280 --> 01:16:35,280
been seen before that operated in this

2145
01:16:33,280 --> 01:16:37,920
low and slow type of environment and

2146
01:16:35,280 --> 01:16:39,440
evaded traditional security methods. And

2147
01:16:37,920 --> 01:16:40,960
these types of attacks meant that an

2148
01:16:39,440 --> 01:16:42,840
adversary could be in your network for

2149
01:16:40,960 --> 01:16:44,800
months or even years without any

2150
01:16:42,840 --> 01:16:46,719
detection. And they could quietly

2151
01:16:44,800 --> 01:16:48,440
excfiltrate data or start laying the

2152
01:16:46,719 --> 01:16:50,800
groundwork for more large or devastating

2153
01:16:48,440 --> 01:16:52,960
breaches. And so this prompted a

2154
01:16:50,800 --> 01:16:55,040
transition from reactive to proactive

2155
01:16:52,960 --> 01:16:56,800
monitoring within sock environments. And

2156
01:16:55,040 --> 01:16:58,719
this is sometimes referred to as the age

2157
01:16:56,800 --> 01:17:00,560
of the SIM or the security information

2158
01:16:58,719 --> 01:17:02,000
and event management systems, which

2159
01:17:00,560 --> 01:17:04,239
we'll get into much more detail later

2160
01:17:02,000 --> 01:17:06,000
on. This shift in mindset laid the

2161
01:17:04,239 --> 01:17:07,920
groundwork for what is today the modern

2162
01:17:06,000 --> 01:17:10,719
sock which adopted more of a proactive

2163
01:17:07,920 --> 01:17:12,640
stance towards cyber security. So rather

2164
01:17:10,719 --> 01:17:14,560
than just reacting to incidents, sock

2165
01:17:12,640 --> 01:17:16,320
teams began to actively monitor for

2166
01:17:14,560 --> 01:17:17,920
signs of potential threats and using

2167
01:17:16,320 --> 01:17:20,320
things like threat hunting techniques to

2168
01:17:17,920 --> 01:17:21,840
proactively hunt for evil. And you know

2169
01:17:20,320 --> 01:17:23,360
there are several other generations of

2170
01:17:21,840 --> 01:17:25,040
sock history that we didn't get into,

2171
01:17:23,360 --> 01:17:26,640
but I don't think it's that important.

2172
01:17:25,040 --> 01:17:28,560
You know, the main takeaway here is that

2173
01:17:26,640 --> 01:17:30,800
there was a shift between reactive

2174
01:17:28,560 --> 01:17:33,600
perimeter defense to proactive threat

2175
01:17:30,800 --> 01:17:35,760
detection and response. And so, what

2176
01:17:33,600 --> 01:17:37,600
actually makes up a sock? You know, it's

2177
01:17:35,760 --> 01:17:39,280
not just a magical entity or concept

2178
01:17:37,600 --> 01:17:41,440
that CISOs love to brag about and

2179
01:17:39,280 --> 01:17:43,360
vendors love to sell products to. There

2180
01:17:41,440 --> 01:17:44,760
are actual tangible things that make up

2181
01:17:43,360 --> 01:17:47,120
the team and its

2182
01:17:44,760 --> 01:17:49,600
capabilities. So, every sock is equipped

2183
01:17:47,120 --> 01:17:51,360
with personnel, with protocols, and

2184
01:17:49,600 --> 01:17:53,120
technical resources that all work

2185
01:17:51,360 --> 01:17:54,880
together to cover the functions that

2186
01:17:53,120 --> 01:17:56,800
we've talked about earlier.

2187
01:17:54,880 --> 01:17:59,360
And you know, we mentioned personnel and

2188
01:17:56,800 --> 01:18:00,880
protocols and technical resources, but

2189
01:17:59,360 --> 01:18:02,480
let's break that down a bit because they

2190
01:18:00,880 --> 01:18:04,640
are essentially the definitive pillars

2191
01:18:02,480 --> 01:18:06,080
that make up a sock. And another way

2192
01:18:04,640 --> 01:18:08,440
that we can think of this is through

2193
01:18:06,080 --> 01:18:10,320
people, processes, and

2194
01:18:08,440 --> 01:18:11,920
technology. So, of course, we have

2195
01:18:10,320 --> 01:18:14,159
people. These are the personnel within

2196
01:18:11,920 --> 01:18:16,719
the sock that form that human element or

2197
01:18:14,159 --> 01:18:18,320
that backbone of operations. And often

2198
01:18:16,719 --> 01:18:20,880
this human element is crucial in

2199
01:18:18,320 --> 01:18:22,400
ensuring how effective a sock can be.

2200
01:18:20,880 --> 01:18:24,320
This personnel includes people like

2201
01:18:22,400 --> 01:18:26,640
analysts and incident responders and

2202
01:18:24,320 --> 01:18:28,480
engineers and threat hunters who all

2203
01:18:26,640 --> 01:18:30,080
work together to actually analyze,

2204
01:18:28,480 --> 01:18:31,920
respond to and resolve security

2205
01:18:30,080 --> 01:18:33,800
incidents or do things like build out

2206
01:18:31,920 --> 01:18:37,199
detection capabilities or manage the

2207
01:18:33,800 --> 01:18:38,719
team. We also have processes. So teams

2208
01:18:37,199 --> 01:18:40,320
also need to build out descriptive

2209
01:18:38,719 --> 01:18:42,719
processes that streamline their

2210
01:18:40,320 --> 01:18:44,640
operations and ensure consistency,

2211
01:18:42,719 --> 01:18:46,719
efficiency, and agility to manage and

2212
01:18:44,640 --> 01:18:48,800
respond to incidents. So you might have

2213
01:18:46,719 --> 01:18:50,719
specific incident response playbooks or

2214
01:18:48,800 --> 01:18:52,239
detection and response processes that

2215
01:18:50,719 --> 01:18:54,400
the team can follow during the life

2216
01:18:52,239 --> 01:18:56,159
cycle of an incident or event. For

2217
01:18:54,400 --> 01:18:58,080
example, when an alert is triggered,

2218
01:18:56,159 --> 01:18:59,760
well, what predefined processes or

2219
01:18:58,080 --> 01:19:01,600
procedures are in place to dictate how

2220
01:18:59,760 --> 01:19:03,120
the sock responds? You know, what

2221
01:19:01,600 --> 01:19:04,719
escalation paths are there? What

2222
01:19:03,120 --> 01:19:06,880
investigation steps or mitigation

2223
01:19:04,719 --> 01:19:08,719
measures can be taken? Of course, that's

2224
01:19:06,880 --> 01:19:10,640
not an exhaustive list, but just

2225
01:19:08,719 --> 01:19:12,560
understand that processes drive the way

2226
01:19:10,640 --> 01:19:14,880
in which people within the sock conduct

2227
01:19:12,560 --> 01:19:17,120
their operations. Lastly, we have

2228
01:19:14,880 --> 01:19:19,280
technology. And technology provides the

2229
01:19:17,120 --> 01:19:21,360
tools and infrastructure necessary for

2230
01:19:19,280 --> 01:19:24,000
the people within the sock to do their

2231
01:19:21,360 --> 01:19:25,600
jobs and follow processes. And of

2232
01:19:24,000 --> 01:19:27,440
course, this is a non-exhaustive list

2233
01:19:25,600 --> 01:19:29,280
again, but concepts that fall into the

2234
01:19:27,440 --> 01:19:31,840
technology category can include things

2235
01:19:29,280 --> 01:19:34,320
like our SIM platform, our IDS or IPS

2236
01:19:31,840 --> 01:19:36,159
systems, our EDR solutions, our soar

2237
01:19:34,320 --> 01:19:37,560
systems, vulnerability management tools,

2238
01:19:36,159 --> 01:19:39,600
or even our threat intelligence

2239
01:19:37,560 --> 01:19:41,520
platforms. And of course, we're going to

2240
01:19:39,600 --> 01:19:43,360
cover these tools and more in much more

2241
01:19:41,520 --> 01:19:45,280
detail in the following lessons. and

2242
01:19:43,360 --> 01:19:47,199
we'll also get to directly configure and

2243
01:19:45,280 --> 01:19:48,880
interact with several of these tools to

2244
01:19:47,199 --> 01:19:51,280
gain that hands-on experience with them

2245
01:19:48,880 --> 01:19:52,800
in the following domains. Now, I also

2246
01:19:51,280 --> 01:19:54,880
want to quickly touch on the concept of

2247
01:19:52,800 --> 01:19:57,040
the CIA triad and how security

2248
01:19:54,880 --> 01:19:58,880
operations centers use this model as a

2249
01:19:57,040 --> 01:20:01,360
fundamental principle that basically

2250
01:19:58,880 --> 01:20:03,280
guide every single practice decision and

2251
01:20:01,360 --> 01:20:05,040
control that they make. And more

2252
01:20:03,280 --> 01:20:06,640
specifically, the sock supports the

2253
01:20:05,040 --> 01:20:08,760
business by upholding these principles

2254
01:20:06,640 --> 01:20:11,480
of the CIA triad. So, we have

2255
01:20:08,760 --> 01:20:13,280
confidentiality, we have integrity and

2256
01:20:11,480 --> 01:20:14,640
availability. We're going to cover each

2257
01:20:13,280 --> 01:20:16,800
of these in more detail in a future

2258
01:20:14,640 --> 01:20:18,880
lesson, but at a high level, the sock

2259
01:20:16,800 --> 01:20:20,719
aims to ensure the confidentiality,

2260
01:20:18,880 --> 01:20:23,280
integrity, and availability of all

2261
01:20:20,719 --> 01:20:24,480
assets within the organization. And we

2262
01:20:23,280 --> 01:20:26,080
can think about how all of these

2263
01:20:24,480 --> 01:20:28,800
concepts kind of intersect during an

2264
01:20:26,080 --> 01:20:30,560
incident, right? So, for example, in the

2265
01:20:28,800 --> 01:20:32,400
case of a critical server failing, maybe

2266
01:20:30,560 --> 01:20:33,679
we had a hardware disc failure in one of

2267
01:20:32,400 --> 01:20:36,400
the servers and we did not have

2268
01:20:33,679 --> 01:20:38,320
redundancy in place. Well, in this case,

2269
01:20:36,400 --> 01:20:40,239
we'd be facing an availability issue

2270
01:20:38,320 --> 01:20:42,719
because we are losing access to the data

2271
01:20:40,239 --> 01:20:44,719
stored on that server. So in this case

2272
01:20:42,719 --> 01:20:46,719
the sock would rely on the people you

2273
01:20:44,719 --> 01:20:48,960
know the experts that can leverage their

2274
01:20:46,719 --> 01:20:50,880
expertise of skilled analysts and other

2275
01:20:48,960 --> 01:20:53,520
IT personnel who understand the

2276
01:20:50,880 --> 01:20:55,199
intricacies of the system and these

2277
01:20:53,520 --> 01:20:57,120
people would then enact pre-established

2278
01:20:55,199 --> 01:20:59,280
recovery redundancy or failover

2279
01:20:57,120 --> 01:21:01,600
processes to mitigate the impact of the

2280
01:20:59,280 --> 01:21:03,440
availability issue and lastly they would

2281
01:21:01,600 --> 01:21:05,760
utilize technology solutions like

2282
01:21:03,440 --> 01:21:08,080
automated backup software or redundancy

2283
01:21:05,760 --> 01:21:10,560
failover solutions that can restore and

2284
01:21:08,080 --> 01:21:12,080
bring up the affected server. And lastly

2285
01:21:10,560 --> 01:21:14,159
here, let's take a look at some of the

2286
01:21:12,080 --> 01:21:16,000
key functions of a sock. Right? So, we

2287
01:21:14,159 --> 01:21:17,159
talked about what makes up the sock and

2288
01:21:16,000 --> 01:21:19,280
the value that they add to

2289
01:21:17,159 --> 01:21:21,280
organizations, but what specific

2290
01:21:19,280 --> 01:21:23,679
objectives do they actually serve on a

2291
01:21:21,280 --> 01:21:24,960
day-to-day basis? Now, this won't be an

2292
01:21:23,679 --> 01:21:26,719
exhaustive list, but it's going to

2293
01:21:24,960 --> 01:21:28,880
highlight some of the highle functions

2294
01:21:26,719 --> 01:21:29,800
that a typical sock will perform within

2295
01:21:28,880 --> 01:21:32,080
an

2296
01:21:29,800 --> 01:21:33,920
organization. And we can generally break

2297
01:21:32,080 --> 01:21:36,159
down the key functions of a sock into

2298
01:21:33,920 --> 01:21:38,159
two distinct categories. We have

2299
01:21:36,159 --> 01:21:40,480
reactive functions and proactive

2300
01:21:38,159 --> 01:21:41,920
functions. So on the reactive side,

2301
01:21:40,480 --> 01:21:43,920
these are functions that the sock

2302
01:21:41,920 --> 01:21:46,560
performs in response to cyber security

2303
01:21:43,920 --> 01:21:48,400
incidents as they occur. So we have

2304
01:21:46,560 --> 01:21:50,880
things like the primary role of the sock

2305
01:21:48,400 --> 01:21:52,400
monitoring and detection. So this is

2306
01:21:50,880 --> 01:21:54,239
where the sock team is going to monitor

2307
01:21:52,400 --> 01:21:56,480
network and system logs or endpoint

2308
01:21:54,239 --> 01:21:58,639
devices, security alerts and other

2309
01:21:56,480 --> 01:22:00,560
sources of data to identify potential

2310
01:21:58,639 --> 01:22:02,800
security incidents and threats in real

2311
01:22:00,560 --> 01:22:04,400
time. So we're going to use tools that

2312
01:22:02,800 --> 01:22:06,480
we have available to us like our SIM

2313
01:22:04,400 --> 01:22:08,360
platform, our IDS systems, our threat

2314
01:22:06,480 --> 01:22:10,480
intelligence feeds or even manual log

2315
01:22:08,360 --> 01:22:12,880
analysis. And next we have incident

2316
01:22:10,480 --> 01:22:14,639
response. So when a security incident is

2317
01:22:12,880 --> 01:22:17,120
detected, the sock is going to initiate

2318
01:22:14,639 --> 01:22:19,199
an incident response or an IR process to

2319
01:22:17,120 --> 01:22:21,120
investigate, contain, and mitigate the

2320
01:22:19,199 --> 01:22:22,719
threat. So this is going to involve

2321
01:22:21,120 --> 01:22:24,719
actually analyzing the incident and

2322
01:22:22,719 --> 01:22:26,480
gathering evidence and coordinating with

2323
01:22:24,719 --> 01:22:28,320
relevant stakeholders to minimize the

2324
01:22:26,480 --> 01:22:30,800
impact and restore normal business

2325
01:22:28,320 --> 01:22:32,480
operations. And depending on the size of

2326
01:22:30,800 --> 01:22:34,400
the sock, you might have forensic

2327
01:22:32,480 --> 01:22:35,600
analysis functions as well. You know,

2328
01:22:34,400 --> 01:22:37,679
this could be something that's conducted

2329
01:22:35,600 --> 01:22:39,040
inhouse or maybe coordinated with a

2330
01:22:37,679 --> 01:22:41,679
third party that specifically does

2331
01:22:39,040 --> 01:22:43,520
forensic examinations. But overall, this

2332
01:22:41,679 --> 01:22:45,840
is going to include conducting detailed

2333
01:22:43,520 --> 01:22:48,159
forensic analysis to determine the cause

2334
01:22:45,840 --> 01:22:49,920
and extent of any security breaches.

2335
01:22:48,159 --> 01:22:52,159
This is also going to include preserving

2336
01:22:49,920 --> 01:22:54,719
and collecting digital evidence for any

2337
01:22:52,159 --> 01:22:56,239
potential legal or regulatory purposes.

2338
01:22:54,719 --> 01:22:58,159
And depending on the size and severity

2339
01:22:56,239 --> 01:22:59,600
of the incident, the team may have to

2340
01:22:58,159 --> 01:23:02,120
collaborate with law enforcement

2341
01:22:59,600 --> 01:23:04,000
agencies or external forensic experts as

2342
01:23:02,120 --> 01:23:05,679
necessary. And lastly, here we have

2343
01:23:04,000 --> 01:23:07,360
malware analysis. And again, depending

2344
01:23:05,679 --> 01:23:08,400
on the size of your sock, this is

2345
01:23:07,360 --> 01:23:10,080
something that could be conducted

2346
01:23:08,400 --> 01:23:11,760
in-house or coordinated with a third

2347
01:23:10,080 --> 01:23:12,960
party. And this could involve running

2348
01:23:11,760 --> 01:23:15,360
malware samples in controlled

2349
01:23:12,960 --> 01:23:17,040
environments like sandboxes or VMs to

2350
01:23:15,360 --> 01:23:19,199
understand their actions and potential

2351
01:23:17,040 --> 01:23:20,800
impact on your systems or networks. It

2352
01:23:19,199 --> 01:23:22,719
could also involve things like reverse

2353
01:23:20,800 --> 01:23:25,040
engineering and deoffiscating malware to

2354
01:23:22,719 --> 01:23:26,719
study its behavior. But the goal here is

2355
01:23:25,040 --> 01:23:28,719
ultimately to collect indicators of

2356
01:23:26,719 --> 01:23:30,560
compromise and attempt to attribute the

2357
01:23:28,719 --> 01:23:32,480
malware to a specific threat actor or

2358
01:23:30,560 --> 01:23:34,719
group to enhance your threat detection

2359
01:23:32,480 --> 01:23:36,800
within the organization and inform more

2360
01:23:34,719 --> 01:23:38,800
proactive defense measures. And speaking

2361
01:23:36,800 --> 01:23:40,480
of which, we have proactive functions as

2362
01:23:38,800 --> 01:23:42,239
well. And these are the functions that

2363
01:23:40,480 --> 01:23:44,320
the sock performs to prevent cyber

2364
01:23:42,239 --> 01:23:46,719
security incidents before they occur or

2365
01:23:44,320 --> 01:23:48,320
to mitigate potential vulnerabilities.

2366
01:23:46,719 --> 01:23:50,080
So we have threat intelligence and this

2367
01:23:48,320 --> 01:23:52,320
is where the sock team actively gathers

2368
01:23:50,080 --> 01:23:54,639
and analyzes threat intelligence data

2369
01:23:52,320 --> 01:23:56,560
either from internal or external sources

2370
01:23:54,639 --> 01:23:58,560
so they can stay informed about emerging

2371
01:23:56,560 --> 01:24:00,560
threats or indicators of compromise

2372
01:23:58,560 --> 01:24:02,400
vulnerabilities as well as other attack

2373
01:24:00,560 --> 01:24:04,239
techniques. And of course the goal here

2374
01:24:02,400 --> 01:24:06,239
is to feed that intelligence into our

2375
01:24:04,239 --> 01:24:08,159
detection tools themselves so we can

2376
01:24:06,239 --> 01:24:10,639
then enhance our detection capabilities

2377
01:24:08,159 --> 01:24:12,239
and find incidents sooner. Which kind of

2378
01:24:10,639 --> 01:24:13,520
leads us into threat hunting. So this is

2379
01:24:12,239 --> 01:24:14,960
where the sock team is going to

2380
01:24:13,520 --> 01:24:17,040
proactively search for signs of

2381
01:24:14,960 --> 01:24:18,880
malicious activity or intrusions that

2382
01:24:17,040 --> 01:24:21,199
might have evaded traditional security

2383
01:24:18,880 --> 01:24:23,280
controls or detection mechanisms. So by

2384
01:24:21,199 --> 01:24:25,679
performing specific hunts and analyzing

2385
01:24:23,280 --> 01:24:27,199
logs and doing detailed searches, we

2386
01:24:25,679 --> 01:24:29,120
attempt to identify indicators of

2387
01:24:27,199 --> 01:24:30,560
compromise and potential threats that

2388
01:24:29,120 --> 01:24:32,880
might be lurking within our environment

2389
01:24:30,560 --> 01:24:34,560
that we haven't detected yet. And next

2390
01:24:32,880 --> 01:24:35,920
we have vulnerability management. And

2391
01:24:34,560 --> 01:24:37,920
some might argue that this could be

2392
01:24:35,920 --> 01:24:39,760
under reactive or maybe a blend between

2393
01:24:37,920 --> 01:24:41,679
reactive and proactive. And I wouldn't

2394
01:24:39,760 --> 01:24:43,360
disagree because while it does involve

2395
01:24:41,679 --> 01:24:45,280
reactively responding to vulnerabilities

2396
01:24:43,360 --> 01:24:47,280
that are identified, it does so in a

2397
01:24:45,280 --> 01:24:49,199
more proactive way to mitigate them and

2398
01:24:47,280 --> 01:24:50,400
remediate them before they're exploited.

2399
01:24:49,199 --> 01:24:51,679
But essentially, vulnerability

2400
01:24:50,400 --> 01:24:53,280
management is when the team works

2401
01:24:51,679 --> 01:24:55,600
closely with other departments like the

2402
01:24:53,280 --> 01:24:57,440
IT team or the development team to

2403
01:24:55,600 --> 01:24:59,840
identify and address vulnerabilities

2404
01:24:57,440 --> 01:25:01,199
within the organization's assets. So

2405
01:24:59,840 --> 01:25:03,679
this is going to involve performing

2406
01:25:01,199 --> 01:25:05,679
vulnerability scans and assessments and

2407
01:25:03,679 --> 01:25:06,880
identifying actual vulnerabilities and

2408
01:25:05,679 --> 01:25:08,480
implementing things like patch

2409
01:25:06,880 --> 01:25:10,159
management schedules and ensuring that

2410
01:25:08,480 --> 01:25:11,920
the organization can remediate

2411
01:25:10,159 --> 01:25:14,320
identified vulnerabilities in a timely

2412
01:25:11,920 --> 01:25:16,320
manner. And lastly here we have security

2413
01:25:14,320 --> 01:25:18,080
awareness training. So the sock

2414
01:25:16,320 --> 01:25:19,760
personnel themselves often play a role

2415
01:25:18,080 --> 01:25:21,520
in promoting cyber security awareness

2416
01:25:19,760 --> 01:25:23,280
within the organization. So they might

2417
01:25:21,520 --> 01:25:25,440
do things like educate employees on best

2418
01:25:23,280 --> 01:25:26,719
practices or write up security policies

2419
01:25:25,440 --> 01:25:28,719
and procedures and make sure that

2420
01:25:26,719 --> 01:25:30,320
employees read them or even provide

2421
01:25:28,719 --> 01:25:31,920
training to enhance the overall security

2422
01:25:30,320 --> 01:25:33,520
awareness and help prevent security

2423
01:25:31,920 --> 01:25:35,520
incidents in the future. They might even

2424
01:25:33,520 --> 01:25:37,520
go as far as to simulate fishing attacks

2425
01:25:35,520 --> 01:25:39,440
and gauge how effective the organization

2426
01:25:37,520 --> 01:25:41,280
is in responding to them or falling

2427
01:25:39,440 --> 01:25:43,120
victim to them. But ultimately the end

2428
01:25:41,280 --> 01:25:47,239
goal here is to mitigate human error

2429
01:25:43,120 --> 01:25:47,239
that often leads to incidents.

2430
01:25:48,960 --> 01:25:52,480
Let's dive into a bit of a refresher on

2431
01:25:50,960 --> 01:25:54,800
some of the important information

2432
01:25:52,480 --> 01:25:56,080
security concepts and terminology that's

2433
01:25:54,800 --> 01:25:58,000
going to come up time and time again

2434
01:25:56,080 --> 01:25:59,520
throughout this course. And the goal

2435
01:25:58,000 --> 01:26:01,440
here is not to just throw a bunch of

2436
01:25:59,520 --> 01:26:02,800
terms at you for memorization, but to

2437
01:26:01,440 --> 01:26:04,560
gently introduce some of the

2438
01:26:02,800 --> 01:26:06,560
foundational concepts of what it means

2439
01:26:04,560 --> 01:26:08,000
to work in a sock, but also some of

2440
01:26:06,560 --> 01:26:10,320
these concepts might actually get thrown

2441
01:26:08,000 --> 01:26:12,000
at you in interviews. So, it is best to

2442
01:26:10,320 --> 01:26:13,120
have a solid grasp on them. But if

2443
01:26:12,000 --> 01:26:14,639
you've been pretty familiar with

2444
01:26:13,120 --> 01:26:16,080
everything so far, or if you have a

2445
01:26:14,639 --> 01:26:17,040
background in security, well, you're

2446
01:26:16,080 --> 01:26:19,040
going to breeze right through this

2447
01:26:17,040 --> 01:26:20,400
section. And if not, don't worry because

2448
01:26:19,040 --> 01:26:22,400
we're going to hopefully fill in those

2449
01:26:20,400 --> 01:26:23,760
gaps for you here. So, let's start out

2450
01:26:22,400 --> 01:26:26,480
with something we've briefly mentioned

2451
01:26:23,760 --> 01:26:28,480
in the previous lesson, the CIA triad.

2452
01:26:26,480 --> 01:26:30,639
And this triad is a foundational concept

2453
01:26:28,480 --> 01:26:31,880
in cyber security that represents the

2454
01:26:30,639 --> 01:26:33,600
three core principles of

2455
01:26:31,880 --> 01:26:35,280
confidentiality, integrity, and

2456
01:26:33,600 --> 01:26:37,600
availability. And essentially any

2457
01:26:35,280 --> 01:26:39,280
security control or process or tool that

2458
01:26:37,600 --> 01:26:40,800
you implement within your organization

2459
01:26:39,280 --> 01:26:42,639
is aimed to protect one of these

2460
01:26:40,800 --> 01:26:44,480
principles. So let's cover them a bit.

2461
01:26:42,639 --> 01:26:45,920
Let's talk about confidentiality. And

2462
01:26:44,480 --> 01:26:47,840
this is going to ensure that information

2463
01:26:45,920 --> 01:26:49,840
is accessible only to those who are

2464
01:26:47,840 --> 01:26:51,440
authorized to access it. And we can

2465
01:26:49,840 --> 01:26:53,520
implement many security controls that

2466
01:26:51,440 --> 01:26:55,679
focus on protecting the confidentiality

2467
01:26:53,520 --> 01:26:57,600
of data. And most often you'll see it

2468
01:26:55,679 --> 01:26:59,040
associated with encryption. So, if

2469
01:26:57,600 --> 01:27:00,800
you're not familiar, that's going to be

2470
01:26:59,040 --> 01:27:02,639
converting the data into a form that can

2471
01:27:00,800 --> 01:27:04,880
only be read or processed after it's

2472
01:27:02,639 --> 01:27:06,000
been decrypted using an appropriate key.

2473
01:27:04,880 --> 01:27:07,600
Therefore, if someone who is not

2474
01:27:06,000 --> 01:27:09,520
authorized or does not possess that key

2475
01:27:07,600 --> 01:27:11,040
gains access to the encrypted data,

2476
01:27:09,520 --> 01:27:12,480
well, they won't be able to read it. And

2477
01:27:11,040 --> 01:27:13,760
honestly, we use encryption all over

2478
01:27:12,480 --> 01:27:15,679
throughout our environments and even

2479
01:27:13,760 --> 01:27:17,199
within the sock. For example, we're

2480
01:27:15,679 --> 01:27:19,600
going to need to encrypt data stored at

2481
01:27:17,199 --> 01:27:22,000
rest. Things like hard drives or backups

2482
01:27:19,600 --> 01:27:24,239
or like log archives from our SIM or

2483
01:27:22,000 --> 01:27:26,080
even data in processing in transit. For

2484
01:27:24,239 --> 01:27:27,679
example, right now you're watching this

2485
01:27:26,080 --> 01:27:29,679
video. You're accessing it through an

2486
01:27:27,679 --> 01:27:31,520
HTTPS protocol, which is the web

2487
01:27:29,679 --> 01:27:33,679
protocol that integrates TLS or

2488
01:27:31,520 --> 01:27:35,760
transport layer security that introduces

2489
01:27:33,679 --> 01:27:37,040
encryption within the connection. But

2490
01:27:35,760 --> 01:27:38,880
there are other controls related to

2491
01:27:37,040 --> 01:27:40,880
confidentiality as well. We can think

2492
01:27:38,880 --> 01:27:42,560
about access controls like access

2493
01:27:40,880 --> 01:27:44,639
control mechanisms like authentication

2494
01:27:42,560 --> 01:27:46,400
and authorization processes. Basically,

2495
01:27:44,639 --> 01:27:48,560
anything that can restrict access of

2496
01:27:46,400 --> 01:27:50,639
information based on a user's identity,

2497
01:27:48,560 --> 01:27:52,239
roles or any other attributes. We can

2498
01:27:50,639 --> 01:27:53,840
also tackle this from a process side,

2499
01:27:52,239 --> 01:27:55,600
right? So we have data classification

2500
01:27:53,840 --> 01:27:57,280
for example. So we can classify data

2501
01:27:55,600 --> 01:27:59,280
stored within the organization or within

2502
01:27:57,280 --> 01:28:01,280
its systems based on its sensitivity

2503
01:27:59,280 --> 01:28:03,600
level. For example, data might be

2504
01:28:01,280 --> 01:28:06,000
categorized as public for internal use

2505
01:28:03,600 --> 01:28:07,679
only or strictly confidential. You know

2506
01:28:06,000 --> 01:28:09,760
this classification helps us determine

2507
01:28:07,679 --> 01:28:11,360
the appropriate level of protection and

2508
01:28:09,760 --> 01:28:13,600
access controls that we need for each

2509
01:28:11,360 --> 01:28:15,360
type of data. Next we have integrity.

2510
01:28:13,600 --> 01:28:17,600
And integrity ensures that the data

2511
01:28:15,360 --> 01:28:19,280
remains accurate, complete and also

2512
01:28:17,600 --> 01:28:21,360
unaltered during its storage,

2513
01:28:19,280 --> 01:28:22,639
transmission or even its processing. So

2514
01:28:21,360 --> 01:28:24,639
this is where we protect data from

2515
01:28:22,639 --> 01:28:27,199
unauthorized modifications or deletions

2516
01:28:24,639 --> 01:28:29,120
or insertions whether it's accidental or

2517
01:28:27,199 --> 01:28:30,639
malicious. And this comes into play a

2518
01:28:29,120 --> 01:28:32,320
lot actually during digital forensics

2519
01:28:30,639 --> 01:28:34,400
where we need to document a proper chain

2520
01:28:32,320 --> 01:28:36,000
of custody of evidence and be able to

2521
01:28:34,400 --> 01:28:37,840
prove and present that the evidence that

2522
01:28:36,000 --> 01:28:39,440
we submit has not been tampered with.

2523
01:28:37,840 --> 01:28:40,960
And often we do that through hashing

2524
01:28:39,440 --> 01:28:43,120
algorithms and things like write

2525
01:28:40,960 --> 01:28:44,480
blockers to prevent modifications. We're

2526
01:28:43,120 --> 01:28:46,320
going to get deeper into that of course

2527
01:28:44,480 --> 01:28:47,760
during the digital forensics section.

2528
01:28:46,320 --> 01:28:49,360
But we can also implement things like

2529
01:28:47,760 --> 01:28:51,280
audit trails that keep detailed records

2530
01:28:49,360 --> 01:28:53,040
of data access and allow us to track

2531
01:28:51,280 --> 01:28:55,280
changes and allow us to identify any

2532
01:28:53,040 --> 01:28:57,199
unauthorized changes. And lastly, we

2533
01:28:55,280 --> 01:28:59,120
have availability. And this ensures that

2534
01:28:57,199 --> 01:29:01,280
information and resources are actually

2535
01:28:59,120 --> 01:29:02,960
accessible and usable when we need it.

2536
01:29:01,280 --> 01:29:04,880
And commonly you'll encounter controls

2537
01:29:02,960 --> 01:29:06,880
such as things that prevent disruptions

2538
01:29:04,880 --> 01:29:08,320
or denial of service attacks because of

2539
01:29:06,880 --> 01:29:11,040
course these compromise the availability

2540
01:29:08,320 --> 01:29:12,320
of systems. But realistically, so many

2541
01:29:11,040 --> 01:29:14,239
different things could be a disruption

2542
01:29:12,320 --> 01:29:16,880
to availability. We can think about a

2543
01:29:14,239 --> 01:29:18,400
server failing or an internal DNS or a

2544
01:29:16,880 --> 01:29:19,840
proxy going down which prevents

2545
01:29:18,400 --> 01:29:21,360
employees from accessing a certain

2546
01:29:19,840 --> 01:29:22,560
website that they need or maybe

2547
01:29:21,360 --> 01:29:24,320
accidentally implementing an

2548
01:29:22,560 --> 01:29:26,120
oversensitive endpoint rule that's going

2549
01:29:24,320 --> 01:29:28,560
to block access to an important business

2550
01:29:26,120 --> 01:29:30,719
application. Next, we have the AAA

2551
01:29:28,560 --> 01:29:32,560
framework which is also known as the

2552
01:29:30,719 --> 01:29:34,560
authentication authorization and

2553
01:29:32,560 --> 01:29:36,639
accounting framework. This is a model

2554
01:29:34,560 --> 01:29:39,040
that is used to securely control access

2555
01:29:36,639 --> 01:29:40,560
to resources and services and provides a

2556
01:29:39,040 --> 01:29:42,719
more structured approach for managing

2557
01:29:40,560 --> 01:29:44,080
user interactions on a system. And like

2558
01:29:42,719 --> 01:29:46,239
with many of the controls we talked

2559
01:29:44,080 --> 01:29:48,080
about, the ultimate goal of the AAA

2560
01:29:46,239 --> 01:29:50,080
framework here is to ensure that only

2561
01:29:48,080 --> 01:29:52,400
authenticated and authorized individuals

2562
01:29:50,080 --> 01:29:54,239
can access specific resources. So we

2563
01:29:52,400 --> 01:29:56,239
have authentication. And of course, this

2564
01:29:54,239 --> 01:29:58,480
is the process of verifying an identity

2565
01:29:56,239 --> 01:30:00,480
of a user or a system entity attempting

2566
01:29:58,480 --> 01:30:02,159
to access a resource. Basically, it

2567
01:30:00,480 --> 01:30:03,120
ensures that they are who they say they

2568
01:30:02,159 --> 01:30:04,960
are. And we have different

2569
01:30:03,120 --> 01:30:06,719
authentication methods, right? We have

2570
01:30:04,960 --> 01:30:08,159
things like passwords or keybased

2571
01:30:06,719 --> 01:30:09,600
authentication using public key

2572
01:30:08,159 --> 01:30:11,440
infrastructure or even things like

2573
01:30:09,600 --> 01:30:13,520
biometrics, right? fingerprints or

2574
01:30:11,440 --> 01:30:15,360
facial recognition. And we can provide

2575
01:30:13,520 --> 01:30:17,520
multiple sources of authentication at

2576
01:30:15,360 --> 01:30:19,520
once to create more security or also

2577
01:30:17,520 --> 01:30:21,600
known as multiffactor authentication.

2578
01:30:19,520 --> 01:30:23,440
Next, we have authorization. And this

2579
01:30:21,600 --> 01:30:25,760
determines what actions or permissions

2580
01:30:23,440 --> 01:30:27,600
or what resources a user is allowed to

2581
01:30:25,760 --> 01:30:29,600
access after they've authenticated

2582
01:30:27,600 --> 01:30:32,000
themselves. And typically, this relies

2583
01:30:29,600 --> 01:30:34,239
on defining an enforced access policy

2584
01:30:32,000 --> 01:30:36,400
based on specific user identities,

2585
01:30:34,239 --> 01:30:38,000
roles, or other attributes within the

2586
01:30:36,400 --> 01:30:40,159
company. So we're looking at things like

2587
01:30:38,000 --> 01:30:42,000
access control lists or rulebased access

2588
01:30:40,159 --> 01:30:43,440
control. And lastly here we have

2589
01:30:42,000 --> 01:30:45,679
accounting which is also known as

2590
01:30:43,440 --> 01:30:47,600
auditing or tracking and it essentially

2591
01:30:45,679 --> 01:30:49,280
it involves logging and monitoring user

2592
01:30:47,600 --> 01:30:51,040
activities within the system. So it

2593
01:30:49,280 --> 01:30:53,440
records details like who accessed what

2594
01:30:51,040 --> 01:30:55,040
service and when for how long and often

2595
01:30:53,440 --> 01:30:56,800
accounting is really crucial for meeting

2596
01:30:55,040 --> 01:30:58,239
compliance standards, but it's also just

2597
01:30:56,800 --> 01:30:59,920
as important for security event

2598
01:30:58,239 --> 01:31:02,159
monitoring as well. And we can use

2599
01:30:59,920 --> 01:31:04,320
things like native audit logs as well as

2600
01:31:02,159 --> 01:31:05,840
monitoring tools like our SIM to record

2601
01:31:04,320 --> 01:31:07,840
user activities and implement

2602
01:31:05,840 --> 01:31:09,520
accounting. So next, let's make some

2603
01:31:07,840 --> 01:31:11,080
important distinctions that often come

2604
01:31:09,520 --> 01:31:13,120
up when talking about security

2605
01:31:11,080 --> 01:31:14,400
operations. And sometimes the terms that

2606
01:31:13,120 --> 01:31:15,920
we're going to cover here are used

2607
01:31:14,400 --> 01:31:17,840
interchangeably, which is a common

2608
01:31:15,920 --> 01:31:20,320
misnomer because they're related, but

2609
01:31:17,840 --> 01:31:22,719
they have distinct meanings. So we have

2610
01:31:20,320 --> 01:31:24,159
a threat, a risk, and a vulnerability.

2611
01:31:22,719 --> 01:31:26,080
And let's talk about how they differ

2612
01:31:24,159 --> 01:31:28,239
from each other. So to put it simply, a

2613
01:31:26,080 --> 01:31:30,560
vulnerability refers to any weakness or

2614
01:31:28,239 --> 01:31:32,560
a flaw in a system, a network, an

2615
01:31:30,560 --> 01:31:34,400
application, any kind of asset that

2616
01:31:32,560 --> 01:31:36,320
could potentially be exploited by a

2617
01:31:34,400 --> 01:31:38,639
threat actor to compromise anything

2618
01:31:36,320 --> 01:31:39,679
within that CIA triad, right? So we can

2619
01:31:38,639 --> 01:31:41,280
think of things like software

2620
01:31:39,679 --> 01:31:43,679
vulnerabilities, right? Coding bugs or

2621
01:31:41,280 --> 01:31:45,520
coding errors or design flaws, uh maybe

2622
01:31:43,679 --> 01:31:47,520
configuration weaknesses like improperly

2623
01:31:45,520 --> 01:31:49,520
configured systems, default passwords or

2624
01:31:47,520 --> 01:31:51,520
unpatched software. But there's also

2625
01:31:49,520 --> 01:31:53,520
human factors as well, right? So human

2626
01:31:51,520 --> 01:31:55,120
errors or negligence or even just a lack

2627
01:31:53,520 --> 01:31:56,480
of awareness can lead to security

2628
01:31:55,120 --> 01:31:58,560
vulnerabilities like someone falling

2629
01:31:56,480 --> 01:32:00,560
victim to a social engineering attack. A

2630
01:31:58,560 --> 01:32:02,800
threat on the other hand refers to any

2631
01:32:00,560 --> 01:32:04,960
event or even an actor themselves with

2632
01:32:02,800 --> 01:32:07,280
the potential to exploit vulnerabilities

2633
01:32:04,960 --> 01:32:08,880
within any of the organization's assets.

2634
01:32:07,280 --> 01:32:10,880
So threats don't have to just be a

2635
01:32:08,880 --> 01:32:12,400
malicious individual maybe like wearing

2636
01:32:10,880 --> 01:32:14,320
a hoodie in a dark room and launching

2637
01:32:12,400 --> 01:32:15,679
attacks like malware or ransomware,

2638
01:32:14,320 --> 01:32:17,360
right? This this can come from things

2639
01:32:15,679 --> 01:32:19,679
from inside the company, things like

2640
01:32:17,360 --> 01:32:21,280
technology failures or natural disasters

2641
01:32:19,679 --> 01:32:22,800
or even the organization's own

2642
01:32:21,280 --> 01:32:24,400
employees, which we would call an

2643
01:32:22,800 --> 01:32:26,239
insider threat. And while a

2644
01:32:24,400 --> 01:32:28,239
vulnerability exposes the organization

2645
01:32:26,239 --> 01:32:30,239
to threats, the threat actually takes

2646
01:32:28,239 --> 01:32:32,960
advantage of a vulnerability, which

2647
01:32:30,239 --> 01:32:35,199
leads us into risk. And risk is the

2648
01:32:32,960 --> 01:32:37,120
potential for loss or harm or damage

2649
01:32:35,199 --> 01:32:39,920
resulting from the exploitation of

2650
01:32:37,120 --> 01:32:41,520
vulnerabilities by threats. It really

2651
01:32:39,920 --> 01:32:43,040
does, as you can see in the diagram,

2652
01:32:41,520 --> 01:32:44,800
represent the intersection of

2653
01:32:43,040 --> 01:32:46,880
vulnerabilities and threats and the

2654
01:32:44,800 --> 01:32:48,960
assets or resources that they target

2655
01:32:46,880 --> 01:32:51,920
because a risk is realized when a threat

2656
01:32:48,960 --> 01:32:53,920
exploits or harms a vulnerability. And

2657
01:32:51,920 --> 01:32:56,159
often times, organizations and security

2658
01:32:53,920 --> 01:32:58,159
teams will perform risk assessments that

2659
01:32:56,159 --> 01:33:00,000
evaluate the likelihood and impact of

2660
01:32:58,159 --> 01:33:01,199
potential security incidents. And we

2661
01:33:00,000 --> 01:33:02,800
consider things like the threat

2662
01:33:01,199 --> 01:33:04,080
likelihood, how probable is it for a

2663
01:33:02,800 --> 01:33:05,679
threat to exploit a specific

2664
01:33:04,080 --> 01:33:06,960
vulnerability as well as the impact

2665
01:33:05,679 --> 01:33:08,719
severity, right? So what is the

2666
01:33:06,960 --> 01:33:10,800
magnitude or the consequence from this

2667
01:33:08,719 --> 01:33:12,719
resulting action? As well as the asset

2668
01:33:10,800 --> 01:33:14,320
value. So what kind of data is at risk?

2669
01:33:12,719 --> 01:33:15,840
What kind of systems and infrastructure?

2670
01:33:14,320 --> 01:33:17,440
How critical is it? And we're going to

2671
01:33:15,840 --> 01:33:19,280
talk more about risk in a bit. But let's

2672
01:33:17,440 --> 01:33:21,199
move on to some more tangible concepts

2673
01:33:19,280 --> 01:33:23,280
that as a sock analyst you'll be dealing

2674
01:33:21,199 --> 01:33:25,520
with on a day-to-day basis. So let's

2675
01:33:23,280 --> 01:33:27,040
start simple. Let's talk about a log.

2676
01:33:25,520 --> 01:33:29,600
And we can think of logs as a

2677
01:33:27,040 --> 01:33:31,920
chronological record of events, actions,

2678
01:33:29,600 --> 01:33:33,840
or any transaction that occurs within a

2679
01:33:31,920 --> 01:33:35,679
system. At a high level, a log is going

2680
01:33:33,840 --> 01:33:37,920
to provide us as analysts and auditors

2681
01:33:35,679 --> 01:33:39,920
with detailed accounts of any activities

2682
01:33:37,920 --> 01:33:41,120
or changes or interactions as they

2683
01:33:39,920 --> 01:33:42,880
relate to a system or the

2684
01:33:41,120 --> 01:33:44,800
interconnection of systems. There are

2685
01:33:42,880 --> 01:33:46,159
countless log sources out there and many

2686
01:33:44,800 --> 01:33:47,679
that we're going to cover. So, this

2687
01:33:46,159 --> 01:33:48,880
isn't an exhaustive list by any means,

2688
01:33:47,679 --> 01:33:51,120
but we can start thinking about things

2689
01:33:48,880 --> 01:33:52,400
like system logs or application logs or

2690
01:33:51,120 --> 01:33:54,800
maybe network logs that you know

2691
01:33:52,400 --> 01:33:56,639
document network traffic or connections.

2692
01:33:54,800 --> 01:33:58,719
So, let's take a look at an example log

2693
01:33:56,639 --> 01:34:00,080
from a web servers log file. The

2694
01:33:58,719 --> 01:34:01,679
following log you're seeing here has

2695
01:34:00,080 --> 01:34:04,080
been extracted from an Apache web

2696
01:34:01,679 --> 01:34:05,600
servers access log file. So we can

2697
01:34:04,080 --> 01:34:07,440
actually break this down section by

2698
01:34:05,600 --> 01:34:09,600
section. Right? We have the IP address

2699
01:34:07,440 --> 01:34:11,040
here at the start. This is the public IP

2700
01:34:09,600 --> 01:34:13,280
address of the system that made the

2701
01:34:11,040 --> 01:34:15,120
request to the web server. We also have

2702
01:34:13,280 --> 01:34:16,760
a timestamp here. Right? We get the date

2703
01:34:15,120 --> 01:34:18,880
and the time of the

2704
01:34:16,760 --> 01:34:21,199
request. Next, this string is going to

2705
01:34:18,880 --> 01:34:23,360
be the request line. So we can actually

2706
01:34:21,199 --> 01:34:25,520
break this down further into the HTTP

2707
01:34:23,360 --> 01:34:28,960
method or the get request. We can see

2708
01:34:25,520 --> 01:34:31,159
the requested URL that /admin.php. PHP

2709
01:34:28,960 --> 01:34:33,679
as well as the protocol version, the

2710
01:34:31,159 --> 01:34:35,199
1.1. And next, we get the status code.

2711
01:34:33,679 --> 01:34:37,199
So in this case, it's a 200, meaning

2712
01:34:35,199 --> 01:34:39,040
that everything was okay. But if we were

2713
01:34:37,199 --> 01:34:41,199
to get something like a 404 not found,

2714
01:34:39,040 --> 01:34:43,040
or maybe like a 301 redirect, this would

2715
01:34:41,199 --> 01:34:45,199
give us more information in terms of how

2716
01:34:43,040 --> 01:34:47,360
the web server handled this request. And

2717
01:34:45,199 --> 01:34:49,440
lastly, here we have this weird string.

2718
01:34:47,360 --> 01:34:50,800
This is a user agent string and it can

2719
01:34:49,440 --> 01:34:52,719
actually tell us many things about the

2720
01:34:50,800 --> 01:34:54,480
request or the source of the request

2721
01:34:52,719 --> 01:34:56,480
including the browser that the

2722
01:34:54,480 --> 01:34:58,719
requesttor used as well as the operating

2723
01:34:56,480 --> 01:35:00,159
system used for the request. So we can

2724
01:34:58,719 --> 01:35:02,239
actually take this IP address that we

2725
01:35:00,159 --> 01:35:03,840
discovered and perform a lookup to

2726
01:35:02,239 --> 01:35:05,920
identify where the request came from

2727
01:35:03,840 --> 01:35:08,480
geographically and what service provider

2728
01:35:05,920 --> 01:35:09,920
the IP address belongs to. This of

2729
01:35:08,480 --> 01:35:11,760
course can be useful information during

2730
01:35:09,920 --> 01:35:13,679
an incident response investigation and

2731
01:35:11,760 --> 01:35:16,320
it can help us trace the origin of any

2732
01:35:13,679 --> 01:35:18,239
suspicious activity. And like with the

2733
01:35:16,320 --> 01:35:20,400
IP address, we can take that user agent

2734
01:35:18,239 --> 01:35:22,080
string and actually parse it using tools

2735
01:35:20,400 --> 01:35:24,400
to determine a lot of information that

2736
01:35:22,080 --> 01:35:26,159
we talked about. So we can extract some

2737
01:35:24,400 --> 01:35:27,840
valuable information about the user who

2738
01:35:26,159 --> 01:35:30,080
made this request such as the browser

2739
01:35:27,840 --> 01:35:32,000
they used, the name and its version, the

2740
01:35:30,080 --> 01:35:33,440
operating system they're running on, as

2741
01:35:32,000 --> 01:35:36,320
well as the device type. Is it a

2742
01:35:33,440 --> 01:35:38,880
desktop, mobile, tablet, and many other

2743
01:35:36,320 --> 01:35:41,760
additional details. So let's talk about

2744
01:35:38,880 --> 01:35:43,920
a security event. So a security event is

2745
01:35:41,760 --> 01:35:46,000
any occurrence that has the potential to

2746
01:35:43,920 --> 01:35:47,199
impact the security of an organization's

2747
01:35:46,000 --> 01:35:49,040
informationational assets or

2748
01:35:47,199 --> 01:35:50,400
infrastructure. And security events can

2749
01:35:49,040 --> 01:35:51,840
be defined as a wide range of

2750
01:35:50,400 --> 01:35:53,760
activities, right? So we can think of

2751
01:35:51,840 --> 01:35:55,520
things like failed login attempts or

2752
01:35:53,760 --> 01:35:57,120
high volumes of network traffic or a

2753
01:35:55,520 --> 01:35:59,280
user attempting to run an unauthorized

2754
01:35:57,120 --> 01:36:00,960
program on their workstation. These may

2755
01:35:59,280 --> 01:36:02,080
not always turn into an incident, but

2756
01:36:00,960 --> 01:36:04,080
they should still be investigated

2757
01:36:02,080 --> 01:36:06,280
nonetheless, right? All incidents are

2758
01:36:04,080 --> 01:36:08,480
events, but not all events become

2759
01:36:06,280 --> 01:36:10,480
incidents, which brings us to a security

2760
01:36:08,480 --> 01:36:12,239
incident. So an incident is a confirmed

2761
01:36:10,480 --> 01:36:14,480
or suspected breach of any kind of

2762
01:36:12,239 --> 01:36:16,320
violation of our security policies or

2763
01:36:14,480 --> 01:36:18,719
procedures or controls that we have in

2764
01:36:16,320 --> 01:36:20,960
place. And ultimately this poses a

2765
01:36:18,719 --> 01:36:23,120
threat to our confidentiality, integrity

2766
01:36:20,960 --> 01:36:26,080
or availability of our organization's

2767
01:36:23,120 --> 01:36:27,600
assets. So again, all security incidents

2768
01:36:26,080 --> 01:36:29,920
are events because they involve some

2769
01:36:27,600 --> 01:36:32,000
sort of observable occurrence. However,

2770
01:36:29,920 --> 01:36:34,639
not all security events escalate to

2771
01:36:32,000 --> 01:36:37,760
security incidents. And next we have an

2772
01:36:34,639 --> 01:36:39,760
alert. And an alert is a notification or

2773
01:36:37,760 --> 01:36:41,679
a warning generated by a security

2774
01:36:39,760 --> 01:36:43,440
monitoring system or our tools that

2775
01:36:41,679 --> 01:36:45,679
indicate a detection of a potential

2776
01:36:43,440 --> 01:36:47,520
security incident. And alerts are

2777
01:36:45,679 --> 01:36:49,440
typically triggered based on predefined

2778
01:36:47,520 --> 01:36:51,600
rules or thresholds or even patterns

2779
01:36:49,440 --> 01:36:54,159
that we set up to indicate potential

2780
01:36:51,600 --> 01:36:56,239
malicious activity. Security alerts will

2781
01:36:54,159 --> 01:36:58,000
often include important metadata, things

2782
01:36:56,239 --> 01:37:00,000
like the event details or the alert

2783
01:36:58,000 --> 01:37:01,520
context. Alerts are also typically

2784
01:37:00,000 --> 01:37:03,360
categorized based on their nature and

2785
01:37:01,520 --> 01:37:04,719
severity, right? Are they a high or

2786
01:37:03,360 --> 01:37:06,639
critical alert and require immediate

2787
01:37:04,719 --> 01:37:08,800
attention or are they more low priority

2788
01:37:06,639 --> 01:37:10,119
and still require attention but do not

2789
01:37:08,800 --> 01:37:12,159
pose an immediate threat to the

2790
01:37:10,119 --> 01:37:13,920
organization? For example, let's take a

2791
01:37:12,159 --> 01:37:15,920
look at a snort alert that was logged to

2792
01:37:13,920 --> 01:37:17,679
our SIM. Snort, which we'll cover later

2793
01:37:15,920 --> 01:37:19,520
on in the course, is a powerful open-

2794
01:37:17,679 --> 01:37:21,600
source network intrusion detection

2795
01:37:19,520 --> 01:37:23,520
system. And when we look at the alert

2796
01:37:21,600 --> 01:37:25,280
here, we can see like with our log

2797
01:37:23,520 --> 01:37:27,199
example from earlier, some information

2798
01:37:25,280 --> 01:37:29,040
that we can extract, right? So, we have

2799
01:37:27,199 --> 01:37:31,040
the date or the timestamp. This is the

2800
01:37:29,040 --> 01:37:32,719
date that the alert was triggered. We

2801
01:37:31,040 --> 01:37:35,440
have the priority in this case one which

2802
01:37:32,719 --> 01:37:38,159
may indicate a high alert severity. We

2803
01:37:35,440 --> 01:37:40,080
have the protocol which is UDP. The

2804
01:37:38,159 --> 01:37:41,920
class or the classification gives us

2805
01:37:40,080 --> 01:37:44,080
some more context and detail into what

2806
01:37:41,920 --> 01:37:45,679
the alert entails. And we have the

2807
01:37:44,080 --> 01:37:47,440
source IP address from which the

2808
01:37:45,679 --> 01:37:49,920
suspicious network traffic originated

2809
01:37:47,440 --> 01:37:52,960
from as well as the port and the

2810
01:37:49,920 --> 01:37:54,560
destination port and IP as well. We also

2811
01:37:52,960 --> 01:37:57,040
get some more information with the SID

2812
01:37:54,560 --> 01:37:58,480
or the signature ID which is a unique

2813
01:37:57,040 --> 01:38:00,800
identifier for this rule that we can

2814
01:37:58,480 --> 01:38:02,480
then look up to get more information.

2815
01:38:00,800 --> 01:38:04,400
We then have the description here which

2816
01:38:02,480 --> 01:38:06,480
provides a of course description of the

2817
01:38:04,400 --> 01:38:08,480
alert indicating in this case that store

2818
01:38:06,480 --> 01:38:11,840
detected an inbound connection related

2819
01:38:08,480 --> 01:38:13,679
to the zero access Trojan. So next let's

2820
01:38:11,840 --> 01:38:15,840
talk about security controls themselves

2821
01:38:13,679 --> 01:38:17,560
and what types of controls we can decide

2822
01:38:15,840 --> 01:38:19,679
to implement within our

2823
01:38:17,560 --> 01:38:21,280
organization. When we start to implement

2824
01:38:19,679 --> 01:38:23,040
security controls that complement and

2825
01:38:21,280 --> 01:38:25,199
support each other, we aim to achieve

2826
01:38:23,040 --> 01:38:27,119
the concept of defense in depth. And

2827
01:38:25,199 --> 01:38:29,040
this is a strategy that involves

2828
01:38:27,119 --> 01:38:31,440
deploying multiple layers of security

2829
01:38:29,040 --> 01:38:33,360
controls and access controls within our

2830
01:38:31,440 --> 01:38:34,760
organization to protect against a wide

2831
01:38:33,360 --> 01:38:36,719
range of security threats and

2832
01:38:34,760 --> 01:38:38,480
vulnerabilities. And this is a strategy

2833
01:38:36,719 --> 01:38:40,880
that involves deploying multiple layers

2834
01:38:38,480 --> 01:38:42,880
of security to protect against a wide

2835
01:38:40,880 --> 01:38:44,800
range of threats. So rather than relying

2836
01:38:42,880 --> 01:38:46,719
on a single point of failure or a single

2837
01:38:44,800 --> 01:38:48,960
security measure, defense and depth will

2838
01:38:46,719 --> 01:38:50,960
emphasize redundancy and diversity and

2839
01:38:48,960 --> 01:38:52,960
depth within our security defenses to

2840
01:38:50,960 --> 01:38:54,800
create a more overlapping protection

2841
01:38:52,960 --> 01:38:56,880
layer. And we can think of the Swiss

2842
01:38:54,800 --> 01:38:58,960
cheese analogy in which we stack

2843
01:38:56,880 --> 01:39:00,400
multiple layers of Swiss cheese slices

2844
01:38:58,960 --> 01:39:02,159
on top of each other. And if you think

2845
01:39:00,400 --> 01:39:04,480
about a Swiss cheese slice, it's going

2846
01:39:02,159 --> 01:39:06,719
to have individual holes or weaknesses

2847
01:39:04,480 --> 01:39:08,239
that threats can exploit. But when we

2848
01:39:06,719 --> 01:39:10,320
start to stack layers on top of each

2849
01:39:08,239 --> 01:39:12,400
other, over time we end up patching all

2850
01:39:10,320 --> 01:39:14,320
of these holes holistically. And when it

2851
01:39:12,400 --> 01:39:16,080
comes to controls themselves, typically

2852
01:39:14,320 --> 01:39:17,920
you'll see them separated into three

2853
01:39:16,080 --> 01:39:19,440
distinct categories. However, we're

2854
01:39:17,920 --> 01:39:21,679
going to see shortly that this can get

2855
01:39:19,440 --> 01:39:23,360
confusing and kind of arbitrary. So

2856
01:39:21,679 --> 01:39:25,360
first let's talk about administrative

2857
01:39:23,360 --> 01:39:27,440
controls and these relate to the

2858
01:39:25,360 --> 01:39:29,119
policies and procedures and guidelines

2859
01:39:27,440 --> 01:39:31,520
that we implement within an organization

2860
01:39:29,119 --> 01:39:33,040
to manage and mitigate security risks.

2861
01:39:31,520 --> 01:39:35,440
So for example, we might have incident

2862
01:39:33,040 --> 01:39:36,719
response plans or security policies. We

2863
01:39:35,440 --> 01:39:38,480
might provide things like security

2864
01:39:36,719 --> 01:39:41,119
awareness training. We might implement

2865
01:39:38,480 --> 01:39:42,639
access control policies and we also have

2866
01:39:41,119 --> 01:39:44,800
technical controls and these are also

2867
01:39:42,639 --> 01:39:46,719
referred to as logical controls as well.

2868
01:39:44,800 --> 01:39:48,800
And as the name suggests, these controls

2869
01:39:46,719 --> 01:39:50,800
rely on technology to enforce security

2870
01:39:48,800 --> 01:39:52,960
policies and also do things like detect

2871
01:39:50,800 --> 01:39:54,400
and prevent unauthorized access. So we

2872
01:39:52,960 --> 01:39:55,600
can think of things like firewalls, our

2873
01:39:54,400 --> 01:39:57,920
endpoint detection and response

2874
01:39:55,600 --> 01:39:59,440
platforms, intrusion detection systems,

2875
01:39:57,920 --> 01:40:01,760
or even things like introducing

2876
01:39:59,440 --> 01:40:03,679
encryption, access controls, antivirus

2877
01:40:01,760 --> 01:40:06,080
software, the list goes on and on. And

2878
01:40:03,679 --> 01:40:08,000
lastly, here we have physical controls.

2879
01:40:06,080 --> 01:40:10,000
These are tangible measures that we can

2880
01:40:08,000 --> 01:40:12,000
implement to protect physical assets or

2881
01:40:10,000 --> 01:40:14,080
our facility and resources from

2882
01:40:12,000 --> 01:40:15,679
unauthorized access or even theft or

2883
01:40:14,080 --> 01:40:17,440
damage. These controls encompass

2884
01:40:15,679 --> 01:40:19,440
security measures designed to secure the

2885
01:40:17,440 --> 01:40:20,960
physical environment in which the IT and

2886
01:40:19,440 --> 01:40:22,960
security systems and infrastructure

2887
01:40:20,960 --> 01:40:24,960
operates. So we can think of things like

2888
01:40:22,960 --> 01:40:26,800
surveillance cameras and biometrics or

2889
01:40:24,960 --> 01:40:28,800
perimeter fencing access control

2890
01:40:26,800 --> 01:40:30,159
systems, right? Or even hiring security

2891
01:40:28,800 --> 01:40:32,560
guards. These are all examples of

2892
01:40:30,159 --> 01:40:35,520
physical controls. Now we can also talk

2893
01:40:32,560 --> 01:40:37,600
about security control functions and

2894
01:40:35,520 --> 01:40:40,400
these relate to an actual controls well

2895
01:40:37,600 --> 01:40:41,920
function or goal or objective. And so to

2896
01:40:40,400 --> 01:40:44,000
start we have preventive controls and

2897
01:40:41,920 --> 01:40:46,159
these are security measures deployed to

2898
01:40:44,000 --> 01:40:48,000
proactively prevent security threats and

2899
01:40:46,159 --> 01:40:49,600
incidents from occurring. So for example

2900
01:40:48,000 --> 01:40:52,080
we can implement things like firewalls

2901
01:40:49,600 --> 01:40:54,000
or access control lists or EDR tools or

2902
01:40:52,080 --> 01:40:55,679
intrusion prevention systems. And we

2903
01:40:54,000 --> 01:40:57,440
also have detective controls. So these

2904
01:40:55,679 --> 01:40:59,760
are measures implemented to identify and

2905
01:40:57,440 --> 01:41:01,520
detect attempted security incidents. And

2906
01:40:59,760 --> 01:41:03,440
these focus of course on monitoring and

2907
01:41:01,520 --> 01:41:05,600
analyzing. So obviously in this case we

2908
01:41:03,440 --> 01:41:07,280
have our IDS systems or our SIM

2909
01:41:05,600 --> 01:41:09,040
different log monitoring and analysis

2910
01:41:07,280 --> 01:41:10,800
tools and things like audit trails as

2911
01:41:09,040 --> 01:41:12,320
well. And next we have corrective

2912
01:41:10,800 --> 01:41:14,239
controls and these are security measures

2913
01:41:12,320 --> 01:41:16,560
implemented to remediate and mitigate

2914
01:41:14,239 --> 01:41:18,880
the impact of security incidents after

2915
01:41:16,560 --> 01:41:21,119
they've been detected. So these controls

2916
01:41:18,880 --> 01:41:23,600
focus on restoring systems or data or

2917
01:41:21,119 --> 01:41:25,199
operations to a secure state and prevent

2918
01:41:23,600 --> 01:41:27,199
similar incidents from occurring in the

2919
01:41:25,199 --> 01:41:29,440
future. So we can think of things like

2920
01:41:27,199 --> 01:41:31,199
having secure backups or incident

2921
01:41:29,440 --> 01:41:33,440
response plans or having a patch

2922
01:41:31,199 --> 01:41:34,960
management system in place which brings

2923
01:41:33,440 --> 01:41:36,880
us to deterrent controls and these are

2924
01:41:34,960 --> 01:41:39,119
used to well deter threats from

2925
01:41:36,880 --> 01:41:41,199
exploiting vulnerabilities. So we can

2926
01:41:39,119 --> 01:41:43,440
think of things like placing warning

2927
01:41:41,199 --> 01:41:46,000
signs or physical barriers or tamper

2928
01:41:43,440 --> 01:41:48,239
seals to prevent tampering. And lastly,

2929
01:41:46,000 --> 01:41:50,000
we have compensating controls. And these

2930
01:41:48,239 --> 01:41:51,920
are alternative security measures that

2931
01:41:50,000 --> 01:41:54,000
we can implement to mitigate risks when

2932
01:41:51,920 --> 01:41:56,679
a primary security control is either

2933
01:41:54,000 --> 01:41:59,119
impractical or ineffective or just plain

2934
01:41:56,679 --> 01:42:01,199
unavailable. And these controls serve as

2935
01:41:59,119 --> 01:42:03,199
substitutes or even enhancements to

2936
01:42:01,199 --> 01:42:05,760
primary controls that achieve the same

2937
01:42:03,199 --> 01:42:07,440
or similar level of security. And often

2938
01:42:05,760 --> 01:42:09,280
when we're evaluating compensating

2939
01:42:07,440 --> 01:42:11,040
controls, we need to have a process to

2940
01:42:09,280 --> 01:42:13,360
accept and document carefully for

2941
01:42:11,040 --> 01:42:14,480
auditing and compliance purposes. So we

2942
01:42:13,360 --> 01:42:16,239
can think about using network

2943
01:42:14,480 --> 01:42:17,920
segmentation as a means to secure

2944
01:42:16,239 --> 01:42:19,840
sensitive and legacy endpoints from the

2945
01:42:17,920 --> 01:42:21,600
rest of the network. Right? If we have a

2946
01:42:19,840 --> 01:42:23,520
very old system that we cannot patch, we

2947
01:42:21,600 --> 01:42:25,119
physically cannot patch it. Well, we

2948
01:42:23,520 --> 01:42:27,040
need to have compensating controls in

2949
01:42:25,119 --> 01:42:28,880
place. Maybe we airgap the system

2950
01:42:27,040 --> 01:42:30,159
because it can't feasibly be updated.

2951
01:42:28,880 --> 01:42:31,600
You might have noticed that certain

2952
01:42:30,159 --> 01:42:33,280
controls can fit into multiple

2953
01:42:31,600 --> 01:42:34,960
categories. For example, we have

2954
01:42:33,280 --> 01:42:36,560
surveillance cameras, right? Is it a

2955
01:42:34,960 --> 01:42:38,400
physical control? Well, I mean, yes, it

2956
01:42:36,560 --> 01:42:39,840
relates to physical equipment, but when

2957
01:42:38,400 --> 01:42:41,280
we think about functionality,

2958
01:42:39,840 --> 01:42:42,719
surveillance cameras can fit as a

2959
01:42:41,280 --> 01:42:44,639
detective control, right? because we're

2960
01:42:42,719 --> 01:42:46,639
able to use them to monitor and detect

2961
01:42:44,639 --> 01:42:48,400
for attempted security violations. But

2962
01:42:46,639 --> 01:42:50,400
they can also be classified as a

2963
01:42:48,400 --> 01:42:52,320
deterrent control as the mere presence

2964
01:42:50,400 --> 01:42:54,400
of having them can discourage physical

2965
01:42:52,320 --> 01:42:56,320
intrusion attempts. So it's entirely

2966
01:42:54,400 --> 01:42:58,880
possible that a single security control

2967
01:42:56,320 --> 01:43:00,800
can fulfill multiple functions. So let's

2968
01:42:58,880 --> 01:43:02,800
quickly talk about risk again. So SOCK

2969
01:43:00,800 --> 01:43:04,880
teams employ a range of strategies to

2970
01:43:02,800 --> 01:43:06,800
manage risks effectively and these

2971
01:43:04,880 --> 01:43:08,560
strategies encompass various approaches.

2972
01:43:06,800 --> 01:43:10,840
So we have things like transference or

2973
01:43:08,560 --> 01:43:12,880
risk acceptance or avoidance and

2974
01:43:10,840 --> 01:43:14,320
mitigation. Each strategy that we're

2975
01:43:12,880 --> 01:43:16,159
going to talk about offers distinct

2976
01:43:14,320 --> 01:43:18,639
advantages and is applied based on the

2977
01:43:16,159 --> 01:43:20,280
organization's risk appetite or resource

2978
01:43:18,639 --> 01:43:22,320
availability as well as business

2979
01:43:20,280 --> 01:43:24,159
objectives. So first we have risk

2980
01:43:22,320 --> 01:43:25,960
transference and this involves actually

2981
01:43:24,159 --> 01:43:28,159
shifting a financial burden or

2982
01:43:25,960 --> 01:43:29,840
responsibility of managing a risk to

2983
01:43:28,159 --> 01:43:32,159
another party typically through some

2984
01:43:29,840 --> 01:43:33,840
sort of contractual agreement or policy.

2985
01:43:32,159 --> 01:43:35,840
So instead of directly dealing with the

2986
01:43:33,840 --> 01:43:37,600
risk, an organization can just transfer

2987
01:43:35,840 --> 01:43:39,920
it to a third party that is better

2988
01:43:37,600 --> 01:43:41,119
equipped to handle or absorb it. So a

2989
01:43:39,920 --> 01:43:43,119
common example that you'll see is

2990
01:43:41,119 --> 01:43:45,199
purchasing cyber security insurance. By

2991
01:43:43,119 --> 01:43:47,040
paying a premium, we can transfer some

2992
01:43:45,199 --> 01:43:48,960
of the financial risk of the potential

2993
01:43:47,040 --> 01:43:50,880
security breach over to an insurance

2994
01:43:48,960 --> 01:43:52,560
company. We can also think of things

2995
01:43:50,880 --> 01:43:54,880
like moving services to the cloud,

2996
01:43:52,560 --> 01:43:56,320
right? When we move things to the cloud,

2997
01:43:54,880 --> 01:43:58,639
cloud service providers actually

2998
01:43:56,320 --> 01:44:01,360
abstract a lot of the physical and some

2999
01:43:58,639 --> 01:44:03,040
logical controls away from us. So by

3000
01:44:01,360 --> 01:44:05,600
paying a premium to shift things to the

3001
01:44:03,040 --> 01:44:06,719
cloud, we gain a lot in security as well

3002
01:44:05,600 --> 01:44:09,280
as many other things that cloud

3003
01:44:06,719 --> 01:44:11,119
providers offer. We also have risk

3004
01:44:09,280 --> 01:44:13,119
acceptance and in this case it involves

3005
01:44:11,119 --> 01:44:14,960
acknowledging and continuously deciding

3006
01:44:13,119 --> 01:44:16,880
to tolerate or live with a certain level

3007
01:44:14,960 --> 01:44:19,440
of risk without actually taking any

3008
01:44:16,880 --> 01:44:21,679
actions to mitigate or transfer it. So

3009
01:44:19,440 --> 01:44:23,679
this strategy is appropriate when the

3010
01:44:21,679 --> 01:44:25,920
cost or the effort required to reduce a

3011
01:44:23,679 --> 01:44:27,920
risk kind of outweighs the potential

3012
01:44:25,920 --> 01:44:29,840
impact of the risk itself. So for

3013
01:44:27,920 --> 01:44:31,360
example, in some cases, organizations

3014
01:44:29,840 --> 01:44:33,600
might choose to accept certain

3015
01:44:31,360 --> 01:44:35,600
operational risks. They might accept a

3016
01:44:33,600 --> 01:44:37,119
minor service disruption during routine

3017
01:44:35,600 --> 01:44:39,199
maintenance rather than implementing

3018
01:44:37,119 --> 01:44:41,119
some costly redundancy measure to

3019
01:44:39,199 --> 01:44:42,400
eliminate downtime altogether. Right?

3020
01:44:41,119 --> 01:44:44,719
That's not the best example, but it's

3021
01:44:42,400 --> 01:44:48,000
often this balance of resources and time

3022
01:44:44,719 --> 01:44:49,679
and cost as well as the impact. We also

3023
01:44:48,000 --> 01:44:51,760
have risk avoidance. So this involves

3024
01:44:49,679 --> 01:44:54,480
taking deliberate actions to eliminate

3025
01:44:51,760 --> 01:44:56,400
or avoid specific risks altogether. So

3026
01:44:54,480 --> 01:44:58,400
with this strategy, we aim to completely

3027
01:44:56,400 --> 01:45:00,320
remove the possibility of encountering a

3028
01:44:58,400 --> 01:45:02,080
specific risk, thereby preventing any

3029
01:45:00,320 --> 01:45:03,840
potential negative consequences. For

3030
01:45:02,080 --> 01:45:05,360
example, an organization might decide

3031
01:45:03,840 --> 01:45:06,800
that the risk of data breaches

3032
01:45:05,360 --> 01:45:08,719
associated with storing sensitive

3033
01:45:06,800 --> 01:45:10,560
customer data is too high. You know,

3034
01:45:08,719 --> 01:45:12,320
maybe for a simple e-commerce site, an

3035
01:45:10,560 --> 01:45:14,480
organization doesn't need to be storing

3036
01:45:12,320 --> 01:45:16,639
financial data for longer than necessary

3037
01:45:14,480 --> 01:45:18,239
just to complete a transaction. So they

3038
01:45:16,639 --> 01:45:20,239
put controls in place to only keep that

3039
01:45:18,239 --> 01:45:22,159
data ephemerally. And lastly, here we

3040
01:45:20,239 --> 01:45:24,000
have risk mitigation. And this involves

3041
01:45:22,159 --> 01:45:26,159
implementing proactive measures to

3042
01:45:24,000 --> 01:45:28,159
reduce the likelihood or impact of any

3043
01:45:26,159 --> 01:45:29,600
identified risk. So for example, we can

3044
01:45:28,159 --> 01:45:31,600
implement things like a strong patch

3045
01:45:29,600 --> 01:45:33,520
management system or plan to mitigate

3046
01:45:31,600 --> 01:45:35,440
the threat or the risk of thread actors

3047
01:45:33,520 --> 01:45:37,360
exploiting vulnerabilities or maybe a

3048
01:45:35,440 --> 01:45:38,960
strong redundancy plan to mitigate data

3049
01:45:37,360 --> 01:45:41,280
loss and system failure which would of

3050
01:45:38,960 --> 01:45:43,199
course impact availability. Okay, we're

3051
01:45:41,280 --> 01:45:44,800
almost done. Let's quickly talk about

3052
01:45:43,199 --> 01:45:46,560
security policies along with a

3053
01:45:44,800 --> 01:45:48,800
non-exhaustive list of some common

3054
01:45:46,560 --> 01:45:50,800
policies that you might see. So security

3055
01:45:48,800 --> 01:45:52,960
policies are documents that outline an

3056
01:45:50,800 --> 01:45:55,520
organization's guidance, principles, and

3057
01:45:52,960 --> 01:45:57,119
procedures for protecting its assets. So

3058
01:45:55,520 --> 01:45:58,880
these policies typically serve as some

3059
01:45:57,119 --> 01:46:00,880
sort of framework that establish and

3060
01:45:58,880 --> 01:46:03,040
enforce security standards or define

3061
01:46:00,880 --> 01:46:04,840
acceptable behavior as well as ensure

3062
01:46:03,040 --> 01:46:06,800
compliance with legal and regulatory

3063
01:46:04,840 --> 01:46:08,560
requirements. So we use security

3064
01:46:06,800 --> 01:46:10,400
policies to provide that clear direction

3065
01:46:08,560 --> 01:46:12,239
to employees and contractors and

3066
01:46:10,400 --> 01:46:13,840
stakeholders within the company on what

3067
01:46:12,239 --> 01:46:15,920
their responsibilities are for

3068
01:46:13,840 --> 01:46:17,760
safeguarding the company's assets. So

3069
01:46:15,920 --> 01:46:19,920
for example, we have acceptable use

3070
01:46:17,760 --> 01:46:21,920
policies and these define acceptable

3071
01:46:19,920 --> 01:46:24,560
behaviors and practices regarding the

3072
01:46:21,920 --> 01:46:26,320
use of an organization's IT systems. So

3073
01:46:24,560 --> 01:46:28,000
basically what is and what isn't allowed

3074
01:46:26,320 --> 01:46:29,119
within the organization. And

3075
01:46:28,000 --> 01:46:30,560
additionally, sometimes you might see

3076
01:46:29,119 --> 01:46:32,080
this through a separate policy called

3077
01:46:30,560 --> 01:46:33,520
bring your own device policies. But

3078
01:46:32,080 --> 01:46:35,520
there are policies that can address the

3079
01:46:33,520 --> 01:46:37,360
use of personal devices as well and

3080
01:46:35,520 --> 01:46:39,679
establish rules and security measures

3081
01:46:37,360 --> 01:46:42,159
for accessing the company resources from

3082
01:46:39,679 --> 01:46:43,600
personal devices. Next, we have the

3083
01:46:42,159 --> 01:46:45,679
password policy, which you're likely

3084
01:46:43,600 --> 01:46:47,520
familiar with as these establish the

3085
01:46:45,679 --> 01:46:49,760
requirements and best practices for

3086
01:46:47,520 --> 01:46:51,600
creating, managing, and securing your

3087
01:46:49,760 --> 01:46:53,119
passwords within the organization. So,

3088
01:46:51,600 --> 01:46:55,440
it includes things like guidelines for

3089
01:46:53,119 --> 01:46:57,920
the complexity and length and expiration

3090
01:46:55,440 --> 01:46:59,760
or even reuse of passwords. Next, we

3091
01:46:57,920 --> 01:47:01,440
have data classification policies and

3092
01:46:59,760 --> 01:47:02,960
these categorize information assets

3093
01:47:01,440 --> 01:47:04,719
based on their sensitivity, their

3094
01:47:02,960 --> 01:47:06,560
criticality or confidentiality

3095
01:47:04,719 --> 01:47:08,320
requirements. So it will define

3096
01:47:06,560 --> 01:47:10,639
classification levels like public or

3097
01:47:08,320 --> 01:47:12,960
internal or confidential restricted and

3098
01:47:10,639 --> 01:47:14,800
specify specific security controls and

3099
01:47:12,960 --> 01:47:17,520
protections that are required for each

3100
01:47:14,800 --> 01:47:19,440
of these classification levels. We also

3101
01:47:17,520 --> 01:47:21,119
have change management policies. So

3102
01:47:19,440 --> 01:47:22,880
these outline the procedures and

3103
01:47:21,119 --> 01:47:25,280
protocols for implementing, reviewing

3104
01:47:22,880 --> 01:47:27,600
and approving any changes to IT systems

3105
01:47:25,280 --> 01:47:29,679
or applications. It defines the roles

3106
01:47:27,600 --> 01:47:31,440
and responsibilities and establishes a

3107
01:47:29,679 --> 01:47:32,960
change control process to mandate

3108
01:47:31,440 --> 01:47:35,280
documentation as well as testing

3109
01:47:32,960 --> 01:47:37,360
requirements to minimize any disruptions

3110
01:47:35,280 --> 01:47:38,800
or errors or any vulnerabilities that

3111
01:47:37,360 --> 01:47:41,040
might be introduced because of these

3112
01:47:38,800 --> 01:47:42,800
changes. So for example, in an ideal

3113
01:47:41,040 --> 01:47:44,880
world, we should have a process to

3114
01:47:42,800 --> 01:47:47,360
document a record of every asset's

3115
01:47:44,880 --> 01:47:48,960
initial state along with every record of

3116
01:47:47,360 --> 01:47:51,520
change like an upgrade or an

3117
01:47:48,960 --> 01:47:53,520
installation or replacement because of

3118
01:47:51,520 --> 01:47:55,520
course change can bring in new risks to

3119
01:47:53,520 --> 01:47:57,920
the organization and the grand purpose

3120
01:47:55,520 --> 01:48:00,719
of any change management process is to

3121
01:47:57,920 --> 01:48:02,880
minimize that risk. And lastly here we

3122
01:48:00,719 --> 01:48:04,719
have a disaster recovery policy and

3123
01:48:02,880 --> 01:48:07,440
these establish the strategies and

3124
01:48:04,719 --> 01:48:10,000
overall objectives and procedures for

3125
01:48:07,440 --> 01:48:12,000
recovering any IT system or data or

3126
01:48:10,000 --> 01:48:13,960
operations and infrastructure in the

3127
01:48:12,000 --> 01:48:16,080
event of a disruptive incident or

3128
01:48:13,960 --> 01:48:17,920
disaster. And so it's going to outline

3129
01:48:16,080 --> 01:48:19,760
the roles and responsibilities of key

3130
01:48:17,920 --> 01:48:21,840
personnel. It's going to identify

3131
01:48:19,760 --> 01:48:23,440
critical systems and resources and

3132
01:48:21,840 --> 01:48:25,760
define things like recovery time

3133
01:48:23,440 --> 01:48:28,239
objectives and recovery point objectives

3134
01:48:25,760 --> 01:48:29,920
to adhere to. And through all this, a

3135
01:48:28,239 --> 01:48:32,000
disaster recovery policy is going to

3136
01:48:29,920 --> 01:48:34,400
help the organization ensure business

3137
01:48:32,000 --> 01:48:36,880
continuity, minimize downtime, and also

3138
01:48:34,400 --> 01:48:39,840
mitigate the impact of unforeseen events

3139
01:48:36,880 --> 01:48:39,840
on organizational

3140
01:48:40,280 --> 01:48:44,080
operations. So, we've covered a lot so

3141
01:48:42,560 --> 01:48:45,840
far, but the one thing we haven't talked

3142
01:48:44,080 --> 01:48:48,000
in detail about yet is the actual

3143
01:48:45,840 --> 01:48:49,440
organizational structure of a sock. You

3144
01:48:48,000 --> 01:48:51,040
know, what different types of roles

3145
01:48:49,440 --> 01:48:53,199
exist? What does the hierarchy look

3146
01:48:51,040 --> 01:48:55,360
like? And although security analysts

3147
01:48:53,199 --> 01:48:56,960
themselves are the backbone of the sock,

3148
01:48:55,360 --> 01:48:58,880
there are a lot more potential avenues

3149
01:48:56,960 --> 01:49:00,560
and roles that we can explore that all

3150
01:48:58,880 --> 01:49:02,719
work together to provide that strong

3151
01:49:00,560 --> 01:49:04,480
security operations coverage. So first,

3152
01:49:02,719 --> 01:49:06,400
you'll typically see three different

3153
01:49:04,480 --> 01:49:07,760
models or arrangements of a sock. There

3154
01:49:06,400 --> 01:49:09,360
might be many more that you come across,

3155
01:49:07,760 --> 01:49:11,280
but in general, we can break it down to

3156
01:49:09,360 --> 01:49:13,600
the following. First, we have an

3157
01:49:11,280 --> 01:49:15,679
internal sock. And this is going to be a

3158
01:49:13,600 --> 01:49:17,840
sock that is owned and fully operated by

3159
01:49:15,679 --> 01:49:19,119
the organization that it serves. So,

3160
01:49:17,840 --> 01:49:20,880
it's going to be staffed with the own

3161
01:49:19,119 --> 01:49:23,280
company's security analysts or engineers

3162
01:49:20,880 --> 01:49:24,719
or incident responders, and the sock is

3163
01:49:23,280 --> 01:49:26,239
going to be fully integrated within the

3164
01:49:24,719 --> 01:49:27,760
organization's existing IT

3165
01:49:26,239 --> 01:49:29,840
infrastructure, and it's going to

3166
01:49:27,760 --> 01:49:32,000
operate as that typical central hub that

3167
01:49:29,840 --> 01:49:33,440
we come to think of. Internal socks are

3168
01:49:32,000 --> 01:49:35,040
great because it offers the most

3169
01:49:33,440 --> 01:49:36,719
visibility that you're ever going to get

3170
01:49:35,040 --> 01:49:39,119
and the most control over security

3171
01:49:36,719 --> 01:49:40,960
operations within your company, but it

3172
01:49:39,119 --> 01:49:43,679
does obviously come with a large upfront

3173
01:49:40,960 --> 01:49:45,360
cost to invest in those resources and

3174
01:49:43,679 --> 01:49:46,800
skilled personnel and technology

3175
01:49:45,360 --> 01:49:49,040
infrastructure and building up the

3176
01:49:46,800 --> 01:49:51,440
actual sock along with ongoing training

3177
01:49:49,040 --> 01:49:53,280
as well. So, as an opposite or

3178
01:49:51,440 --> 01:49:56,000
alternative, we have the managed sock or

3179
01:49:53,280 --> 01:49:57,840
the MOC. Sometimes it's also known as

3180
01:49:56,000 --> 01:50:00,400
security operations center as a service

3181
01:49:57,840 --> 01:50:02,320
or sock as but typically this is going

3182
01:50:00,400 --> 01:50:03,840
to be a sock type entity that's

3183
01:50:02,320 --> 01:50:06,239
outsourced to a third party that

3184
01:50:03,840 --> 01:50:08,080
specializes in cyber security services.

3185
01:50:06,239 --> 01:50:09,920
So if you end up working in a managed

3186
01:50:08,080 --> 01:50:11,760
sock, chances are that you're going to

3187
01:50:09,920 --> 01:50:14,400
be overseeing a large number of clients

3188
01:50:11,760 --> 01:50:16,320
and a large number of different systems.

3189
01:50:14,400 --> 01:50:18,719
And managed socks typically deliver that

3190
01:50:16,320 --> 01:50:20,560
range of 24/7 monitoring and threat

3191
01:50:18,719 --> 01:50:22,480
detection and incident response and

3192
01:50:20,560 --> 01:50:24,400
overseeing the SIM sometimes for a large

3193
01:50:22,480 --> 01:50:26,080
number of clients like we mentioned. And

3194
01:50:24,400 --> 01:50:27,760
sometimes different organizations will

3195
01:50:26,080 --> 01:50:29,679
prefer to have a different amount of

3196
01:50:27,760 --> 01:50:31,280
managed sock involvement, right? So

3197
01:50:29,679 --> 01:50:33,040
maybe a certain customer will have some

3198
01:50:31,280 --> 01:50:34,639
in-house capabilities and would just

3199
01:50:33,040 --> 01:50:36,320
prefer to offload the burden of the

3200
01:50:34,639 --> 01:50:38,080
initial alert triage to the managed

3201
01:50:36,320 --> 01:50:40,000
sock. Other times, your team will be

3202
01:50:38,080 --> 01:50:41,600
expected to provide assistance and lead

3203
01:50:40,000 --> 01:50:42,880
response activities for a customer that

3204
01:50:41,600 --> 01:50:45,199
doesn't have that type of thing in

3205
01:50:42,880 --> 01:50:47,280
house. But unlike an internal sock, one

3206
01:50:45,199 --> 01:50:48,880
of the challenges that organizations and

3207
01:50:47,280 --> 01:50:50,560
sock analysts themselves will face

3208
01:50:48,880 --> 01:50:52,080
working in a managed sock is that it's

3209
01:50:50,560 --> 01:50:54,080
going to be hard to maintain visibility

3210
01:50:52,080 --> 01:50:55,920
and control over the network because

3211
01:50:54,080 --> 01:50:57,840
after all it's managed by the client.

3212
01:50:55,920 --> 01:50:59,440
And this leads us to the hybrid sock or

3213
01:50:57,840 --> 01:51:01,280
the third model here which is going to

3214
01:50:59,440 --> 01:51:03,360
combine the elements of both internal

3215
01:51:01,280 --> 01:51:05,679
and managed socks to sort of leverage a

3216
01:51:03,360 --> 01:51:07,760
mix of in-house resources as well as

3217
01:51:05,679 --> 01:51:09,920
bringing in external expertise as

3218
01:51:07,760 --> 01:51:11,760
needed. So this will allow companies to

3219
01:51:09,920 --> 01:51:13,920
retain that control over their core

3220
01:51:11,760 --> 01:51:15,600
security functions while also allowing

3221
01:51:13,920 --> 01:51:17,440
for more extended or specialized

3222
01:51:15,600 --> 01:51:19,679
capabilities like incident response,

3223
01:51:17,440 --> 01:51:21,840
forensic analysis, malware analysis, and

3224
01:51:19,679 --> 01:51:23,600
leveraging third parties for that. Now

3225
01:51:21,840 --> 01:51:25,440
for the more exciting part, we get to

3226
01:51:23,600 --> 01:51:28,080
talk about the actual roles and titles

3227
01:51:25,440 --> 01:51:29,600
that make up a sock. And listen, before

3228
01:51:28,080 --> 01:51:31,440
we dive in, we need to acknowledge that

3229
01:51:29,600 --> 01:51:33,440
there's kind of a caveat here. Job

3230
01:51:31,440 --> 01:51:35,520
titles and roles specifically in our

3231
01:51:33,440 --> 01:51:37,520
industry are often dynamic and might not

3232
01:51:35,520 --> 01:51:39,679
always align seamlessly to match what

3233
01:51:37,520 --> 01:51:41,679
your specific requirements are. And also

3234
01:51:39,679 --> 01:51:43,520
these roles can vary very significantly

3235
01:51:41,679 --> 01:51:45,199
between organizations based on again

3236
01:51:43,520 --> 01:51:47,040
their structure, their size, their

3237
01:51:45,199 --> 01:51:48,080
maturity and budget. And I'll also

3238
01:51:47,040 --> 01:51:49,920
mention that we're going to be talking

3239
01:51:48,080 --> 01:51:51,119
about a tiered model of sock analysts

3240
01:51:49,920 --> 01:51:52,560
here. And it's important to recognize

3241
01:51:51,119 --> 01:51:54,560
that a lot of organizations kind of

3242
01:51:52,560 --> 01:51:56,560
ditch that traditional tiered model and

3243
01:51:54,560 --> 01:51:58,080
opt for a more collaborative approach.

3244
01:51:56,560 --> 01:52:00,000
And there's definitely an argument to be

3245
01:51:58,080 --> 01:52:01,599
made there that a non-tiered setup can

3246
01:52:00,000 --> 01:52:03,199
kind of promote a more crossunctional

3247
01:52:01,599 --> 01:52:05,280
team. But I'm not going to get into the

3248
01:52:03,199 --> 01:52:07,520
debate here. So to keep everything broad

3249
01:52:05,280 --> 01:52:09,920
and sort of to the book, we're going to

3250
01:52:07,520 --> 01:52:11,840
essentially cover everything we can. So

3251
01:52:09,920 --> 01:52:13,360
let's first start with of course sock

3252
01:52:11,840 --> 01:52:15,679
analysts and these are the frontline

3253
01:52:13,360 --> 01:52:17,440
defenders in a sock. They're responsible

3254
01:52:15,679 --> 01:52:19,440
for monitoring and detecting and

3255
01:52:17,440 --> 01:52:22,159
analyzing and responding to security

3256
01:52:19,440 --> 01:52:24,560
incidents and threats. So, first we have

3257
01:52:22,159 --> 01:52:26,000
a typical tier one sock analyst. And

3258
01:52:24,560 --> 01:52:27,920
these are typically entry-level

3259
01:52:26,000 --> 01:52:29,679
positions that are tasked with the

3260
01:52:27,920 --> 01:52:31,520
initial triage and investigation of

3261
01:52:29,679 --> 01:52:32,719
alerts and incidents. So, they're the

3262
01:52:31,520 --> 01:52:34,560
ones that are doing that routine

3263
01:52:32,719 --> 01:52:36,719
monitoring of the systems and analyzing

3264
01:52:34,560 --> 01:52:38,719
log events and alerts and escalating

3265
01:52:36,719 --> 01:52:40,719
confirmed incidents to higher tiers as

3266
01:52:38,719 --> 01:52:42,960
needed. Essentially, their goal is to

3267
01:52:40,719 --> 01:52:44,560
categorize and prioritize alerts and

3268
01:52:42,960 --> 01:52:46,639
escalate incidents to the tier 2

3269
01:52:44,560 --> 01:52:48,560
analysts as needed. Which leads us to

3270
01:52:46,639 --> 01:52:50,400
the tier 2 analysts. And in many

3271
01:52:48,560 --> 01:52:52,639
organizations, you might see the role of

3272
01:52:50,400 --> 01:52:55,119
a tier 2 analyst be described as an

3273
01:52:52,639 --> 01:52:56,719
incident responder, especially in a sock

3274
01:52:55,119 --> 01:52:58,639
team that does not have a dedicated

3275
01:52:56,719 --> 01:53:00,320
incident response team. So these are

3276
01:52:58,639 --> 01:53:01,679
going to be more senior analysts, and

3277
01:53:00,320 --> 01:53:03,760
they're going to be the ones tasked with

3278
01:53:01,679 --> 01:53:05,520
investigating and remediating escalated

3279
01:53:03,760 --> 01:53:07,119
incidents. And lastly, here in our

3280
01:53:05,520 --> 01:53:08,880
tiered model, we have the tier three,

3281
01:53:07,119 --> 01:53:10,239
which is typically the highest tier that

3282
01:53:08,880 --> 01:53:11,920
you're going to see. And I will speak

3283
01:53:10,239 --> 01:53:14,000
generally here and say that a tier three

3284
01:53:11,920 --> 01:53:16,159
analyst is often referred to as a more

3285
01:53:14,000 --> 01:53:17,760
proactive role in organizations. and

3286
01:53:16,159 --> 01:53:19,760
they're sometimes actually treated as

3287
01:53:17,760 --> 01:53:21,280
threat hunters. So these are going to be

3288
01:53:19,760 --> 01:53:22,960
the most senior level analysts and

3289
01:53:21,280 --> 01:53:24,719
they're able to assist the tier 2s with

3290
01:53:22,960 --> 01:53:26,639
any complex incidents or anything that

3291
01:53:24,719 --> 01:53:29,040
gets escalated to them. But they will

3292
01:53:26,639 --> 01:53:31,040
have a primary focus on proactively

3293
01:53:29,040 --> 01:53:32,480
searching for suspicious behavior or

3294
01:53:31,040 --> 01:53:34,480
ingesting threat intelligence and

3295
01:53:32,480 --> 01:53:36,560
performing threat hunting activities and

3296
01:53:34,480 --> 01:53:38,880
assessments to detect advanced threats

3297
01:53:36,560 --> 01:53:41,040
and areas of improvement to better their

3298
01:53:38,880 --> 01:53:42,560
detection engineering efforts. And I've

3299
01:53:41,040 --> 01:53:43,760
seen different cases of how this is

3300
01:53:42,560 --> 01:53:45,280
structured. So you might have a setup

3301
01:53:43,760 --> 01:53:47,360
where a tier three analyst is doing

3302
01:53:45,280 --> 01:53:49,040
typical instant response and triage

3303
01:53:47,360 --> 01:53:50,639
during the majority of the week and

3304
01:53:49,040 --> 01:53:52,159
maybe they have specific days or

3305
01:53:50,639 --> 01:53:54,320
specific parts of the week where they

3306
01:53:52,159 --> 01:53:55,840
specifically focus on threat hunting.

3307
01:53:54,320 --> 01:53:57,520
Again, this is all dependent on the

3308
01:53:55,840 --> 01:53:59,840
organization and the management of the

3309
01:53:57,520 --> 01:54:01,440
sock. And lastly here we have a sock

3310
01:53:59,840 --> 01:54:03,119
team lead. And this isn't always the

3311
01:54:01,440 --> 01:54:05,040
case. If your team is large enough, you

3312
01:54:03,119 --> 01:54:06,560
might have a dedicated sock team lead

3313
01:54:05,040 --> 01:54:08,320
who is the one who's responsible for

3314
01:54:06,560 --> 01:54:10,000
overseeing the day-to-day operations of

3315
01:54:08,320 --> 01:54:11,840
all the analysts and managing things

3316
01:54:10,000 --> 01:54:13,360
like workload and providing guidance and

3317
01:54:11,840 --> 01:54:15,679
mentorship. But sometimes the

3318
01:54:13,360 --> 01:54:18,080
responsibility of this lead is served by

3319
01:54:15,679 --> 01:54:20,080
a tier 2 or three analyst. So in

3320
01:54:18,080 --> 01:54:22,159
addition to the sock analyst, we

3321
01:54:20,080 --> 01:54:23,760
sometimes have specialized roles that

3322
01:54:22,159 --> 01:54:26,119
address specific cyber security

3323
01:54:23,760 --> 01:54:28,400
challenges and enhance the overall socks

3324
01:54:26,119 --> 01:54:30,000
capabilities. If your organization is

3325
01:54:28,400 --> 01:54:32,080
large enough and they invest enough in

3326
01:54:30,000 --> 01:54:33,599
the sock, you might see one or several

3327
01:54:32,080 --> 01:54:35,119
of these roles that you might want to

3328
01:54:33,599 --> 01:54:37,040
actually work towards as you progress

3329
01:54:35,119 --> 01:54:38,800
your career. So the first one being an

3330
01:54:37,040 --> 01:54:40,960
incident responder. So this would be

3331
01:54:38,800 --> 01:54:42,560
where you have a dedicated team that is

3332
01:54:40,960 --> 01:54:44,719
responsible for responding to and

3333
01:54:42,560 --> 01:54:45,760
containing security incidents. So

3334
01:54:44,719 --> 01:54:47,280
they're going to be the ones that are

3335
01:54:45,760 --> 01:54:49,199
actually leading the incident response

3336
01:54:47,280 --> 01:54:50,800
efforts and assessing the severity and

3337
01:54:49,199 --> 01:54:52,719
the scope and executing incident

3338
01:54:50,800 --> 01:54:54,480
response plans and dealing with you know

3339
01:54:52,719 --> 01:54:57,199
the collaboration between stakeholders

3340
01:54:54,480 --> 01:54:58,560
and management and IT and legal and all

3341
01:54:57,199 --> 01:55:01,280
the other departments that are involved

3342
01:54:58,560 --> 01:55:03,440
in an incident. So next we have threat

3343
01:55:01,280 --> 01:55:05,760
hunters. And these again are going to be

3344
01:55:03,440 --> 01:55:07,440
that proactive role that searches for

3345
01:55:05,760 --> 01:55:09,040
signs of advanced threats and tries to

3346
01:55:07,440 --> 01:55:11,199
find hidden security risks within the

3347
01:55:09,040 --> 01:55:12,320
organization that isn't being detected.

3348
01:55:11,199 --> 01:55:14,000
So they might be the ones that are

3349
01:55:12,320 --> 01:55:16,159
developing custom alert and detection

3350
01:55:14,000 --> 01:55:17,760
rules. They might be ingesting threat

3351
01:55:16,159 --> 01:55:19,360
intelligence and using that to conduct

3352
01:55:17,760 --> 01:55:20,960
threat hunts where they try to find

3353
01:55:19,360 --> 01:55:22,800
known indicators of compromise within

3354
01:55:20,960 --> 01:55:24,159
their environment. And this kind of

3355
01:55:22,800 --> 01:55:25,920
leads us to threat intelligence

3356
01:55:24,159 --> 01:55:27,599
analysts, which are the ones who are

3357
01:55:25,920 --> 01:55:29,119
going to be gathering and analyzing and

3358
01:55:27,599 --> 01:55:30,960
disseminating the actionable

3359
01:55:29,119 --> 01:55:32,880
intelligence on emerging cyber threats

3360
01:55:30,960 --> 01:55:35,119
or adversary tactics, techniques, and

3361
01:55:32,880 --> 01:55:36,960
procedures or TTPs related to their

3362
01:55:35,119 --> 01:55:38,800
organization's threat model. And they'll

3363
01:55:36,960 --> 01:55:41,040
do this by collecting and analyzing

3364
01:55:38,800 --> 01:55:42,480
threat data from various sources. So the

3365
01:55:41,040 --> 01:55:44,239
organization might subscribe to

3366
01:55:42,480 --> 01:55:45,599
proprietary feeds and actually pay for

3367
01:55:44,239 --> 01:55:47,280
that threat intelligence related to

3368
01:55:45,599 --> 01:55:48,800
their organization. or they might use

3369
01:55:47,280 --> 01:55:50,880
things like open source intelligence or

3370
01:55:48,800 --> 01:55:52,800
OSENT or things like collaborations with

3371
01:55:50,880 --> 01:55:54,000
information sharing communities. So

3372
01:55:52,800 --> 01:55:55,840
typically they're going to be the ones

3373
01:55:54,000 --> 01:55:57,360
producing intelligence reports. They're

3374
01:55:55,840 --> 01:55:59,440
going to be reporting on indicators of

3375
01:55:57,360 --> 01:56:01,040
compromise and developing actionable

3376
01:55:59,440 --> 01:56:03,199
insights that can help things like the

3377
01:56:01,040 --> 01:56:04,639
threat hunters or the tier 3 analysts

3378
01:56:03,199 --> 01:56:05,920
and support things like making the

3379
01:56:04,639 --> 01:56:07,000
organization more efficient with

3380
01:56:05,920 --> 01:56:09,199
detecting

3381
01:56:07,000 --> 01:56:11,119
threats. Next, we have a very important

3382
01:56:09,199 --> 01:56:13,119
role, the security engineer, sometimes

3383
01:56:11,119 --> 01:56:14,560
referred to as a security architect. And

3384
01:56:13,119 --> 01:56:16,639
these are going to be the people who

3385
01:56:14,560 --> 01:56:17,920
design, implement, and maintain the

3386
01:56:16,639 --> 01:56:19,280
different security controls,

3387
01:56:17,920 --> 01:56:21,040
technologies, and the overall

3388
01:56:19,280 --> 01:56:22,719
architecture that the sock is built

3389
01:56:21,040 --> 01:56:24,400
upon. So, they're going to be the ones

3390
01:56:22,719 --> 01:56:26,560
getting that hands-on deployment and

3391
01:56:24,400 --> 01:56:28,159
design and configuration to actively

3392
01:56:26,560 --> 01:56:31,040
tune security infrastructure like

3393
01:56:28,159 --> 01:56:32,239
firewalls or IDs and IPS systems. They

3394
01:56:31,040 --> 01:56:34,080
might also be the ones conducting

3395
01:56:32,239 --> 01:56:35,679
security assessments or audits and maybe

3396
01:56:34,080 --> 01:56:37,440
reviews to identify weaknesses and

3397
01:56:35,679 --> 01:56:39,040
recommend remediation measures to

3398
01:56:37,440 --> 01:56:40,800
enhance the security posture amongst the

3399
01:56:39,040 --> 01:56:42,719
organization. Which kind of leads us

3400
01:56:40,800 --> 01:56:44,080
into vulnerability management. And if

3401
01:56:42,719 --> 01:56:45,760
you're in this type of role, you're

3402
01:56:44,080 --> 01:56:47,840
typically going to be the one who's

3403
01:56:45,760 --> 01:56:50,159
overseeing the identification, the

3404
01:56:47,840 --> 01:56:52,159
assessment, prioritization, and also the

3405
01:56:50,159 --> 01:56:54,080
remediation of security vulnerabilities

3406
01:56:52,159 --> 01:56:55,360
within the organization's environment.

3407
01:56:54,080 --> 01:56:57,760
So, they might be the ones conducting

3408
01:56:55,360 --> 01:56:59,280
vulnerability assessments or scans or

3409
01:56:57,760 --> 01:57:01,199
coordinating penetration tests to

3410
01:56:59,280 --> 01:57:02,400
identify weaknesses in systems or

3411
01:57:01,199 --> 01:57:04,239
applications or any kind of

3412
01:57:02,400 --> 01:57:05,440
infrastructure within the org. They're

3413
01:57:04,239 --> 01:57:07,280
going to be the ones going through the

3414
01:57:05,440 --> 01:57:09,119
reports and prioritizing vulnerabilities

3415
01:57:07,280 --> 01:57:10,960
based on their risk factors, how

3416
01:57:09,119 --> 01:57:12,960
exploitable they are, the potential

3417
01:57:10,960 --> 01:57:15,199
impact and you know relevance to the

3418
01:57:12,960 --> 01:57:17,040
company. And with this analysis, they'll

3419
01:57:15,199 --> 01:57:18,880
be collaborating with the IT teams and

3420
01:57:17,040 --> 01:57:20,760
development teams to sort of implement

3421
01:57:18,880 --> 01:57:23,040
patching strategies and remediation

3422
01:57:20,760 --> 01:57:24,880
plans. Next year, we have forensic

3423
01:57:23,040 --> 01:57:26,800
analysts. And these folks specialize in

3424
01:57:24,880 --> 01:57:29,119
digital forensics and incident response

3425
01:57:26,800 --> 01:57:30,400
or what we refer to as defer. So they're

3426
01:57:29,119 --> 01:57:32,159
going to be the ones collecting and

3427
01:57:30,400 --> 01:57:34,000
preserving and analyzing digital

3428
01:57:32,159 --> 01:57:35,679
evidence to come up with timelines and

3429
01:57:34,000 --> 01:57:37,679
reconstruct events and trace an

3430
01:57:35,679 --> 01:57:40,000
attacker's activities to support legal

3431
01:57:37,679 --> 01:57:41,520
and sometimes regulatory investigations.

3432
01:57:40,000 --> 01:57:43,040
So sometimes this type of function is

3433
01:57:41,520 --> 01:57:45,119
left to third party companies that come

3434
01:57:43,040 --> 01:57:46,800
in during or after an incident or

3435
01:57:45,119 --> 01:57:48,960
sometimes companies engage forensic

3436
01:57:46,800 --> 01:57:50,159
analysts on retainers for this purpose.

3437
01:57:48,960 --> 01:57:51,599
So again, these are the ones that are

3438
01:57:50,159 --> 01:57:54,000
going to be doing the data acquisition

3439
01:57:51,599 --> 01:57:55,520
to acquire evidence or performing memory

3440
01:57:54,000 --> 01:57:57,040
dumps or documenting their findings,

3441
01:57:55,520 --> 01:57:59,199
preparing forensic reports, and

3442
01:57:57,040 --> 01:58:01,280
maintaining chain of custody. They might

3443
01:57:59,199 --> 01:58:02,960
need to testify as the expert witness in

3444
01:58:01,280 --> 01:58:05,679
legal proceedings depending on how

3445
01:58:02,960 --> 01:58:07,599
severe the incident is. And lastly, here

3446
01:58:05,679 --> 01:58:09,199
we have a malware analyst. And again,

3447
01:58:07,599 --> 01:58:10,719
this is one of those specialized roles,

3448
01:58:09,199 --> 01:58:12,320
which you may or may not see in your

3449
01:58:10,719 --> 01:58:14,080
day-to-day, but they're going to be the

3450
01:58:12,320 --> 01:58:16,080
ones that are specialized in analyzing

3451
01:58:14,080 --> 01:58:17,920
and reverse engineering malware to

3452
01:58:16,080 --> 01:58:20,080
understand its functionality, behavior,

3453
01:58:17,920 --> 01:58:21,679
and impact on the systems. Personally,

3454
01:58:20,080 --> 01:58:23,199
I've never seen a dedicated malware

3455
01:58:21,679 --> 01:58:24,880
analyst at any of the sock roles I've

3456
01:58:23,199 --> 01:58:26,560
been in. You're primarily going to be

3457
01:58:24,880 --> 01:58:28,080
looking at like larger companies or

3458
01:58:26,560 --> 01:58:29,679
companies that do a lot of research and

3459
01:58:28,080 --> 01:58:32,080
development. We can think of things like

3460
01:58:29,679 --> 01:58:33,760
EDR or anti virus companies where having

3461
01:58:32,080 --> 01:58:35,760
this function would actively benefit the

3462
01:58:33,760 --> 01:58:37,520
end product of the business. So lastly,

3463
01:58:35,760 --> 01:58:39,360
let's talk about management type roles.

3464
01:58:37,520 --> 01:58:41,599
And obviously management roles are going

3465
01:58:39,360 --> 01:58:43,920
to provide that strategic leadership and

3466
01:58:41,599 --> 01:58:45,000
direction and overall oversight for all

3467
01:58:43,920 --> 01:58:47,360
of the sock

3468
01:58:45,000 --> 01:58:49,040
operations. So first we have the sock

3469
01:58:47,360 --> 01:58:50,480
manager. And the sock manager is going

3470
01:58:49,040 --> 01:58:52,239
to be the one who oversees the

3471
01:58:50,480 --> 01:58:54,080
day-to-day operations within the

3472
01:58:52,239 --> 01:58:55,280
security operations center. So they're

3473
01:58:54,080 --> 01:58:57,599
going to be the ones managing the

3474
01:58:55,280 --> 01:58:58,960
personnel, the resources, the budget,

3475
01:58:57,599 --> 01:59:00,719
different activities and priorities

3476
01:58:58,960 --> 01:59:02,239
within the sock to ensure that the

3477
01:59:00,719 --> 01:59:03,920
monitoring, detection, and response

3478
01:59:02,239 --> 01:59:06,239
efforts are going as well as they

3479
01:59:03,920 --> 01:59:07,840
possibly can. And sometimes you might

3480
01:59:06,239 --> 01:59:09,840
have another role like a director of

3481
01:59:07,840 --> 01:59:11,119
security. Not all the time, but this is

3482
01:59:09,840 --> 01:59:13,040
typically going to be a senior

3483
01:59:11,119 --> 01:59:14,320
leadership role that's responsible for

3484
01:59:13,040 --> 01:59:16,320
defining and executing the

3485
01:59:14,320 --> 01:59:17,840
organization's overall cyber security

3486
01:59:16,320 --> 01:59:18,800
initiatives.

3487
01:59:17,840 --> 01:59:20,480
So they're going to be the ones

3488
01:59:18,800 --> 01:59:22,719
providing strategic direction and

3489
01:59:20,480 --> 01:59:24,639
governance and general oversight for all

3490
01:59:22,719 --> 01:59:26,880
aspects of security within the company

3491
01:59:24,639 --> 01:59:28,560
and this includes sock operations. So

3492
01:59:26,880 --> 01:59:30,639
they might be the ones implementing the

3493
01:59:28,560 --> 01:59:32,719
standards and policies and controls that

3494
01:59:30,639 --> 01:59:34,960
protect the organization and support the

3495
01:59:32,719 --> 01:59:36,480
business objectives. They might be the

3496
01:59:34,960 --> 01:59:38,320
ones collaborating with executive

3497
01:59:36,480 --> 01:59:40,159
leadership or board members or external

3498
01:59:38,320 --> 01:59:42,480
stakeholders to assess risk and

3499
01:59:40,159 --> 01:59:44,480
prioritize investments. Which leads us

3500
01:59:42,480 --> 01:59:46,480
into the sea level here with the CISO or

3501
01:59:44,480 --> 01:59:47,840
the chief information security officer.

3502
01:59:46,480 --> 01:59:49,599
And this is going to be the highest

3503
01:59:47,840 --> 01:59:51,440
ranking executive that's responsible for

3504
01:59:49,599 --> 01:59:53,159
the organization's overall security

3505
01:59:51,440 --> 01:59:55,119
program and all of these security

3506
01:59:53,159 --> 01:59:56,639
initiatives. So many of the things we

3507
01:59:55,119 --> 01:59:58,400
just mentioned for the director often

3508
01:59:56,639 --> 01:59:59,760
apply to the CISO. So again, they're

3509
01:59:58,400 --> 02:00:01,760
going to be on that senior management

3510
01:59:59,760 --> 02:00:03,520
level and on the board to advocate for

3511
02:00:01,760 --> 02:00:06,639
investments within the cyber security

3512
02:00:03,520 --> 02:00:06,639
capabilities within the

3513
02:00:07,960 --> 02:00:11,520
organization. As we dive deeper into

3514
02:00:10,159 --> 02:00:13,119
this course, we're going to be getting

3515
02:00:11,520 --> 02:00:15,440
hands-on with incident and event

3516
02:00:13,119 --> 02:00:16,960
management operations. Because of this,

3517
02:00:15,440 --> 02:00:18,800
we should understand what goes into

3518
02:00:16,960 --> 02:00:20,480
incident and event management and make

3519
02:00:18,800 --> 02:00:22,239
some key distinctions that an analyst

3520
02:00:20,480 --> 02:00:24,480
must make every day when dealing with

3521
02:00:22,239 --> 02:00:26,320
handling alerts. So, when we think about

3522
02:00:24,480 --> 02:00:28,560
event management, we're thinking about

3523
02:00:26,320 --> 02:00:30,560
the process of monitoring, analyzing,

3524
02:00:28,560 --> 02:00:33,360
and prioritizing security events

3525
02:00:30,560 --> 02:00:35,040
generated by our various systems. The

3526
02:00:33,360 --> 02:00:36,960
goal of event management is to

3527
02:00:35,040 --> 02:00:38,960
continually collect an accurate record

3528
02:00:36,960 --> 02:00:41,040
of all the happenings going on across

3529
02:00:38,960 --> 02:00:43,440
our environment, which gives us a strong

3530
02:00:41,040 --> 02:00:44,960
visibility into our infrastructure. So

3531
02:00:43,440 --> 02:00:47,280
as an analyst, we can turn this

3532
02:00:44,960 --> 02:00:49,119
visibility into actionable insights and

3533
02:00:47,280 --> 02:00:50,960
allow the sock to identify potential

3534
02:00:49,119 --> 02:00:53,040
security incidents or anomalies or

3535
02:00:50,960 --> 02:00:54,639
threats in real time so we can then take

3536
02:00:53,040 --> 02:00:57,280
the appropriate actions to mitigate

3537
02:00:54,639 --> 02:00:59,360
those risks. So a crucial first step in

3538
02:00:57,280 --> 02:01:01,520
being able to manage events is to

3539
02:00:59,360 --> 02:01:03,599
collect events obviously and we do that

3540
02:01:01,520 --> 02:01:05,440
by first taking an asset inventory of

3541
02:01:03,599 --> 02:01:07,599
all the systems and devices within our

3542
02:01:05,440 --> 02:01:09,840
network to identify where the gaps are

3543
02:01:07,599 --> 02:01:11,599
and determine what we need to collect.

3544
02:01:09,840 --> 02:01:13,599
So, these sources of these events

3545
02:01:11,599 --> 02:01:15,840
include things like firewalls and

3546
02:01:13,599 --> 02:01:18,239
intrusion detection systems or antivirus

3547
02:01:15,840 --> 02:01:19,840
software, log files, network devices,

3548
02:01:18,239 --> 02:01:22,000
user endpoints and hosts, and you know,

3549
02:01:19,840 --> 02:01:24,080
the list goes on. These events might

3550
02:01:22,000 --> 02:01:25,920
include system alerts or network traffic

3551
02:01:24,080 --> 02:01:27,440
logs or authentication logs and

3552
02:01:25,920 --> 02:01:29,360
application logs. We're going to get

3553
02:01:27,440 --> 02:01:30,880
more into this in the SIM section, but

3554
02:01:29,360 --> 02:01:32,719
typically we'll deploy something like an

3555
02:01:30,880 --> 02:01:34,800
agent or a forwarder to these devices

3556
02:01:32,719 --> 02:01:36,000
that can then collect and transmit logs.

3557
02:01:34,800 --> 02:01:37,920
In the cases where we're dealing with

3558
02:01:36,000 --> 02:01:39,280
like networking equipment or a router or

3559
02:01:37,920 --> 02:01:41,119
something where we can't actually deploy

3560
02:01:39,280 --> 02:01:43,199
an agent, we're going to use some other

3561
02:01:41,119 --> 02:01:44,599
protocol specific means like SIS log or

3562
02:01:43,199 --> 02:01:46,880
something to then collect that

3563
02:01:44,599 --> 02:01:48,880
information. So the collected events are

3564
02:01:46,880 --> 02:01:50,880
then normalized to a common format or a

3565
02:01:48,880 --> 02:01:52,960
schema that can facilitate consistent

3566
02:01:50,880 --> 02:01:54,960
analysis as well as correlation across

3567
02:01:52,960 --> 02:01:56,480
different data sources and technologies.

3568
02:01:54,960 --> 02:01:57,679
So when we think about normalization,

3569
02:01:56,480 --> 02:01:59,360
that's going to involve like

3570
02:01:57,679 --> 02:02:01,440
standardizing the event attributes or

3571
02:01:59,360 --> 02:02:03,360
the timestamps or even the data formats

3572
02:02:01,440 --> 02:02:05,119
themselves to ensure that they are

3573
02:02:03,360 --> 02:02:06,560
consistent across the board. So for

3574
02:02:05,119 --> 02:02:08,080
example, imagine if we have two

3575
02:02:06,560 --> 02:02:10,239
different log sources, maybe like a

3576
02:02:08,080 --> 02:02:12,239
firewall as well as a reverse proxy

3577
02:02:10,239 --> 02:02:14,080
server that we're collecting logs from.

3578
02:02:12,239 --> 02:02:15,920
And these two different devices have

3579
02:02:14,080 --> 02:02:17,920
different naming conventions when they

3580
02:02:15,920 --> 02:02:20,880
log a source IP address. For example,

3581
02:02:17,920 --> 02:02:23,440
maybe the firewall logs it as IP source

3582
02:02:20,880 --> 02:02:25,040
and maybe the proxy server says source

3583
02:02:23,440 --> 02:02:26,480
IP address. These are not accurate

3584
02:02:25,040 --> 02:02:28,560
examples, but just so you can start

3585
02:02:26,480 --> 02:02:30,239
thinking about it. So normalization is

3586
02:02:28,560 --> 02:02:32,159
going to be the process of parsing the

3587
02:02:30,239 --> 02:02:33,440
schema of these logs and ensuring

3588
02:02:32,159 --> 02:02:35,280
consistency when the logs are

3589
02:02:33,440 --> 02:02:36,880
aggregated. So when an analyst is

3590
02:02:35,280 --> 02:02:38,480
searching for a source IP address,

3591
02:02:36,880 --> 02:02:41,040
they're effectively querying a single

3592
02:02:38,480 --> 02:02:42,719
data point rather than multiple. And so

3593
02:02:41,040 --> 02:02:44,400
when events meet a predefined rule

3594
02:02:42,719 --> 02:02:46,320
criteria or different thresholds,

3595
02:02:44,400 --> 02:02:48,080
they're converted into actionable alerts

3596
02:02:46,320 --> 02:02:50,320
and are then forwarded to the sock for

3597
02:02:48,080 --> 02:02:52,080
further investigation and response. As

3598
02:02:50,320 --> 02:02:54,000
we talked about previously, alerts are

3599
02:02:52,080 --> 02:02:55,840
categorized in different ways. based on

3600
02:02:54,000 --> 02:02:57,920
their severity, their urgency, and

3601
02:02:55,840 --> 02:02:59,920
relevance to the organization itself.

3602
02:02:57,920 --> 02:03:01,840
And this magical SIM solution that we've

3603
02:02:59,920 --> 02:03:04,400
been talking about is the centralized

3604
02:03:01,840 --> 02:03:07,119
platform that aggregates, normalizes,

3605
02:03:04,400 --> 02:03:08,880
correlates, and analyzes these events.

3606
02:03:07,119 --> 02:03:10,800
And there are a number of different SIM

3607
02:03:08,880 --> 02:03:12,719
platforms and vendors out there that

3608
02:03:10,800 --> 02:03:14,480
provide SIM capability. And you can see

3609
02:03:12,719 --> 02:03:15,920
some of the ones listed below. On the

3610
02:03:14,480 --> 02:03:18,000
right hand side we have a screenshot of

3611
02:03:15,920 --> 02:03:19,760
the Splunk cloud instance but we also

3612
02:03:18,000 --> 02:03:22,719
have different options like log RHM or

3613
02:03:19,760 --> 02:03:25,119
IBM's Q radar elastic security grey log

3614
02:03:22,719 --> 02:03:26,880
or solar winds. So when we talk about

3615
02:03:25,119 --> 02:03:28,719
incident management on the other hand

3616
02:03:26,880 --> 02:03:30,880
well this is the process of detecting

3617
02:03:28,719 --> 02:03:32,560
and responding to and resolving security

3618
02:03:30,880 --> 02:03:34,320
incidents in a timely and effective

3619
02:03:32,560 --> 02:03:36,159
manner so that we can minimize their

3620
02:03:34,320 --> 02:03:37,520
impact. Like with event management,

3621
02:03:36,159 --> 02:03:39,679
we're going to get deeper into this

3622
02:03:37,520 --> 02:03:41,360
later on but at a high level the

3623
02:03:39,679 --> 02:03:43,040
incident management life cycle attempts

3624
02:03:41,360 --> 02:03:44,719
to follow some sort of a defined

3625
02:03:43,040 --> 02:03:46,639
process. So we have incident

3626
02:03:44,719 --> 02:03:48,159
identification. This is when security

3627
02:03:46,639 --> 02:03:50,000
incidents are identified through our

3628
02:03:48,159 --> 02:03:51,920
event management process or through our

3629
02:03:50,000 --> 02:03:53,520
different detection mechanisms or alerts

3630
02:03:51,920 --> 02:03:55,040
or user reports or external

3631
02:03:53,520 --> 02:03:56,000
notifications. So there are many

3632
02:03:55,040 --> 02:03:57,440
different ways and there are many

3633
02:03:56,000 --> 02:03:59,360
different types of incidents too, right?

3634
02:03:57,440 --> 02:04:01,199
We might have unauthorized access or

3635
02:03:59,360 --> 02:04:02,880
malware infections or data breaches or

3636
02:04:01,199 --> 02:04:04,960
denial of service attacks. You know the

3637
02:04:02,880 --> 02:04:06,560
list goes on. We then have incident

3638
02:04:04,960 --> 02:04:08,239
classification and this is where

3639
02:04:06,560 --> 02:04:10,639
incidents are classified based on their

3640
02:04:08,239 --> 02:04:12,560
severity, impact and the nature of the

3641
02:04:10,639 --> 02:04:14,239
threat. And some common classification

3642
02:04:12,560 --> 02:04:16,480
categories that you might see are like

3643
02:04:14,239 --> 02:04:18,320
critical, high, medium, or even low

3644
02:04:16,480 --> 02:04:20,080
severity alerts. And these are going to

3645
02:04:18,320 --> 02:04:21,599
help prioritize the incident response

3646
02:04:20,080 --> 02:04:23,520
efforts and allocate resources

3647
02:04:21,599 --> 02:04:25,199
accordingly. Next, we have incident

3648
02:04:23,520 --> 02:04:26,719
investigation. So this is where the

3649
02:04:25,199 --> 02:04:28,560
actual sock analysts are going to

3650
02:04:26,719 --> 02:04:30,639
conduct their thorough investigations

3651
02:04:28,560 --> 02:04:32,560
and gather evidence and analyze the root

3652
02:04:30,639 --> 02:04:34,320
cause and determine the scope and extent

3653
02:04:32,560 --> 02:04:35,440
of the incident. So they might be

3654
02:04:34,320 --> 02:04:37,199
looking at logs and doing some

3655
02:04:35,440 --> 02:04:38,880
correlation and searches or they might

3656
02:04:37,199 --> 02:04:41,440
be actually gathering forensic evidence

3657
02:04:38,880 --> 02:04:43,040
on an infected workstation. Next we have

3658
02:04:41,440 --> 02:04:44,639
the incident containment. So once the

3659
02:04:43,040 --> 02:04:46,159
nature and the scope of the incident are

3660
02:04:44,639 --> 02:04:47,520
understood, this is when the sock

3661
02:04:46,159 --> 02:04:49,199
analyst is going to implement the

3662
02:04:47,520 --> 02:04:51,280
containment measures to prevent further

3663
02:04:49,199 --> 02:04:53,360
escalation or minimize the spread of

3664
02:04:51,280 --> 02:04:55,199
damage. So this might involve isolating

3665
02:04:53,360 --> 02:04:57,280
the affected systems or blocking the

3666
02:04:55,199 --> 02:04:59,040
network traffic or disabling compromised

3667
02:04:57,280 --> 02:05:00,800
user accounts. Next here we have

3668
02:04:59,040 --> 02:05:02,239
incident eradication which is kind of

3669
02:05:00,800 --> 02:05:03,599
similar here. This is where after the

3670
02:05:02,239 --> 02:05:05,280
containment measures are in place, the

3671
02:05:03,599 --> 02:05:06,719
sock analyst is going to work on

3672
02:05:05,280 --> 02:05:08,639
eradicating the root cause of the

3673
02:05:06,719 --> 02:05:11,280
incident and restore the affected system

3674
02:05:08,639 --> 02:05:12,639
to a secure known good state. So this

3675
02:05:11,280 --> 02:05:14,560
might involve actually removing the

3676
02:05:12,639 --> 02:05:16,320
malware or patching vulnerabilities or

3677
02:05:14,560 --> 02:05:18,239
most likely just restoring data from

3678
02:05:16,320 --> 02:05:20,159
backups. And lastly here we have

3679
02:05:18,239 --> 02:05:22,320
incident recovery. So once the incident

3680
02:05:20,159 --> 02:05:24,159
is resolved, the sock analyst is going

3681
02:05:22,320 --> 02:05:26,400
to focus on restoring normal business

3682
02:05:24,159 --> 02:05:28,159
operations and miticate any residual

3683
02:05:26,400 --> 02:05:30,480
impact. This might include things like

3684
02:05:28,159 --> 02:05:32,239
post incident reviews and meeting with

3685
02:05:30,480 --> 02:05:34,400
stakeholders to determine what was the

3686
02:05:32,239 --> 02:05:36,000
root cause or updating security policies

3687
02:05:34,400 --> 02:05:37,840
and procedures or providing user

3688
02:05:36,000 --> 02:05:40,400
awareness training to prevent similar

3689
02:05:37,840 --> 02:05:42,080
incidents in the future. So let's talk

3690
02:05:40,400 --> 02:05:44,080
about detection outcomes. So there's

3691
02:05:42,080 --> 02:05:46,159
some terminology that's commonly used in

3692
02:05:44,080 --> 02:05:48,400
the context of security event analysis

3693
02:05:46,159 --> 02:05:50,400
as well as incident response to describe

3694
02:05:48,400 --> 02:05:52,560
the accuracy and reliability of our

3695
02:05:50,400 --> 02:05:54,159
detection and alerting mechanisms. And

3696
02:05:52,560 --> 02:05:55,840
as a sock analyst, you're going to be

3697
02:05:54,159 --> 02:05:58,239
constantly classifying alerts you

3698
02:05:55,840 --> 02:06:00,080
receive as true or false positives. And

3699
02:05:58,239 --> 02:06:02,159
the sock itself is going to be actively

3700
02:06:00,080 --> 02:06:03,760
tuning its detection capabilities to

3701
02:06:02,159 --> 02:06:06,080
mitigate any potential for false

3702
02:06:03,760 --> 02:06:07,520
negatives or missed incidents. So the

3703
02:06:06,080 --> 02:06:09,599
first one we have here is the false

3704
02:06:07,520 --> 02:06:12,000
positive. And this is going to be when a

3705
02:06:09,599 --> 02:06:13,920
security tool or system incorrectly

3706
02:06:12,000 --> 02:06:16,239
identifies a normal or benign activity

3707
02:06:13,920 --> 02:06:17,360
as a security threat or an incident. So,

3708
02:06:16,239 --> 02:06:19,679
for example, we could think of an

3709
02:06:17,360 --> 02:06:21,440
antivirus program mistakenly flagging a

3710
02:06:19,679 --> 02:06:23,440
legitimate word processing software as

3711
02:06:21,440 --> 02:06:25,520
malware leading to a false positive

3712
02:06:23,440 --> 02:06:27,280
alert. Or maybe a rule is tuned too

3713
02:06:25,520 --> 02:06:28,800
sensitively and when a user mistypes

3714
02:06:27,280 --> 02:06:30,880
their password a couple times, the

3715
02:06:28,800 --> 02:06:32,719
system alerts on a brute force attempt.

3716
02:06:30,880 --> 02:06:34,560
Next, we have a true positive. So, a

3717
02:06:32,719 --> 02:06:37,199
true positive occurs when a security

3718
02:06:34,560 --> 02:06:39,119
tool or system correctly identifies a

3719
02:06:37,199 --> 02:06:40,560
genuine security threat or an incident.

3720
02:06:39,119 --> 02:06:42,400
So for example, we could think of a

3721
02:06:40,560 --> 02:06:44,960
network intrusion detection system or an

3722
02:06:42,400 --> 02:06:46,639
IDS accurately detects an alert sock

3723
02:06:44,960 --> 02:06:48,560
analyst on a malicious attempt to

3724
02:06:46,639 --> 02:06:50,560
exploit a vulnerability on a web server

3725
02:06:48,560 --> 02:06:52,320
for example. Next we have a false

3726
02:06:50,560 --> 02:06:54,719
negative and this occurs when a security

3727
02:06:52,320 --> 02:06:56,480
tool or a system fails to detect a

3728
02:06:54,719 --> 02:06:58,400
genuine security threat or incident. And

3729
02:06:56,480 --> 02:06:59,920
these are very scary. So for example,

3730
02:06:58,400 --> 02:07:02,159
imagine there's a threat actor that

3731
02:06:59,920 --> 02:07:03,679
evaded a web application firewall and

3732
02:07:02,159 --> 02:07:05,920
gain access to a web server through

3733
02:07:03,679 --> 02:07:08,000
remote code execution and then maybe the

3734
02:07:05,920 --> 02:07:09,840
attacker is able to exfiltrate data or

3735
02:07:08,000 --> 02:07:11,840
privilege escalate or move laterally

3736
02:07:09,840 --> 02:07:13,599
without being detected by any network or

3737
02:07:11,840 --> 02:07:15,840
system rules. Obviously this is very

3738
02:07:13,599 --> 02:07:18,000
scary. And lastly here we have a true

3739
02:07:15,840 --> 02:07:19,840
negative. So this occurs when a security

3740
02:07:18,000 --> 02:07:21,679
tool or a system correctly determines

3741
02:07:19,840 --> 02:07:23,679
that no security threat or incident is

3742
02:07:21,679 --> 02:07:25,599
present and as a result no alert is

3743
02:07:23,679 --> 02:07:27,040
generated. So, for example, we could

3744
02:07:25,599 --> 02:07:28,800
think of a firewall correctly

3745
02:07:27,040 --> 02:07:30,400
identifying and allowing legitimate

3746
02:07:28,800 --> 02:07:34,159
traffic to pass through it without

3747
02:07:30,400 --> 02:07:34,159
triggering any false alarms or false

3748
02:07:34,760 --> 02:07:38,880
positives. Now that we have a better

3749
02:07:36,719 --> 02:07:40,159
idea of what aspects make up a sock,

3750
02:07:38,880 --> 02:07:41,760
let's quickly look at some of the

3751
02:07:40,159 --> 02:07:43,280
metrics and benchmarks that are

3752
02:07:41,760 --> 02:07:45,119
typically used to evaluate the

3753
02:07:43,280 --> 02:07:47,440
effectiveness and performance of the

3754
02:07:45,119 --> 02:07:49,440
people, processes, and technology within

3755
02:07:47,440 --> 02:07:51,840
the sock. This is an important point to

3756
02:07:49,440 --> 02:07:53,679
cover because as an analyst, you will be

3757
02:07:51,840 --> 02:07:55,679
the first line of defense and one of the

3758
02:07:53,679 --> 02:07:57,639
most crucial contributors that actively

3759
02:07:55,679 --> 02:08:00,480
impacts these metrics on the day-to-day

3760
02:07:57,639 --> 02:08:02,320
basis. And the reason why metrics are so

3761
02:08:00,480 --> 02:08:04,719
important to businesses, particularly

3762
02:08:02,320 --> 02:08:06,800
sock managers and CISOs, is their role

3763
02:08:04,719 --> 02:08:09,040
in providing quantifiable insights into

3764
02:08:06,800 --> 02:08:10,880
the socks operational efficiency,

3765
02:08:09,040 --> 02:08:13,119
effectiveness, and also alignment with

3766
02:08:10,880 --> 02:08:14,800
the organization's goals. So by

3767
02:08:13,119 --> 02:08:16,719
collecting these metrics, it enables

3768
02:08:14,800 --> 02:08:18,560
these stakeholders to assess the sock's

3769
02:08:16,719 --> 02:08:20,320
performance, identify any areas of

3770
02:08:18,560 --> 02:08:22,000
improvement, and make datadriven

3771
02:08:20,320 --> 02:08:24,320
decisions that optimize the security

3772
02:08:22,000 --> 02:08:25,840
posture of the organization. And while

3773
02:08:24,320 --> 02:08:27,119
there are a number of different metrics

3774
02:08:25,840 --> 02:08:28,800
and strategies for measuring

3775
02:08:27,119 --> 02:08:30,480
performance, you're likely going to

3776
02:08:28,800 --> 02:08:31,840
encounter some of the following in your

3777
02:08:30,480 --> 02:08:33,679
roles as they're quite common in the

3778
02:08:31,840 --> 02:08:35,040
field. I will say though, there are some

3779
02:08:33,679 --> 02:08:36,880
arguments to be made in terms of

3780
02:08:35,040 --> 02:08:38,400
weighing and prioritizing certain

3781
02:08:36,880 --> 02:08:40,000
metrics over others based on

3782
02:08:38,400 --> 02:08:42,079
organizational priorities and risk

3783
02:08:40,000 --> 02:08:43,520
appetite. This is not an exhaustive list

3784
02:08:42,079 --> 02:08:45,320
but rather a starting point for

3785
02:08:43,520 --> 02:08:47,360
evaluating sock effectiveness and

3786
02:08:45,320 --> 02:08:49,520
performance. So the first one we have

3787
02:08:47,360 --> 02:08:51,360
here is the meanantime to detect and

3788
02:08:49,520 --> 02:08:53,440
this is the average time it takes for

3789
02:08:51,360 --> 02:08:55,920
the sock to detect an incident from the

3790
02:08:53,440 --> 02:08:58,079
moment it occurs. And so a lower

3791
02:08:55,920 --> 02:09:00,159
meanantime to detect indicates a faster

3792
02:08:58,079 --> 02:09:01,840
detection and response capability.

3793
02:09:00,159 --> 02:09:03,679
Similarly we have the meanantime to

3794
02:09:01,840 --> 02:09:05,599
resolution. So this is the average time

3795
02:09:03,679 --> 02:09:07,760
it takes for the sock to resolve an

3796
02:09:05,599 --> 02:09:09,360
incident from the moment it's detected.

3797
02:09:07,760 --> 02:09:11,440
So of course a lower meanantime to

3798
02:09:09,360 --> 02:09:13,280
resolution indicates a more efficient

3799
02:09:11,440 --> 02:09:15,920
incident response process and more

3800
02:09:13,280 --> 02:09:17,679
timely mitigation of incidents. And you

3801
02:09:15,920 --> 02:09:19,360
know consider a scenario where the sock

3802
02:09:17,679 --> 02:09:21,760
identifies an incident where an employee

3803
02:09:19,360 --> 02:09:23,920
fell victim to a fishing campaign. And

3804
02:09:21,760 --> 02:09:25,360
so after triage and investigation and

3805
02:09:23,920 --> 02:09:27,280
containment activities as well as

3806
02:09:25,360 --> 02:09:30,239
recovery objectives, the incident is

3807
02:09:27,280 --> 02:09:32,400
fully declared resolved within 4 hours.

3808
02:09:30,239 --> 02:09:35,280
In this case, the MTR or the meanantime

3809
02:09:32,400 --> 02:09:36,960
to resolution would be 4 hours. And next

3810
02:09:35,280 --> 02:09:38,719
we have the meanantime to attend and

3811
02:09:36,960 --> 02:09:40,480
analyze. That one's kind of a mouthful.

3812
02:09:38,719 --> 02:09:42,400
Um this is the average time it takes for

3813
02:09:40,480 --> 02:09:44,000
the sock or the analyst to pick up and

3814
02:09:42,400 --> 02:09:46,880
work on an alert from the moment it's

3815
02:09:44,000 --> 02:09:48,960
triggered. And so a lower MTA indicates

3816
02:09:46,880 --> 02:09:51,199
a prompter response and reduce latency

3817
02:09:48,960 --> 02:09:52,719
in incident handling. So as another

3818
02:09:51,199 --> 02:09:54,560
example, suppose like a data loss

3819
02:09:52,719 --> 02:09:56,400
prevention alert came up indicating that

3820
02:09:54,560 --> 02:09:58,800
there's a potential data exfiltration

3821
02:09:56,400 --> 02:10:00,320
going on within the organization. So

3822
02:09:58,800 --> 02:10:02,239
let's say an analyst logs in and picks

3823
02:10:00,320 --> 02:10:03,840
up the alert within 5 minutes and then

3824
02:10:02,239 --> 02:10:05,599
conducts their initial analysis and

3825
02:10:03,840 --> 02:10:07,760
begins fully investigating the incident

3826
02:10:05,599 --> 02:10:11,280
within 15 minutes. In this case, the

3827
02:10:07,760 --> 02:10:13,119
MTNA for this alert would be 15 minutes.

3828
02:10:11,280 --> 02:10:15,040
So next we have the incident detection

3829
02:10:13,119 --> 02:10:17,440
rate and this is the rate at which the

3830
02:10:15,040 --> 02:10:19,360
sock detects security incidents within a

3831
02:10:17,440 --> 02:10:21,199
specific time period. So a higher

3832
02:10:19,360 --> 02:10:22,719
detection rate indicates better

3833
02:10:21,199 --> 02:10:24,560
visibility and effectiveness of

3834
02:10:22,719 --> 02:10:26,159
monitoring the detection capabilities

3835
02:10:24,560 --> 02:10:28,480
which enables the organization to

3836
02:10:26,159 --> 02:10:31,199
proactively identify threats and

3837
02:10:28,480 --> 02:10:33,280
initiate responses. So let's say in a

3838
02:10:31,199 --> 02:10:35,520
given month the sock detects 90 security

3839
02:10:33,280 --> 02:10:37,119
incidents out of a total of 100.

3840
02:10:35,520 --> 02:10:39,840
Therefore the incident detection rate

3841
02:10:37,119 --> 02:10:40,880
for that month would be 90%. And you

3842
02:10:39,840 --> 02:10:42,480
might be thinking that of course

3843
02:10:40,880 --> 02:10:44,079
sometimes this can be a hard metric to

3844
02:10:42,480 --> 02:10:45,679
track accurately and if you have

3845
02:10:44,079 --> 02:10:47,520
eventually identified an incident that

3846
02:10:45,679 --> 02:10:49,360
wasn't initially detected or we had a

3847
02:10:47,520 --> 02:10:51,119
false negative scenario that's usually a

3848
02:10:49,360 --> 02:10:53,760
bad day for the sock as the incident has

3849
02:10:51,119 --> 02:10:55,599
had much more time to propagate. And

3850
02:10:53,760 --> 02:10:57,599
next we have false positive rates or

3851
02:10:55,599 --> 02:11:00,000
FPRs and this is the percentage of

3852
02:10:57,599 --> 02:11:02,320
alerts or incidents that are incorrectly

3853
02:11:00,000 --> 02:11:04,159
identified as true positives. And so a

3854
02:11:02,320 --> 02:11:06,239
lower false positive rate indicates more

3855
02:11:04,159 --> 02:11:08,159
accurate alerting which would result in

3856
02:11:06,239 --> 02:11:09,840
reduced analyst workload and minimize

3857
02:11:08,159 --> 02:11:11,520
things like alert fatigue or wasted

3858
02:11:09,840 --> 02:11:13,920
resources and time spent on false

3859
02:11:11,520 --> 02:11:16,239
alarms. So let's say the sock receives

3860
02:11:13,920 --> 02:11:18,320
200 alerts in one week out of which

3861
02:11:16,239 --> 02:11:20,320
maybe 20 alerts are later deemed to be

3862
02:11:18,320 --> 02:11:21,920
false positives upon investigation.

3863
02:11:20,320 --> 02:11:24,480
Therefore the false positive rate for

3864
02:11:21,920 --> 02:11:26,400
the week would be 10%. Next we have

3865
02:11:24,480 --> 02:11:28,400
false negative rates or FNRs. And this

3866
02:11:26,400 --> 02:11:30,639
is the percentage of true incidents that

3867
02:11:28,400 --> 02:11:32,800
initially go undetected or missed by the

3868
02:11:30,639 --> 02:11:34,480
sock. In which case, a lower false

3869
02:11:32,800 --> 02:11:36,239
negative rate indicates fewer missed

3870
02:11:34,480 --> 02:11:38,560
detections and fewer gaps in our

3871
02:11:36,239 --> 02:11:40,000
detection capabilities. And again, you

3872
02:11:38,560 --> 02:11:41,719
can imagine this is a hard rate to

3873
02:11:40,000 --> 02:11:43,760
detect unless in

3874
02:11:41,719 --> 02:11:45,679
retrospect. So in addition to these

3875
02:11:43,760 --> 02:11:47,920
specific sock metrics, there are also

3876
02:11:45,679 --> 02:11:49,679
more general terminology and frameworks

3877
02:11:47,920 --> 02:11:51,840
that relate to performance measurement

3878
02:11:49,679 --> 02:11:54,320
and management within the sock. So we

3879
02:11:51,840 --> 02:11:56,639
have KPIs or key performance indicators

3880
02:11:54,320 --> 02:11:58,560
and these are more quantifiable metrics

3881
02:11:56,639 --> 02:12:00,880
used to evaluate the effectiveness and

3882
02:11:58,560 --> 02:12:03,040
performance of specific processes,

3883
02:12:00,880 --> 02:12:04,400
activities or functions within the sock.

3884
02:12:03,040 --> 02:12:05,920
So you know all the metrics that we

3885
02:12:04,400 --> 02:12:07,840
described on the lefth hand side here

3886
02:12:05,920 --> 02:12:10,719
can all relate and be applied to various

3887
02:12:07,840 --> 02:12:13,280
KPIs within the sock. We also have key

3888
02:12:10,719 --> 02:12:15,199
risk indicators or KIS and again these

3889
02:12:13,280 --> 02:12:17,119
are quantifiable metrics that we can use

3890
02:12:15,199 --> 02:12:19,119
to assess and monitor the potential

3891
02:12:17,119 --> 02:12:21,119
risks and threats to our organization's

3892
02:12:19,119 --> 02:12:22,560
security posture. And so a key risk

3893
02:12:21,119 --> 02:12:24,079
indicator is typically a measurement

3894
02:12:22,560 --> 02:12:26,079
that management would use to indicate

3895
02:12:24,079 --> 02:12:27,599
how risky an activity is. And

3896
02:12:26,079 --> 02:12:29,679
organizations use these metrics

3897
02:12:27,599 --> 02:12:31,760
proactively to provide an early signal

3898
02:12:29,679 --> 02:12:33,440
in increasing risk exposures in various

3899
02:12:31,760 --> 02:12:34,639
areas of the enterprise. So there's

3900
02:12:33,440 --> 02:12:36,320
typically going to be some sort of

3901
02:12:34,639 --> 02:12:38,400
threshold or trigger based on the

3902
02:12:36,320 --> 02:12:40,239
likelihood and impact of the risk that

3903
02:12:38,400 --> 02:12:42,079
categorize and define risk factors so

3904
02:12:40,239 --> 02:12:43,840
they can be documented and risk analysis

3905
02:12:42,079 --> 02:12:45,280
can be performed more efficiently. And

3906
02:12:43,840 --> 02:12:46,800
lastly here we have service level

3907
02:12:45,280 --> 02:12:48,800
agreements. And we've touched on this a

3908
02:12:46,800 --> 02:12:50,639
bit before. These are agreements between

3909
02:12:48,800 --> 02:12:51,760
the sock and its stakeholders. So if

3910
02:12:50,639 --> 02:12:53,360
we're thinking in the example of an

3911
02:12:51,760 --> 02:12:55,599
internal sock, this would be between the

3912
02:12:53,360 --> 02:12:57,360
sock and the socks management or the uh

3913
02:12:55,599 --> 02:12:58,719
organization as a whole. Or if we're

3914
02:12:57,360 --> 02:13:00,320
thinking of more of a managed service

3915
02:12:58,719 --> 02:13:02,719
provider, this would be an agreement

3916
02:13:00,320 --> 02:13:04,719
between the sock and the customers of

3917
02:13:02,719 --> 02:13:06,239
the sock. And these agreements define

3918
02:13:04,719 --> 02:13:08,239
the level of service performance

3919
02:13:06,239 --> 02:13:10,159
expectations and response times most

3920
02:13:08,239 --> 02:13:12,239
critically for security operations and

3921
02:13:10,159 --> 02:13:13,920
incident response activities. And so

3922
02:13:12,239 --> 02:13:15,520
they help ensure accountability,

3923
02:13:13,920 --> 02:13:18,159
transparency, and alignment with

3924
02:13:15,520 --> 02:13:20,159
business objectives. So for example, an

3925
02:13:18,159 --> 02:13:22,320
SLA may indicate that the sock must

3926
02:13:20,159 --> 02:13:24,159
acknowledge and begin investigating a

3927
02:13:22,320 --> 02:13:26,480
critical security alert within 15

3928
02:13:24,159 --> 02:13:27,920
minutes of its generation. And so you

3929
02:13:26,480 --> 02:13:29,920
can sort of see how metrics like the

3930
02:13:27,920 --> 02:13:32,239
meantime to resolution are typically

3931
02:13:29,920 --> 02:13:34,280
mapped closely with SLAs's to identify

3932
02:13:32,239 --> 02:13:36,239
gaps in areas for

3933
02:13:34,280 --> 02:13:38,320
improvement. When thinking about the

3934
02:13:36,239 --> 02:13:40,400
main pillars that make up a sock, we've

3935
02:13:38,320 --> 02:13:43,280
identified people, processes, and

3936
02:13:40,400 --> 02:13:45,760
technology. In this lesson, let's focus

3937
02:13:43,280 --> 02:13:48,079
specifically on technology and discuss

3938
02:13:45,760 --> 02:13:50,079
the types of tools that socks use to

3939
02:13:48,079 --> 02:13:52,159
actually conduct operations at a

3940
02:13:50,079 --> 02:13:53,920
hands-on level. And while we're going to

3941
02:13:52,159 --> 02:13:56,079
cover multiple specific tools throughout

3942
02:13:53,920 --> 02:13:57,920
the course, the highle emphasis that I'm

3943
02:13:56,079 --> 02:13:59,599
always going to put within this course

3944
02:13:57,920 --> 02:14:02,079
is that we want to understand the

3945
02:13:59,599 --> 02:14:04,000
methodologies and processes. Right? So,

3946
02:14:02,079 --> 02:14:05,920
it's crucial to recognize that tools are

3947
02:14:04,000 --> 02:14:07,520
just tools. You know, they evolve, they

3948
02:14:05,920 --> 02:14:09,199
come and go, and while they have

3949
02:14:07,520 --> 02:14:11,360
similarities between each other, they

3950
02:14:09,199 --> 02:14:13,360
also have differences. So our goal isn't

3951
02:14:11,360 --> 02:14:15,440
to become experts in any single tool

3952
02:14:13,360 --> 02:14:17,520
immediately, but rather to grasp what

3953
02:14:15,440 --> 02:14:19,280
they do, why they're used, and other

3954
02:14:17,520 --> 02:14:21,760
methodologies around using them

3955
02:14:19,280 --> 02:14:23,360
effectively within security operations.

3956
02:14:21,760 --> 02:14:24,960
And you can see that there are quite a

3957
02:14:23,360 --> 02:14:27,440
number of different types of tools that

3958
02:14:24,960 --> 02:14:29,360
socks use. You may or may not use some

3959
02:14:27,440 --> 02:14:31,119
of these in the field or all of these.

3960
02:14:29,360 --> 02:14:32,800
It's entirely dependent on your role and

3961
02:14:31,119 --> 02:14:35,040
the size of the company and the actual

3962
02:14:32,800 --> 02:14:36,719
capabilities of your sock. But for the

3963
02:14:35,040 --> 02:14:39,040
sake of being thorough, let's quickly go

3964
02:14:36,719 --> 02:14:40,800
through each of these at a high level.

3965
02:14:39,040 --> 02:14:42,560
So first we have the security

3966
02:14:40,800 --> 02:14:45,199
information and event management system

3967
02:14:42,560 --> 02:14:47,119
or the SIMS. And a security information

3968
02:14:45,199 --> 02:14:49,119
and event management system is one of

3969
02:14:47,119 --> 02:14:51,119
the most important components in modern

3970
02:14:49,119 --> 02:14:52,880
cyber security infrastructure. So much

3971
02:14:51,119 --> 02:14:55,760
so that it's often referred to as the

3972
02:14:52,880 --> 02:14:57,599
heartbeat or the nerve of the sock. SIMs

3973
02:14:55,760 --> 02:15:00,159
serve as a centralized platform for

3974
02:14:57,599 --> 02:15:02,320
collecting, correlating, analyzing, and

3975
02:15:00,159 --> 02:15:05,119
managing security event data in real

3976
02:15:02,320 --> 02:15:07,119
time. So at its core, a SIM system

3977
02:15:05,119 --> 02:15:08,520
aggregates logs generated throughout all

3978
02:15:07,119 --> 02:15:10,560
of our technology within the

3979
02:15:08,520 --> 02:15:12,320
organization. And then we can employ

3980
02:15:10,560 --> 02:15:14,159
advanced analytics and correlation

3981
02:15:12,320 --> 02:15:16,639
techniques to identify patterns or

3982
02:15:14,159 --> 02:15:18,800
trends or anomalies within the collected

3983
02:15:16,639 --> 02:15:21,040
data. And by correlating events from

3984
02:15:18,800 --> 02:15:22,880
various sources using a SIM, we can

3985
02:15:21,040 --> 02:15:24,639
differentiate normal activity from

3986
02:15:22,880 --> 02:15:26,639
potentially malicious behavior, which

3987
02:15:24,639 --> 02:15:29,119
can help us on the security side detect

3988
02:15:26,639 --> 02:15:30,480
and respond to incidents as they occur.

3989
02:15:29,119 --> 02:15:32,320
And with a SIM, we can integrate

3990
02:15:30,480 --> 02:15:33,840
functions like log management, right? So

3991
02:15:32,320 --> 02:15:35,119
collecting and storing and normalizing

3992
02:15:33,840 --> 02:15:37,599
log data from all these different

3993
02:15:35,119 --> 02:15:39,280
sources, but also real-time monitoring.

3994
02:15:37,599 --> 02:15:41,199
So we can analyze the incoming data

3995
02:15:39,280 --> 02:15:43,199
streams and in real time identify

3996
02:15:41,199 --> 02:15:45,040
security incidents as they occur and get

3997
02:15:43,199 --> 02:15:47,199
alerted on them. Which brings us of

3998
02:15:45,040 --> 02:15:48,880
course to alerting and notification. So

3999
02:15:47,199 --> 02:15:50,639
we can actually generate alerts within

4000
02:15:48,880 --> 02:15:53,040
our SIM. We can set up rules and

4001
02:15:50,639 --> 02:15:54,960
thresholds to fire off notifications for

4002
02:15:53,040 --> 02:15:57,040
suspicious activities or policy

4003
02:15:54,960 --> 02:15:59,119
violations which allow us to rapidly

4004
02:15:57,040 --> 02:16:01,679
respond. Which of course brings us to

4005
02:15:59,119 --> 02:16:03,280
incident response. And we also typically

4006
02:16:01,679 --> 02:16:05,599
have dashboards and reports and

4007
02:16:03,280 --> 02:16:07,440
visualization capabilities. So we can

4008
02:16:05,599 --> 02:16:08,800
actually generate reports to share

4009
02:16:07,440 --> 02:16:10,719
amongst the team or with senior

4010
02:16:08,800 --> 02:16:13,119
management. We can do things like set up

4011
02:16:10,719 --> 02:16:14,800
visualizations and statistics to support

4012
02:16:13,119 --> 02:16:16,800
ongoing monitoring and compliance

4013
02:16:14,800 --> 02:16:18,719
efforts. And lastly, we can do things

4014
02:16:16,800 --> 02:16:20,560
like threat intelligence integration. So

4015
02:16:18,719 --> 02:16:22,840
we can actually incorporate external

4016
02:16:20,560 --> 02:16:24,880
threat feeds to enhance our detection

4017
02:16:22,840 --> 02:16:26,880
capabilities. So let's quickly talk

4018
02:16:24,880 --> 02:16:28,880
about the security orchestration

4019
02:16:26,880 --> 02:16:30,800
automation and response platform or the

4020
02:16:28,880 --> 02:16:33,439
soar platform. And this is more of a

4021
02:16:30,800 --> 02:16:35,359
holistic solution and kind of like a sim

4022
02:16:33,439 --> 02:16:37,519
on steroids that can combine the power

4023
02:16:35,359 --> 02:16:39,920
in orchestration and automation with

4024
02:16:37,519 --> 02:16:41,359
intelligent rapid response. And not all

4025
02:16:39,920 --> 02:16:43,439
socks are going to have a source

4026
02:16:41,359 --> 02:16:45,760
solution built out, but it can save a

4027
02:16:43,439 --> 02:16:48,000
lot of analyst and administrator time by

4028
02:16:45,760 --> 02:16:49,519
automating repetitive response tasks.

4029
02:16:48,000 --> 02:16:51,519
You know, we're never going to entirely

4030
02:16:49,519 --> 02:16:53,200
automate instant response, but source

4031
02:16:51,519 --> 02:16:54,800
solutions can certainly alleviate some

4032
02:16:53,200 --> 02:16:56,559
of the manual work. And we can do that

4033
02:16:54,800 --> 02:16:58,399
through orchestration, right? So with

4034
02:16:56,559 --> 02:17:00,160
this orchestration capability, we can

4035
02:16:58,399 --> 02:17:02,080
seamlessly collaborate and integrate

4036
02:17:00,160 --> 02:17:04,000
between different security technologies

4037
02:17:02,080 --> 02:17:05,679
like our SIM, our threat intelligence,

4038
02:17:04,000 --> 02:17:08,319
and different security controls like our

4039
02:17:05,679 --> 02:17:10,000
firewalls and ACL's, identity and access

4040
02:17:08,319 --> 02:17:11,840
management systems. So we can automate

4041
02:17:10,000 --> 02:17:13,599
some tasks that usually require manual

4042
02:17:11,840 --> 02:17:15,359
work, which of course leads us to

4043
02:17:13,599 --> 02:17:17,519
automation, and we can free up security

4044
02:17:15,359 --> 02:17:19,920
analyst time to focus on more complex

4045
02:17:17,519 --> 02:17:21,359
and high priority tasks. Sore platforms

4046
02:17:19,920 --> 02:17:23,519
can even do things like automated

4047
02:17:21,359 --> 02:17:24,960
artifact collection. For example, if a

4048
02:17:23,519 --> 02:17:26,719
reported fishing email comes through the

4049
02:17:24,960 --> 02:17:29,120
platform, it can automatically conduct

4050
02:17:26,719 --> 02:17:30,960
an initial analysis and extract specific

4051
02:17:29,120 --> 02:17:33,760
artifacts and indicators like domain

4052
02:17:30,960 --> 02:17:35,359
names or emails or IP addresses. And

4053
02:17:33,760 --> 02:17:37,280
through using automated playbooks or

4054
02:17:35,359 --> 02:17:38,960
runbooks, source can help streamline

4055
02:17:37,280 --> 02:17:40,559
incident response processes and ensure

4056
02:17:38,960 --> 02:17:42,639
that we have a consistent and effective

4057
02:17:40,559 --> 02:17:43,760
response every time. And we can also

4058
02:17:42,639 --> 02:17:45,679
integrate things like threat

4059
02:17:43,760 --> 02:17:47,519
intelligence and then generate reports

4060
02:17:45,679 --> 02:17:49,359
and metrics from our SOAR platforms as

4061
02:17:47,519 --> 02:17:50,719
well. So next we have incident

4062
02:17:49,359 --> 02:17:52,639
management tools. And this is kind of

4063
02:17:50,719 --> 02:17:54,399
like a catch-all kind of term because in

4064
02:17:52,639 --> 02:17:56,080
general incident management tools are

4065
02:17:54,399 --> 02:17:58,399
solutions we have that are designed for

4066
02:17:56,080 --> 02:18:00,240
the detection analysis but more so the

4067
02:17:58,399 --> 02:18:02,080
resolution of security incidents within

4068
02:18:00,240 --> 02:18:03,840
the organization's infrastructure. So

4069
02:18:02,080 --> 02:18:05,840
they provide this centralized platform

4070
02:18:03,840 --> 02:18:07,920
for us as a team to coordinate our

4071
02:18:05,840 --> 02:18:10,160
efforts, collaborate, document progress

4072
02:18:07,920 --> 02:18:11,439
and also manage incidents effectively.

4073
02:18:10,160 --> 02:18:13,200
So we can start using things like

4074
02:18:11,439 --> 02:18:15,280
ticketing management systems that allow

4075
02:18:13,200 --> 02:18:16,800
us as analysts to create, assign and

4076
02:18:15,280 --> 02:18:18,639
track incidents throughout the entire

4077
02:18:16,800 --> 02:18:20,479
incident life cycle. And these tickets

4078
02:18:18,639 --> 02:18:22,000
can serve as a central repository for

4079
02:18:20,479 --> 02:18:24,160
all the information related to each

4080
02:18:22,000 --> 02:18:26,319
incident. And we can also link incidents

4081
02:18:24,160 --> 02:18:28,080
together as needed. We also have alert

4082
02:18:26,319 --> 02:18:29,359
management. So through these tools, we

4083
02:18:28,080 --> 02:18:31,599
can integrate with our security

4084
02:18:29,359 --> 02:18:33,519
monitoring systems like our SIMs or any

4085
02:18:31,599 --> 02:18:35,200
of our you know detection and prevention

4086
02:18:33,519 --> 02:18:37,120
solutions to ingest security alerts

4087
02:18:35,200 --> 02:18:38,800
generated from all these sources. So we

4088
02:18:37,120 --> 02:18:40,559
can automate things with like workflow

4089
02:18:38,800 --> 02:18:42,399
automation. So when we get an alert

4090
02:18:40,559 --> 02:18:43,920
generated, we can automatically create a

4091
02:18:42,399 --> 02:18:45,760
ticket for that alert and make sure

4092
02:18:43,920 --> 02:18:47,359
nothing gets missed. And obviously here

4093
02:18:45,760 --> 02:18:49,200
we have the whole collaboration aspect

4094
02:18:47,359 --> 02:18:51,120
where we can effectively communicate and

4095
02:18:49,200 --> 02:18:52,880
collaborate amongst our team which is

4096
02:18:51,120 --> 02:18:54,639
often very essential during incident

4097
02:18:52,880 --> 02:18:55,920
response. You can see some examples

4098
02:18:54,639 --> 02:18:58,160
here. Some of these are more general

4099
02:18:55,920 --> 02:19:00,240
just IT ticket managing systems like

4100
02:18:58,160 --> 02:19:02,319
Atlassians Jura or Service Now

4101
02:19:00,240 --> 02:19:04,639
Freshworks. We also have some specific

4102
02:19:02,319 --> 02:19:07,040
ones like on page. Next we have network

4103
02:19:04,639 --> 02:19:08,800
security monitoring or NSM and this

4104
02:19:07,040 --> 02:19:10,800
specifically focuses on the detection

4105
02:19:08,800 --> 02:19:12,639
and mitigation of network related

4106
02:19:10,800 --> 02:19:14,479
threats and vulnerabilities. So these

4107
02:19:12,639 --> 02:19:16,719
tools provide us with the capacity to

4108
02:19:14,479 --> 02:19:18,800
monitor network traffic, analyze network

4109
02:19:16,719 --> 02:19:20,719
behavior and of course identify

4110
02:19:18,800 --> 02:19:22,639
potential incidents in real time based

4111
02:19:20,719 --> 02:19:24,639
on different rule matching and anomaly

4112
02:19:22,639 --> 02:19:26,080
detection and behavior detection. So we

4113
02:19:24,639 --> 02:19:28,240
can do things like packet capture and

4114
02:19:26,080 --> 02:19:30,160
analysis. So this allows us to actually

4115
02:19:28,240 --> 02:19:32,160
capture and analyze network traffic in

4116
02:19:30,160 --> 02:19:34,000
real time or retrospectively. And these

4117
02:19:32,160 --> 02:19:36,080
packet captures can give us a detailed

4118
02:19:34,000 --> 02:19:37,760
insight into the network communications

4119
02:19:36,080 --> 02:19:39,760
and things like protocols as well as

4120
02:19:37,760 --> 02:19:41,439
source and destination IPs, the actual

4121
02:19:39,760 --> 02:19:43,359
content within payloads and many more

4122
02:19:41,439 --> 02:19:45,679
capabilities. We can also do things like

4123
02:19:43,359 --> 02:19:47,760
perform network traffic analysis and use

4124
02:19:45,679 --> 02:19:49,120
techniques like statistical analysis,

4125
02:19:47,760 --> 02:19:51,120
machine learning and behavioral

4126
02:19:49,120 --> 02:19:53,040
profiling to identify potential security

4127
02:19:51,120 --> 02:19:54,880
threats. There's also some overlap here

4128
02:19:53,040 --> 02:19:56,880
with our intrusion detection systems or

4129
02:19:54,880 --> 02:19:58,319
our IDS systems. And some network

4130
02:19:56,880 --> 02:20:00,560
security monitoring tools actually have

4131
02:19:58,319 --> 02:20:02,399
built-in IDS functionality which allows

4132
02:20:00,560 --> 02:20:04,399
us to detect and respond to known and

4133
02:20:02,399 --> 02:20:05,600
unknown security incidents in real time.

4134
02:20:04,399 --> 02:20:07,680
So we can utilize things like

4135
02:20:05,600 --> 02:20:09,439
signaturebased detection, anomaly based

4136
02:20:07,680 --> 02:20:11,280
detection, and protocol analysis to

4137
02:20:09,439 --> 02:20:12,960
identify an alert on suspicious network

4138
02:20:11,280 --> 02:20:14,720
behavior. And of course, what would any

4139
02:20:12,960 --> 02:20:16,800
of this log collection be if we cannot

4140
02:20:14,720 --> 02:20:18,080
integrate it into a central repository,

4141
02:20:16,800 --> 02:20:20,240
which of course we can do through

4142
02:20:18,080 --> 02:20:22,080
integrations with our SIM platform. And

4143
02:20:20,240 --> 02:20:23,840
this integration enables the correlation

4144
02:20:22,080 --> 02:20:25,760
of network security events with other

4145
02:20:23,840 --> 02:20:27,760
security data like log data or endpoint

4146
02:20:25,760 --> 02:20:29,520
telemetry and threat intelligence feeds.

4147
02:20:27,760 --> 02:20:31,359
So we can start correlating and get a

4148
02:20:29,520 --> 02:20:33,200
central security monitoring and incident

4149
02:20:31,359 --> 02:20:34,640
response solution. And you can see some

4150
02:20:33,200 --> 02:20:36,319
common examples here. And we're actually

4151
02:20:34,640 --> 02:20:38,319
going to get hands-on with some of these

4152
02:20:36,319 --> 02:20:40,479
which I'm very excited for like Snort

4153
02:20:38,319 --> 02:20:42,720
and Siraata and Wireshark. And there's

4154
02:20:40,479 --> 02:20:44,960
also things like Zeke and Nagios. So

4155
02:20:42,720 --> 02:20:46,800
we've talked about IDS and IPS systems

4156
02:20:44,960 --> 02:20:49,120
quite a bit actually. So let's get into

4157
02:20:46,800 --> 02:20:50,880
what they actually are. So intrusion

4158
02:20:49,120 --> 02:20:52,479
detection systems and intrusion

4159
02:20:50,880 --> 02:20:54,399
prevention systems are designed to

4160
02:20:52,479 --> 02:20:56,319
monitor network traffic, detect

4161
02:20:54,399 --> 02:20:57,840
potential security events and take

4162
02:20:56,319 --> 02:20:59,880
action to mitigate and prevent

4163
02:20:57,840 --> 02:21:02,000
unauthorized access and malicious

4164
02:20:59,880 --> 02:21:04,640
activities. So what is the difference?

4165
02:21:02,000 --> 02:21:07,040
Right? So an IDS system or a detection

4166
02:21:04,640 --> 02:21:09,120
system is going to passively monitor the

4167
02:21:07,040 --> 02:21:11,280
network traffic and analyze it for signs

4168
02:21:09,120 --> 02:21:13,280
of malicious activity. And so they're

4169
02:21:11,280 --> 02:21:15,200
specifically designed to detect security

4170
02:21:13,280 --> 02:21:17,200
incidents and generate alerts based on

4171
02:21:15,200 --> 02:21:19,120
their predefined criteria like known

4172
02:21:17,200 --> 02:21:20,800
attack signatures or anomalous behavior

4173
02:21:19,120 --> 02:21:23,280
or different policy violations that we

4174
02:21:20,800 --> 02:21:25,200
set up. An IPS system on the other hand

4175
02:21:23,280 --> 02:21:26,880
is used to prevent attacks and it

4176
02:21:25,200 --> 02:21:29,359
actually builds upon the capabilities of

4177
02:21:26,880 --> 02:21:31,040
an IDS by actively blocking or

4178
02:21:29,359 --> 02:21:32,880
preventing detected threats in real

4179
02:21:31,040 --> 02:21:35,120
time. So in addition to detecting

4180
02:21:32,880 --> 02:21:37,439
security incidents, IPS systems have the

4181
02:21:35,120 --> 02:21:39,359
ability to take automated actions and

4182
02:21:37,439 --> 02:21:40,800
mitigate or stop malicious activities

4183
02:21:39,359 --> 02:21:42,399
before they can cause harm to the

4184
02:21:40,800 --> 02:21:44,319
network. And of course, both of these

4185
02:21:42,399 --> 02:21:46,000
tools are going to have detailed logging

4186
02:21:44,319 --> 02:21:47,920
information that we can then forward to

4187
02:21:46,000 --> 02:21:50,000
a SIM or a centralized management tool

4188
02:21:47,920 --> 02:21:51,600
for more event correlation. And again,

4189
02:21:50,000 --> 02:21:53,920
we have some similar players here. We

4190
02:21:51,600 --> 02:21:55,439
have Snort or Siraata or Zeke. This

4191
02:21:53,920 --> 02:21:57,439
brings us to endpoint detection and

4192
02:21:55,439 --> 02:21:59,359
response or EDR. And these tools

4193
02:21:57,439 --> 02:22:01,920
specifically focus on the protection of

4194
02:21:59,359 --> 02:22:04,000
endpoint devices such as laptops or

4195
02:22:01,920 --> 02:22:06,000
desktops, servers, and even mobile

4196
02:22:04,000 --> 02:22:07,680
devices. EDR tools are typically

4197
02:22:06,000 --> 02:22:08,960
deployed with an agent that sits on the

4198
02:22:07,680 --> 02:22:10,560
endpoint, which provides our

4199
02:22:08,960 --> 02:22:12,479
organization with that sort of single

4200
02:22:10,560 --> 02:22:14,319
pane of glass capacity to detect,

4201
02:22:12,479 --> 02:22:16,000
investigate, and actually respond to

4202
02:22:14,319 --> 02:22:17,680
security events as they occur at the

4203
02:22:16,000 --> 02:22:19,359
endpoint level. So, of course, we have

4204
02:22:17,680 --> 02:22:21,280
real-time endpoint monitoring. So, an

4205
02:22:19,359 --> 02:22:22,880
EDR tool or an agent is going to be

4206
02:22:21,280 --> 02:22:25,040
continuously monitoring the endpoint

4207
02:22:22,880 --> 02:22:26,640
device for any suspicious activities and

4208
02:22:25,040 --> 02:22:28,319
behaviors. And behaviors is the main

4209
02:22:26,640 --> 02:22:29,920
thing here. We can look at things like

4210
02:22:28,319 --> 02:22:32,479
suspicious processes that are starting

4211
02:22:29,920 --> 02:22:34,399
up or parent child relationships or

4212
02:22:32,479 --> 02:22:36,560
unauthorized access attempts or known

4213
02:22:34,399 --> 02:22:38,319
malicious downloads. By collecting all

4214
02:22:36,560 --> 02:22:40,160
this telemetry, we can actually provide

4215
02:22:38,319 --> 02:22:42,160
some real-time visibility into our

4216
02:22:40,160 --> 02:22:45,280
endpoints. And this brings us into user

4217
02:22:42,160 --> 02:22:46,800
entity behavior analysis or UEBA. And so

4218
02:22:45,280 --> 02:22:48,800
our EDR tool is going to leverage

4219
02:22:46,800 --> 02:22:50,560
behavioral analysis and behavioral

4220
02:22:48,800 --> 02:22:52,640
capabilities to detect things like

4221
02:22:50,560 --> 02:22:54,720
insider threats or compromised accounts

4222
02:22:52,640 --> 02:22:56,640
by monitoring user and entity behavior

4223
02:22:54,720 --> 02:22:58,240
on all the endpoint devices. So they can

4224
02:22:56,640 --> 02:23:00,560
look at things like login patterns and

4225
02:22:58,240 --> 02:23:02,160
user activity, file access behavior, you

4226
02:23:00,560 --> 02:23:04,080
know, when is a user typically accessing

4227
02:23:02,160 --> 02:23:05,680
a file or logging into their system and

4228
02:23:04,080 --> 02:23:07,840
a number of other behavioral indicators

4229
02:23:05,680 --> 02:23:10,000
to identify potentially anomalous or

4230
02:23:07,840 --> 02:23:11,439
suspicious activities. We also have more

4231
02:23:10,000 --> 02:23:12,560
general threat detection and prevention.

4232
02:23:11,439 --> 02:23:14,000
So we can introduce things like

4233
02:23:12,560 --> 02:23:16,080
signaturebased detection, machine

4234
02:23:14,000 --> 02:23:18,160
learning and huristics to identify and

4235
02:23:16,080 --> 02:23:20,160
prevent even unknown security threats.

4236
02:23:18,160 --> 02:23:21,920
So of course an EDR tool is going to be

4237
02:23:20,160 --> 02:23:23,840
almost crucial for us in incident

4238
02:23:21,920 --> 02:23:25,600
response and incident investigation if

4239
02:23:23,840 --> 02:23:27,520
we're dealing with an endpoint which we

4240
02:23:25,600 --> 02:23:29,120
often are. And through that these tools

4241
02:23:27,520 --> 02:23:30,960
are going to facilitate rapid response

4242
02:23:29,120 --> 02:23:33,120
and remediation actions to mitigate

4243
02:23:30,960 --> 02:23:34,880
these threats and contain incidents. We

4244
02:23:33,120 --> 02:23:37,200
can do things like quarantine and

4245
02:23:34,880 --> 02:23:39,120
isolate and roll back files for example.

4246
02:23:37,200 --> 02:23:41,359
We can kill processes and patch

4247
02:23:39,120 --> 02:23:43,120
management all remotely to respond to

4248
02:23:41,359 --> 02:23:44,240
incidents as they're occurring. And of

4249
02:23:43,120 --> 02:23:45,920
course, all of the logs that we

4250
02:23:44,240 --> 02:23:47,920
generate, all of the alerts from our EDR

4251
02:23:45,920 --> 02:23:49,840
tools can and should be forwarded to our

4252
02:23:47,920 --> 02:23:51,760
centralized logging capability or our

4253
02:23:49,840 --> 02:23:53,520
SIM. And you can see some examples here.

4254
02:23:51,760 --> 02:23:55,760
Of course, CrowdStrike Falcon, we have

4255
02:23:53,520 --> 02:23:57,680
Sophos, Carbon Black, Sentinel 1. There

4256
02:23:55,760 --> 02:24:00,319
are many EDR tools out there. And next

4257
02:23:57,680 --> 02:24:02,160
up, we have firewalls. And firewalls are

4258
02:24:00,319 --> 02:24:04,800
a fundamental component of network

4259
02:24:02,160 --> 02:24:06,960
security designed to monitor and control

4260
02:24:04,800 --> 02:24:09,200
incoming and outgoing network traffic

4261
02:24:06,960 --> 02:24:10,800
based on predefined security rules. And

4262
02:24:09,200 --> 02:24:13,280
in the traditional sense, they kind of

4263
02:24:10,800 --> 02:24:15,359
act as this barrier between a trusted

4264
02:24:13,280 --> 02:24:17,600
internal network and an untrusted

4265
02:24:15,359 --> 02:24:18,960
external network such as the internet.

4266
02:24:17,600 --> 02:24:21,120
We also have different types of

4267
02:24:18,960 --> 02:24:23,439
firewalls depending on specific use

4268
02:24:21,120 --> 02:24:25,359
cases and feature complexity. So we have

4269
02:24:23,439 --> 02:24:27,040
the most common network firewall that

4270
02:24:25,359 --> 02:24:28,720
you're probably familiar with. These are

4271
02:24:27,040 --> 02:24:30,800
also known as just traditional or

4272
02:24:28,720 --> 02:24:33,200
stateful firewalls and they operate at

4273
02:24:30,800 --> 02:24:35,439
that network layer or layer 3 of the OSI

4274
02:24:33,200 --> 02:24:37,280
model. They examine packets of data as

4275
02:24:35,439 --> 02:24:38,960
they pass through the firewall and make

4276
02:24:37,280 --> 02:24:41,120
decisions based on factors like the

4277
02:24:38,960 --> 02:24:43,680
source and destination IPs, the port

4278
02:24:41,120 --> 02:24:46,439
numbers and protocols. We also have the

4279
02:24:43,680 --> 02:24:48,640
concept of next generation firewalls or

4280
02:24:46,439 --> 02:24:50,399
NGFWs and these are more advanced

4281
02:24:48,640 --> 02:24:52,319
firewall solutions that integrate

4282
02:24:50,399 --> 02:24:53,760
additional security features beyond the

4283
02:24:52,319 --> 02:24:55,840
traditional network firewalls

4284
02:24:53,760 --> 02:24:57,280
capabilities. They combine stateful

4285
02:24:55,840 --> 02:24:59,760
packet inspection with more advanced

4286
02:24:57,280 --> 02:25:01,120
security technologies like deep packet

4287
02:24:59,760 --> 02:25:03,040
inspection where they can actually open

4288
02:25:01,120 --> 02:25:04,880
up individual packets and inspect them

4289
02:25:03,040 --> 02:25:06,319
at that level or things like application

4290
02:25:04,880 --> 02:25:08,800
awareness because again they work on

4291
02:25:06,319 --> 02:25:10,319
that layer 7 or application protocol.

4292
02:25:08,800 --> 02:25:12,399
And lastly here we have the web

4293
02:25:10,319 --> 02:25:14,080
application firewall or the WFT and

4294
02:25:12,399 --> 02:25:16,319
these are specialized firewalls designed

4295
02:25:14,080 --> 02:25:18,399
to protect web applications from a

4296
02:25:16,319 --> 02:25:20,319
variety of web-based attacks like SQL

4297
02:25:18,399 --> 02:25:22,479
injection, cross-sight scripting and

4298
02:25:20,319 --> 02:25:24,319
other application layer vulnerabilities.

4299
02:25:22,479 --> 02:25:26,479
And again, unlike traditional firewalls,

4300
02:25:24,319 --> 02:25:28,080
these also operate on layer 7 because

4301
02:25:26,479 --> 02:25:29,840
they're dealing with the application

4302
02:25:28,080 --> 02:25:31,439
layer. And you can see some common

4303
02:25:29,840 --> 02:25:34,240
examples here of firewall technologies

4304
02:25:31,439 --> 02:25:36,399
like Palo Alto, Sonic Wall, PFSense,

4305
02:25:34,240 --> 02:25:38,640
Juniper, F5, and more. Next, we have

4306
02:25:36,399 --> 02:25:40,840
threat intelligence platforms. And these

4307
02:25:38,640 --> 02:25:42,960
are designed to aggregate, analyze, and

4308
02:25:40,840 --> 02:25:44,960
operationalize threat intelligence data

4309
02:25:42,960 --> 02:25:46,240
to enhance our defenses and improve

4310
02:25:44,960 --> 02:25:48,160
threat detection and response

4311
02:25:46,240 --> 02:25:50,000
capabilities. So these platforms can

4312
02:25:48,160 --> 02:25:51,760
aggregate threat intelligence data from

4313
02:25:50,000 --> 02:25:53,760
a wide variety of sources like open

4314
02:25:51,760 --> 02:25:55,760
source feeds, commercial providers,

4315
02:25:53,760 --> 02:25:57,840
government agencies, or even specific

4316
02:25:55,760 --> 02:25:59,600
industry groups. And they can then

4317
02:25:57,840 --> 02:26:01,359
enrich our raw threat data by

4318
02:25:59,600 --> 02:26:03,200
correlating and contextualizing it with

4319
02:26:01,359 --> 02:26:05,600
this additional information like threat

4320
02:26:03,200 --> 02:26:07,600
actor profiles, malware characteristics,

4321
02:26:05,600 --> 02:26:09,920
attack techniques, or even indicators of

4322
02:26:07,600 --> 02:26:11,920
compromise. And IoC's or indicators of

4323
02:26:09,920 --> 02:26:14,000
compromise might be things like hashes

4324
02:26:11,920 --> 02:26:16,240
of known malware executables or known

4325
02:26:14,000 --> 02:26:17,600
malicious domains or IP addresses or

4326
02:26:16,240 --> 02:26:19,359
different tools that adversaries are

4327
02:26:17,600 --> 02:26:21,680
using or even like host and network

4328
02:26:19,359 --> 02:26:23,359
artifacts on systems or even the tactics

4329
02:26:21,680 --> 02:26:25,600
and techniques themselves that

4330
02:26:23,359 --> 02:26:26,479
adversaries use during an attack. And we

4331
02:26:25,600 --> 02:26:28,560
can also think about things like

4332
02:26:26,479 --> 02:26:30,319
normalization and standardization where

4333
02:26:28,560 --> 02:26:32,560
this threat intelligence data is

4334
02:26:30,319 --> 02:26:34,560
consistent and operable across many

4335
02:26:32,560 --> 02:26:36,720
different sources and formats. And they

4336
02:26:34,560 --> 02:26:38,720
use specific schemas and protocols,

4337
02:26:36,720 --> 02:26:40,399
things like sticks and taxi, which we're

4338
02:26:38,720 --> 02:26:42,160
going to cover later on, which make it

4339
02:26:40,399 --> 02:26:44,080
easier for security analysts to ingest

4340
02:26:42,160 --> 02:26:46,000
and consume and analyze this threat

4341
02:26:44,080 --> 02:26:48,000
intelligence data. And of course, we can

4342
02:26:46,000 --> 02:26:49,680
integrate all of this within our SIM. So

4343
02:26:48,000 --> 02:26:51,600
we can actually get that data enrichment

4344
02:26:49,680 --> 02:26:52,880
right from a single pane of glass. And

4345
02:26:51,600 --> 02:26:55,200
we have a couple different examples

4346
02:26:52,880 --> 02:26:57,439
here. We have OpenCTI, we have the MISP

4347
02:26:55,200 --> 02:26:58,800
threat sharing platform, we have Maltego

4348
02:26:57,439 --> 02:27:00,240
or Maltiggo, however you want to

4349
02:26:58,800 --> 02:27:02,000
pronounce it, as well as Recorded

4350
02:27:00,240 --> 02:27:03,760
Future. Getting close to the end here,

4351
02:27:02,000 --> 02:27:05,359
we have forensic analysis tools. And

4352
02:27:03,760 --> 02:27:07,359
these are specialized pieces of software

4353
02:27:05,359 --> 02:27:09,359
that are designed to collect, analyze,

4354
02:27:07,359 --> 02:27:11,439
and interpret digital evidence from

4355
02:27:09,359 --> 02:27:13,760
computer systems or networks or storage

4356
02:27:11,439 --> 02:27:15,600
devices for the purposes of forensic

4357
02:27:13,760 --> 02:27:17,120
investigations. And through these tools,

4358
02:27:15,600 --> 02:27:18,560
we can do things like data acquisition

4359
02:27:17,120 --> 02:27:20,479
and imaging where we're actually

4360
02:27:18,560 --> 02:27:22,240
creating forensic images or bit-by-bit

4361
02:27:20,479 --> 02:27:24,080
copies of storage media so we can

4362
02:27:22,240 --> 02:27:25,920
preserve the integrity of the original

4363
02:27:24,080 --> 02:27:27,600
evidence. We can use tools that can

4364
02:27:25,920 --> 02:27:29,200
perform file system analysis and

4365
02:27:27,600 --> 02:27:31,200
actually extract metadata or file

4366
02:27:29,200 --> 02:27:32,399
attributes, timestamps. We also have a

4367
02:27:31,200 --> 02:27:34,080
suite of tools that can do memory

4368
02:27:32,399 --> 02:27:35,920
forensics. So, we can actually capture

4369
02:27:34,080 --> 02:27:37,920
memory dumps from compromised systems.

4370
02:27:35,920 --> 02:27:39,600
We can analyze that volatile memory or

4371
02:27:37,920 --> 02:27:41,280
RAM for evidence of malicious

4372
02:27:39,600 --> 02:27:43,359
activities, things like fileless

4373
02:27:41,280 --> 02:27:45,520
malware, any modules or DLS that were

4374
02:27:43,359 --> 02:27:47,200
loaded or even open network connections.

4375
02:27:45,520 --> 02:27:48,640
We have tools for registry forensics

4376
02:27:47,200 --> 02:27:50,160
where we can actually uncover evidence

4377
02:27:48,640 --> 02:27:52,000
of user activity and system

4378
02:27:50,160 --> 02:27:54,399
configuration changes to find things

4379
02:27:52,000 --> 02:27:56,000
like malware persistence mechanisms or

4380
02:27:54,399 --> 02:27:57,359
even network traffic forensics where we

4381
02:27:56,000 --> 02:27:59,120
can look at things like network traffic

4382
02:27:57,359 --> 02:28:00,399
logs or packet captures which again

4383
02:27:59,120 --> 02:28:02,080
there's some overlap here with some of

4384
02:28:00,399 --> 02:28:03,439
these tools and we're going to be

4385
02:28:02,080 --> 02:28:05,359
covering some of these tools in the

4386
02:28:03,439 --> 02:28:07,200
digital forensics section like autopsy

4387
02:28:05,359 --> 02:28:08,800
and volatility. We also have the Eric

4388
02:28:07,200 --> 02:28:11,200
Zimmerman tool suite and things like

4389
02:28:08,800 --> 02:28:13,280
cape and INC case as well. And lastly

4390
02:28:11,200 --> 02:28:15,040
here we have malware analysis tools and

4391
02:28:13,280 --> 02:28:17,200
these are specialized pieces of software

4392
02:28:15,040 --> 02:28:19,439
that are designed to analyze and dissect

4393
02:28:17,200 --> 02:28:21,439
malware to understand its behavior

4394
02:28:19,439 --> 02:28:23,520
functionality as well as the impact on

4395
02:28:21,439 --> 02:28:25,120
systems and networks. And it's also

4396
02:28:23,520 --> 02:28:27,120
useful sometimes to know what types of

4397
02:28:25,120 --> 02:28:29,120
threats and how advanced threat actors

4398
02:28:27,120 --> 02:28:30,399
are who are targeting our organization.

4399
02:28:29,120 --> 02:28:32,560
So we can do things like dynamic

4400
02:28:30,399 --> 02:28:34,160
analysis where we can actually execute

4401
02:28:32,560 --> 02:28:35,760
and detonate malware samples in a

4402
02:28:34,160 --> 02:28:37,680
controlled environment like a virtual

4403
02:28:35,760 --> 02:28:39,600
machine or a sandbox so we can then

4404
02:28:37,680 --> 02:28:41,040
monitor the behavior in real time. You

4405
02:28:39,600 --> 02:28:42,640
know you can think about investigating a

4406
02:28:41,040 --> 02:28:44,720
potential fishing email that contains a

4407
02:28:42,640 --> 02:28:47,120
word document attachment. You want to

4408
02:28:44,720 --> 02:28:48,560
perform some dynamic sandbox analysis to

4409
02:28:47,120 --> 02:28:50,960
determine if there are any malicious

4410
02:28:48,560 --> 02:28:53,200
macros embedded inside that execute when

4411
02:28:50,960 --> 02:28:54,560
it's opened. So we can observe and log

4412
02:28:53,200 --> 02:28:56,800
the activities like file system

4413
02:28:54,560 --> 02:28:58,399
modifications, registry changes, network

4414
02:28:56,800 --> 02:28:59,920
communications or processes that are

4415
02:28:58,399 --> 02:29:01,520
being spawned. Basically any system

4416
02:28:59,920 --> 02:29:03,359
interaction that helps us understand the

4417
02:29:01,520 --> 02:29:05,359
malware behavior. There's also the

4418
02:29:03,359 --> 02:29:07,200
concept of static analysis where we can

4419
02:29:05,359 --> 02:29:08,960
actually provide tools with a sample of

4420
02:29:07,200 --> 02:29:11,280
malware for it to without actually

4421
02:29:08,960 --> 02:29:13,200
executing it but focus on examining the

4422
02:29:11,280 --> 02:29:15,439
file attributes and code structure

4423
02:29:13,200 --> 02:29:16,880
embedded resources and metadata. There's

4424
02:29:15,439 --> 02:29:19,040
also signature and pattern matching

4425
02:29:16,880 --> 02:29:20,800
capabilities where we can look at known

4426
02:29:19,040 --> 02:29:22,640
signatures or patterns or heruristics

4427
02:29:20,800 --> 02:29:24,319
stored in malware databases and threat

4428
02:29:22,640 --> 02:29:26,720
intelligence feeds so we can identify

4429
02:29:24,319 --> 02:29:28,160
known threats and variants. And another

4430
02:29:26,720 --> 02:29:29,920
way to say this is that we can integrate

4431
02:29:28,160 --> 02:29:32,080
with our threat intelligence platforms

4432
02:29:29,920 --> 02:29:33,840
to correlate analysis results with

4433
02:29:32,080 --> 02:29:35,680
existing threat intelligence data and

4434
02:29:33,840 --> 02:29:37,359
feeds. And to wrap this up, you can see

4435
02:29:35,680 --> 02:29:39,200
some examples here. We have a screenshot

4436
02:29:37,359 --> 02:29:41,040
of any run which is an interactive

4437
02:29:39,200 --> 02:29:43,040
malware analysis suite. We also have

4438
02:29:41,040 --> 02:29:45,200
other tools like hybrid analysis, Joe

4439
02:29:43,040 --> 02:29:47,000
sandbox as well as gedra for actual

4440
02:29:45,200 --> 02:29:49,520
reverse engineering

4441
02:29:47,000 --> 02:29:51,680
purposes. Okay, we are finally at the

4442
02:29:49,520 --> 02:29:53,840
home stretch of this section. So, thank

4443
02:29:51,680 --> 02:29:55,359
you for sticking this out. Throughout

4444
02:29:53,840 --> 02:29:57,280
the course, we're going to be covering a

4445
02:29:55,359 --> 02:29:58,800
number of detection and response efforts

4446
02:29:57,280 --> 02:30:02,000
for a number of different types of

4447
02:29:58,800 --> 02:30:03,359
attacks and subsequent incidents. And

4448
02:30:02,000 --> 02:30:04,720
because of this, it's going to be very

4449
02:30:03,359 --> 02:30:06,720
important for us to have a good

4450
02:30:04,720 --> 02:30:09,120
understanding of what the most common

4451
02:30:06,720 --> 02:30:11,280
attacks and threats are that Sock teams

4452
02:30:09,120 --> 02:30:12,800
typically face. So, you can see a number

4453
02:30:11,280 --> 02:30:14,479
of different attacks laid out on the

4454
02:30:12,800 --> 02:30:16,160
screen here that we're going to cover.

4455
02:30:14,479 --> 02:30:18,640
And these various attacks can target

4456
02:30:16,160 --> 02:30:20,399
different vulnerabilities or weaknesses,

4457
02:30:18,640 --> 02:30:22,399
but ultimately they all have similar

4458
02:30:20,399 --> 02:30:24,319
objectives or goals in mind to

4459
02:30:22,399 --> 02:30:26,720
compromise a system or excfiltrate

4460
02:30:24,319 --> 02:30:28,319
sensitive data. So, let's start out with

4461
02:30:26,720 --> 02:30:30,479
social engineering. And we've talked

4462
02:30:28,319 --> 02:30:32,640
about it quite a bit before. Social

4463
02:30:30,479 --> 02:30:35,040
engineering is an attack that exploits

4464
02:30:32,640 --> 02:30:36,479
the human side of cyber security rather

4465
02:30:35,040 --> 02:30:38,560
than any kind of technical

4466
02:30:36,479 --> 02:30:40,560
vulnerability. And a common goal here is

4467
02:30:38,560 --> 02:30:43,200
to gain some sort of unauthorized access

4468
02:30:40,560 --> 02:30:44,800
to a system or exfiltrate some sort of

4469
02:30:43,200 --> 02:30:46,520
data or gain some sort of user

4470
02:30:44,800 --> 02:30:48,640
credential that can then be spoofed or

4471
02:30:46,520 --> 02:30:50,880
impersonated. So for example, we can

4472
02:30:48,640 --> 02:30:53,200
think of an attacker posing as a trusted

4473
02:30:50,880 --> 02:30:54,560
IT technician and maybe they call up an

4474
02:30:53,200 --> 02:30:56,399
employee claiming that there's a problem

4475
02:30:54,560 --> 02:30:58,080
with their computer or their account and

4476
02:30:56,399 --> 02:31:00,080
they request their login credentials so

4477
02:30:58,080 --> 02:31:01,600
they can fix it. and the employee

4478
02:31:00,080 --> 02:31:03,439
thinking that it's a legitimate IT

4479
02:31:01,600 --> 02:31:05,600
technician might actually give their

4480
02:31:03,439 --> 02:31:07,280
credentials over the phone leading to an

4481
02:31:05,600 --> 02:31:09,439
account compromise. And we've talked

4482
02:31:07,280 --> 02:31:11,200
about fishing a lot too. And fishing

4483
02:31:09,439 --> 02:31:13,200
involves sending some sort of deceptive

4484
02:31:11,200 --> 02:31:14,479
email or a message to someone and

4485
02:31:13,200 --> 02:31:16,399
appearing to be from some sort of

4486
02:31:14,479 --> 02:31:18,399
legitimate source like a bank or a

4487
02:31:16,399 --> 02:31:20,319
trusted organization. And these emails

4488
02:31:18,399 --> 02:31:21,920
will typically contain an attachment or

4489
02:31:20,319 --> 02:31:23,680
some sort of malicious link that when

4490
02:31:21,920 --> 02:31:25,520
clicked that can lead to a malicious

4491
02:31:23,680 --> 02:31:27,120
website to trick a user into putting in

4492
02:31:25,520 --> 02:31:28,800
their credentials or downloading some

4493
02:31:27,120 --> 02:31:30,399
sort of malware. And we're going to

4494
02:31:28,800 --> 02:31:31,840
cover fishing and analyzing fishing

4495
02:31:30,399 --> 02:31:33,760
emails in the next section of this

4496
02:31:31,840 --> 02:31:35,040
course. But at a high level, we have

4497
02:31:33,760 --> 02:31:36,800
different types of fishing, right? We

4498
02:31:35,040 --> 02:31:38,240
have spear fishing, which is a targeted

4499
02:31:36,800 --> 02:31:39,280
form of fishing where an attacker is

4500
02:31:38,240 --> 02:31:41,280
going to tailor their message

4501
02:31:39,280 --> 02:31:43,280
specifically to an individual or an

4502
02:31:41,280 --> 02:31:44,880
organization. So often this requires a

4503
02:31:43,280 --> 02:31:46,640
lot of research beforehand so an

4504
02:31:44,880 --> 02:31:48,479
attacker can personalize their email

4505
02:31:46,640 --> 02:31:50,319
with convincing details or gain some

4506
02:31:48,479 --> 02:31:52,479
credibility to make them more likely to

4507
02:31:50,319 --> 02:31:54,560
succeed. We also have whaling, which is

4508
02:31:52,479 --> 02:31:56,319
a type of spear fishing, which

4509
02:31:54,560 --> 02:31:58,479
specifically targets high-profile

4510
02:31:56,319 --> 02:32:00,080
individuals within an organization. So,

4511
02:31:58,479 --> 02:32:01,680
we can think of people like senior

4512
02:32:00,080 --> 02:32:03,359
executives or some sort of senior

4513
02:32:01,680 --> 02:32:05,520
management because these types of people

4514
02:32:03,359 --> 02:32:07,359
typically have more access or more

4515
02:32:05,520 --> 02:32:09,680
exposure to sensitive information that

4516
02:32:07,359 --> 02:32:11,200
can be stolen. We also have fishing or

4517
02:32:09,680 --> 02:32:13,439
voice fetching, which was in our

4518
02:32:11,200 --> 02:32:15,120
example. This is where an attacker calls

4519
02:32:13,439 --> 02:32:16,720
someone over the phone and attempts to

4520
02:32:15,120 --> 02:32:18,800
trick them into providing sensitive

4521
02:32:16,720 --> 02:32:21,120
information, performing certain actions,

4522
02:32:18,800 --> 02:32:23,120
or giving up their account credentials.

4523
02:32:21,120 --> 02:32:24,720
Similarly, we have SMS fishing or

4524
02:32:23,120 --> 02:32:26,479
smishing, which is the same kind of

4525
02:32:24,720 --> 02:32:29,359
thing, but an attack conducted through

4526
02:32:26,479 --> 02:32:31,280
text messages or SMS messages. So, you

4527
02:32:29,359 --> 02:32:32,960
may have gotten a suspicious text before

4528
02:32:31,280 --> 02:32:34,640
from a number you didn't recognize that

4529
02:32:32,960 --> 02:32:36,800
asks you to click on a link or visit a

4530
02:32:34,640 --> 02:32:39,359
web page. Most likely, this was a

4531
02:32:36,800 --> 02:32:40,960
smishing attack. And lastly, here we

4532
02:32:39,359 --> 02:32:42,880
have quishing, which is a weird word,

4533
02:32:40,960 --> 02:32:44,880
but essentially refers to QR code

4534
02:32:42,880 --> 02:32:46,880
fishing. And this is a similar type of

4535
02:32:44,880 --> 02:32:48,560
attack where an attacker is going to try

4536
02:32:46,880 --> 02:32:50,720
to deceive someone into scanning a

4537
02:32:48,560 --> 02:32:52,600
malicious QR code that is then going to

4538
02:32:50,720 --> 02:32:55,520
lead them to some sort of fishing

4539
02:32:52,600 --> 02:32:57,359
website. So, let's talk about malware or

4540
02:32:55,520 --> 02:32:59,680
any malicious software that's designed

4541
02:32:57,359 --> 02:33:01,120
to harm or exploit an organization or an

4542
02:32:59,680 --> 02:33:02,399
individual because there's several

4543
02:33:01,120 --> 02:33:04,399
different types of malware that we can

4544
02:33:02,399 --> 02:33:06,399
cover here. And the first one here being

4545
02:33:04,399 --> 02:33:08,960
a worm. And a worm is a malicious

4546
02:33:06,399 --> 02:33:10,640
program designed to replicate itself and

4547
02:33:08,960 --> 02:33:12,960
spread across networks or on the

4548
02:33:10,640 --> 02:33:15,280
internet and often without requiring any

4549
02:33:12,960 --> 02:33:17,280
user interaction. So they may do this by

4550
02:33:15,280 --> 02:33:18,960
exploiting some sort of vulnerability so

4551
02:33:17,280 --> 02:33:20,960
they can infect and propagate throughout

4552
02:33:18,960 --> 02:33:22,800
a network and infect more people. We

4553
02:33:20,960 --> 02:33:24,560
have a couple notable examples of worms.

4554
02:33:22,800 --> 02:33:26,399
So first we have stuckset which was a

4555
02:33:24,560 --> 02:33:28,720
highly sophisticated worm discovered

4556
02:33:26,399 --> 02:33:30,960
around 2010 but was in development from

4557
02:33:28,720 --> 02:33:33,760
much earlier and it was specifically

4558
02:33:30,960 --> 02:33:36,160
crafted to target SCADA systems used in

4559
02:33:33,760 --> 02:33:38,880
industrial environments and particularly

4560
02:33:36,160 --> 02:33:40,800
to attack Iran's nuclear program. And it

4561
02:33:38,880 --> 02:33:42,319
did this by exploiting multiple zeroday

4562
02:33:40,800 --> 02:33:44,720
vulnerabilities and chaining those

4563
02:33:42,319 --> 02:33:46,319
together to infect and propagate. We

4564
02:33:44,720 --> 02:33:47,840
also have blaster which is the one

4565
02:33:46,319 --> 02:33:49,680
pictured here on the right. This is a

4566
02:33:47,840 --> 02:33:51,280
hex output of what the actual worm

4567
02:33:49,680 --> 02:33:53,680
looked like. And it was an older worm

4568
02:33:51,280 --> 02:33:56,160
back in around 2003 that exploited a

4569
02:33:53,680 --> 02:33:58,080
vulnerability in Microsoft Windows. And

4570
02:33:56,160 --> 02:34:00,640
while technically a ransomware, if you

4571
02:33:58,080 --> 02:34:02,479
remember Wukry from 2017, it used

4572
02:34:00,640 --> 02:34:04,319
wormlike capabilities to propagate

4573
02:34:02,479 --> 02:34:06,080
across the network. Specifically, it

4574
02:34:04,319 --> 02:34:08,319
exploited a vulnerability in Windows

4575
02:34:06,080 --> 02:34:10,880
Server message block or the SMB protocol

4576
02:34:08,319 --> 02:34:12,399
to infect unpatched Windows systems. So,

4577
02:34:10,880 --> 02:34:14,479
let's quickly talk about spyware and

4578
02:34:12,399 --> 02:34:16,160
adwear, which are similar but share some

4579
02:34:14,479 --> 02:34:17,840
distinctions. And these are types of

4580
02:34:16,160 --> 02:34:19,920
malware that either covertly monitor

4581
02:34:17,840 --> 02:34:22,000
user activity or display unwanted

4582
02:34:19,920 --> 02:34:24,080
advertisements respectively. So with

4583
02:34:22,000 --> 02:34:25,920
spyware, it's specifically designed to

4584
02:34:24,080 --> 02:34:27,520
again secretly monitor and collect

4585
02:34:25,920 --> 02:34:29,439
information from a user's computer

4586
02:34:27,520 --> 02:34:31,040
without their knowledge or consent. And

4587
02:34:29,439 --> 02:34:33,359
it can do this by things like installing

4588
02:34:31,040 --> 02:34:35,439
a key logger or tracking keystrokes or

4589
02:34:33,359 --> 02:34:37,359
capturing screens or the webcam. It can

4590
02:34:35,439 --> 02:34:38,800
look at browsing habits of the user or

4591
02:34:37,359 --> 02:34:40,319
gather some sort of other personal

4592
02:34:38,800 --> 02:34:42,720
information and send that to somewhere

4593
02:34:40,319 --> 02:34:44,479
else. AdWare on the other hand is often

4594
02:34:42,720 --> 02:34:46,240
bundled with other software like free

4595
02:34:44,479 --> 02:34:47,680
applications or browser extensions you

4596
02:34:46,240 --> 02:34:49,600
find. And again, it's typically

4597
02:34:47,680 --> 02:34:51,359
installed without the user's explicit

4598
02:34:49,600 --> 02:34:53,439
consent. But the primary purpose of

4599
02:34:51,359 --> 02:34:55,040
adwear is to generate revenue by

4600
02:34:53,439 --> 02:34:57,040
delivering targeted advertisements to

4601
02:34:55,040 --> 02:34:58,960
the user. So you might install adwear

4602
02:34:57,040 --> 02:35:01,040
unexpectedly and start to see a bunch of

4603
02:34:58,960 --> 02:35:02,920
ads on your desktop or within the

4604
02:35:01,040 --> 02:35:05,600
homepage of your browser or your search

4605
02:35:02,920 --> 02:35:07,439
bar. So next we have Trojans, which is

4606
02:35:05,600 --> 02:35:09,439
actually named after the famous Trojan

4607
02:35:07,439 --> 02:35:11,040
horse from Greek mythology. And they're

4608
02:35:09,439 --> 02:35:13,120
a type of malware that, as the name

4609
02:35:11,040 --> 02:35:15,359
suggests, disguises itself as a

4610
02:35:13,120 --> 02:35:18,080
legitimate program to deceive users into

4611
02:35:15,359 --> 02:35:19,920
executing it. So unlike worms, which can

4612
02:35:18,080 --> 02:35:22,160
actually self-replicate and spread on

4613
02:35:19,920 --> 02:35:24,319
their own, Trojans will typically rely

4614
02:35:22,160 --> 02:35:27,120
on social engineering tactics to trick

4615
02:35:24,319 --> 02:35:28,479
users into installing or executing them.

4616
02:35:27,120 --> 02:35:30,560
They're typically distributed through

4617
02:35:28,479 --> 02:35:32,640
various channels. So things like fishing

4618
02:35:30,560 --> 02:35:34,720
email attachments or on malicious

4619
02:35:32,640 --> 02:35:36,240
websites or within a software download,

4620
02:35:34,720 --> 02:35:38,240
often masquerading as some sort of

4621
02:35:36,240 --> 02:35:40,560
legitimate or innocent looking file like

4622
02:35:38,240 --> 02:35:42,880
a game or some sort of extension or a

4623
02:35:40,560 --> 02:35:44,720
productivity application. And most

4624
02:35:42,880 --> 02:35:47,920
commonly Trojans are going to be in the

4625
02:35:44,720 --> 02:35:49,359
form of remote access Trojans or RATS.

4626
02:35:47,920 --> 02:35:51,439
And these are a type of Trojan that

4627
02:35:49,359 --> 02:35:53,359
gives an attacker remote control over a

4628
02:35:51,439 --> 02:35:55,439
system. And they will typically create a

4629
02:35:53,359 --> 02:35:57,200
back door on the infected system so the

4630
02:35:55,439 --> 02:35:59,600
attacker can return and regain that

4631
02:35:57,200 --> 02:36:01,439
access as desired. And this may lead

4632
02:35:59,600 --> 02:36:03,359
into some sort of botnet recruitment

4633
02:36:01,439 --> 02:36:05,600
where a Trojan can be used to recruit

4634
02:36:03,359 --> 02:36:07,680
infected systems into a botnet which is

4635
02:36:05,600 --> 02:36:09,200
a network of compromised devices that

4636
02:36:07,680 --> 02:36:11,439
use a central command and control

4637
02:36:09,200 --> 02:36:13,439
server. And we'll touch on botnetss in a

4638
02:36:11,439 --> 02:36:15,520
second. But lastly, Trojans can be used

4639
02:36:13,439 --> 02:36:18,080
to actually deliver ransomware. And

4640
02:36:15,520 --> 02:36:20,479
speaking of ransomware, well, ransomware

4641
02:36:18,080 --> 02:36:22,560
is a very scary type of malware that's

4642
02:36:20,479 --> 02:36:24,319
designed to encrypt files on a victim's

4643
02:36:22,560 --> 02:36:26,399
computer or within a network. and it

4644
02:36:24,319 --> 02:36:28,240
renders these files inaccessible by

4645
02:36:26,399 --> 02:36:30,560
demanding a ransom payment in exchange

4646
02:36:28,240 --> 02:36:32,479
for the decryption key. And typically a

4647
02:36:30,560 --> 02:36:34,800
ransomware attack is going to follow a

4648
02:36:32,479 --> 02:36:36,000
specific sequence of steps. So first

4649
02:36:34,800 --> 02:36:37,840
obviously there's going to be an

4650
02:36:36,000 --> 02:36:39,200
infection and this could be through a

4651
02:36:37,840 --> 02:36:41,040
malicious email attachment like a

4652
02:36:39,200 --> 02:36:42,560
fishing email like we said or through a

4653
02:36:41,040 --> 02:36:44,240
compromised website. Maybe someone

4654
02:36:42,560 --> 02:36:45,600
accidentally downloads something. It

4655
02:36:44,240 --> 02:36:46,880
could even be like a Trojan. Maybe

4656
02:36:45,600 --> 02:36:48,960
someone thinks they're downloading a

4657
02:36:46,880 --> 02:36:51,200
music app. But in reality it's going to

4658
02:36:48,960 --> 02:36:53,040
be ransomware. And once the ransomware

4659
02:36:51,200 --> 02:36:55,280
gains access to the system, it's going

4660
02:36:53,040 --> 02:36:56,960
to start quickly encrypting files using

4661
02:36:55,280 --> 02:36:59,200
that strong encryption algorithm and

4662
02:36:56,960 --> 02:37:01,040
using public key infrastructure so that

4663
02:36:59,200 --> 02:37:03,520
they can't be decrypted without that

4664
02:37:01,040 --> 02:37:05,280
specific key. And after encrypting

4665
02:37:03,520 --> 02:37:07,040
files, you're typically going to see

4666
02:37:05,280 --> 02:37:08,880
some sort of ransom note like we have on

4667
02:37:07,040 --> 02:37:10,640
the right here that informs the victim

4668
02:37:08,880 --> 02:37:12,479
that their files have been encrypted and

4669
02:37:10,640 --> 02:37:14,560
provides instructions on how to actually

4670
02:37:12,479 --> 02:37:16,160
pay the ransom back, which is typically

4671
02:37:14,560 --> 02:37:18,240
going to be done through some sort of

4672
02:37:16,160 --> 02:37:20,399
cryptocurrency because cryptocurrency is

4673
02:37:18,240 --> 02:37:22,319
a lot more difficult to trace. And

4674
02:37:20,399 --> 02:37:24,240
lastly, we're going to have decryption

4675
02:37:22,319 --> 02:37:25,920
if you're lucky because this is a cyber

4676
02:37:24,240 --> 02:37:28,319
criminal we're talking about. So even if

4677
02:37:25,920 --> 02:37:29,760
the ransom is paid by an organization,

4678
02:37:28,319 --> 02:37:31,680
there's no guarantee that they're going

4679
02:37:29,760 --> 02:37:33,600
to actually get the decryption key back

4680
02:37:31,680 --> 02:37:35,920
to recover their files, which is why

4681
02:37:33,600 --> 02:37:38,240
having strong backups and recent backups

4682
02:37:35,920 --> 02:37:40,640
is the most important and most useful

4683
02:37:38,240 --> 02:37:42,560
way to get around ransomware. So we

4684
02:37:40,640 --> 02:37:44,800
mentioned botnets before, and a botnet

4685
02:37:42,560 --> 02:37:46,240
is a network of compromised devices or

4686
02:37:44,800 --> 02:37:47,520
computers that are infected with

4687
02:37:46,240 --> 02:37:49,040
malware, and they're typically referred

4688
02:37:47,520 --> 02:37:50,720
to as zombies because they're

4689
02:37:49,040 --> 02:37:53,280
essentially being controlled remotely by

4690
02:37:50,720 --> 02:37:55,920
a single entity. And botnets are often

4691
02:37:53,280 --> 02:37:57,840
used in various malicious purposes like

4692
02:37:55,920 --> 02:38:00,399
launching and staging denial of service

4693
02:37:57,840 --> 02:38:02,479
attacks or DDoSes, distributed denial of

4694
02:38:00,399 --> 02:38:04,800
service attacks or spreading malware or

4695
02:38:02,479 --> 02:38:06,840
sending spam emails or even things like

4696
02:38:04,800 --> 02:38:09,439
mining cryptocurrencies without a user's

4697
02:38:06,840 --> 02:38:11,200
knowledge. We also have fileless malware

4698
02:38:09,439 --> 02:38:13,359
which is also known as memory based

4699
02:38:11,200 --> 02:38:15,920
malware. And this is a type of malware

4700
02:38:13,359 --> 02:38:17,760
that operates primarily within memory

4701
02:38:15,920 --> 02:38:19,439
and it's able to execute and operate

4702
02:38:17,760 --> 02:38:21,600
without leaving traces of its presence

4703
02:38:19,439 --> 02:38:23,520
on the victim's file system. So unlike

4704
02:38:21,600 --> 02:38:25,520
traditional malware that relies on files

4705
02:38:23,520 --> 02:38:27,600
and executables to infect systems,

4706
02:38:25,520 --> 02:38:29,680
fileless malware can leverage legitimate

4707
02:38:27,600 --> 02:38:31,520
systems or something we refer to as

4708
02:38:29,680 --> 02:38:33,359
living off the land to carry out

4709
02:38:31,520 --> 02:38:35,840
malicious activities which makes it a

4710
02:38:33,359 --> 02:38:37,600
lot more difficult to detect and log. So

4711
02:38:35,840 --> 02:38:39,120
often fileless malware is going to use

4712
02:38:37,600 --> 02:38:40,560
techniques like Windows PowerShell

4713
02:38:39,120 --> 02:38:43,280
scripts or Windows management

4714
02:38:40,560 --> 02:38:45,120
instrumentation or WI or even inject

4715
02:38:43,280 --> 02:38:47,520
malicious commands within memory to

4716
02:38:45,120 --> 02:38:48,800
carry out its objectives. Now, this is a

4717
02:38:47,520 --> 02:38:50,240
big one. Identity and account

4718
02:38:48,800 --> 02:38:52,080
compromise. And they're kind of two

4719
02:38:50,240 --> 02:38:53,920
separate things, but identity and

4720
02:38:52,080 --> 02:38:55,840
account compromise or also known as

4721
02:38:53,920 --> 02:38:57,520
identity theft or account takeover

4722
02:38:55,840 --> 02:38:59,120
occurs when an unauthorized individual

4723
02:38:57,520 --> 02:39:01,120
gains access to someone's personal

4724
02:38:59,120 --> 02:39:02,560
information or their user credentials or

4725
02:39:01,120 --> 02:39:04,479
their online accounts without their

4726
02:39:02,560 --> 02:39:05,840
permission. And this can include various

4727
02:39:04,479 --> 02:39:08,160
types of sensitive data like we

4728
02:39:05,840 --> 02:39:10,240
mentioned like usernames, passwords,

4729
02:39:08,160 --> 02:39:12,319
even things like social security numbers

4730
02:39:10,240 --> 02:39:14,479
or credit card numbers. And once an

4731
02:39:12,319 --> 02:39:16,560
attacker gains access to an individual's

4732
02:39:14,479 --> 02:39:18,960
account or identity, they can carry out

4733
02:39:16,560 --> 02:39:21,200
various types of malicious activities

4734
02:39:18,960 --> 02:39:23,040
like impersonating them or even fraud

4735
02:39:21,200 --> 02:39:25,200
and making unauthorized purchases using

4736
02:39:23,040 --> 02:39:26,960
their stolen credit card information. If

4737
02:39:25,200 --> 02:39:28,800
an attacker can impersonate a victim,

4738
02:39:26,960 --> 02:39:30,720
they can start sending spam emails or

4739
02:39:28,800 --> 02:39:32,240
fishing emails from that compromised

4740
02:39:30,720 --> 02:39:34,160
user to make them appear more

4741
02:39:32,240 --> 02:39:35,920
legitimate. And often this type of

4742
02:39:34,160 --> 02:39:38,000
attack can be done through fishing or

4743
02:39:35,920 --> 02:39:39,760
brute forcing credentials or things like

4744
02:39:38,000 --> 02:39:41,280
credential stuffing where an attacker

4745
02:39:39,760 --> 02:39:43,600
gains a user's credentials through a

4746
02:39:41,280 --> 02:39:45,200
breach and then subsequently tries that

4747
02:39:43,600 --> 02:39:46,960
password or credentials on different

4748
02:39:45,200 --> 02:39:49,680
services for that user to try to gain

4749
02:39:46,960 --> 02:39:51,520
access as well. Next we have insider

4750
02:39:49,680 --> 02:39:53,840
threats and these refer to the risk that

4751
02:39:51,520 --> 02:39:56,080
an organization faces by individuals

4752
02:39:53,840 --> 02:39:58,319
from within that organization or someone

4753
02:39:56,080 --> 02:40:00,160
who has authorized access to sensitive

4754
02:39:58,319 --> 02:40:01,680
information. So these may be current or

4755
02:40:00,160 --> 02:40:04,080
former employees. It could be

4756
02:40:01,680 --> 02:40:05,840
contractors or partners or any trusted

4757
02:40:04,080 --> 02:40:07,840
entity that has legitimate access

4758
02:40:05,840 --> 02:40:10,080
privileges. And insider threats can

4759
02:40:07,840 --> 02:40:11,920
often manifest in various forms. So we

4760
02:40:10,080 --> 02:40:13,680
may have a malicious insider and that's

4761
02:40:11,920 --> 02:40:15,920
someone who intentionally misuses their

4762
02:40:13,680 --> 02:40:18,960
privileges to steal data or commit fraud

4763
02:40:15,920 --> 02:40:20,960
or uh sabotage the company in some way.

4764
02:40:18,960 --> 02:40:22,560
But we also have careless insiders. And

4765
02:40:20,960 --> 02:40:24,319
this is someone who inadvertently

4766
02:40:22,560 --> 02:40:26,240
compromises their security through

4767
02:40:24,319 --> 02:40:28,319
things like their negligence or

4768
02:40:26,240 --> 02:40:30,399
carelessness or just their general lack

4769
02:40:28,319 --> 02:40:32,399
of awareness. And lastly, we have a

4770
02:40:30,399 --> 02:40:34,000
compromise insider which could be the

4771
02:40:32,399 --> 02:40:35,680
result of something like identity or

4772
02:40:34,000 --> 02:40:37,120
account compromise. And this is where

4773
02:40:35,680 --> 02:40:38,640
someone's credentials or access

4774
02:40:37,120 --> 02:40:40,240
privileges get compromised by an

4775
02:40:38,640 --> 02:40:42,399
attacker either through fishing or

4776
02:40:40,240 --> 02:40:44,399
social engineering and then the attacker

4777
02:40:42,399 --> 02:40:46,560
is then exploiting that account to gain

4778
02:40:44,399 --> 02:40:48,319
unauthorized access and steal sensitive

4779
02:40:46,560 --> 02:40:49,840
information. And as you can imagine,

4780
02:40:48,319 --> 02:40:52,160
insider threats can have serious

4781
02:40:49,840 --> 02:40:54,479
consequences for organizations and lead

4782
02:40:52,160 --> 02:40:56,800
to things like data breaches or IP theft

4783
02:40:54,479 --> 02:40:59,040
or financial loss, reputational damage,

4784
02:40:56,800 --> 02:41:00,960
and even legal liabilities. The other

4785
02:40:59,040 --> 02:41:02,960
thing, too, is that insider threats can

4786
02:41:00,960 --> 02:41:05,200
be very challenging to detect and

4787
02:41:02,960 --> 02:41:07,520
mitigate because insiders often have

4788
02:41:05,200 --> 02:41:09,200
legitimate access to these services and

4789
02:41:07,520 --> 02:41:11,359
can often blend in with normal user

4790
02:41:09,200 --> 02:41:13,760
behavior. We also have advanced

4791
02:41:11,359 --> 02:41:15,760
persistent threats or APS and these are

4792
02:41:13,760 --> 02:41:17,680
sophisticated cyber groups that are

4793
02:41:15,760 --> 02:41:20,240
highly orchestrated and highly skilled

4794
02:41:17,680 --> 02:41:22,560
and often wellunded such as nation state

4795
02:41:20,240 --> 02:41:24,319
actors or organized crime groups. And

4796
02:41:22,560 --> 02:41:25,680
unlike typical cyber attacks which are

4797
02:41:24,319 --> 02:41:27,920
more opportunistic and may be

4798
02:41:25,680 --> 02:41:29,240
short-lived, APS are characterized by

4799
02:41:27,920 --> 02:41:31,200
several things like their

4800
02:41:29,240 --> 02:41:33,280
sophistication. So they might employ

4801
02:41:31,200 --> 02:41:35,040
advanced techniques and tools and

4802
02:41:33,280 --> 02:41:37,200
develop their own custom malware or

4803
02:41:35,040 --> 02:41:39,439
leverage zeroday exploits. And as the

4804
02:41:37,200 --> 02:41:41,040
name suggests, they're often persistent.

4805
02:41:39,439 --> 02:41:42,880
And these groups are able to maintain

4806
02:41:41,040 --> 02:41:45,280
long-term access. We're talking like

4807
02:41:42,880 --> 02:41:46,640
months or years. And they're often very

4808
02:41:45,280 --> 02:41:48,720
targeted, right? So, not every

4809
02:41:46,640 --> 02:41:50,000
organization is going to have an AP in

4810
02:41:48,720 --> 02:41:52,000
their threat model. We're mainly

4811
02:41:50,000 --> 02:41:53,840
thinking of specific organizations or

4812
02:41:52,000 --> 02:41:55,920
industries or government entities or

4813
02:41:53,840 --> 02:41:57,920
even countries. And lastly, they

4814
02:41:55,920 --> 02:41:58,880
typically have strategic objectives. So,

4815
02:41:57,920 --> 02:42:01,439
they're trying to do things like

4816
02:41:58,880 --> 02:42:03,200
espionage or steal intellectual property

4817
02:42:01,439 --> 02:42:06,000
or sabotage or cause some sort of

4818
02:42:03,200 --> 02:42:08,399
disruption to critical infrastructure.

4819
02:42:06,000 --> 02:42:10,399
And many vendors actually categorize APS

4820
02:42:08,399 --> 02:42:12,240
based on their industry and geography.

4821
02:42:10,399 --> 02:42:14,240
For example, Crowdstrike uses a naming

4822
02:42:12,240 --> 02:42:15,840
convention called Falcon Intelligence to

4823
02:42:14,240 --> 02:42:18,000
identify AP groups, which you can check

4824
02:42:15,840 --> 02:42:19,439
out at this link here. And you can

4825
02:42:18,000 --> 02:42:21,280
actually search based on your industry

4826
02:42:19,439 --> 02:42:22,880
and your business size as well as your

4827
02:42:21,280 --> 02:42:24,560
country. But if we just start looking at

4828
02:42:22,880 --> 02:42:26,080
some of the groups here, you can see we

4829
02:42:24,560 --> 02:42:27,600
have different known groups as well as

4830
02:42:26,080 --> 02:42:29,280
their names depending on their country,

4831
02:42:27,600 --> 02:42:31,359
right? So with Iran, we have banished

4832
02:42:29,280 --> 02:42:32,880
kitten or static kitten. With Russia,

4833
02:42:31,359 --> 02:42:35,120
it's primarily bears, right? We have

4834
02:42:32,880 --> 02:42:36,640
fancy bear or cozy bear. We can also

4835
02:42:35,120 --> 02:42:39,200
view these groups in a different naming

4836
02:42:36,640 --> 02:42:41,520
convention with mandant. So mandant as

4837
02:42:39,200 --> 02:42:43,680
you can see uses this apt format with

4838
02:42:41,520 --> 02:42:47,200
different numbers to attribute different

4839
02:42:43,680 --> 02:42:51,760
groups. So for example a39 is attributed

4840
02:42:47,200 --> 02:42:53,200
to Iran and a31 is attributed to China.

4841
02:42:51,760 --> 02:42:54,880
And we can actually view these groups on

4842
02:42:53,200 --> 02:42:56,720
the miter attack framework which we're

4843
02:42:54,880 --> 02:42:58,479
going to look at later in more depth.

4844
02:42:56,720 --> 02:43:00,160
But just as a quick aside you can see we

4845
02:42:58,479 --> 02:43:02,720
have this groups tab here where we have

4846
02:43:00,160 --> 02:43:04,560
all the different names and their IDs.

4847
02:43:02,720 --> 02:43:06,760
And if we just do a search for fancy

4848
02:43:04,560 --> 02:43:08,880
bear, you can see we have that under

4849
02:43:06,760 --> 02:43:10,640
AP28, which is the Mandant naming

4850
02:43:08,880 --> 02:43:12,640
convention as well as the crowd strike

4851
02:43:10,640 --> 02:43:14,399
naming convention with fancy bear here.

4852
02:43:12,640 --> 02:43:16,640
And if we click to a specific group name

4853
02:43:14,399 --> 02:43:18,880
and scroll down to techniques used, we

4854
02:43:16,640 --> 02:43:20,880
can actually see what types of common

4855
02:43:18,880 --> 02:43:23,200
techniques and tactics does this group

4856
02:43:20,880 --> 02:43:25,520
use. So we can see here with fancy bear

4857
02:43:23,200 --> 02:43:26,960
or apt28, they typically use a

4858
02:43:25,520 --> 02:43:28,960
PowerShell command lit to grant the

4859
02:43:26,960 --> 02:43:30,960
application impersonation role to a

4860
02:43:28,960 --> 02:43:32,560
compromised account.

4861
02:43:30,960 --> 02:43:34,399
So we also have denial of service

4862
02:43:32,560 --> 02:43:36,880
attacks which are aimed to disrupt or

4863
02:43:34,399 --> 02:43:38,399
degrade the availability of systems and

4864
02:43:36,880 --> 02:43:40,240
often this could be done by overwhelming

4865
02:43:38,399 --> 02:43:42,720
them with a flood of traffic or resource

4866
02:43:40,240 --> 02:43:44,319
requests. And denial of service attacks

4867
02:43:42,720 --> 02:43:46,399
don't always have to be intentional. For

4868
02:43:44,319 --> 02:43:48,479
example, some sort of system failure or

4869
02:43:46,399 --> 02:43:50,399
accidental misconfiguration or just

4870
02:43:48,479 --> 02:43:52,000
general network congestion or spikes in

4871
02:43:50,399 --> 02:43:54,560
legitimate traffic can also cause

4872
02:43:52,000 --> 02:43:56,240
service interruptions. Now we also have

4873
02:43:54,560 --> 02:43:57,840
distributed denial of service attacks

4874
02:43:56,240 --> 02:43:59,520
which we mentioned earlier where they

4875
02:43:57,840 --> 02:44:02,160
have multiple compromised systems or

4876
02:43:59,520 --> 02:44:04,000
devices to target a single system. By

4877
02:44:02,160 --> 02:44:06,000
using multiple devices and compromised

4878
02:44:04,000 --> 02:44:08,000
zombies, an attacker can amplify their

4879
02:44:06,000 --> 02:44:09,520
attack making it much harder to defend

4880
02:44:08,000 --> 02:44:11,040
against. However, there are a lot of

4881
02:44:09,520 --> 02:44:12,800
service providers out there that offer

4882
02:44:11,040 --> 02:44:14,479
things like DOS protection where they're

4883
02:44:12,800 --> 02:44:16,319
going to leverage scalable and elastic

4884
02:44:14,479 --> 02:44:18,479
cloud infrastructure to spin up extra

4885
02:44:16,319 --> 02:44:20,560
resources in the event of a DOS so that

4886
02:44:18,479 --> 02:44:22,399
the organization can ride out the storm

4887
02:44:20,560 --> 02:44:23,680
so to speak. But this can be costly

4888
02:44:22,399 --> 02:44:25,920
obviously. It's more of an insurance

4889
02:44:23,680 --> 02:44:27,520
type of thing. So, we have data breaches

4890
02:44:25,920 --> 02:44:29,760
which are going to occur when sensitive

4891
02:44:27,520 --> 02:44:31,439
or confidential information is accessed

4892
02:44:29,760 --> 02:44:33,200
or disclosed or stolen without

4893
02:44:31,439 --> 02:44:34,800
authorization. And data breaches are

4894
02:44:33,200 --> 02:44:36,479
often the outcome of some of the threats

4895
02:44:34,800 --> 02:44:38,240
that we mentioned earlier like cyber

4896
02:44:36,479 --> 02:44:40,000
attacks or insider threats. But they can

4897
02:44:38,240 --> 02:44:42,319
also be disclosed accidentally through

4898
02:44:40,000 --> 02:44:43,920
human error or misconfigurations or just

4899
02:44:42,319 --> 02:44:45,760
inadequate security controls such as

4900
02:44:43,920 --> 02:44:48,000
like a non-secured S3 bucket in the

4901
02:44:45,760 --> 02:44:49,439
cloud. Just as an example or an

4902
02:44:48,000 --> 02:44:50,880
anecdote, I once led the incident

4903
02:44:49,439 --> 02:44:52,479
response efforts on an information

4904
02:44:50,880 --> 02:44:53,920
disclosure incident where that the

4905
02:44:52,479 --> 02:44:55,840
customer reports that were generated

4906
02:44:53,920 --> 02:44:57,520
from one of our organizations systems

4907
02:44:55,840 --> 02:44:59,840
were accidentally being hosted on

4908
02:44:57,520 --> 02:45:01,120
publicly accessible links. The only

4909
02:44:59,840 --> 02:45:02,479
reason that this was identified is

4910
02:45:01,120 --> 02:45:04,720
because these links were being crawled

4911
02:45:02,479 --> 02:45:06,560
and indexed by search engines which was

4912
02:45:04,720 --> 02:45:08,399
quite a serious concern and required a

4913
02:45:06,560 --> 02:45:10,240
lot of recovery efforts and contacting

4914
02:45:08,399 --> 02:45:11,920
multiple search engines and website

4915
02:45:10,240 --> 02:45:14,160
archives to ensure that all of this data

4916
02:45:11,920 --> 02:45:15,520
was wiped. So obviously with data

4917
02:45:14,160 --> 02:45:17,359
breaches we can think of a lot of

4918
02:45:15,520 --> 02:45:19,520
reputational damage that can occur or

4919
02:45:17,359 --> 02:45:21,200
regulatory trouble. And so nearing the

4920
02:45:19,520 --> 02:45:22,720
end here we have zero days which are

4921
02:45:21,200 --> 02:45:24,319
software vulnerabilities that are

4922
02:45:22,720 --> 02:45:26,000
unknown to the software vendor or

4923
02:45:24,319 --> 02:45:27,840
developer and have not been patched or

4924
02:45:26,000 --> 02:45:29,040
fixed to date. And these are called zero

4925
02:45:27,840 --> 02:45:31,040
days because they are typically

4926
02:45:29,040 --> 02:45:32,880
exploited by actors before the vendor

4927
02:45:31,040 --> 02:45:34,800
has a chance to release a patch leaving

4928
02:45:32,880 --> 02:45:37,040
vendors with zero days to fix the

4929
02:45:34,800 --> 02:45:39,120
vulnerability and users or organizations

4930
02:45:37,040 --> 02:45:40,960
with zero days to protect themselves.

4931
02:45:39,120 --> 02:45:42,800
And zero days themselves can often exist

4932
02:45:40,960 --> 02:45:44,800
in various types of software. So

4933
02:45:42,800 --> 02:45:47,640
operating systems or web browsers,

4934
02:45:44,800 --> 02:45:49,760
applications, databases or even firmware

4935
02:45:47,640 --> 02:45:51,840
themselves. Historically we can think of

4936
02:45:49,760 --> 02:45:54,560
things like heartbleleed or shell shock

4937
02:45:51,840 --> 02:45:56,479
or log forj. Typically due to the nature

4938
02:45:54,560 --> 02:45:58,399
of zero days, organizations are left to

4939
02:45:56,479 --> 02:46:00,000
rely on risk mitigation and avoidance

4940
02:45:58,399 --> 02:46:02,080
strategies through implementing things

4941
02:46:00,000 --> 02:46:03,439
like compensating controls until an

4942
02:46:02,080 --> 02:46:05,840
official patch from the vendor is

4943
02:46:03,439 --> 02:46:07,840
released. And lastly here we have supply

4944
02:46:05,840 --> 02:46:09,920
chain attacks. These are a type of

4945
02:46:07,840 --> 02:46:12,080
threat or attack that targets the

4946
02:46:09,920 --> 02:46:14,319
software supply chain to compromise the

4947
02:46:12,080 --> 02:46:16,880
security downstream to organizations or

4948
02:46:14,319 --> 02:46:18,800
users. So instead of directly attacking

4949
02:46:16,880 --> 02:46:20,720
a target organization systems or

4950
02:46:18,800 --> 02:46:22,399
networks, attackers are going to exploit

4951
02:46:20,720 --> 02:46:24,399
vulnerabilities or weaknesses in the

4952
02:46:22,399 --> 02:46:26,640
software or services provided by third

4953
02:46:24,399 --> 02:46:28,160
parties, vendors or partners. And

4954
02:46:26,640 --> 02:46:29,920
because of this, the threat is going to

4955
02:46:28,160 --> 02:46:31,520
propagate down, which makes it hard to

4956
02:46:29,920 --> 02:46:33,680
detect, right? Because this is a type of

4957
02:46:31,520 --> 02:46:35,520
malware that's from trusted entities. It

4958
02:46:33,680 --> 02:46:38,080
might actually be digitally signed as

4959
02:46:35,520 --> 02:46:39,520
well by trusted entities. So hopefully

4960
02:46:38,080 --> 02:46:41,600
this gives you a good understanding of

4961
02:46:39,520 --> 02:46:43,200
the common threats organizations face

4962
02:46:41,600 --> 02:46:44,640
and gives you a good primer that

4963
02:46:43,200 --> 02:46:46,680
prepares you for the next section of

4964
02:46:44,640 --> 02:46:49,279
this

4965
02:46:46,680 --> 02:46:51,520
course. Welcome to the fishing analysis

4966
02:46:49,279 --> 02:46:53,439
section of this course. And this is a

4967
02:46:51,520 --> 02:46:55,120
topic that I really wanted to do justice

4968
02:46:53,439 --> 02:46:57,200
and give it the true focus that it

4969
02:46:55,120 --> 02:46:59,200
deserves. Because although we talk about

4970
02:46:57,200 --> 02:47:01,120
how every sock is different and every

4971
02:46:59,200 --> 02:47:03,600
organization has different priorities or

4972
02:47:01,120 --> 02:47:05,279
threat models or attack surfaces, one

4973
02:47:03,600 --> 02:47:07,600
constant is that no matter any of these

4974
02:47:05,279 --> 02:47:08,880
variables, chances are that fishing is

4975
02:47:07,600 --> 02:47:10,720
going to be one of the consistent

4976
02:47:08,880 --> 02:47:12,240
threats that your company faces. And

4977
02:47:10,720 --> 02:47:13,920
this is due to its, you know, ubiquity

4978
02:47:12,240 --> 02:47:16,319
and its low barrier for entry for

4979
02:47:13,920 --> 02:47:18,319
attackers and quite honestly its success

4980
02:47:16,319 --> 02:47:20,000
rate. It is often a good return on

4981
02:47:18,319 --> 02:47:22,479
investment for attackers to employ

4982
02:47:20,000 --> 02:47:23,920
fishing techniques. And I also thought

4983
02:47:22,479 --> 02:47:25,520
it would be a good idea to cover this

4984
02:47:23,920 --> 02:47:27,200
first in the course because although

4985
02:47:25,520 --> 02:47:28,640
many of the analysis and response

4986
02:47:27,200 --> 02:47:30,399
concepts that we're going to cover here

4987
02:47:28,640 --> 02:47:32,640
are going to be built upon later on in

4988
02:47:30,399 --> 02:47:34,479
the course, analyzing fishing emails is

4989
02:47:32,640 --> 02:47:36,399
a great practical skill to have in any

4990
02:47:34,479 --> 02:47:38,479
security analyst role and one that we

4991
02:47:36,399 --> 02:47:40,080
can readily dive into here. So let's

4992
02:47:38,479 --> 02:47:42,240
quickly cover our objectives for this

4993
02:47:40,080 --> 02:47:43,760
domain. First, we want to understand the

4994
02:47:42,240 --> 02:47:45,760
fundamentals of fishing and its

4995
02:47:43,760 --> 02:47:47,600
prevalence. We will soon learn why

4996
02:47:45,760 --> 02:47:49,200
fishing is such a big deal in pretty

4997
02:47:47,600 --> 02:47:51,120
much any organization that we find

4998
02:47:49,200 --> 02:47:53,200
ourselves in. Next, we want to learn a

4999
02:47:51,120 --> 02:47:55,520
strong methodology for analyzing fishing

5000
02:47:53,200 --> 02:47:57,439
emails. You know, if we want to analyze

5001
02:47:55,520 --> 02:47:59,040
effectively and efficiently, well, we

5002
02:47:57,439 --> 02:48:01,439
need to have a strong process that we

5003
02:47:59,040 --> 02:48:02,880
can rely on. We also want to develop, of

5004
02:48:01,439 --> 02:48:04,640
course, some hands-on skills,

5005
02:48:02,880 --> 02:48:06,880
specifically in analyzing the email

5006
02:48:04,640 --> 02:48:08,319
content or the email headers. And we

5007
02:48:06,880 --> 02:48:10,000
want to be able to trace the original

5008
02:48:08,319 --> 02:48:11,600
senders of emails. You know, we're going

5009
02:48:10,000 --> 02:48:13,760
to take a look at many real life fishing

5010
02:48:11,600 --> 02:48:15,680
email examples and how to extract

5011
02:48:13,760 --> 02:48:17,840
malicious artifacts or indicators of

5012
02:48:15,680 --> 02:48:20,240
compromise and also understand the true

5013
02:48:17,840 --> 02:48:21,680
nature of these emails. And next, we

5014
02:48:20,240 --> 02:48:24,080
want to gain an understanding in

5015
02:48:21,680 --> 02:48:25,840
identifying and analyzing malicious URLs

5016
02:48:24,080 --> 02:48:27,760
and attachments. So, we're going to look

5017
02:48:25,840 --> 02:48:30,080
at some manual and automated means to

5018
02:48:27,760 --> 02:48:32,399
again extract those IoC's and make

5019
02:48:30,080 --> 02:48:34,720
determinations and judgments. And we

5020
02:48:32,399 --> 02:48:37,040
want to explore both proactive and also

5021
02:48:34,720 --> 02:48:38,640
reactive defense strategies against

5022
02:48:37,040 --> 02:48:40,399
fishing attacks. So, we're going to take

5023
02:48:38,640 --> 02:48:42,479
a look at how organizations can prevent

5024
02:48:40,399 --> 02:48:45,120
or most likely mitigate fishing at the

5025
02:48:42,479 --> 02:48:46,720
source or through technical means. And

5026
02:48:45,120 --> 02:48:48,880
lastly here, of course, we need to learn

5027
02:48:46,720 --> 02:48:50,640
to document and communicate our fishing

5028
02:48:48,880 --> 02:48:52,240
analysis findings correctly and

5029
02:48:50,640 --> 02:48:54,160
proficiently. You know, there's no point

5030
02:48:52,240 --> 02:48:56,240
in building all of this methodology and

5031
02:48:54,160 --> 02:48:57,760
gaining these hands-on skills if we

5032
02:48:56,240 --> 02:48:59,520
can't communicate it or have another

5033
02:48:57,760 --> 02:49:01,040
analyst follow our steps. So, we're

5034
02:48:59,520 --> 02:49:03,040
going to cover how to properly write

5035
02:49:01,040 --> 02:49:05,600
reports and what we need to include when

5036
02:49:03,040 --> 02:49:08,160
we close out fishing tickets. So, first

5037
02:49:05,600 --> 02:49:10,160
here, what exactly is fishing? You know,

5038
02:49:08,160 --> 02:49:11,760
we covered it briefly before, but at a

5039
02:49:10,160 --> 02:49:13,520
high level, why is it something that we

5040
02:49:11,760 --> 02:49:15,279
should be concerned about? And what role

5041
02:49:13,520 --> 02:49:17,520
do sock analysts play in the day-to-day

5042
02:49:15,279 --> 02:49:19,600
for defending against fishing attacks?

5043
02:49:17,520 --> 02:49:22,640
Well, fishing, as we've covered before,

5044
02:49:19,600 --> 02:49:24,080
can be described as an attempt to steal

5045
02:49:22,640 --> 02:49:25,920
information from victims through the use

5046
02:49:24,080 --> 02:49:27,520
of social engineering techniques and

5047
02:49:25,920 --> 02:49:30,160
various communication channels like

5048
02:49:27,520 --> 02:49:32,479
email or SMS or even over the phone or

5049
02:49:30,160 --> 02:49:34,640
on the web. And often this is done with

5050
02:49:32,479 --> 02:49:37,040
a malicious individual impersonating a

5051
02:49:34,640 --> 02:49:38,960
legitimate organization or a legitimate

5052
02:49:37,040 --> 02:49:40,880
entity to trick recipients into

5053
02:49:38,960 --> 02:49:42,160
revealing that sensitive information.

5054
02:49:40,880 --> 02:49:43,760
Things like their passwords or their

5055
02:49:42,160 --> 02:49:45,840
credit card numbers or other sensitive

5056
02:49:43,760 --> 02:49:47,439
files that the attacker finds useful.

5057
02:49:45,840 --> 02:49:49,439
And another common goal of fishing

5058
02:49:47,439 --> 02:49:51,359
attempts is to have the recipient either

5059
02:49:49,439 --> 02:49:53,040
download a file or visit an infected

5060
02:49:51,359 --> 02:49:54,880
site so that malware can then be

5061
02:49:53,040 --> 02:49:57,040
downloaded and installed onto the victim

5062
02:49:54,880 --> 02:49:59,359
device. And fishing attacks are so

5063
02:49:57,040 --> 02:50:01,120
prevalent in organizations because they

5064
02:49:59,359 --> 02:50:02,880
exploit what we would typically refer to

5065
02:50:01,120 --> 02:50:06,080
as the weakest link in the security

5066
02:50:02,880 --> 02:50:07,920
chain, the humans. These recipients or

5067
02:50:06,080 --> 02:50:09,279
end users are often the first line of

5068
02:50:07,920 --> 02:50:10,560
defense against fishing attempts because

5069
02:50:09,279 --> 02:50:12,479
they're the ones who are actively

5070
02:50:10,560 --> 02:50:14,720
receiving them. And it's very easy for

5071
02:50:12,479 --> 02:50:16,560
attackers to cast a wide net by sending

5072
02:50:14,720 --> 02:50:18,399
fishing emails to entire companies or

5073
02:50:16,560 --> 02:50:20,240
departments and hoping that just one of

5074
02:50:18,399 --> 02:50:22,000
those individuals will take the bait.

5075
02:50:20,240 --> 02:50:23,359
And once a fishing email is successful,

5076
02:50:22,000 --> 02:50:25,680
of course, it can lead to severe

5077
02:50:23,359 --> 02:50:27,920
consequences. things like unauthorized

5078
02:50:25,680 --> 02:50:29,680
access or account compromise, stealing

5079
02:50:27,920 --> 02:50:31,920
sensitive data or financial or

5080
02:50:29,680 --> 02:50:33,680
reputational loss. And of course, this

5081
02:50:31,920 --> 02:50:35,359
isn't to say that end users are the

5082
02:50:33,680 --> 02:50:37,040
problem or anything. It just means that

5083
02:50:35,359 --> 02:50:38,960
that's where we need to focus the most

5084
02:50:37,040 --> 02:50:40,560
on proactive defense measures. And we'll

5085
02:50:38,960 --> 02:50:42,319
get to that later on in this section.

5086
02:50:40,560 --> 02:50:43,600
You know, while we have many technical

5087
02:50:42,319 --> 02:50:45,200
controls that we can implement to

5088
02:50:43,600 --> 02:50:47,359
mitigate fishing attacks from getting to

5089
02:50:45,200 --> 02:50:49,520
our users at the source, well, not

5090
02:50:47,359 --> 02:50:51,439
everything is foolproof at the end of

5091
02:50:49,520 --> 02:50:53,760
the day. Remember, we think of this

5092
02:50:51,439 --> 02:50:55,439
concept of defense in depth. Us as sock

5093
02:50:53,760 --> 02:50:57,920
analysts need to be quick and efficient

5094
02:50:55,439 --> 02:50:59,920
at spotting and analyzing and of course

5095
02:50:57,920 --> 02:51:01,359
responding to fishing emails because we

5096
02:50:59,920 --> 02:51:04,000
are the frontline defenders against

5097
02:51:01,359 --> 02:51:06,160
these threats. So how does fishing

5098
02:51:04,000 --> 02:51:08,240
actually work? And you know fishing or

5099
02:51:06,160 --> 02:51:10,399
rather social engineering itself

5100
02:51:08,240 --> 02:51:12,640
exploits several human principles to

5101
02:51:10,399 --> 02:51:13,760
achieve its objectives. So, we can list

5102
02:51:12,640 --> 02:51:15,760
some of these out, right? We have

5103
02:51:13,760 --> 02:51:18,240
authority. And so, fishing emails will

5104
02:51:15,760 --> 02:51:20,880
often impersonate a figure of authority

5105
02:51:18,240 --> 02:51:23,680
such as a company executive or a manager

5106
02:51:20,880 --> 02:51:25,479
or even the IT staff and by claiming to

5107
02:51:23,680 --> 02:51:27,760
represent a trusted and authoritative

5108
02:51:25,479 --> 02:51:29,840
source. Well, attackers might be able to

5109
02:51:27,760 --> 02:51:32,319
compel victims into complying with odd

5110
02:51:29,840 --> 02:51:33,920
or malicious requests without question.

5111
02:51:32,319 --> 02:51:36,160
So, for example, a common fishing

5112
02:51:33,920 --> 02:51:38,399
scenario with organizations is an email

5113
02:51:36,160 --> 02:51:40,080
supposedly from the CEO requesting

5114
02:51:38,399 --> 02:51:42,240
employees to buy gift cards for some

5115
02:51:40,080 --> 02:51:44,720
seemingly legitimate purpose. Because

5116
02:51:42,240 --> 02:51:46,240
the email is often spoofed as the CEO,

5117
02:51:44,720 --> 02:51:47,680
this impersonation of a top

5118
02:51:46,240 --> 02:51:49,520
authoritative figure in the company

5119
02:51:47,680 --> 02:51:51,200
might actually persuade employees to

5120
02:51:49,520 --> 02:51:53,279
make these purchases and send the

5121
02:51:51,200 --> 02:51:55,200
details to the attacker. Another common

5122
02:51:53,279 --> 02:51:56,720
example is someone seemingly from the IT

5123
02:51:55,200 --> 02:51:58,800
department claiming to be conducting

5124
02:51:56,720 --> 02:52:00,319
some sort of audit or security audit and

5125
02:51:58,800 --> 02:52:01,960
requesting employees to provide their

5126
02:52:00,319 --> 02:52:04,319
login credentials to verify their

5127
02:52:01,960 --> 02:52:06,800
accounts. The next one we have here is

5128
02:52:04,319 --> 02:52:09,359
trust. And fishing emails often rely on

5129
02:52:06,800 --> 02:52:11,120
elements of building up trust such as

5130
02:52:09,359 --> 02:52:12,960
using authentic looking logos from

5131
02:52:11,120 --> 02:52:14,640
trusted organizations or official

5132
02:52:12,960 --> 02:52:16,880
sounding language or even making

5133
02:52:14,640 --> 02:52:19,600
references to reputable companies or you

5134
02:52:16,880 --> 02:52:21,359
know internal company policies. And by

5135
02:52:19,600 --> 02:52:23,359
crafting this illusion of trust,

5136
02:52:21,359 --> 02:52:25,439
attackers aim to lead individuals into

5137
02:52:23,359 --> 02:52:27,040
that false sense of security, which in

5138
02:52:25,439 --> 02:52:29,279
turn increases the likelihood of

5139
02:52:27,040 --> 02:52:31,120
compliance with their requests. So for

5140
02:52:29,279 --> 02:52:32,720
example, an attacker might send out an

5141
02:52:31,120 --> 02:52:34,560
email appearing to be from a well-known

5142
02:52:32,720 --> 02:52:36,479
bank. Maybe the attacker actually went

5143
02:52:34,560 --> 02:52:38,319
as far as to conduct research into the

5144
02:52:36,479 --> 02:52:39,920
area and identified that a particular

5145
02:52:38,319 --> 02:52:42,240
bank is very common among these

5146
02:52:39,920 --> 02:52:44,319
employees. And so a legitimate looking

5147
02:52:42,240 --> 02:52:46,319
email from this bank requesting some

5148
02:52:44,319 --> 02:52:48,160
sort of account verification might have

5149
02:52:46,319 --> 02:52:49,600
a good chance at deceiving recipients

5150
02:52:48,160 --> 02:52:51,359
into logging into some sort of

5151
02:52:49,600 --> 02:52:53,680
credential harvesting page or providing

5152
02:52:51,359 --> 02:52:55,680
their sensitive information. So next we

5153
02:52:53,680 --> 02:52:57,920
have intimidation. And fishing attacks

5154
02:52:55,680 --> 02:53:00,000
can use intimidation tactics to instill

5155
02:52:57,920 --> 02:53:01,840
a sense of fear and attempt to coersse

5156
02:53:00,000 --> 02:53:03,840
individuals into some sort of immediate

5157
02:53:01,840 --> 02:53:06,120
action. So we can think of things like

5158
02:53:03,840 --> 02:53:09,040
threats of legal consequences or account

5159
02:53:06,120 --> 02:53:10,560
suspensions or financial penalties.

5160
02:53:09,040 --> 02:53:12,080
These can all sort of intimidate

5161
02:53:10,560 --> 02:53:14,800
recipients into complying with the

5162
02:53:12,080 --> 02:53:16,399
attacker's demands. So, for instance,

5163
02:53:14,800 --> 02:53:18,399
maybe an attacker sends out an email

5164
02:53:16,399 --> 02:53:19,760
warning of an impending legal action

5165
02:53:18,399 --> 02:53:22,080
unless an employee sends over

5166
02:53:19,760 --> 02:53:23,600
information or pays a fake invoice. You

5167
02:53:22,080 --> 02:53:25,279
know, depending on the wording of this

5168
02:53:23,600 --> 02:53:27,439
email, an attacker might be able to

5169
02:53:25,279 --> 02:53:29,359
induce a sense of fear or panic and

5170
02:53:27,439 --> 02:53:31,680
prompt individuals to act impulsively

5171
02:53:29,359 --> 02:53:33,600
through intimidation. We also have

5172
02:53:31,680 --> 02:53:35,760
social proof or this concept of

5173
02:53:33,600 --> 02:53:38,000
consensus. And fishing emails might

5174
02:53:35,760 --> 02:53:39,760
leverage the concept of social proof by

5175
02:53:38,000 --> 02:53:41,600
referencing other individuals or even

5176
02:53:39,760 --> 02:53:43,520
organizations that have supposedly

5177
02:53:41,600 --> 02:53:45,040
benefited from taking similar action.

5178
02:53:43,520 --> 02:53:47,279
And by implying that there's already

5179
02:53:45,040 --> 02:53:49,200
this widespread sense of acceptance or

5180
02:53:47,279 --> 02:53:50,720
endorsement, well, an attacker might be

5181
02:53:49,200 --> 02:53:52,399
able to trick individuals into

5182
02:53:50,720 --> 02:53:54,279
validating the legitimacy of their

5183
02:53:52,399 --> 02:53:56,560
request and reduce any chance for

5184
02:53:54,279 --> 02:53:58,399
skepticism. So, for example, an attacker

5185
02:53:56,560 --> 02:54:00,319
could send out an email claiming that,

5186
02:53:58,399 --> 02:54:02,080
well, thousands of satisfied customers

5187
02:54:00,319 --> 02:54:04,479
have already verified their accounts and

5188
02:54:02,080 --> 02:54:05,920
now you can, too. or emails like

5189
02:54:04,479 --> 02:54:07,359
hundreds of investors have already

5190
02:54:05,920 --> 02:54:09,359
gotten rich by signing up to our

5191
02:54:07,359 --> 02:54:11,359
investing platform, that kind of thing.

5192
02:54:09,359 --> 02:54:13,040
Which brings us to urgency. And so

5193
02:54:11,359 --> 02:54:15,760
fishing emails often, as the name

5194
02:54:13,040 --> 02:54:18,240
suggest, can create a sense of urgency

5195
02:54:15,760 --> 02:54:19,920
by emphasizing a time-sensitive issue or

5196
02:54:18,240 --> 02:54:21,439
impending deadline. And often this can

5197
02:54:19,920 --> 02:54:23,760
take the form of some sort of urgent

5198
02:54:21,439 --> 02:54:26,240
request for account verification or a

5199
02:54:23,760 --> 02:54:28,080
mandatory password reset or a financial

5200
02:54:26,240 --> 02:54:29,760
transaction that needs to occur. And due

5201
02:54:28,080 --> 02:54:31,600
to the time-sensitive nature of these

5202
02:54:29,760 --> 02:54:33,359
requests, well, they can pressure

5203
02:54:31,600 --> 02:54:35,439
recipients into acting quickly without

5204
02:54:33,359 --> 02:54:37,200
fully evaluating the legitimacy of the

5205
02:54:35,439 --> 02:54:38,640
claim. So, for example, an attacker

5206
02:54:37,200 --> 02:54:40,399
could send out an email warning that

5207
02:54:38,640 --> 02:54:41,840
there was unauthorized access on their

5208
02:54:40,399 --> 02:54:43,279
account and they urge for an immediate

5209
02:54:41,840 --> 02:54:45,760
password change as their account is now

5210
02:54:43,279 --> 02:54:47,439
at risk. As another example, a common

5211
02:54:45,760 --> 02:54:49,040
tactic is emails that mention a user

5212
02:54:47,439 --> 02:54:50,520
must update their password immediately

5213
02:54:49,040 --> 02:54:52,560
or their account will be locked out

5214
02:54:50,520 --> 02:54:54,880
indefinitely. We also have the concept

5215
02:54:52,560 --> 02:54:57,520
of scarcity, which is related but not

5216
02:54:54,880 --> 02:54:59,279
the exact same as urgency. So unlike

5217
02:54:57,520 --> 02:55:00,880
urgency which again urges negative

5218
02:54:59,279 --> 02:55:03,439
consequences for account lockouts or

5219
02:55:00,880 --> 02:55:05,359
security issues, scarcity is often done

5220
02:55:03,439 --> 02:55:07,760
by suggesting that an opportunity or

5221
02:55:05,359 --> 02:55:09,600
resource is limited or time-sensitive.

5222
02:55:07,760 --> 02:55:11,840
And so attackers aim to provoke a fear

5223
02:55:09,600 --> 02:55:14,240
of missing out or FOMO and prompt

5224
02:55:11,840 --> 02:55:16,080
recipients to act quickly. So for

5225
02:55:14,240 --> 02:55:18,240
instance, an attacker might send out an

5226
02:55:16,080 --> 02:55:20,479
email offering an exclusive access or

5227
02:55:18,240 --> 02:55:22,000
limited time discounts or promotions.

5228
02:55:20,479 --> 02:55:23,120
And due to the human nature of not

5229
02:55:22,000 --> 02:55:25,040
wanting to miss out on these

5230
02:55:23,120 --> 02:55:26,720
opportunities, these types of emails

5231
02:55:25,040 --> 02:55:28,640
might tempt individuals to click on a

5232
02:55:26,720 --> 02:55:30,880
malicious link or provide information

5233
02:55:28,640 --> 02:55:32,880
without thinking it through. And lastly,

5234
02:55:30,880 --> 02:55:34,720
here we have familiarity. And this

5235
02:55:32,880 --> 02:55:36,800
refers to a sense of recognition or

5236
02:55:34,720 --> 02:55:38,640
acquaintance with someone or something.

5237
02:55:36,800 --> 02:55:40,960
And in the context of fishing, attackers

5238
02:55:38,640 --> 02:55:43,200
can exploit familiarity by creating an

5239
02:55:40,960 --> 02:55:44,960
illusion of pre-existing connections or

5240
02:55:43,200 --> 02:55:47,120
interactions to lower a recipient's

5241
02:55:44,960 --> 02:55:48,880
guard. And so this tactic aims to make

5242
02:55:47,120 --> 02:55:50,880
the fishing attempt appear more credible

5243
02:55:48,880 --> 02:55:52,319
and less suspicious by leveraging

5244
02:55:50,880 --> 02:55:54,319
elements that the recipient finds

5245
02:55:52,319 --> 02:55:55,760
familiar or recognizable. So for

5246
02:55:54,319 --> 02:55:57,600
instance, imagine an email that's

5247
02:55:55,760 --> 02:56:00,080
masquerading as communication from a

5248
02:55:57,600 --> 02:56:02,399
familiar friend or a colleague or some

5249
02:56:00,080 --> 02:56:04,000
sort of reputable organization. By

5250
02:56:02,399 --> 02:56:05,680
playing on the feelings of familiarity,

5251
02:56:04,000 --> 02:56:07,680
an attacker might be able to evoke a

5252
02:56:05,680 --> 02:56:09,200
sense of trust and acquaintance, making

5253
02:56:07,680 --> 02:56:11,600
individuals more susceptible to

5254
02:56:09,200 --> 02:56:13,279
manipulation. And lastly, here as

5255
02:56:11,600 --> 02:56:15,200
another example, maybe an attacker is

5256
02:56:13,279 --> 02:56:16,960
able to compromise an actual victim's

5257
02:56:15,200 --> 02:56:19,040
email account. And so they might use

5258
02:56:16,960 --> 02:56:20,960
that newfound access to stage more

5259
02:56:19,040 --> 02:56:23,040
sophisticated attacks using the concepts

5260
02:56:20,960 --> 02:56:25,040
of familiarity. And so maybe once they

5261
02:56:23,040 --> 02:56:27,120
gain access to someone's inbox, they

5262
02:56:25,040 --> 02:56:29,200
start replying to ongoing threads or

5263
02:56:27,120 --> 02:56:31,200
emailing known users based on the user's

5264
02:56:29,200 --> 02:56:33,120
contacts. And so when these future

5265
02:56:31,200 --> 02:56:35,279
victims receive an email coming from a

5266
02:56:33,120 --> 02:56:36,960
legitimate contact, well, they'll very

5267
02:56:35,279 --> 02:56:38,800
likely trust the content of the fishing

5268
02:56:36,960 --> 02:56:41,000
email and be less inclined to question

5269
02:56:38,800 --> 02:56:43,120
its authenticity or

5270
02:56:41,000 --> 02:56:44,640
legitimacy. And so lastly here, I've

5271
02:56:43,120 --> 02:56:47,120
stressed a couple times now how

5272
02:56:44,640 --> 02:56:48,800
prevalent fishing attacks are. So let's

5273
02:56:47,120 --> 02:56:50,880
take a look at some real world examples

5274
02:56:48,800 --> 02:56:52,720
of actual fishing attacks in the wild

5275
02:56:50,880 --> 02:56:54,399
and how they compromise organizations

5276
02:56:52,720 --> 02:56:56,640
through that weak link and the

5277
02:56:54,399 --> 02:56:58,160
devastating impact that they've had. And

5278
02:56:56,640 --> 02:56:59,840
quite honestly, when I was compiling a

5279
02:56:58,160 --> 02:57:01,040
good list of stories to cover here,

5280
02:56:59,840 --> 02:57:02,479
well, there were actually so many

5281
02:57:01,040 --> 02:57:04,160
options to choose from, which really

5282
02:57:02,479 --> 02:57:06,240
speaks to how some of these attacks

5283
02:57:04,160 --> 02:57:08,479
occur. But I think this is a decent list

5284
02:57:06,240 --> 02:57:10,160
of notable attacks to start with. So,

5285
02:57:08,479 --> 02:57:13,200
first we have the Colonial Pipeline

5286
02:57:10,160 --> 02:57:14,800
attack back in May of 2021. And Colonial

5287
02:57:13,200 --> 02:57:17,200
Pipeline is a major fuel pipeline

5288
02:57:14,800 --> 02:57:19,600
operator in the United States. And in

5289
02:57:17,200 --> 02:57:21,279
back in May of 2021, they fell victim to

5290
02:57:19,600 --> 02:57:23,040
a sophisticated fishing attack

5291
02:57:21,279 --> 02:57:24,720
attributed to the Russian-based Dark

5292
02:57:23,040 --> 02:57:26,560
Side hacking group, which is known to

5293
02:57:24,720 --> 02:57:28,399
target its victims using ransomware and

5294
02:57:26,560 --> 02:57:30,319
extortion. And in this case, the

5295
02:57:28,399 --> 02:57:32,160
attackers used fishing emails to deliver

5296
02:57:30,319 --> 02:57:34,319
ransomware onto the Colonial Pipelines

5297
02:57:32,160 --> 02:57:36,399
network. And as it typically does, the

5298
02:57:34,319 --> 02:57:38,399
ransomware quickly spread and ended up

5299
02:57:36,399 --> 02:57:40,479
infecting critical systems that actually

5300
02:57:38,399 --> 02:57:42,319
disrupted the pipelines's operations.

5301
02:57:40,479 --> 02:57:43,920
And so as a result, Colonial Pipeline

5302
02:57:42,319 --> 02:57:45,680
was forced to shut down its pipeline,

5303
02:57:43,920 --> 02:57:47,279
which caused a number of fuel shortages

5304
02:57:45,680 --> 02:57:49,680
and panic buying across the United

5305
02:57:47,279 --> 02:57:51,520
States. So much so that nearly half of

5306
02:57:49,680 --> 02:57:53,520
the US East Coast oil supply was shut

5307
02:57:51,520 --> 02:57:55,520
down for a week. As for the ransom, the

5308
02:57:53,520 --> 02:57:57,439
attackers demanded a payment of 4.4

5309
02:57:55,520 --> 02:57:59,520
million in Bitcoin to restore the access

5310
02:57:57,439 --> 02:58:00,960
to the Colonial Pipeline systems. And

5311
02:57:59,520 --> 02:58:02,560
quite honestly, this incident really

5312
02:58:00,960 --> 02:58:04,960
highlighted how something as simple as

5313
02:58:02,560 --> 02:58:06,880
fishing can lead to such devastating

5314
02:58:04,960 --> 02:58:09,040
economic and societal real world

5315
02:58:06,880 --> 02:58:10,960
consequences. And the second one here

5316
02:58:09,040 --> 02:58:13,120
has to do with Levitas Capital back in

5317
02:58:10,960 --> 02:58:14,960
2020. And Levitas Capital was a New

5318
02:58:13,120 --> 02:58:16,800
York-based hedge fund that became the

5319
02:58:14,960 --> 02:58:18,399
target of a fishing attack. And

5320
02:58:16,800 --> 02:58:19,680
specifically, it was a whailing attack

5321
02:58:18,399 --> 02:58:22,240
that was targeted against its

5322
02:58:19,680 --> 02:58:24,000
co-founder. And as it was reported, an

5323
02:58:22,240 --> 02:58:26,479
attacker sent out an email containing a

5324
02:58:24,000 --> 02:58:28,240
malicious URL for a fake Zoom meeting.

5325
02:58:26,479 --> 02:58:29,680
And back in 2020, well, this was

5326
02:58:28,240 --> 02:58:31,279
particularly around the time where

5327
02:58:29,680 --> 02:58:33,040
remote work and Zoom really started

5328
02:58:31,279 --> 02:58:35,200
taking off, which of course attackers

5329
02:58:33,040 --> 02:58:37,279
took full advantage of. So this one

5330
02:58:35,200 --> 02:58:39,120
malicious link led to the download and

5331
02:58:37,279 --> 02:58:41,359
installation of malware and eventually

5332
02:58:39,120 --> 02:58:44,080
led to attackers generating over 8.5

5333
02:58:41,359 --> 02:58:45,680
million in fraudulent invoices. And as

5334
02:58:44,080 --> 02:58:48,520
you can expect, this kind of attack led

5335
02:58:45,680 --> 02:58:50,960
to both financial but also reputational

5336
02:58:48,520 --> 02:58:52,560
consequences. So much so that the fund

5337
02:58:50,960 --> 02:58:54,399
ended up losing clients due to its

5338
02:58:52,560 --> 02:58:56,040
impact which ultimately led to the

5339
02:58:54,399 --> 02:58:58,479
closure of the

5340
02:58:56,040 --> 02:59:01,359
business. And so third here we have the

5341
02:58:58,479 --> 02:59:03,359
ubiquity networks attack back in 2015.

5342
02:59:01,359 --> 02:59:06,000
And ubiquity is quite a large networking

5343
02:59:03,359 --> 02:59:07,840
technology company. But back in 2015,

5344
02:59:06,000 --> 02:59:10,560
well, they fell victim to once again a

5345
02:59:07,840 --> 02:59:12,080
sophisticated fishing attack. In this

5346
02:59:10,560 --> 02:59:14,000
case, it was reported that this type of

5347
02:59:12,080 --> 02:59:15,760
attack was a CEO fraud or a business

5348
02:59:14,000 --> 02:59:17,359
email compromise attack. So, this type

5349
02:59:15,760 --> 02:59:19,200
of attack usually begins with an

5350
02:59:17,359 --> 02:59:21,120
attacker either fishing an executive and

5351
02:59:19,200 --> 02:59:22,800
actually gaining access to their inbox

5352
02:59:21,120 --> 02:59:24,319
or emailing employees from a spoofed

5353
02:59:22,800 --> 02:59:26,479
lookalike domain that looks like the

5354
02:59:24,319 --> 02:59:28,319
target company's real domain. And in the

5355
02:59:26,479 --> 02:59:29,920
case of this story, attackers managed to

5356
02:59:28,319 --> 02:59:32,080
impersonate executives and trick

5357
02:59:29,920 --> 02:59:35,040
employees into wiring funds. And as a

5358
02:59:32,080 --> 02:59:37,399
result, well, around 46.7 million in

5359
02:59:35,040 --> 02:59:39,600
funds were transferred to other overseas

5360
02:59:37,399 --> 02:59:41,439
accounts. And actually, Brian Krebs of

5361
02:59:39,600 --> 02:59:42,960
Krebs on Security really covered this

5362
02:59:41,439 --> 02:59:44,160
story well back when it was going on.

5363
02:59:42,960 --> 02:59:46,160
So, I encourage you to read more at this

5364
02:59:44,160 --> 02:59:47,920
link if you're interested. And lastly,

5365
02:59:46,160 --> 02:59:50,600
here we have Ukraine's power grid attack

5366
02:59:47,920 --> 02:59:53,200
back in 2015. And so in December of

5367
02:59:50,600 --> 02:59:55,040
2015, well, Ukraine's power grid was

5368
02:59:53,200 --> 02:59:57,040
targeted in a highly coordinated cyber

5369
02:59:55,040 --> 02:59:59,040
attack attributed to the AP group

5370
02:59:57,040 --> 03:00:01,760
Sandworm, which is associated with

5371
02:59:59,040 --> 03:00:03,520
Russian intelligence agencies. And so

5372
03:00:01,760 --> 03:00:05,520
this attack actually used spear fishing

5373
03:00:03,520 --> 03:00:07,439
emails to deliver malware, which got the

5374
03:00:05,520 --> 03:00:09,840
attackers initial access into the power

5375
03:00:07,439 --> 03:00:11,439
grid systems. And once inside the

5376
03:00:09,840 --> 03:00:13,439
network, the attackers were able to

5377
03:00:11,439 --> 03:00:15,439
seize SCADA equipment and remotely

5378
03:00:13,439 --> 03:00:16,960
switched off substations and disabled

5379
03:00:15,439 --> 03:00:19,000
infrastructure components like power

5380
03:00:16,960 --> 03:00:21,040
supplies and modems and other

5381
03:00:19,000 --> 03:00:22,920
communicators. And in total, 30

5382
03:00:21,040 --> 03:00:25,279
substations were switched off and about

5383
03:00:22,920 --> 03:00:27,600
230,000 people were without electricity

5384
03:00:25,279 --> 03:00:29,040
for some time. And this incident was

5385
03:00:27,600 --> 03:00:31,040
really marked as one of the first known

5386
03:00:29,040 --> 03:00:32,880
instances of a cyber attack causing

5387
03:00:31,040 --> 03:00:34,880
physical disruptions to critical

5388
03:00:32,880 --> 03:00:36,399
infrastructure at this scale. And of

5389
03:00:34,880 --> 03:00:38,479
course, it all started from that spear

5390
03:00:36,399 --> 03:00:39,760
fishing campaign. So hopefully you found

5391
03:00:38,479 --> 03:00:41,200
these stories interesting. I encourage

5392
03:00:39,760 --> 03:00:43,040
you to read more about them if you're so

5393
03:00:41,200 --> 03:00:44,720
inclined. And hopefully it gave you a

5394
03:00:43,040 --> 03:00:46,479
good idea into how important fishing

5395
03:00:44,720 --> 03:00:50,560
analysis is and how important it is that

5396
03:00:46,479 --> 03:00:50,560
we defend our organizations from fishing

5397
03:00:51,560 --> 03:00:55,680
attacks. Let's quickly cover how email

5398
03:00:54,160 --> 03:00:57,680
works. And it might seem a bit high

5399
03:00:55,680 --> 03:00:59,359
level at this stage, but understanding

5400
03:00:57,680 --> 03:01:01,040
how emails are transferred across the

5401
03:00:59,359 --> 03:01:02,760
internet will help us with one of the

5402
03:01:01,040 --> 03:01:05,279
most important strategies in email

5403
03:01:02,760 --> 03:01:07,680
analysis. Determining sender origin and

5404
03:01:05,279 --> 03:01:09,600
attribution. And chances are you've sent

5405
03:01:07,680 --> 03:01:11,680
and received emails before, either in

5406
03:01:09,600 --> 03:01:13,359
your professional or personal life. But

5407
03:01:11,680 --> 03:01:15,120
have you ever actually dove in to

5408
03:01:13,359 --> 03:01:17,600
understand the components that make up

5409
03:01:15,120 --> 03:01:19,040
and deliver email messages? Well, if you

5410
03:01:17,600 --> 03:01:20,880
have, then you'll probably breeze

5411
03:01:19,040 --> 03:01:23,359
through this intro. But if not, I think

5412
03:01:20,880 --> 03:01:25,760
this is worth discussing. And at its

5413
03:01:23,359 --> 03:01:27,760
core, sending email operates on a simple

5414
03:01:25,760 --> 03:01:30,720
yet robust system called the Simple Mail

5415
03:01:27,760 --> 03:01:32,720
Transfer Protocol or SMTP. So, let's

5416
03:01:30,720 --> 03:01:35,120
break down the process a little bit.

5417
03:01:32,720 --> 03:01:37,359
When you compose an email and hit send,

5418
03:01:35,120 --> 03:01:40,000
your email client like Gmail or Outlook

5419
03:01:37,359 --> 03:01:41,920
or Thunderbird communicates with an SMTP

5420
03:01:40,000 --> 03:01:43,760
server. And typically, you'll find these

5421
03:01:41,920 --> 03:01:46,160
mail clients in either a desktop or a

5422
03:01:43,760 --> 03:01:48,479
web application format. And this server

5423
03:01:46,160 --> 03:01:50,240
acts as the post office for your email

5424
03:01:48,479 --> 03:01:53,120
and manages it transfer to the

5425
03:01:50,240 --> 03:01:55,359
recipient's inbox. So, in this example,

5426
03:01:53,120 --> 03:01:57,279
let's say Bob, who has a Gmail account,

5427
03:01:55,359 --> 03:02:00,000
decides to send an email to his friend

5428
03:01:57,279 --> 03:02:02,000
Alice, who uses a Yahoo mail account.

5429
03:02:00,000 --> 03:02:03,920
Well, he opens his Gmail account and

5430
03:02:02,000 --> 03:02:06,800
then composes his message and addresses

5431
03:02:03,920 --> 03:02:08,479
it to Alice's Yahoo email address. And

5432
03:02:06,800 --> 03:02:11,120
so your email client connects to your

5433
03:02:08,479 --> 03:02:12,800
email provider's SMTP server. And this

5434
03:02:11,120 --> 03:02:14,399
server authenticates your identity and

5435
03:02:12,800 --> 03:02:15,920
usually uses some sort of username and

5436
03:02:14,399 --> 03:02:17,520
password to ensure that you have

5437
03:02:15,920 --> 03:02:19,200
permission to send emails from this

5438
03:02:17,520 --> 03:02:20,960
account. And we'll quickly cover the

5439
03:02:19,200 --> 03:02:23,279
protocols in a second, but typically

5440
03:02:20,960 --> 03:02:24,960
this is done over port 25, which is the

5441
03:02:23,279 --> 03:02:27,359
standard simple mail transfer protocol

5442
03:02:24,960 --> 03:02:29,120
port. And so when Bob hits send, his

5443
03:02:27,359 --> 03:02:31,359
email client communicates with Gmail's

5444
03:02:29,120 --> 03:02:32,720
SMTP server, which verifies his

5445
03:02:31,359 --> 03:02:34,560
identity, usually through his Gmail

5446
03:02:32,720 --> 03:02:37,279
username and password, and accepts the

5447
03:02:34,560 --> 03:02:39,600
email for delivery. And so Gmail's SMTP

5448
03:02:37,279 --> 03:02:40,920
server checks the domain part of Alice's

5449
03:02:39,600 --> 03:02:43,840
email address, in this case, the

5450
03:02:40,920 --> 03:02:46,720
yahoo.com, and queries DNS to find the

5451
03:02:43,840 --> 03:02:48,000
IP address of the Yahoo's SMTP server.

5452
03:02:46,720 --> 03:02:49,920
And then at this point, it's then

5453
03:02:48,000 --> 03:02:51,439
forwarded to the recipient's SMTP

5454
03:02:49,920 --> 03:02:52,960
server. And again, this is done by

5455
03:02:51,439 --> 03:02:54,880
quering the domain name system or the

5456
03:02:52,960 --> 03:02:57,200
DNS to find the recipient's email

5457
03:02:54,880 --> 03:02:59,439
server's IP address. And so at this

5458
03:02:57,200 --> 03:03:01,040
stage, the Yahoo's SMTP server receives

5459
03:02:59,439 --> 03:03:03,920
the email and stores it in Alice's

5460
03:03:01,040 --> 03:03:05,520
inbox, ready for her to access it. And

5461
03:03:03,920 --> 03:03:07,279
finally here, when the recipient checks

5462
03:03:05,520 --> 03:03:08,880
on the email, well, their email client,

5463
03:03:07,279 --> 03:03:10,960
again, like Outlook or Gmail, in this

5464
03:03:08,880 --> 03:03:12,880
case, Yahoo, connects to the server to

5465
03:03:10,960 --> 03:03:15,040
download the email. And so there are

5466
03:03:12,880 --> 03:03:16,640
separate protocols like POP 3 and IMAP

5467
03:03:15,040 --> 03:03:18,720
that allow for the retrieval of email,

5468
03:03:16,640 --> 03:03:20,640
but we'll touch on those in a second.

5469
03:03:18,720 --> 03:03:22,319
And so when Alice logs into her email

5470
03:03:20,640 --> 03:03:24,399
account, well, her email client connects

5471
03:03:22,319 --> 03:03:25,880
to Yahoo server and downloads the email

5472
03:03:24,399 --> 03:03:28,240
from Bob into her

5473
03:03:25,880 --> 03:03:30,479
inbox. And so next, let's touch on the

5474
03:03:28,240 --> 03:03:33,040
components that actually make up email.

5475
03:03:30,479 --> 03:03:34,720
Specifically, we have email headers. And

5476
03:03:33,040 --> 03:03:36,479
email headers are what essentially make

5477
03:03:34,720 --> 03:03:38,240
up an email. And they're lines of text

5478
03:03:36,479 --> 03:03:40,200
that provide information on an email's

5479
03:03:38,240 --> 03:03:42,160
origin, routing, and how it should be

5480
03:03:40,200 --> 03:03:43,760
handled. And you're likely used to

5481
03:03:42,160 --> 03:03:45,600
seeing some of these headers in various

5482
03:03:43,760 --> 03:03:47,279
email clients that you interact with.

5483
03:03:45,600 --> 03:03:49,520
But the majority of email headers are

5484
03:03:47,279 --> 03:03:51,279
abstracted from the user. And so when it

5485
03:03:49,520 --> 03:03:53,120
comes to investigating potential fishing

5486
03:03:51,279 --> 03:03:55,520
emails, well, email headers are one of

5487
03:03:53,120 --> 03:03:57,760
the first things that we turn to. For

5488
03:03:55,520 --> 03:03:59,680
example, here is an email that I opened

5489
03:03:57,760 --> 03:04:01,359
in Mozilla Thunderbird, which is a mail

5490
03:03:59,680 --> 03:04:02,600
client similar to Outlook or built-in

5491
03:04:01,359 --> 03:04:04,960
mail apps that you might have used

5492
03:04:02,600 --> 03:04:06,720
before. And upon doing so, we can

5493
03:04:04,960 --> 03:04:08,240
immediately see some of the common email

5494
03:04:06,720 --> 03:04:10,640
headers that have been graphically

5495
03:04:08,240 --> 03:04:12,479
displayed within the email client. For

5496
03:04:10,640 --> 03:04:14,600
example, on the right here, well, we can

5497
03:04:12,479 --> 03:04:16,880
see the timestamp of when the email was

5498
03:04:14,600 --> 03:04:19,439
delivered. And over here, we can see the

5499
03:04:16,880 --> 03:04:21,319
subject line of the email. We can also

5500
03:04:19,439 --> 03:04:23,600
see the recipient and the reply to

5501
03:04:21,319 --> 03:04:25,760
header. And we're going to get more into

5502
03:04:23,600 --> 03:04:27,120
email header analysis in a future lesson

5503
03:04:25,760 --> 03:04:28,800
because it's really important to note

5504
03:04:27,120 --> 03:04:31,200
that almost all of these headers that we

5505
03:04:28,800 --> 03:04:33,040
see here can be spoofed by an attacker.

5506
03:04:31,200 --> 03:04:35,680
So, we can't immediately trust what our

5507
03:04:33,040 --> 03:04:37,279
email client displays. And now I

5508
03:04:35,680 --> 03:04:39,279
mentioned that these were only a small

5509
03:04:37,279 --> 03:04:42,399
subset of the actual headers attached to

5510
03:04:39,279 --> 03:04:44,160
a typical email. And this is true. Just

5511
03:04:42,399 --> 03:04:46,160
as a quick example, we can export the

5512
03:04:44,160 --> 03:04:48,359
entire list of email headers to get a

5513
03:04:46,160 --> 03:04:50,720
holistic view of what makes up an email

5514
03:04:48,359 --> 03:04:52,560
message. And you can see we have a large

5515
03:04:50,720 --> 03:04:53,920
number of headers here. And these are

5516
03:04:52,560 --> 03:04:55,920
some of the ones we saw in our email

5517
03:04:53,920 --> 03:04:58,160
client, right? We have the subject, the

5518
03:04:55,920 --> 03:04:59,760
date or that timestamp, as well as some

5519
03:04:58,160 --> 03:05:01,520
of the others here like the recipient.

5520
03:04:59,760 --> 03:05:03,279
But we have so much more and even custom

5521
03:05:01,520 --> 03:05:04,960
headers that we can see here. And there

5522
03:05:03,279 --> 03:05:06,240
are many different ways to extract the

5523
03:05:04,960 --> 03:05:07,600
email headers like this depending on

5524
03:05:06,240 --> 03:05:09,200
your email client. And we're going to

5525
03:05:07,600 --> 03:05:11,160
cover some common methods in the email

5526
03:05:09,200 --> 03:05:14,000
analysis

5527
03:05:11,160 --> 03:05:16,080
section. So next we have the email body.

5528
03:05:14,000 --> 03:05:18,479
And the email body serves as the main

5529
03:05:16,080 --> 03:05:20,240
content space within an email message.

5530
03:05:18,479 --> 03:05:22,800
And it can include various elements like

5531
03:05:20,240 --> 03:05:24,640
plain text or HTML or even multimedia

5532
03:05:22,800 --> 03:05:26,560
rich content. And this section often

5533
03:05:24,640 --> 03:05:28,960
includes not only textual elements but

5534
03:05:26,560 --> 03:05:31,760
also hyperlinks and embedded images or

5535
03:05:28,960 --> 03:05:33,319
HTML formatting. And so let's return to

5536
03:05:31,760 --> 03:05:35,279
our example here in

5537
03:05:33,319 --> 03:05:37,600
Thunderbird. And you can see the actual

5538
03:05:35,279 --> 03:05:39,120
email body being rendered here. And it

5539
03:05:37,600 --> 03:05:40,800
looks to be appearing as intended. We

5540
03:05:39,120 --> 03:05:42,800
have some custom styling here for this

5541
03:05:40,800 --> 03:05:44,640
blue bigger text here. We have a button

5542
03:05:42,800 --> 03:05:47,040
that we can click on as well as a

5543
03:05:44,640 --> 03:05:48,720
company logo. But like with a web page,

5544
03:05:47,040 --> 03:05:50,640
this is rendered to the client and we

5545
03:05:48,720 --> 03:05:52,240
can't actually see the components or the

5546
03:05:50,640 --> 03:05:54,560
code that is making up the contents of

5547
03:05:52,240 --> 03:05:56,000
this email. And so if we export this

5548
03:05:54,560 --> 03:05:58,080
email or even just go to view the

5549
03:05:56,000 --> 03:05:59,840
message source, well, we can scroll down

5550
03:05:58,080 --> 03:06:01,920
past the email headers here and we're

5551
03:05:59,840 --> 03:06:04,560
going to see the actual content or the

5552
03:06:01,920 --> 03:06:07,200
HTML markup of this email message. We

5553
03:06:04,560 --> 03:06:09,279
can see the content type here is in HTML

5554
03:06:07,200 --> 03:06:11,439
and we actually have some valid HTML

5555
03:06:09,279 --> 03:06:14,359
markup as well as CSS styling that is

5556
03:06:11,439 --> 03:06:17,840
making up the contents of this

5557
03:06:14,359 --> 03:06:19,760
email. And so what is an email address?

5558
03:06:17,840 --> 03:06:21,520
Well, at its core, email addresses are

5559
03:06:19,760 --> 03:06:23,279
unique identifiers assigned to

5560
03:06:21,520 --> 03:06:25,520
individuals or organizations and

5561
03:06:23,279 --> 03:06:28,319
entities, enabling them to send and

5562
03:06:25,520 --> 03:06:30,399
receive email through email services.

5563
03:06:28,319 --> 03:06:32,520
And so, an email address such as the one

5564
03:06:30,399 --> 03:06:34,240
you see on the screen here,

5565
03:06:32,520 --> 03:06:36,880
bob.smith@acample.com, is made up from

5566
03:06:34,240 --> 03:06:39,520
multiple parts. So, first we have the

5567
03:06:36,880 --> 03:06:41,439
local part or the mailbox. And the local

5568
03:06:39,520 --> 03:06:44,000
part often represents the username or

5569
03:06:41,439 --> 03:06:45,520
the alias of the email account holder.

5570
03:06:44,000 --> 03:06:47,760
And it can contain various characters

5571
03:06:45,520 --> 03:06:50,080
like letters or numbers or periods, even

5572
03:06:47,760 --> 03:06:51,760
underscores and hyphens. In some cases,

5573
03:06:50,080 --> 03:06:53,200
the local part might include additional

5574
03:06:51,760 --> 03:06:54,800
information like the department or the

5575
03:06:53,200 --> 03:06:56,760
role within an organization. And it

5576
03:06:54,800 --> 03:06:58,960
might separate those with periods or

5577
03:06:56,760 --> 03:07:00,560
hyphens. And most often, you'll see this

5578
03:06:58,960 --> 03:07:03,359
done with different syntax. Right here

5579
03:07:00,560 --> 03:07:05,359
we have Bob. So we have first name.ast

5580
03:07:03,359 --> 03:07:07,200
name. Some organizations might do first

5581
03:07:05,359 --> 03:07:09,160
initial last name. Or you might have

5582
03:07:07,200 --> 03:07:11,359
specific mailboxes for finance or

5583
03:07:09,160 --> 03:07:13,680
accounting. And so the second part here

5584
03:07:11,359 --> 03:07:15,600
is the domain part. And the domain part

5585
03:07:13,680 --> 03:07:18,000
of an email address identifies the mail

5586
03:07:15,600 --> 03:07:19,760
server that hosts the email account. And

5587
03:07:18,000 --> 03:07:22,080
it of course typically consists of two

5588
03:07:19,760 --> 03:07:25,240
or more segments separated by periods

5589
03:07:22,080 --> 03:07:27,279
such as example.com or

5590
03:07:25,240 --> 03:07:29,520
company.co.uk. And specifically, this

5591
03:07:27,279 --> 03:07:31,600
last segment here is known as the top

5592
03:07:29,520 --> 03:07:33,279
level domain or the TLD. And this

5593
03:07:31,600 --> 03:07:36,640
indicates the type or the category of

5594
03:07:33,279 --> 03:07:38,920
the domain such as.com or.org or.net or

5595
03:07:36,640 --> 03:07:42,080
even country specific tople domains

5596
03:07:38,920 --> 03:07:44,240
like.uk. And so we mentioned DNS before.

5597
03:07:42,080 --> 03:07:45,920
And so when an email is sent, the

5598
03:07:44,240 --> 03:07:48,000
sender's email server will query the

5599
03:07:45,920 --> 03:07:49,600
domain name system or the DNS to find

5600
03:07:48,000 --> 03:07:52,080
the mail server associated with the

5601
03:07:49,600 --> 03:07:53,960
recipient's domain. And so the DNS will

5602
03:07:52,080 --> 03:07:56,399
then translate that domain name like

5603
03:07:53,960 --> 03:07:58,439
exampample.com into the corresponding IP

5604
03:07:56,399 --> 03:08:00,560
address of the mail server using the MX

5605
03:07:58,439 --> 03:08:02,960
records. And so we mentioned that there

5606
03:08:00,560 --> 03:08:04,479
are a couple of email protocols. And the

5607
03:08:02,960 --> 03:08:06,319
email protocols are these sort of

5608
03:08:04,479 --> 03:08:08,240
behind-the-scenes rules and standards

5609
03:08:06,319 --> 03:08:10,160
that govern how emails are sent,

5610
03:08:08,240 --> 03:08:12,479
received, and also managed across the

5611
03:08:10,160 --> 03:08:13,920
internet. So these protocols are what

5612
03:08:12,479 --> 03:08:15,520
enables that seamless communication

5613
03:08:13,920 --> 03:08:18,080
between email clients like Outlook or

5614
03:08:15,520 --> 03:08:19,840
Gmail or Yahoo and ensure that messages

5615
03:08:18,080 --> 03:08:21,439
reach their intended recipients and

5616
03:08:19,840 --> 03:08:23,920
allow recipients to query the mail

5617
03:08:21,439 --> 03:08:26,240
server to retrieve those messages. So

5618
03:08:23,920 --> 03:08:28,640
the first one we have here is SMTP or

5619
03:08:26,240 --> 03:08:30,080
simple mail transfer protocol and this

5620
03:08:28,640 --> 03:08:32,399
is the foundation of email

5621
03:08:30,080 --> 03:08:34,319
communication. So, it's responsible for

5622
03:08:32,399 --> 03:08:36,160
sending outgoing emails from your mail

5623
03:08:34,319 --> 03:08:38,240
client to the recipient's mail server.

5624
03:08:36,160 --> 03:08:40,240
So, when you hit send on an email, well,

5625
03:08:38,240 --> 03:08:42,040
SMTP is the protocol that handles the

5626
03:08:40,240 --> 03:08:44,720
transmission of your message across the

5627
03:08:42,040 --> 03:08:46,479
internet. And so, it operates on port 25

5628
03:08:44,720 --> 03:08:50,240
by default, although encrypted versions

5629
03:08:46,479 --> 03:08:53,600
like SMTPS or SMTP secure and SMTP over

5630
03:08:50,240 --> 03:08:55,439
TLS operate on ports 465 and 587

5631
03:08:53,600 --> 03:08:56,479
respectively. But this is mostly for

5632
03:08:55,439 --> 03:08:58,000
context. You don't really need to

5633
03:08:56,479 --> 03:08:59,680
memorize these ports, although you

5634
03:08:58,000 --> 03:09:02,240
should probably know that SMTP itself is

5635
03:08:59,680 --> 03:09:04,560
port 25, which is pretty common. And so,

5636
03:09:02,240 --> 03:09:07,279
next here we have POP 3 or Post Office

5637
03:09:04,560 --> 03:09:09,520
Protocol version 3. And POP 3 is an

5638
03:09:07,279 --> 03:09:11,200
email retrieval protocol used by email

5639
03:09:09,520 --> 03:09:14,160
clients to download messages from the

5640
03:09:11,200 --> 03:09:15,760
mail server to your device. And it works

5641
03:09:14,160 --> 03:09:17,439
by connecting to the server and then

5642
03:09:15,760 --> 03:09:20,000
downloading emails to your device and

5643
03:09:17,439 --> 03:09:22,240
then deleting them off of the server.

5644
03:09:20,000 --> 03:09:24,000
And so POP 3 is ideal for users who

5645
03:09:22,240 --> 03:09:26,080
primarily access their emails from a

5646
03:09:24,000 --> 03:09:28,240
single device, which to be honest is not

5647
03:09:26,080 --> 03:09:31,040
that common anymore. And it operates on

5648
03:09:28,240 --> 03:09:32,720
port 110. But again, like SMTP, there

5649
03:09:31,040 --> 03:09:35,840
are encrypted versions of this protocol

5650
03:09:32,720 --> 03:09:39,040
like POP 3S or POP over SSL that uses

5651
03:09:35,840 --> 03:09:42,080
port 995. And lastly, here we have IMAP

5652
03:09:39,040 --> 03:09:43,840
or Internet Message Access Protocol. And

5653
03:09:42,080 --> 03:09:45,760
IMAP is another email retrieval

5654
03:09:43,840 --> 03:09:48,560
protocol, but it offers more advanced

5655
03:09:45,760 --> 03:09:50,800
features compared to POP 3. So with

5656
03:09:48,560 --> 03:09:52,800
IMAP, emails actually remain stored on

5657
03:09:50,800 --> 03:09:54,399
the mail server and your email client is

5658
03:09:52,800 --> 03:09:56,560
able to sync with the server to then

5659
03:09:54,399 --> 03:09:58,000
grab and display your messages. This

5660
03:09:56,560 --> 03:10:00,000
means that you can access your emails

5661
03:09:58,000 --> 03:10:01,920
from multiple devices and any actions

5662
03:10:00,000 --> 03:10:03,840
you take like deleting or moving emails

5663
03:10:01,920 --> 03:10:06,160
are then reflected and synced across all

5664
03:10:03,840 --> 03:10:07,920
those devices. And so chances are you're

5665
03:10:06,160 --> 03:10:10,319
more accustomed to using IMAP without

5666
03:10:07,920 --> 03:10:13,520
even knowing it. An IMAP operates on

5667
03:10:10,319 --> 03:10:15,680
port 143, but like with POP 3S, there is

5668
03:10:13,520 --> 03:10:19,319
a TLS encrypted version of IMAP called

5669
03:10:15,680 --> 03:10:21,680
IMAP secure or IMAP S, which uses port

5670
03:10:19,319 --> 03:10:24,080
993. Now, remember when we talked about

5671
03:10:21,680 --> 03:10:25,600
how the SMTP protocol works in that the

5672
03:10:24,080 --> 03:10:27,120
sender's mail server communicates with

5673
03:10:25,600 --> 03:10:29,279
the recipient's mail server to deliver

5674
03:10:27,120 --> 03:10:31,040
the message? Well, we use this nice

5675
03:10:29,279 --> 03:10:33,520
graphic that I painstakingly put

5676
03:10:31,040 --> 03:10:35,680
together. However, this is kind of a big

5677
03:10:33,520 --> 03:10:38,240
abstraction of what actually occurs as

5678
03:10:35,680 --> 03:10:40,240
the email traverses the internet.

5679
03:10:38,240 --> 03:10:42,080
So, more typically, it's going to look

5680
03:10:40,240 --> 03:10:43,600
something more like this. Well,

5681
03:10:42,080 --> 03:10:45,600
actually, this is also kind of an

5682
03:10:43,600 --> 03:10:47,279
exaggeration, but you can see that our

5683
03:10:45,600 --> 03:10:50,080
message is going to be making many more

5684
03:10:47,279 --> 03:10:52,319
stops along the way. This is because

5685
03:10:50,080 --> 03:10:54,479
most likely an email sent from Bob on

5686
03:10:52,319 --> 03:10:55,920
Gmail is going to need to travel through

5687
03:10:54,479 --> 03:10:59,600
different routing points or mail

5688
03:10:55,920 --> 03:11:02,160
transfer agents to reach Alice on Yahoo.

5689
03:10:59,600 --> 03:11:04,479
And so, what is a mail transfer agent?

5690
03:11:02,160 --> 03:11:06,000
Well, an MTA or a mail transfer agent,

5691
03:11:04,479 --> 03:11:08,000
you might also see this called a mail

5692
03:11:06,000 --> 03:11:10,160
transport agent, is a software

5693
03:11:08,000 --> 03:11:11,840
application or server that's responsible

5694
03:11:10,160 --> 03:11:14,160
for routing and transferring email

5695
03:11:11,840 --> 03:11:16,479
messages between different mail servers.

5696
03:11:14,160 --> 03:11:18,319
And so, when an email is sent, the MTA

5697
03:11:16,479 --> 03:11:20,080
on the sender's mail server accepts the

5698
03:11:18,319 --> 03:11:21,600
message, looks up the destination

5699
03:11:20,080 --> 03:11:23,200
domain, and then determines the

5700
03:11:21,600 --> 03:11:25,279
appropriate route to deliver the email

5701
03:11:23,200 --> 03:11:27,120
to the recipient's mail server. And so

5702
03:11:25,279 --> 03:11:28,800
when an email is sent from one domain to

5703
03:11:27,120 --> 03:11:31,040
another, it might have to traverse

5704
03:11:28,800 --> 03:11:32,960
through multiple MTAs over the internet

5705
03:11:31,040 --> 03:11:34,720
in a relay before reaching its final

5706
03:11:32,960 --> 03:11:36,479
destination. And something that we'll

5707
03:11:34,720 --> 03:11:38,479
cover later on in the header analysis

5708
03:11:36,479 --> 03:11:40,319
lesson, depending on the amount of MTAs

5709
03:11:38,479 --> 03:11:42,479
that an email has to traverse in transit

5710
03:11:40,319 --> 03:11:44,399
from source to destination, an email

5711
03:11:42,479 --> 03:11:46,680
will have multiple received headers

5712
03:11:44,399 --> 03:11:48,880
which should be read in ascending order

5713
03:11:46,680 --> 03:11:52,560
chronologically. And so next we have a

5714
03:11:48,880 --> 03:11:54,399
mail user agent or an MUA. And so an MUA

5715
03:11:52,560 --> 03:11:56,479
is the actual software application used

5716
03:11:54,399 --> 03:11:58,640
by users to compose and send and receive

5717
03:11:56,479 --> 03:12:00,640
and manage email messages. So common

5718
03:11:58,640 --> 03:12:02,720
MUAS include desktop applications like

5719
03:12:00,640 --> 03:12:04,399
Microsoft Outlook or web-based clients

5720
03:12:02,720 --> 03:12:06,640
like Gmail and mobile apps like Apple

5721
03:12:04,399 --> 03:12:08,399
Mail. And so MUAS provide a

5722
03:12:06,640 --> 03:12:10,080
user-friendly interface for actually

5723
03:12:08,399 --> 03:12:11,760
interacting with email and allowing

5724
03:12:10,080 --> 03:12:14,160
users to organize their messages or

5725
03:12:11,760 --> 03:12:16,479
create drafts and set up filters. And so

5726
03:12:14,160 --> 03:12:17,920
when a user sends an email, the MUA

5727
03:12:16,479 --> 03:12:20,479
communicates with the user's mail

5728
03:12:17,920 --> 03:12:22,479
transfer agent or MTA to transmit the

5729
03:12:20,479 --> 03:12:24,800
message to the recipient's mail server.

5730
03:12:22,479 --> 03:12:27,399
And so in essence, the MUA serves as the

5731
03:12:24,800 --> 03:12:29,920
primary interface between user and email

5732
03:12:27,399 --> 03:12:32,560
system. And we also have mail delivery

5733
03:12:29,920 --> 03:12:34,240
agents or MDAs. And this is a component

5734
03:12:32,560 --> 03:12:36,160
of an email system that's responsible

5735
03:12:34,240 --> 03:12:38,080
for accepting incoming email messages

5736
03:12:36,160 --> 03:12:39,439
from a mail transfer agent and

5737
03:12:38,080 --> 03:12:41,520
delivering them to the recipient's

5738
03:12:39,439 --> 03:12:43,439
mailbox. So we can think of it as the

5739
03:12:41,520 --> 03:12:45,359
last agent in the relay that holds the

5740
03:12:43,439 --> 03:12:47,600
email for the recipient to retrieve. And

5741
03:12:45,359 --> 03:12:49,600
so once an MTA has successfully relayed

5742
03:12:47,600 --> 03:12:51,520
an email to the recipient's mail server,

5743
03:12:49,600 --> 03:12:53,120
well, the MDA takes over and performs

5744
03:12:51,520 --> 03:12:55,200
actions like placing the email in the

5745
03:12:53,120 --> 03:12:57,680
recipient's inbox or applying filters or

5746
03:12:55,200 --> 03:12:59,840
sorting the message to specific folders.

5747
03:12:57,680 --> 03:13:01,760
Essentially, the MDA is responsible for

5748
03:12:59,840 --> 03:13:03,760
storing and organizing incoming email on

5749
03:13:01,760 --> 03:13:05,279
the recipient's mail server. And there

5750
03:13:03,760 --> 03:13:07,439
are actually two other functions in the

5751
03:13:05,279 --> 03:13:09,040
email exchanger or the MX standard. We

5752
03:13:07,439 --> 03:13:11,279
have the male submission agent or the

5753
03:13:09,040 --> 03:13:13,520
MSA and the mail retrieval agent or the

5754
03:13:11,279 --> 03:13:15,920
MRA, but they typically overlap with

5755
03:13:13,520 --> 03:13:17,760
MUAS and MDAS respectively and they're

5756
03:13:15,920 --> 03:13:19,680
not actually supported by the IETF

5757
03:13:17,760 --> 03:13:21,279
standard. And so we'll just focus on

5758
03:13:19,680 --> 03:13:23,439
these three above to understand the

5759
03:13:21,279 --> 03:13:23,439
whole

5760
03:13:24,760 --> 03:13:28,680
picture. Now, we're going to jump into

5761
03:13:26,800 --> 03:13:30,640
the practical lessons on analyzing

5762
03:13:28,680 --> 03:13:33,680
emails and we're going to do that

5763
03:13:30,640 --> 03:13:35,520
primarily within our Ubuntu VM. And so

5764
03:13:33,680 --> 03:13:38,040
there just a couple of utilities that we

5765
03:13:35,520 --> 03:13:40,399
need to install first in order to do so

5766
03:13:38,040 --> 03:13:42,960
effectively. And the first one is our

5767
03:13:40,399 --> 03:13:44,640
actual email client, right? We want to

5768
03:13:42,960 --> 03:13:46,479
have an actual email client on our

5769
03:13:44,640 --> 03:13:49,040
system so we can open up and interact

5770
03:13:46,479 --> 03:13:50,640
with email messages. And typically in

5771
03:13:49,040 --> 03:13:52,399
the enterprise, you'll come across

5772
03:13:50,640 --> 03:13:54,720
software like Microsoft Outlook or

5773
03:13:52,399 --> 03:13:56,479
Outlook on the web. In smaller or more

5774
03:13:54,720 --> 03:13:58,239
mediumsiz organizations, you might use

5775
03:13:56,479 --> 03:14:00,800
Google Workspace and so you might be

5776
03:13:58,239 --> 03:14:02,479
exclusively using Google Mail. However,

5777
03:14:00,800 --> 03:14:04,880
in our case, we're going to install

5778
03:14:02,479 --> 03:14:06,640
Mozilla Thunderbird, which is a free and

5779
03:14:04,880 --> 03:14:08,200
open- source email client that's going

5780
03:14:06,640 --> 03:14:10,080
to work perfectly for our

5781
03:14:08,200 --> 03:14:11,840
demonstrations. And to do that, it's

5782
03:14:10,080 --> 03:14:14,200
quite simple. So, I'm just going to open

5783
03:14:11,840 --> 03:14:16,319
up a terminal window

5784
03:14:14,200 --> 03:14:19,920
here. And from here, I'm just going to

5785
03:14:16,319 --> 03:14:21,880
type in pseudo apt install, and it's

5786
03:14:19,920 --> 03:14:24,160
just called

5787
03:14:21,880 --> 03:14:27,800
Thunderbird. And with that ready to go,

5788
03:14:24,160 --> 03:14:30,080
I'm going to hit enter. Type in my

5789
03:14:27,800 --> 03:14:32,560
password. And this should just take a

5790
03:14:30,080 --> 03:14:32,560
second to

5791
03:14:33,000 --> 03:14:37,960
install. And there we go. It's finished.

5792
03:14:35,840 --> 03:14:40,080
I'm just going to minimize my terminal

5793
03:14:37,960 --> 03:14:41,720
here. And we should be able to find

5794
03:14:40,080 --> 03:14:43,760
Thunderbird now in our list of

5795
03:14:41,720 --> 03:14:45,600
applications. And so to do that, click

5796
03:14:43,760 --> 03:14:47,399
on the Ubuntu logo here. In my case,

5797
03:14:45,600 --> 03:14:49,680
it's in the bottom

5798
03:14:47,399 --> 03:14:52,560
right. And you can see the newest app

5799
03:14:49,680 --> 03:14:53,840
here is Thunderbird Mail.

5800
03:14:52,560 --> 03:14:55,080
And so I'm just going to click on it to

5801
03:14:53,840 --> 03:14:57,600
open it

5802
03:14:55,080 --> 03:14:59,840
up. And when it starts up for the first

5803
03:14:57,600 --> 03:15:02,319
time, it's going to ask us here to set

5804
03:14:59,840 --> 03:15:04,239
up our existing email address. And so

5805
03:15:02,319 --> 03:15:06,880
here, you can just click on cancel to

5806
03:15:04,239 --> 03:15:08,560
sort of exit the setup here. We don't

5807
03:15:06,880 --> 03:15:10,080
actually need to set up or configure an

5808
03:15:08,560 --> 03:15:11,840
account in order to open up locally

5809
03:15:10,080 --> 03:15:12,760
saved email files, which is what we're

5810
03:15:11,840 --> 03:15:14,880
going to be doing in the following

5811
03:15:12,760 --> 03:15:16,160
lessons. And unfortunately, it's kind of

5812
03:15:14,880 --> 03:15:17,920
going to ask us the same thing every

5813
03:15:16,160 --> 03:15:20,000
time we open up Thunderbird, but it's

5814
03:15:17,920 --> 03:15:21,640
not really a big deal.

5815
03:15:20,000 --> 03:15:24,720
However, now that we've installed

5816
03:15:21,640 --> 03:15:26,359
Thunderbird, any ML or email files are

5817
03:15:24,720 --> 03:15:28,319
automatically associated with the

5818
03:15:26,359 --> 03:15:30,399
application. For example, I can just go

5819
03:15:28,319 --> 03:15:32,479
under the fishing analysis folder here

5820
03:15:30,399 --> 03:15:33,840
and just open up any email file. Right,

5821
03:15:32,479 --> 03:15:35,040
we can see we have a number of email

5822
03:15:33,840 --> 03:15:37,520
files here and we're kind of jumping

5823
03:15:35,040 --> 03:15:39,640
ahead, but that's okay. But we can just

5824
03:15:37,520 --> 03:15:41,840
double click on any of these

5825
03:15:39,640 --> 03:15:44,080
files and it's going to automatically

5826
03:15:41,840 --> 03:15:45,680
open up within Thunderbird, right? And

5827
03:15:44,080 --> 03:15:48,399
so you can see now we're looking at the

5828
03:15:45,680 --> 03:15:49,760
contents of this email.

5829
03:15:48,399 --> 03:15:51,600
And in case that doesn't work

5830
03:15:49,760 --> 03:15:53,040
automatically or it doesn't open up,

5831
03:15:51,600 --> 03:15:56,239
well, we can right click on an email

5832
03:15:53,040 --> 03:15:57,680
file and just click on open with. And

5833
03:15:56,239 --> 03:16:00,200
from here, you can make sure to select

5834
03:15:57,680 --> 03:16:02,239
the Thunderbird mail

5835
03:16:00,200 --> 03:16:04,840
app. Now, one last thing with

5836
03:16:02,239 --> 03:16:08,279
Thunderbird. So, let's just open it up

5837
03:16:04,840 --> 03:16:11,279
again and just click on

5838
03:16:08,279 --> 03:16:13,200
cancel. What we want to do here is just

5839
03:16:11,279 --> 03:16:17,960
click on the hamburger icon here in the

5840
03:16:13,200 --> 03:16:17,960
top right and go down to settings.

5841
03:16:18,160 --> 03:16:22,600
And from the settings page, go down to

5842
03:16:20,479 --> 03:16:25,279
the privacy and security

5843
03:16:22,600 --> 03:16:27,720
tab and make sure that allow remote

5844
03:16:25,279 --> 03:16:29,520
content in messages is

5845
03:16:27,720 --> 03:16:31,359
selected. And this is just going to

5846
03:16:29,520 --> 03:16:33,520
allow us to open up email messages with

5847
03:16:31,359 --> 03:16:35,359
any linked images without automatically

5848
03:16:33,520 --> 03:16:37,640
blocking them, which just saves us time

5849
03:16:35,359 --> 03:16:39,920
when we're trying to open up multiple

5850
03:16:37,640 --> 03:16:40,760
emails. And so we can just close that

5851
03:16:39,920 --> 03:16:43,439
out

5852
03:16:40,760 --> 03:16:45,680
now. All right. And so now we're going

5853
03:16:43,439 --> 03:16:47,760
to install Sublime Text, which is a

5854
03:16:45,680 --> 03:16:48,760
really powerful text editor for code and

5855
03:16:47,760 --> 03:16:51,359
different types of

5856
03:16:48,760 --> 03:16:53,680
markup. And when we do some manual email

5857
03:16:51,359 --> 03:16:55,439
file and header analysis, well, we want

5858
03:16:53,680 --> 03:16:57,439
to be using an actual code editor

5859
03:16:55,439 --> 03:16:59,399
instead of relying on just our terminal.

5860
03:16:57,439 --> 03:17:01,520
It just makes our lives so much

5861
03:16:59,399 --> 03:17:04,080
easier. And so to do this, I'm just

5862
03:17:01,520 --> 03:17:04,080
going to open up

5863
03:17:04,439 --> 03:17:10,040
Firefox. And I'm going to do a search

5864
03:17:06,319 --> 03:17:10,040
for Sublime Text.

5865
03:17:11,439 --> 03:17:16,680
And this first result here at

5866
03:17:13,479 --> 03:17:19,040
sublimeext.com just going to click on

5867
03:17:16,680 --> 03:17:21,479
it. And I'm going to click here on

5868
03:17:19,040 --> 03:17:24,000
install for

5869
03:17:21,479 --> 03:17:25,600
Linux. And I'm going to link this below

5870
03:17:24,000 --> 03:17:28,080
just in case the commands or the

5871
03:17:25,600 --> 03:17:29,439
specific process changes. But we really

5872
03:17:28,080 --> 03:17:32,000
just need to copy and paste a couple of

5873
03:17:29,439 --> 03:17:34,560
commands here to first install the GPG

5874
03:17:32,000 --> 03:17:36,720
key that's associated with the package

5875
03:17:34,560 --> 03:17:38,160
and then just install the package. And

5876
03:17:36,720 --> 03:17:40,800
so it's just really going to be a copy

5877
03:17:38,160 --> 03:17:43,040
and paste job here.

5878
03:17:40,800 --> 03:17:44,359
So, I'm going to copy this command, go

5879
03:17:43,040 --> 03:17:47,000
back into my

5880
03:17:44,359 --> 03:17:50,239
terminal, and just paste it

5881
03:17:47,000 --> 03:17:51,920
in. All right, the next command, we're

5882
03:17:50,239 --> 03:17:53,359
going to select a channel to use. And

5883
03:17:51,920 --> 03:17:55,359
so, instead of dev here, I'm going to

5884
03:17:53,359 --> 03:17:56,920
select stable. So, I'm just going to

5885
03:17:55,359 --> 03:18:01,359
copy this command

5886
03:17:56,920 --> 03:18:01,359
here, head back to my terminal, paste it

5887
03:18:01,720 --> 03:18:08,359
in, and then next, we just need to run

5888
03:18:04,239 --> 03:18:08,359
pseudoapp get update.

5889
03:18:12,160 --> 03:18:15,640
And again, if you see this message here,

5890
03:18:13,680 --> 03:18:18,640
we can just run pseudo

5891
03:18:15,640 --> 03:18:18,640
systemctl

5892
03:18:19,239 --> 03:18:23,000
damin-reload. And just make sure we

5893
03:18:21,040 --> 03:18:25,800
update once again, just in

5894
03:18:23,000 --> 03:18:28,800
case. All right. And the last command

5895
03:18:25,800 --> 03:18:31,279
here is just going to be pseudoapp get

5896
03:18:28,800 --> 03:18:31,279
install

5897
03:18:31,479 --> 03:18:36,319
sublime-ext. So I will just paste that

5898
03:18:33,720 --> 03:18:38,960
in. And we should have sublime text

5899
03:18:36,319 --> 03:18:40,439
installed.

5900
03:18:38,960 --> 03:18:42,640
And to confirm

5901
03:18:40,439 --> 03:18:44,720
this again, we can go down to the

5902
03:18:42,640 --> 03:18:47,359
applications menu and you can see we

5903
03:18:44,720 --> 03:18:47,359
have Sublime

5904
03:18:47,399 --> 03:18:52,000
Text.

5905
03:18:48,920 --> 03:18:54,960
Nice. And now we can basically open up

5906
03:18:52,000 --> 03:18:56,640
any file within Sublime Text. And so I'm

5907
03:18:54,960 --> 03:19:00,640
just going to navigate here to the

5908
03:18:56,640 --> 03:19:03,359
desktop folder under 01 fishing analysis

5909
03:19:00,640 --> 03:19:06,160
under 01 header analysis and just run an

5910
03:19:03,359 --> 03:19:08,080
ls to list out all of those email files.

5911
03:19:06,160 --> 03:19:11,200
And to open up any of these files within

5912
03:19:08,080 --> 03:19:13,439
Sublime Text, well, I can just run s for

5913
03:19:11,200 --> 03:19:16,880
Sublime and then provide the name of the

5914
03:19:13,439 --> 03:19:16,880
file. So, sample

5915
03:19:16,920 --> 03:19:20,640
1.ML. And so, now we're really jumping

5916
03:19:19,120 --> 03:19:22,800
ahead, but you can see how we can sort

5917
03:19:20,640 --> 03:19:23,840
of open up files within Sublime Text.

5918
03:19:22,800 --> 03:19:24,840
And that's what we're going to be doing

5919
03:19:23,840 --> 03:19:27,920
in the next

5920
03:19:24,840 --> 03:19:30,560
lesson. And so, let's end it here and

5921
03:19:27,920 --> 03:19:32,640
jump into the real lessons.

5922
03:19:30,560 --> 03:19:34,319
As a sock analyst, chances are that

5923
03:19:32,640 --> 03:19:36,319
you'll frequently encounter a number of

5924
03:19:34,319 --> 03:19:38,160
different types of fishing attacks, all

5925
03:19:36,319 --> 03:19:40,560
with varying objectives and means to

5926
03:19:38,160 --> 03:19:42,560
achieve their goals. But ultimately,

5927
03:19:40,560 --> 03:19:44,560
fishing relies on deception. And in

5928
03:19:42,560 --> 03:19:47,200
general, we can break down attack types

5929
03:19:44,560 --> 03:19:49,279
into several categories. Now, first we

5930
03:19:47,200 --> 03:19:51,200
have information gathering attacks. And

5931
03:19:49,279 --> 03:19:52,800
in an information gathering attack,

5932
03:19:51,200 --> 03:19:54,640
well, you might be wondering what the

5933
03:19:52,800 --> 03:19:56,720
entire point of the message was because

5934
03:19:54,640 --> 03:19:58,319
it's not really an attack. These types

5935
03:19:56,720 --> 03:20:00,239
of emails aren't trying to entice the

5936
03:19:58,319 --> 03:20:02,319
victim to click on a link or download a

5937
03:20:00,239 --> 03:20:04,479
file, but rather they're really just

5938
03:20:02,319 --> 03:20:06,880
checking to see if a destination mailbox

5939
03:20:04,479 --> 03:20:08,880
is in use and also if the user on the

5940
03:20:06,880 --> 03:20:11,439
other end of that mailbox is prone to

5941
03:20:08,880 --> 03:20:12,800
opening email messages. And if they can

5942
03:20:11,439 --> 03:20:14,720
manage to get a response from the

5943
03:20:12,800 --> 03:20:16,800
victim, they might also be able to

5944
03:20:14,720 --> 03:20:19,040
somewhat passively collect data, which

5945
03:20:16,800 --> 03:20:20,960
can often be done from an employes email

5946
03:20:19,040 --> 03:20:22,960
signature, which can include things like

5947
03:20:20,960 --> 03:20:24,640
their name, their job title, their phone

5948
03:20:22,960 --> 03:20:26,560
numbers, and other personal or

5949
03:20:24,640 --> 03:20:28,479
professional information. And this type

5950
03:20:26,560 --> 03:20:30,640
of reconnaissance can be used to stage

5951
03:20:28,479 --> 03:20:33,200
and craft a more convincing fish later

5952
03:20:30,640 --> 03:20:35,760
on, or to tailor a specific attack to a

5953
03:20:33,200 --> 03:20:37,359
specific individual or organization. So,

5954
03:20:35,760 --> 03:20:39,600
here's an example of one of these

5955
03:20:37,359 --> 03:20:42,479
information gathering attacks. In this

5956
03:20:39,600 --> 03:20:44,160
case, I don't see any URLs to click on.

5957
03:20:42,479 --> 03:20:46,720
I certainly don't see any attachments

5958
03:20:44,160 --> 03:20:48,520
attached to this email, and I don't see

5959
03:20:46,720 --> 03:20:50,880
any requests really for sensitive

5960
03:20:48,520 --> 03:20:53,720
information. It just seems to be a very

5961
03:20:50,880 --> 03:20:55,760
generic greeting and asking if I'm

5962
03:20:53,720 --> 03:20:57,359
available. And there are many different

5963
03:20:55,760 --> 03:20:59,600
ways that an attacker can gather

5964
03:20:57,359 --> 03:21:02,080
information from a seemingly innocent

5965
03:20:59,600 --> 03:21:03,840
email. For example, if they attempt to

5966
03:21:02,080 --> 03:21:06,000
send an email to a mailbox that doesn't

5967
03:21:03,840 --> 03:21:08,000
exist, well, they will typically get an

5968
03:21:06,000 --> 03:21:10,080
automated bounceback or an undeliverable

5969
03:21:08,000 --> 03:21:11,920
message in response from the email

5970
03:21:10,080 --> 03:21:13,760
server. And this can be used to

5971
03:21:11,920 --> 03:21:16,000
determine whether the mailbox is in use

5972
03:21:13,760 --> 03:21:17,800
or not. And we can actually take a look

5973
03:21:16,000 --> 03:21:20,239
at an example of one of these emails

5974
03:21:17,800 --> 03:21:22,479
here. You can see here that I attempted

5975
03:21:20,239 --> 03:21:24,319
to send an email to a non-existent email

5976
03:21:22,479 --> 03:21:26,319
account. And because it couldn't be

5977
03:21:24,319 --> 03:21:28,560
delivered, well, I got this email bounce

5978
03:21:26,319 --> 03:21:30,239
back in response.

5979
03:21:28,560 --> 03:21:32,720
Another way to do this is through the

5980
03:21:30,239 --> 03:21:35,279
use of a tracking pixel embedded within

5981
03:21:32,720 --> 03:21:37,840
the email's body content. And a tracking

5982
03:21:35,279 --> 03:21:39,920
pixel is a tiny transparent image that

5983
03:21:37,840 --> 03:21:41,920
gets embedded within the email content.

5984
03:21:39,920 --> 03:21:43,920
It's typically like a one by one pixel

5985
03:21:41,920 --> 03:21:46,239
image so that it's virtually invisible

5986
03:21:43,920 --> 03:21:48,239
to the recipient. And when the recipient

5987
03:21:46,239 --> 03:21:50,479
opens the email and their email client

5988
03:21:48,239 --> 03:21:52,399
loads the content of the email, it also

5989
03:21:50,479 --> 03:21:55,040
loads and requests that tracking pixel

5990
03:21:52,399 --> 03:21:56,960
from the sender server. And this action

5991
03:21:55,040 --> 03:21:59,439
allows the sender or the attacker in

5992
03:21:56,960 --> 03:22:01,600
this case to collect various information

5993
03:21:59,439 --> 03:22:03,680
such as the open rate. So the sender can

5994
03:22:01,600 --> 03:22:05,920
track when and how many times the email

5995
03:22:03,680 --> 03:22:07,760
was opened. And they can also log the IP

5996
03:22:05,920 --> 03:22:09,600
address of the recipient. And in some

5997
03:22:07,760 --> 03:22:11,840
cases, the sender can determine the

5998
03:22:09,600 --> 03:22:13,680
general location of the recipient. And

5999
03:22:11,840 --> 03:22:15,520
lastly, they can get device and client

6000
03:22:13,680 --> 03:22:17,680
information. So the sender can gather

6001
03:22:15,520 --> 03:22:19,840
data on the recipient's device type,

6002
03:22:17,680 --> 03:22:21,760
their operating system and email client,

6003
03:22:19,840 --> 03:22:24,080
and sometimes even specific operating or

6004
03:22:21,760 --> 03:22:26,160
OS settings.

6005
03:22:24,080 --> 03:22:28,319
Let's conduct a quick lab setup here to

6006
03:22:26,160 --> 03:22:30,479
showcase a tracking pixel in action and

6007
03:22:28,319 --> 03:22:31,600
also what data it can uncover. And now

6008
03:22:30,479 --> 03:22:34,080
you don't need to follow along with

6009
03:22:31,600 --> 03:22:35,760
this, so feel free to just watch. Now,

6010
03:22:34,080 --> 03:22:37,680
I've set up a couple of prerequisites

6011
03:22:35,760 --> 03:22:39,680
here. Now, first we have this tracking

6012
03:22:37,680 --> 03:22:42,239
pixel.png image that I created in

6013
03:22:39,680 --> 03:22:44,560
Microsoft Paint just by creating a 1x1

6014
03:22:42,239 --> 03:22:46,239
red pixel. Now, of course, in action,

6015
03:22:44,560 --> 03:22:48,080
you don't want this to be a red pixel,

6016
03:22:46,239 --> 03:22:50,399
but rather a transparent pixel so it

6017
03:22:48,080 --> 03:22:52,319
doesn't appear in the email client. And

6018
03:22:50,399 --> 03:22:53,680
next, I have this serve.py PIS script

6019
03:22:52,319 --> 03:22:56,319
that I put together which uses the

6020
03:22:53,680 --> 03:22:58,479
simple HTTP server in Python to set up a

6021
03:22:56,319 --> 03:23:00,239
quick and basic HTTP server that I can

6022
03:22:58,479 --> 03:23:02,080
use to log the requests. And in this

6023
03:23:00,239 --> 03:23:04,319
case, I've added a specific directive so

6024
03:23:02,080 --> 03:23:06,160
I can log the user agent. Now, this was

6025
03:23:04,319 --> 03:23:07,760
mostly just done to set up an easy

6026
03:23:06,160 --> 03:23:09,200
scenario here. In most cases, an

6027
03:23:07,760 --> 03:23:11,040
attacker is not going to use a Python

6028
03:23:09,200 --> 03:23:12,960
server, but most likely like an EngineX

6029
03:23:11,040 --> 03:23:15,200
or an Apache web server to log these

6030
03:23:12,960 --> 03:23:17,040
requests. And lastly, here I have this

6031
03:23:15,200 --> 03:23:18,479
sample email that we're going to use.

6032
03:23:17,040 --> 03:23:20,080
And if we take a look at the contents of

6033
03:23:18,479 --> 03:23:22,080
the email, well, we just have some basic

6034
03:23:20,080 --> 03:23:23,920
greeting and uh some generic email that

6035
03:23:22,080 --> 03:23:25,920
is quite harmless. And now if we preview

6036
03:23:23,920 --> 03:23:27,200
this email in our client, well, we're

6037
03:23:25,920 --> 03:23:29,279
just saying hello. And that's all there

6038
03:23:27,200 --> 03:23:30,760
is. Now, I'm going to start up our

6039
03:23:29,279 --> 03:23:33,040
listening server

6040
03:23:30,760 --> 03:23:36,160
here. And in a new tab, I'm going to

6041
03:23:33,040 --> 03:23:36,160
open up our sample email

6042
03:23:36,200 --> 03:23:39,760
again. And obviously, this would have

6043
03:23:38,239 --> 03:23:41,520
been done when the attacker was crafting

6044
03:23:39,760 --> 03:23:42,960
the initial email. But in this case, I'm

6045
03:23:41,520 --> 03:23:44,880
just going to append this image to the

6046
03:23:42,960 --> 03:23:46,479
end of our email. And you can see here

6047
03:23:44,880 --> 03:23:48,560
we have an image tag. And within the

6048
03:23:46,479 --> 03:23:51,040
source of the image tag, I'm adding a

6049
03:23:48,560 --> 03:23:52,319
URL to our tracking pixel. And of

6050
03:23:51,040 --> 03:23:53,920
course, in this case, it's just using

6051
03:23:52,319 --> 03:23:55,520
local host because I'm not hosting this

6052
03:23:53,920 --> 03:23:57,840
anywhere on the internet. It's just for

6053
03:23:55,520 --> 03:23:59,600
this lab demonstration. And so once I

6054
03:23:57,840 --> 03:24:01,359
save this, we're going to open up the

6055
03:23:59,600 --> 03:24:03,439
email again. And on the right hand side

6056
03:24:01,359 --> 03:24:05,279
here, we should see a request on our

6057
03:24:03,439 --> 03:24:06,880
Python server. So I'm just going to

6058
03:24:05,279 --> 03:24:08,960
double click the email again to open it

6059
03:24:06,880 --> 03:24:11,359
up. And you can see the email has

6060
03:24:08,960 --> 03:24:12,800
loaded. But if we minimize this screen,

6061
03:24:11,359 --> 03:24:14,800
you can see we actually track the

6062
03:24:12,800 --> 03:24:17,120
request here. And it might be really

6063
03:24:14,800 --> 03:24:19,279
hard to see, but if we start zooming in,

6064
03:24:17,120 --> 03:24:21,040
well, we can see this little red pixel

6065
03:24:19,279 --> 03:24:23,040
at the bottom of our screen. This is our

6066
03:24:21,040 --> 03:24:24,880
tracking pixel. And again, if we were

6067
03:24:23,040 --> 03:24:26,640
smart and used a transparent image,

6068
03:24:24,880 --> 03:24:28,479
well, we wouldn't see a red dot here. We

6069
03:24:26,640 --> 03:24:30,399
would see nothing at all. So, while this

6070
03:24:28,479 --> 03:24:32,000
email seemed completely harmless, well,

6071
03:24:30,399 --> 03:24:33,920
we actually track some interesting

6072
03:24:32,000 --> 03:24:35,520
information on our server. And so, we

6073
03:24:33,920 --> 03:24:37,200
can see the actual IP address of the

6074
03:24:35,520 --> 03:24:38,479
user that opened the email. And we can

6075
03:24:37,200 --> 03:24:40,080
see here, of course, it's just this

6076
03:24:38,479 --> 03:24:42,160
local host address because this is all

6077
03:24:40,080 --> 03:24:43,760
being done locally in a lab. But if this

6078
03:24:42,160 --> 03:24:45,279
was an actual organization's email

6079
03:24:43,760 --> 03:24:47,439
client that opened up, well, we would

6080
03:24:45,279 --> 03:24:49,279
see the IP address. If this was a user

6081
03:24:47,439 --> 03:24:50,800
opening the email at their home office,

6082
03:24:49,279 --> 03:24:52,640
well, we would see the IP address of

6083
03:24:50,800 --> 03:24:54,080
their home office. And of course, we

6084
03:24:52,640 --> 03:24:55,600
have the request timestamp. And this is

6085
03:24:54,080 --> 03:24:57,439
when the recipient opened the email and

6086
03:24:55,600 --> 03:24:59,359
the email client itself made the request

6087
03:24:57,439 --> 03:25:01,279
to gather this image. And so, if we

6088
03:24:59,359 --> 03:25:02,960
close this email and open it again, we

6089
03:25:01,279 --> 03:25:04,560
should get another request with another

6090
03:25:02,960 --> 03:25:06,239
timestamp. And there we go. There's our

6091
03:25:04,560 --> 03:25:07,920
second request. So, not only are we

6092
03:25:06,239 --> 03:25:09,439
getting the IP address of the opens, but

6093
03:25:07,920 --> 03:25:11,680
we're also getting when and how many

6094
03:25:09,439 --> 03:25:13,359
times it was opened. And lastly here, of

6095
03:25:11,680 --> 03:25:15,439
course, we are getting the user agent of

6096
03:25:13,359 --> 03:25:17,439
the actual email client. And we can see

6097
03:25:15,439 --> 03:25:19,040
some very interesting information here.

6098
03:25:17,439 --> 03:25:20,880
I'm just going to copy the entire user

6099
03:25:19,040 --> 03:25:23,120
agent string and I'm going to parse it

6100
03:25:20,880 --> 03:25:24,479
using a tool that we looked at before.

6101
03:25:23,120 --> 03:25:27,359
So in this case, I'm going to do a quick

6102
03:25:24,479 --> 03:25:29,279
Google search for a user agent parser.

6103
03:25:27,359 --> 03:25:30,960
You can see this what is my browser.com

6104
03:25:29,279 --> 03:25:31,640
parse a user agent string. Well, let's

6105
03:25:30,960 --> 03:25:33,920
go

6106
03:25:31,640 --> 03:25:35,920
here. And under here, I'm just going to

6107
03:25:33,920 --> 03:25:38,239
paste in the user agent string that we

6108
03:25:35,920 --> 03:25:39,439
captured. And if we parse this, well, we

6109
03:25:38,239 --> 03:25:41,200
almost didn't even need to because it's

6110
03:25:39,439 --> 03:25:43,040
so verbose on its own. But you can see

6111
03:25:41,200 --> 03:25:44,640
the client that opened our email was

6112
03:25:43,040 --> 03:25:46,600
Thunderbird. And we have the software

6113
03:25:44,640 --> 03:25:48,720
version. So we have

6114
03:25:46,600 --> 03:25:50,160
1510.1. We can also see the layout

6115
03:25:48,720 --> 03:25:52,319
engine and the version of the layout

6116
03:25:50,160 --> 03:25:54,720
engine. We can see the operating system.

6117
03:25:52,319 --> 03:25:56,479
So we buntu Linux. So we were able to

6118
03:25:54,720 --> 03:25:58,880
enumerate all of this information as an

6119
03:25:56,479 --> 03:26:01,359
attacker just by introducing a one by

6120
03:25:58,880 --> 03:26:02,479
one pixel within our email. So I hope

6121
03:26:01,359 --> 03:26:03,439
that was somewhat interesting and

6122
03:26:02,479 --> 03:26:05,680
hopefully demonstrated the

6123
03:26:03,439 --> 03:26:07,439
reconnaissance technique pretty well. So

6124
03:26:05,680 --> 03:26:09,520
we also have credential harvesting

6125
03:26:07,439 --> 03:26:11,200
attacks and these are actually a very

6126
03:26:09,520 --> 03:26:13,200
common type of fishing attack and likely

6127
03:26:11,200 --> 03:26:15,040
one that you most often associate with

6128
03:26:13,200 --> 03:26:16,640
fishing emails in general. So these are

6129
03:26:15,040 --> 03:26:18,479
fishing attacks designed to trick

6130
03:26:16,640 --> 03:26:20,239
individuals into divulging sensitive

6131
03:26:18,479 --> 03:26:21,840
data like their username and password.

6132
03:26:20,239 --> 03:26:23,279
So their credentials, right? Or even

6133
03:26:21,840 --> 03:26:25,359
their credit card numbers or other

6134
03:26:23,279 --> 03:26:27,200
personal data. And typically this is

6135
03:26:25,359 --> 03:26:28,960
done through a malicious web page or

6136
03:26:27,200 --> 03:26:31,200
what we would call a credential capture

6137
03:26:28,960 --> 03:26:32,880
website. And the fishing email itself

6138
03:26:31,200 --> 03:26:34,720
often contains some sort of call to

6139
03:26:32,880 --> 03:26:36,960
action, right? So maybe a button or a

6140
03:26:34,720 --> 03:26:39,520
URL to click on. And this link or this

6141
03:26:36,960 --> 03:26:41,439
URL usually directs the recipient to a

6142
03:26:39,520 --> 03:26:43,840
fake website that attempts to closely

6143
03:26:41,439 --> 03:26:45,439
resemble a legitimate one. And honestly,

6144
03:26:43,840 --> 03:26:47,120
in the field, the most common one you're

6145
03:26:45,439 --> 03:26:49,120
going to see is a Microsoft login page

6146
03:26:47,120 --> 03:26:50,640
because so many organizations use

6147
03:26:49,120 --> 03:26:52,359
Microsoft products and so many

6148
03:26:50,640 --> 03:26:54,720
organizations are moving to their cloud

6149
03:26:52,359 --> 03:26:56,560
services. But of course, this is just a

6150
03:26:54,720 --> 03:26:58,479
fake website and it's designed to

6151
03:26:56,560 --> 03:27:00,399
capture a victim's credentials and send

6152
03:26:58,479 --> 03:27:02,319
them over to a server that the attacker

6153
03:27:00,399 --> 03:27:04,239
controls. And maybe if the attacker is

6154
03:27:02,319 --> 03:27:06,319
really fancy, they'll then redirect the

6155
03:27:04,239 --> 03:27:07,840
user to the legitimate Microsoft website

6156
03:27:06,319 --> 03:27:09,920
or whatever it's trying to impersonate

6157
03:27:07,840 --> 03:27:12,720
as to make it appear more legitimate and

6158
03:27:09,920 --> 03:27:14,319
hide their tracks. For example, here is

6159
03:27:12,720 --> 03:27:16,080
one of those credential capture fishing

6160
03:27:14,319 --> 03:27:17,760
emails. We can see here in the subject

6161
03:27:16,080 --> 03:27:19,920
line that this email is supposedly

6162
03:27:17,760 --> 03:27:21,439
related to our Microsoft account and we

6163
03:27:19,920 --> 03:27:24,160
seem to have identified some sort of

6164
03:27:21,439 --> 03:27:25,520
unusual sign-in activity. And we can see

6165
03:27:24,160 --> 03:27:27,120
some information here saying that

6166
03:27:25,520 --> 03:27:29,520
apparently we've had a sign-in on our

6167
03:27:27,120 --> 03:27:30,800
Microsoft account well from Russia. And

6168
03:27:29,520 --> 03:27:32,479
if we think about some of these social

6169
03:27:30,800 --> 03:27:33,920
engineering tactics here, well, we might

6170
03:27:32,479 --> 03:27:35,520
have some urgency in this case because

6171
03:27:33,920 --> 03:27:37,600
apparently someone is in our account and

6172
03:27:35,520 --> 03:27:39,359
we need to look at the activity. And so

6173
03:27:37,600 --> 03:27:41,760
we have this call to action within the

6174
03:27:39,359 --> 03:27:43,680
email that says view activity. And if we

6175
03:27:41,760 --> 03:27:47,200
hover over this button, we can see the

6176
03:27:43,680 --> 03:27:47,200
URL that's going to take us to this

6177
03:27:47,319 --> 03:27:51,200
mc4-2.verell.app. Now immediately this

6178
03:27:49,439 --> 03:27:53,279
does not look like a Microsoft related

6179
03:27:51,200 --> 03:27:55,120
web page. But the typical person might

6180
03:27:53,279 --> 03:27:56,479
not notice this hyperlink, right? They

6181
03:27:55,120 --> 03:27:58,080
might just see this button and click on

6182
03:27:56,479 --> 03:28:00,399
it. And so let's do that. Let's see

6183
03:27:58,080 --> 03:28:02,239
where this link takes us. And so if we

6184
03:28:00,399 --> 03:28:04,239
click on the link, well, we're delivered

6185
03:28:02,239 --> 03:28:07,120
to this web page, which seemingly looks

6186
03:28:04,239 --> 03:28:08,640
like a genuine Microsoft login page. We

6187
03:28:07,120 --> 03:28:10,640
even have the Microsoft logo, the

6188
03:28:08,640 --> 03:28:12,239
signin, and honestly, even the

6189
03:28:10,640 --> 03:28:14,479
background here, this all looks to be a

6190
03:28:12,239 --> 03:28:16,319
legitimate Microsoft page. For example,

6191
03:28:14,479 --> 03:28:18,960
if we go to the real Microsoft page and

6192
03:28:16,319 --> 03:28:21,120
try to sign in here, well, we get a very

6193
03:28:18,960 --> 03:28:23,120
similar web page, right? If we go back

6194
03:28:21,120 --> 03:28:25,439
and forth uh and get the zooming

6195
03:28:23,120 --> 03:28:27,200
correct, if we go back and forth here,

6196
03:28:25,439 --> 03:28:29,680
well, it actually looks pretty similar.

6197
03:28:27,200 --> 03:28:31,279
and pretty convincing. And someone that

6198
03:28:29,680 --> 03:28:33,200
just got an email indicating someone's

6199
03:28:31,279 --> 03:28:34,640
in their account from Russia, well, they

6200
03:28:33,200 --> 03:28:36,560
might not notice the little details

6201
03:28:34,640 --> 03:28:38,960
here, like the font not being exact or

6202
03:28:36,560 --> 03:28:41,520
some spacing issues. And of course, if

6203
03:28:38,960 --> 03:28:43,680
we were to put in a fake username here

6204
03:28:41,520 --> 03:28:45,840
and click next, surely it's going to ask

6205
03:28:43,680 --> 03:28:48,239
us for a password. And if we type in a

6206
03:28:45,840 --> 03:28:49,439
fake password here, and before I hit

6207
03:28:48,239 --> 03:28:51,040
sign in here, what I'm going to do is

6208
03:28:49,439 --> 03:28:52,479
open up the developer tools under the

6209
03:28:51,040 --> 03:28:54,080
network tab because I want to see where

6210
03:28:52,479 --> 03:28:56,160
our credentials or our fake credentials

6211
03:28:54,080 --> 03:28:57,520
are going to get sent to. And of course,

6212
03:28:56,160 --> 03:28:59,279
this is not something we should include

6213
03:28:57,520 --> 03:29:00,960
in our methodology, but I just want to

6214
03:28:59,279 --> 03:29:02,840
demonstrate what an actual credential

6215
03:29:00,960 --> 03:29:05,040
capture web page looks like and how it

6216
03:29:02,840 --> 03:29:06,479
operates. So, let's just hit sign in

6217
03:29:05,040 --> 03:29:08,399
here, and we should be making a post

6218
03:29:06,479 --> 03:29:09,840
request. There we go. And of course,

6219
03:29:08,399 --> 03:29:11,760
we're getting this fake your account

6220
03:29:09,840 --> 03:29:13,359
password is incorrect. Surely, it's not

6221
03:29:11,760 --> 03:29:15,520
actually communicating with Microsoft

6222
03:29:13,359 --> 03:29:17,840
servers to determine if our credentials

6223
03:29:15,520 --> 03:29:20,479
were correct, right? But if we open up

6224
03:29:17,840 --> 03:29:22,800
this post request and expand this a

6225
03:29:20,479 --> 03:29:24,600
little bit, we can see we're making a

6226
03:29:22,800 --> 03:29:27,600
request to this mc4.onrender.com on

6227
03:29:24,600 --> 03:29:29,439
render.com specifically to this user/ad

6228
03:29:27,600 --> 03:29:31,040
endpoint. And if we look at the request,

6229
03:29:29,439 --> 03:29:33,520
well, we have our email and password

6230
03:29:31,040 --> 03:29:34,960
within the raw data that we sent over.

6231
03:29:33,520 --> 03:29:36,800
Now, of course, this is not an official

6232
03:29:34,960 --> 03:29:38,000
Microsoft website and likely the

6233
03:29:36,800 --> 03:29:39,920
attacker is using some sort of

6234
03:29:38,000 --> 03:29:42,239
legitimate service like on render to

6235
03:29:39,920 --> 03:29:44,000
actually submit data, right? And if we

6236
03:29:42,239 --> 03:29:45,279
were an actual victim falling for this,

6237
03:29:44,000 --> 03:29:46,720
well, the attacker just got our

6238
03:29:45,279 --> 03:29:48,760
credentials, right? They were sent over

6239
03:29:46,720 --> 03:29:51,279
to that

6240
03:29:48,760 --> 03:29:53,279
server. So, next we have malware

6241
03:29:51,279 --> 03:29:54,640
delivery. And in a malware delivery

6242
03:29:53,279 --> 03:29:56,640
fishing attack, also known as a

6243
03:29:54,640 --> 03:29:58,160
malicious attachment, uh, of course,

6244
03:29:56,640 --> 03:30:00,080
this is a type of fishing attack where

6245
03:29:58,160 --> 03:30:01,600
the attackers use some sort of email

6246
03:30:00,080 --> 03:30:03,359
that contains an attachment to

6247
03:30:01,600 --> 03:30:05,600
distribute malware infected files to

6248
03:30:03,359 --> 03:30:07,279
their victims. And honestly, often this

6249
03:30:05,600 --> 03:30:09,520
is done under the guise of like a fake

6250
03:30:07,279 --> 03:30:11,680
invoice sent by supposed customers or

6251
03:30:09,520 --> 03:30:13,359
third parties. And you know, depending

6252
03:30:11,680 --> 03:30:14,560
on the amount of effort and research

6253
03:30:13,359 --> 03:30:16,399
done by the attacker in the

6254
03:30:14,560 --> 03:30:18,160
reconnaissance phase, well, an attacker

6255
03:30:16,399 --> 03:30:20,880
might be able to actually spoof real

6256
03:30:18,160 --> 03:30:22,479
customers that a victim interacts with.

6257
03:30:20,880 --> 03:30:24,560
And these attachments are often things

6258
03:30:22,479 --> 03:30:26,560
like PDF documents or spreadsheets or

6259
03:30:24,560 --> 03:30:28,560
executable files. And it's either

6260
03:30:26,560 --> 03:30:30,479
infected with malware itself, or maybe

6261
03:30:28,560 --> 03:30:32,319
it contains malicious macros if it's an

6262
03:30:30,479 --> 03:30:34,319
office document, or maybe it's just a

6263
03:30:32,319 --> 03:30:36,399
benign and normal office document that

6264
03:30:34,319 --> 03:30:38,080
simply contains a URL inside it to

6265
03:30:36,399 --> 03:30:39,680
download a malicious file in something

6266
03:30:38,080 --> 03:30:41,920
what we would call a driveby download

6267
03:30:39,680 --> 03:30:43,760
attack. And a dry download is where

6268
03:30:41,920 --> 03:30:45,600
malware is automatically downloaded onto

6269
03:30:43,760 --> 03:30:47,359
a victim's computer without their

6270
03:30:45,600 --> 03:30:49,760
consent or knowledge, simply by visiting

6271
03:30:47,359 --> 03:30:51,279
a compromised website. And of course, as

6272
03:30:49,760 --> 03:30:53,120
we discussed during the fishing case

6273
03:30:51,279 --> 03:30:55,200
study section, well, these attachments

6274
03:30:53,120 --> 03:30:57,439
or files can often lead to devastating

6275
03:30:55,200 --> 03:30:59,600
ransomware attacks or deploy things like

6276
03:30:57,439 --> 03:31:01,760
remote access trojans that compromise a

6277
03:30:59,600 --> 03:31:04,000
victim's device or demand money or steal

6278
03:31:01,760 --> 03:31:05,600
sensitive information. And we're going

6279
03:31:04,000 --> 03:31:08,160
to cover analyzing fishing attachments

6280
03:31:05,600 --> 03:31:10,160
in more detail later on. So, let's look

6281
03:31:08,160 --> 03:31:12,239
at another example here. So, based on

6282
03:31:10,160 --> 03:31:14,640
the subject line, this appears to be a

6283
03:31:12,239 --> 03:31:16,239
due invoice payment. And based on the

6284
03:31:14,640 --> 03:31:17,840
contents of the email, well, it appears

6285
03:31:16,239 --> 03:31:20,000
they've attached some sort of invoice or

6286
03:31:17,840 --> 03:31:21,840
wire slip for us to take a look at. And

6287
03:31:20,000 --> 03:31:24,279
if we look at the attachment here in our

6288
03:31:21,840 --> 03:31:27,120
email client, we can see we have this

6289
03:31:24,279 --> 03:31:28,800
quotation file. And an ISO file is

6290
03:31:27,120 --> 03:31:31,120
typically an image of an optical disc,

6291
03:31:28,800 --> 03:31:32,319
like a CD or DVD drive. But it's

6292
03:31:31,120 --> 03:31:34,319
actually a common technique for

6293
03:31:32,319 --> 03:31:35,760
attackers to embed malware inside of ISO

6294
03:31:34,319 --> 03:31:38,160
files and distribute them through things

6295
03:31:35,760 --> 03:31:39,760
like fishing emails. And if we were on a

6296
03:31:38,160 --> 03:31:41,600
Windows endpoint, well, we might be able

6297
03:31:39,760 --> 03:31:43,120
to download this file from the email,

6298
03:31:41,600 --> 03:31:45,600
mount it to our system, and then execute

6299
03:31:43,120 --> 03:31:47,760
the malware. Now, we briefly covered

6300
03:31:45,600 --> 03:31:49,680
spear fishing before, but just to recap,

6301
03:31:47,760 --> 03:31:51,439
spear fishing is a targeted form of a

6302
03:31:49,680 --> 03:31:53,680
fishing attack in which attackers craft

6303
03:31:51,439 --> 03:31:55,479
personalized emails aimed at specific

6304
03:31:53,680 --> 03:31:57,520
individuals or groups within the

6305
03:31:55,479 --> 03:31:59,439
organization. And similarly, we have

6306
03:31:57,520 --> 03:32:01,120
whailing attacks. And whaling takes

6307
03:31:59,439 --> 03:32:02,720
spear fishing a step further and

6308
03:32:01,120 --> 03:32:04,800
specifically targets high-profile

6309
03:32:02,720 --> 03:32:06,640
individuals within an organization like

6310
03:32:04,800 --> 03:32:08,080
executives or senior managers or

6311
03:32:06,640 --> 03:32:10,239
individuals that would likely have

6312
03:32:08,080 --> 03:32:12,319
access to sensitive files or have more

6313
03:32:10,239 --> 03:32:14,160
permissions in general. And we also

6314
03:32:12,319 --> 03:32:16,319
covered things like fishing and smishing

6315
03:32:14,160 --> 03:32:18,160
and quishing. Now fishing of course is

6316
03:32:16,319 --> 03:32:19,840
short for voice fishing and is a type of

6317
03:32:18,160 --> 03:32:21,920
fishing attack that's conducted over the

6318
03:32:19,840 --> 03:32:23,200
phone. So in a fishing attack, well

6319
03:32:21,920 --> 03:32:24,720
attackers are going to use social

6320
03:32:23,200 --> 03:32:26,399
engineering techniques to manipulate

6321
03:32:24,720 --> 03:32:28,080
individuals into revealing sensitive

6322
03:32:26,399 --> 03:32:30,239
information like passwords and again

6323
03:32:28,080 --> 03:32:31,920
like credit card numbers or PII. They

6324
03:32:30,239 --> 03:32:33,920
typically do this by impersonating a

6325
03:32:31,920 --> 03:32:36,880
trusted entity like a bank or government

6326
03:32:33,920 --> 03:32:38,960
agency or even IT staff. Similarly, of

6327
03:32:36,880 --> 03:32:40,720
course, smishing is a combination of SMS

6328
03:32:38,960 --> 03:32:42,080
and fishing. And this is a type of

6329
03:32:40,720 --> 03:32:44,399
fishing attack conducted via text

6330
03:32:42,080 --> 03:32:46,560
messages or SMS. And in smissioning

6331
03:32:44,399 --> 03:32:48,720
attacks, attackers will send deceptive

6332
03:32:46,560 --> 03:32:50,479
text messages to individuals, typically

6333
03:32:48,720 --> 03:32:52,319
containing a link to a malicious website

6334
03:32:50,479 --> 03:32:54,399
or promoting the recipient to reply with

6335
03:32:52,319 --> 03:32:55,920
some sort of sensitive information. And

6336
03:32:54,399 --> 03:32:57,600
of course, lastly, we have quishing or

6337
03:32:55,920 --> 03:32:59,840
QR code fishing, which is a type of

6338
03:32:57,600 --> 03:33:01,200
fishing attack that exploits QR codes to

6339
03:32:59,840 --> 03:33:02,720
trick individuals into visiting

6340
03:33:01,200 --> 03:33:04,720
malicious websites or downloading

6341
03:33:02,720 --> 03:33:06,319
malicious content. And with fishing

6342
03:33:04,720 --> 03:33:08,640
attacks, well, attackers are going to

6343
03:33:06,319 --> 03:33:10,560
create QR codes that when a victim scans

6344
03:33:08,640 --> 03:33:13,120
them with their smartphone or some other

6345
03:33:10,560 --> 03:33:14,880
QR code enabled device, it will redirect

6346
03:33:13,120 --> 03:33:16,960
the user to a fishing website or a

6347
03:33:14,880 --> 03:33:18,760
credential capture page or even just

6348
03:33:16,960 --> 03:33:21,200
initiate the download of some sort of

6349
03:33:18,760 --> 03:33:23,279
malware. And quite honestly, this is so

6350
03:33:21,200 --> 03:33:24,960
easy for attackers to do. I just Google

6351
03:33:23,279 --> 03:33:26,720
generate QR code and I have all these

6352
03:33:24,960 --> 03:33:28,399
options to choose from. So, I'm just

6353
03:33:26,720 --> 03:33:30,000
going to click on this one here. And you

6354
03:33:28,399 --> 03:33:31,760
can see that we can generate QR codes

6355
03:33:30,000 --> 03:33:34,000
for all these different types of things.

6356
03:33:31,760 --> 03:33:35,760
For example, a URL or we can send an

6357
03:33:34,000 --> 03:33:38,800
email with predefined text or things

6358
03:33:35,760 --> 03:33:40,319
like displaying a PDF or images. So,

6359
03:33:38,800 --> 03:33:42,560
let's do a quick example here with a

6360
03:33:40,319 --> 03:33:45,040
URL. Suppose we've set up a malicious

6361
03:33:42,560 --> 03:33:46,880
website on example.com. Well, we could

6362
03:33:45,040 --> 03:33:48,560
just put in the address here and

6363
03:33:46,880 --> 03:33:50,960
suddenly we have this QR code that we

6364
03:33:48,560 --> 03:33:52,399
can then distribute. And sure enough, if

6365
03:33:50,960 --> 03:33:54,319
you open the camera app on your phone

6366
03:33:52,399 --> 03:33:56,200
and scan that QR code, well, you're

6367
03:33:54,319 --> 03:33:58,160
going to be redirected to

6368
03:33:56,200 --> 03:34:00,399
example.com. Now, of course, in this

6369
03:33:58,160 --> 03:34:02,160
case, it is not a malicious example, but

6370
03:34:00,399 --> 03:34:04,239
of course, we can put any URL here,

6371
03:34:02,160 --> 03:34:06,160
right? So, any attacker controlled URL

6372
03:34:04,239 --> 03:34:07,319
can quickly and easily be turned into a

6373
03:34:06,160 --> 03:34:10,080
QR

6374
03:34:07,319 --> 03:34:12,000
code. So, next we have business email

6375
03:34:10,080 --> 03:34:14,160
compromise. And this is also sometimes

6376
03:34:12,000 --> 03:34:16,000
known as CEO fraud or email account

6377
03:34:14,160 --> 03:34:17,760
compromise and is typically one of the

6378
03:34:16,000 --> 03:34:19,840
most financially damaging fishing

6379
03:34:17,760 --> 03:34:21,600
attacks. And in a business email

6380
03:34:19,840 --> 03:34:23,359
compromise attack, well, an attacker

6381
03:34:21,600 --> 03:34:25,279
might either spoof or actually gain

6382
03:34:23,359 --> 03:34:27,600
access to a trusted individual's email

6383
03:34:25,279 --> 03:34:29,760
account and use this credibility to

6384
03:34:27,600 --> 03:34:31,279
stage malicious requests. And these

6385
03:34:29,760 --> 03:34:32,880
requests can often come in the form of

6386
03:34:31,279 --> 03:34:35,520
things like unauthorized wire transfers

6387
03:34:32,880 --> 03:34:37,760
or invoice scams. And an example we

6388
03:34:35,520 --> 03:34:39,359
covered before is uh like a company CEO

6389
03:34:37,760 --> 03:34:41,040
asking an assistant to purchase gift

6390
03:34:39,359 --> 03:34:42,560
cards and then send the serial numbers

6391
03:34:41,040 --> 03:34:45,359
of those gift cards over to the

6392
03:34:42,560 --> 03:34:47,200
attacker. And we even covered the 2015

6393
03:34:45,359 --> 03:34:49,359
Ubiquity Networks attack which of course

6394
03:34:47,200 --> 03:34:51,560
led to the loss of 46 million which was

6395
03:34:49,359 --> 03:34:54,399
in fact a business email compromised

6396
03:34:51,560 --> 03:34:56,560
fish. And lastly here, well not all

6397
03:34:54,399 --> 03:34:58,800
suspicious or unwanted emails are actual

6398
03:34:56,560 --> 03:35:00,479
fishing attempts. And you know, spam

6399
03:34:58,800 --> 03:35:02,160
emails, they might not be blatantly

6400
03:35:00,479 --> 03:35:04,000
malicious in nature, but they are

6401
03:35:02,160 --> 03:35:05,760
typically unsolicited bulk emails that

6402
03:35:04,000 --> 03:35:07,439
are sent to a large number of people,

6403
03:35:05,760 --> 03:35:09,680
typically for commercial purposes like

6404
03:35:07,439 --> 03:35:12,000
advertising or uh promoting fraudulent

6405
03:35:09,680 --> 03:35:13,800
or sketchy schemes or dating websites or

6406
03:35:12,000 --> 03:35:16,160
things trying to sell like random junk,

6407
03:35:13,800 --> 03:35:17,920
right? And of course, spam emails can be

6408
03:35:16,160 --> 03:35:20,160
pervasive and persistent, and they can

6409
03:35:17,920 --> 03:35:21,520
be a nuisance for employees. And again,

6410
03:35:20,160 --> 03:35:22,880
while they're not typically malicious,

6411
03:35:21,520 --> 03:35:25,439
they can still carry risks and

6412
03:35:22,880 --> 03:35:27,279
implications. For example, it's possible

6413
03:35:25,439 --> 03:35:29,279
that an email that just appears to be an

6414
03:35:27,279 --> 03:35:30,800
annoying spam email is actually an

6415
03:35:29,279 --> 03:35:32,319
information gathering email used to

6416
03:35:30,800 --> 03:35:33,640
perform reconnaissance on a future

6417
03:35:32,319 --> 03:35:35,760
fishing

6418
03:35:33,640 --> 03:35:37,120
target. So, in general, these are the

6419
03:35:35,760 --> 03:35:38,720
common types of fishing attacks you'll

6420
03:35:37,120 --> 03:35:40,479
see in the wild. And in the next video,

6421
03:35:38,720 --> 03:35:42,319
we'll look at how to actually identify

6422
03:35:40,479 --> 03:35:43,680
fishing attack techniques, and we'll

6423
03:35:42,319 --> 03:35:45,359
cover things like what attackers

6424
03:35:43,680 --> 03:35:48,359
actually do to go about their

6425
03:35:45,359 --> 03:35:48,359
objectives.

6426
03:35:50,080 --> 03:35:52,800
So, we covered the different types of

6427
03:35:51,600 --> 03:35:54,880
fishing attacks that you might come

6428
03:35:52,800 --> 03:35:56,800
across in the field, but what specific

6429
03:35:54,880 --> 03:35:58,399
techniques do attackers employ during

6430
03:35:56,800 --> 03:36:00,640
their fishing campaigns to obiscate

6431
03:35:58,399 --> 03:36:02,000
their methods and deceive their victims?

6432
03:36:00,640 --> 03:36:03,920
Well, let's take a look at a couple

6433
03:36:02,000 --> 03:36:05,600
examples here. And although the list of

6434
03:36:03,920 --> 03:36:06,960
techniques and possibilities remains to

6435
03:36:05,600 --> 03:36:08,439
grow in the field, we'll take a look at

6436
03:36:06,960 --> 03:36:11,439
the most common ones that you might come

6437
03:36:08,439 --> 03:36:13,600
across. So, first we have pretexting.

6438
03:36:11,439 --> 03:36:15,600
And pretexting is a social engineering

6439
03:36:13,600 --> 03:36:18,399
attack used by attackers to manipulate

6440
03:36:15,600 --> 03:36:20,399
individuals under false pretenses. So in

6441
03:36:18,399 --> 03:36:22,399
pretexting scenarios, an attacker will

6442
03:36:20,399 --> 03:36:24,319
create some sort of fabricated story or

6443
03:36:22,399 --> 03:36:26,160
scenario to gain the trust and

6444
03:36:24,319 --> 03:36:27,680
cooperation of their targets. And

6445
03:36:26,160 --> 03:36:29,760
they'll often do this by exploiting

6446
03:36:27,680 --> 03:36:31,520
human emotions like curiosity or in

6447
03:36:29,760 --> 03:36:33,359
general the human willingness to want to

6448
03:36:31,520 --> 03:36:35,200
help others. And many of the methods

6449
03:36:33,359 --> 03:36:36,880
that we covered previously can all play

6450
03:36:35,200 --> 03:36:38,960
a role in establishing a credible

6451
03:36:36,880 --> 03:36:40,720
pretext. So things like spoofing or

6452
03:36:38,960 --> 03:36:42,720
impersonation or establishing

6453
03:36:40,720 --> 03:36:44,720
credibility through using trusted logos

6454
03:36:42,720 --> 03:36:46,720
or messaging within a fishing email. So

6455
03:36:44,720 --> 03:36:48,319
maybe it's an email impersonating the HR

6456
03:36:46,720 --> 03:36:50,080
department asking employees to provide

6457
03:36:48,319 --> 03:36:51,520
their bank account information so that

6458
03:36:50,080 --> 03:36:53,600
they can then update their records to

6459
03:36:51,520 --> 03:36:55,120
ensure they get paid on time. And

6460
03:36:53,600 --> 03:36:57,279
similarly we have spoofing and

6461
03:36:55,120 --> 03:36:58,960
impersonation. So as we just mentioned

6462
03:36:57,279 --> 03:37:01,040
spoofing and impersonation are common

6463
03:36:58,960 --> 03:37:02,720
techniques used by attackers to deceive

6464
03:37:01,040 --> 03:37:04,640
recipients and increase the credibility

6465
03:37:02,720 --> 03:37:06,479
of their emails. And like I said

6466
03:37:04,640 --> 03:37:08,239
earlier, because almost all of the email

6467
03:37:06,479 --> 03:37:09,680
headers can be completely modified and

6468
03:37:08,239 --> 03:37:11,920
spoofed on the attacker's end before

6469
03:37:09,680 --> 03:37:13,920
it's sent, we typically tend to see a

6470
03:37:11,920 --> 03:37:15,840
couple different variations of spoofing.

6471
03:37:13,920 --> 03:37:17,359
So we have email address spoofing. And

6472
03:37:15,840 --> 03:37:19,120
this is where the attacker will spoof

6473
03:37:17,359 --> 03:37:20,560
the sender's email address to make it

6474
03:37:19,120 --> 03:37:22,880
appear as though the email is coming

6475
03:37:20,560 --> 03:37:24,560
from a legitimate source. And we also

6476
03:37:22,880 --> 03:37:26,640
have domain spoofing. So in addition to

6477
03:37:24,560 --> 03:37:28,720
spoofing an individual's email address,

6478
03:37:26,640 --> 03:37:30,319
attackers might spoof an entire domain

6479
03:37:28,720 --> 03:37:31,840
to make their fishing emails appear as

6480
03:37:30,319 --> 03:37:33,680
though they originate from a reputable

6481
03:37:31,840 --> 03:37:35,439
source. So they might actually register

6482
03:37:33,680 --> 03:37:37,279
domain names with similar names to

6483
03:37:35,439 --> 03:37:38,800
legitimate companies and they'll try to

6484
03:37:37,279 --> 03:37:41,040
use this brand recognition to trick

6485
03:37:38,800 --> 03:37:42,720
people into believing the email. But

6486
03:37:41,040 --> 03:37:45,040
attackers can take this one step further

6487
03:37:42,720 --> 03:37:46,800
with URL manipulation. And there are

6488
03:37:45,040 --> 03:37:48,239
actually a number of URL manipulation

6489
03:37:46,800 --> 03:37:50,640
techniques that you should be aware of

6490
03:37:48,239 --> 03:37:52,239
when you're analyzing suspicious emails

6491
03:37:50,640 --> 03:37:54,319
because they're very easy for attackers

6492
03:37:52,239 --> 03:37:56,160
to take advantage of and sometimes it's

6493
03:37:54,319 --> 03:37:58,479
almost impossible to recognize without

6494
03:37:56,160 --> 03:38:00,720
careful inspection. So the first one

6495
03:37:58,479 --> 03:38:02,479
here we have is URL shortening. So

6496
03:38:00,720 --> 03:38:04,399
attackers can leverage URL shortening

6497
03:38:02,479 --> 03:38:06,160
services in emails to obscure their

6498
03:38:04,399 --> 03:38:08,640
malicious links or get around email

6499
03:38:06,160 --> 03:38:11,040
security features. And honestly, this is

6500
03:38:08,640 --> 03:38:12,399
surprisingly easy to do. And while there

6501
03:38:11,040 --> 03:38:14,160
are some security solutions out there

6502
03:38:12,399 --> 03:38:15,680
that will of course detonize and analyze

6503
03:38:14,160 --> 03:38:18,279
the true destination of these shortened

6504
03:38:15,680 --> 03:38:20,800
links, well, this isn't always the

6505
03:38:18,279 --> 03:38:22,720
case. For example, let's showcase one of

6506
03:38:20,800 --> 03:38:24,960
the most popular services for shortening

6507
03:38:22,720 --> 03:38:26,960
URLs, Bitly. But of course, there are

6508
03:38:24,960 --> 03:38:28,800
many others out there like Tiny URL or

6509
03:38:26,960 --> 03:38:30,880
short.io and many more if you just

6510
03:38:28,800 --> 03:38:32,399
Google. And bit.ly is a service that

6511
03:38:30,880 --> 03:38:34,720
allows us to do things like shortening

6512
03:38:32,399 --> 03:38:36,560
URLs or generating QR codes which we

6513
03:38:34,720 --> 03:38:38,479
showcased in the previous video. So if

6514
03:38:36,560 --> 03:38:41,279
we click get started for free, well, we

6515
03:38:38,479 --> 03:38:42,640
can sign up for a free account here. And

6516
03:38:41,279 --> 03:38:44,160
once we're signed in, we're taken to

6517
03:38:42,640 --> 03:38:46,319
this dashboard where we can do a number

6518
03:38:44,160 --> 03:38:49,120
of different things. So let's get

6519
03:38:46,319 --> 03:38:50,640
started and create a short link. So

6520
03:38:49,120 --> 03:38:52,399
let's say we wanted to create a

6521
03:38:50,640 --> 03:38:54,479
shortened link for TCM Security's

6522
03:38:52,399 --> 03:38:56,399
website. Well, I'll just paste in the

6523
03:38:54,479 --> 03:38:58,960
destination there. We can give it a

6524
03:38:56,399 --> 03:39:01,040
title and we can actually create what is

6525
03:38:58,960 --> 03:39:02,960
called a custom back half and this is

6526
03:39:01,040 --> 03:39:04,720
going to be what is shown in the URL

6527
03:39:02,960 --> 03:39:06,840
itself rather than a you know

6528
03:39:04,720 --> 03:39:09,200
automatically generated

6529
03:39:06,840 --> 03:39:10,200
string. So we can actually set this to

6530
03:39:09,200 --> 03:39:12,399
whatever we

6531
03:39:10,200 --> 03:39:14,560
want. And for example if I was trying to

6532
03:39:12,399 --> 03:39:16,399
impersonate a specific bank well I might

6533
03:39:14,560 --> 03:39:18,880
call this banking services or something

6534
03:39:16,399 --> 03:39:20,319
similar right as an attacker. But let's

6535
03:39:18,880 --> 03:39:25,640
just leave it with totally amazing

6536
03:39:20,319 --> 03:39:25,640
website and scroll down to create here.

6537
03:39:26,560 --> 03:39:31,760
You can see we have created the link at

6538
03:39:29,720 --> 03:39:33,239
bit.ly/totallyamazam amazing website.

6539
03:39:31,760 --> 03:39:35,040
And if you were to type this into your

6540
03:39:33,239 --> 03:39:36,720
browser, well, you're going to be

6541
03:39:35,040 --> 03:39:38,720
redirected to the TCM Securities

6542
03:39:36,720 --> 03:39:41,120
website. And so you can see if we were

6543
03:39:38,720 --> 03:39:43,520
to edit this URL to something malicious,

6544
03:39:41,120 --> 03:39:44,880
well, we can just give people this link

6545
03:39:43,520 --> 03:39:47,439
and they would be in the dark as to

6546
03:39:44,880 --> 03:39:48,960
where this link actually takes them. But

6547
03:39:47,439 --> 03:39:51,600
there are some services that we can use

6548
03:39:48,960 --> 03:39:53,640
to expand this link, right? So if we go

6549
03:39:51,600 --> 03:39:56,080
to unshorten.it

6550
03:39:53,640 --> 03:39:59,080
it. Well, we can paste in our bit.ly

6551
03:39:56,080 --> 03:40:01,680
link here and we click on unshorten

6552
03:39:59,080 --> 03:40:03,600
it and you can see it actually detonates

6553
03:40:01,680 --> 03:40:05,520
that link for us and follows all of the

6554
03:40:03,600 --> 03:40:08,160
redirects. So, in this case, we can see

6555
03:40:05,520 --> 03:40:08,160
where it's actually

6556
03:40:08,279 --> 03:40:13,120
going. So, next we have subdomain

6557
03:40:10,880 --> 03:40:15,040
spoofing. And subdomain spoofing is a

6558
03:40:13,120 --> 03:40:17,600
technique used by attackers to deceive

6559
03:40:15,040 --> 03:40:19,760
users by creating a fraudulent subdomain

6560
03:40:17,600 --> 03:40:21,520
that mimics a legitimate one. And this

6561
03:40:19,760 --> 03:40:24,120
method capitalizes on the trust that

6562
03:40:21,520 --> 03:40:26,319
users have in well-known domains or

6563
03:40:24,120 --> 03:40:28,560
subdomains. And this is actually a very

6564
03:40:26,319 --> 03:40:30,479
common tactic. So suppose a malicious

6565
03:40:28,560 --> 03:40:33,279
email that is sent from a real mailbox

6566
03:40:30,479 --> 03:40:35,040
of google.mmalicious site.com or within

6567
03:40:33,279 --> 03:40:37,520
a URL in an email that leads to

6568
03:40:35,040 --> 03:40:37,520
something like

6569
03:40:38,040 --> 03:40:41,600
facebook.loginsystems.co.uk. In this

6570
03:40:39,359 --> 03:40:43,040
case, these are legitimate domains. The

6571
03:40:41,600 --> 03:40:44,319
headers don't even need to be spoofed.

6572
03:40:43,040 --> 03:40:46,160
These are simply just malicious

6573
03:40:44,319 --> 03:40:48,560
subdomains registered under a

6574
03:40:46,160 --> 03:40:49,840
non-affiliated base domain. So the

6575
03:40:48,560 --> 03:40:51,359
companies that are being impersonated

6576
03:40:49,840 --> 03:40:53,359
like Google and Facebook have no

6577
03:40:51,359 --> 03:40:54,800
affiliation with this base domain, but

6578
03:40:53,359 --> 03:40:57,120
the attacker makes it look as though

6579
03:40:54,800 --> 03:40:59,359
they do. So someone not paying attention

6580
03:40:57,120 --> 03:41:01,040
might immediately assume the URL is safe

6581
03:40:59,359 --> 03:41:02,960
because it begins with Facebook or

6582
03:41:01,040 --> 03:41:04,319
contains Google in the URL. And these

6583
03:41:02,960 --> 03:41:06,560
are organizations that they would

6584
03:41:04,319 --> 03:41:08,720
typically trust. So next, let's talk

6585
03:41:06,560 --> 03:41:11,200
about a really interesting attack,

6586
03:41:08,720 --> 03:41:13,520
homographs. Now, technically speaking,

6587
03:41:11,200 --> 03:41:15,520
in grammar, a homograph is a word that

6588
03:41:13,520 --> 03:41:17,040
shares the same written form or spelling

6589
03:41:15,520 --> 03:41:19,840
as another word, but has a different

6590
03:41:17,040 --> 03:41:22,800
meaning. For example, bas in the fish,

6591
03:41:19,840 --> 03:41:24,479
or bass, the instrument. A similar

6592
03:41:22,800 --> 03:41:26,000
technique is sometimes done with domain

6593
03:41:24,479 --> 03:41:28,560
names to impersonate an actual

6594
03:41:26,000 --> 03:41:30,560
legitimate domain with a malicious copy.

6595
03:41:28,560 --> 03:41:32,160
So, in the context of fishing attacks,

6596
03:41:30,560 --> 03:41:34,239
attackers can use characters from

6597
03:41:32,160 --> 03:41:36,319
different character sets like cerillic

6598
03:41:34,239 --> 03:41:38,880
or Greek or Latin that resemble

6599
03:41:36,319 --> 03:41:40,720
legitimate characters in a URL. This

6600
03:41:38,880 --> 03:41:42,640
makes a URL visually similar to the

6601
03:41:40,720 --> 03:41:45,040
legitimate one but leads to a different

6602
03:41:42,640 --> 03:41:46,399
website. And so this specific method is

6603
03:41:45,040 --> 03:41:48,720
sometimes referred to as an

6604
03:41:46,399 --> 03:41:51,840
internationalized domain name or an IDN

6605
03:41:48,720 --> 03:41:53,880
homograph attack. And so can you tell

6606
03:41:51,840 --> 03:41:56,399
the difference between these two

6607
03:41:53,880 --> 03:41:58,080
domains? In this case with this font and

6608
03:41:56,399 --> 03:41:59,920
rendering you actually can't. But

6609
03:41:58,080 --> 03:42:02,319
there's a slight difference. In the

6610
03:41:59,920 --> 03:42:03,920
second domain, the C character has

6611
03:42:02,319 --> 03:42:06,399
actually been replaced with the cerillic

6612
03:42:03,920 --> 03:42:08,880
lowercase C, which looks identical to

6613
03:42:06,399 --> 03:42:11,520
the Latin lowercase C, but is a distinct

6614
03:42:08,880 --> 03:42:13,120
character in Unicode. So, visually, both

6615
03:42:11,520 --> 03:42:14,720
these domains appear the same, but they

6616
03:42:13,120 --> 03:42:17,680
are technically different due to the

6617
03:42:14,720 --> 03:42:18,960
character used. And so, how do attackers

6618
03:42:17,680 --> 03:42:20,479
actually come up with these domain

6619
03:42:18,960 --> 03:42:22,359
names? Well, they might use something

6620
03:42:20,479 --> 03:42:24,479
like this homoglyph attack

6621
03:42:22,359 --> 03:42:26,000
generator. So, first we would type in

6622
03:42:24,479 --> 03:42:28,080
the name of the legitimate domain that

6623
03:42:26,000 --> 03:42:29,840
we're trying to mimic. And you can see

6624
03:42:28,080 --> 03:42:32,160
here as we were doing that, it generated

6625
03:42:29,840 --> 03:42:33,760
all these different options for us. So

6626
03:42:32,160 --> 03:42:35,840
for example, we can replace the C with

6627
03:42:33,760 --> 03:42:37,880
all these different options or maybe the

6628
03:42:35,840 --> 03:42:40,640
M or the

6629
03:42:37,880 --> 03:42:42,560
S. And if we scroll down, we can see our

6630
03:42:40,640 --> 03:42:44,000
generated domain here. So obviously we

6631
03:42:42,560 --> 03:42:45,920
chose a capital M here, which is not

6632
03:42:44,000 --> 03:42:47,880
very smart. We can see some of the other

6633
03:42:45,920 --> 03:42:50,239
characters are pretty

6634
03:42:47,880 --> 03:42:51,920
close. On the topic of homograph

6635
03:42:50,239 --> 03:42:54,239
attacks, we have the general technique

6636
03:42:51,920 --> 03:42:56,239
of typo squatting. And typo squatting,

6637
03:42:54,239 --> 03:42:58,239
which is also known as URL hijacking or

6638
03:42:56,239 --> 03:43:00,319
domain squatting, is a technique that

6639
03:42:58,239 --> 03:43:02,239
exploits common typographical errors

6640
03:43:00,319 --> 03:43:04,720
made by users when looking at domains or

6641
03:43:02,239 --> 03:43:06,319
URLs. And so by registering domain names

6642
03:43:04,720 --> 03:43:08,080
that closely resemble popular or

6643
03:43:06,319 --> 03:43:09,760
well-known websites, well, an attacker

6644
03:43:08,080 --> 03:43:11,680
can trick a victim into thinking that an

6645
03:43:09,760 --> 03:43:14,239
email was sent by a legitimate sender or

6646
03:43:11,680 --> 03:43:16,720
a URL in an email is legitimate as well.

6647
03:43:14,239 --> 03:43:18,600
For example, instead of linked.com, an

6648
03:43:16,720 --> 03:43:20,880
attacker could purchase and register

6649
03:43:18,600 --> 03:43:23,439
linked.com with the simple omission of

6650
03:43:20,880 --> 03:43:25,359
the second I character. And you know a

6651
03:43:23,439 --> 03:43:27,680
user who is not paying close attention

6652
03:43:25,359 --> 03:43:28,720
might not notice this in an email. And

6653
03:43:27,680 --> 03:43:30,560
there are actually different types of

6654
03:43:28,720 --> 03:43:33,199
typos squatting techniques and we can

6655
03:43:30,560 --> 03:43:35,040
use a service like DNS twist to identify

6656
03:43:33,199 --> 03:43:37,680
potential typos squatting vectors for

6657
03:43:35,040 --> 03:43:39,199
our or any domain. So this is actually a

6658
03:43:37,680 --> 03:43:41,680
Python tool in which I'll have linked

6659
03:43:39,199 --> 03:43:43,439
down below but we can run it to find

6660
03:43:41,680 --> 03:43:45,760
lookalike domains that adversaries can

6661
03:43:43,439 --> 03:43:47,439
use to attack us. Alternatively, this is

6662
03:43:45,760 --> 03:43:48,880
actually something hosted on the web as

6663
03:43:47,439 --> 03:43:51,279
well. So we don't actually need to

6664
03:43:48,880 --> 03:43:53,399
download this and run it locally. So in

6665
03:43:51,279 --> 03:43:56,560
this case we can just put in a

6666
03:43:53,399 --> 03:43:57,920
URL and it will scan it for us and it

6667
03:43:56,560 --> 03:43:59,880
will start generating all these

6668
03:43:57,920 --> 03:44:02,000
different types of typo squatting

6669
03:43:59,880 --> 03:44:04,000
vectors. And we can see here the ones

6670
03:44:02,000 --> 03:44:06,239
with IP addresses and name servers have

6671
03:44:04,000 --> 03:44:07,439
actually been registered already. We

6672
03:44:06,239 --> 03:44:08,880
have different types here, right? We

6673
03:44:07,439 --> 03:44:11,359
have additions. So in this case we have

6674
03:44:08,880 --> 03:44:12,800
linked N with two N's. And if we scroll

6675
03:44:11,359 --> 03:44:15,439
down we can actually start to see some

6676
03:44:12,800 --> 03:44:17,279
homoglyph or homograph attacks. And this

6677
03:44:15,439 --> 03:44:19,080
one is omitting the I character in favor

6678
03:44:17,279 --> 03:44:21,520
for something that looks somewhat

6679
03:44:19,080 --> 03:44:23,120
similar. And you can see just how many

6680
03:44:21,520 --> 03:44:24,880
of these have been registered and

6681
03:44:23,120 --> 03:44:27,359
probably used for fishing campaigns in

6682
03:44:24,880 --> 03:44:29,279
the past. But many organizations will

6683
03:44:27,359 --> 03:44:31,680
proactively purchase some common typos

6684
03:44:29,279 --> 03:44:34,399
squat domains to prevent malicious uses.

6685
03:44:31,680 --> 03:44:37,160
For example, facebook.com with only one

6686
03:44:34,399 --> 03:44:39,600
O redirects to the legitimate

6687
03:44:37,160 --> 03:44:43,120
facebook.com. Goggle.com without the

6688
03:44:39,600 --> 03:44:44,800
second O redirects to google.com. And

6689
03:44:43,120 --> 03:44:46,399
actually, one of my first projects as a

6690
03:44:44,800 --> 03:44:48,800
junior security analyst years and years

6691
03:44:46,399 --> 03:44:50,960
ago was to build a tool very similar to

6692
03:44:48,800 --> 03:44:52,720
that DNS twist tool. And it was so that

6693
03:44:50,960 --> 03:44:54,560
our sock could proactively get alerted

6694
03:44:52,720 --> 03:44:56,479
on potential typos squatting domains if

6695
03:44:54,560 --> 03:44:57,920
they were to be registered and to also

6696
03:44:56,479 --> 03:44:59,520
provide a report on domains that we

6697
03:44:57,920 --> 03:45:01,920
could proactively purchase to mitigate

6698
03:44:59,520 --> 03:45:03,840
these attacks. And so next here we have

6699
03:45:01,920 --> 03:45:05,600
encoding. And encoding is a technique

6700
03:45:03,840 --> 03:45:07,920
that can sometimes be used by attackers

6701
03:45:05,600 --> 03:45:10,319
to obiscate malicious content or evade

6702
03:45:07,920 --> 03:45:11,760
automated detection. And sometimes this

6703
03:45:10,319 --> 03:45:13,279
is done on the email body content

6704
03:45:11,760 --> 03:45:15,680
itself, right? It could be using

6705
03:45:13,279 --> 03:45:18,000
something like B 64 or URL encoding or

6706
03:45:15,680 --> 03:45:19,600
HTML encoding to slightly obiscate the

6707
03:45:18,000 --> 03:45:21,920
contents of an email message until it

6708
03:45:19,600 --> 03:45:24,080
gets rendered in the email client. Just

6709
03:45:21,920 --> 03:45:27,199
as a very simple example, let's open

6710
03:45:24,080 --> 03:45:30,000
this encoded attachment here. And you

6711
03:45:27,199 --> 03:45:32,239
can see we have a very simple email here

6712
03:45:30,000 --> 03:45:34,399
with a hyperlink to proceed to wallet

6713
03:45:32,239 --> 03:45:37,520
verification, which of course this leads

6714
03:45:34,399 --> 03:45:39,040
to a credential capture page. And

6715
03:45:37,520 --> 03:45:40,720
although it looks very simple when it's

6716
03:45:39,040 --> 03:45:42,479
rendered, let's take a look at its

6717
03:45:40,720 --> 03:45:44,720
source to see what components make up

6718
03:45:42,479 --> 03:45:44,720
the

6719
03:45:47,160 --> 03:45:51,199
email. And if we scroll down past the

6720
03:45:49,520 --> 03:45:53,680
normal headers, well, we're going to see

6721
03:45:51,199 --> 03:45:56,160
a very long string of seemingly random

6722
03:45:53,680 --> 03:45:57,840
data at the bottom of this email. And we

6723
03:45:56,160 --> 03:45:59,279
don't actually see what we saw in our

6724
03:45:57,840 --> 03:46:01,120
email client, right? We don't see this

6725
03:45:59,279 --> 03:46:03,439
hyperlink with the proceed to wallet

6726
03:46:01,120 --> 03:46:05,359
verification. Instead, we just see this

6727
03:46:03,439 --> 03:46:07,359
long string of text, which as we can

6728
03:46:05,359 --> 03:46:09,800
infer from the content transfer encoding

6729
03:46:07,359 --> 03:46:13,520
header here, it is a string of B 64

6730
03:46:09,800 --> 03:46:14,960
text. So, let's copy this long string.

6731
03:46:13,520 --> 03:46:16,560
So, I'm just going to open a terminal

6732
03:46:14,960 --> 03:46:19,520
window here, and I'm going to echo out

6733
03:46:16,560 --> 03:46:21,040
that long B 64 string that we copied.

6734
03:46:19,520 --> 03:46:23,680
And of course, echoing it out like this

6735
03:46:21,040 --> 03:46:25,840
is not going to do anything interesting.

6736
03:46:23,680 --> 03:46:28,479
But what I can do is echo this out and

6737
03:46:25,840 --> 03:46:30,640
pipe it to the base 64 command. And then

6738
03:46:28,479 --> 03:46:31,560
I'm going to provide the tac d argument

6739
03:46:30,640 --> 03:46:34,000
to

6740
03:46:31,560 --> 03:46:36,560
decode. And you can see here it actually

6741
03:46:34,000 --> 03:46:38,880
managed to decode that URL that we saw

6742
03:46:36,560 --> 03:46:40,640
in the email when it was rendered. And

6743
03:46:38,880 --> 03:46:42,640
so that was just a very simple example

6744
03:46:40,640 --> 03:46:44,239
of B 64 encoding. But we're going to

6745
03:46:42,640 --> 03:46:46,640
cover encoding in more detail later on

6746
03:46:44,239 --> 03:46:48,080
in the course. As we discussed

6747
03:46:46,640 --> 03:46:50,160
previously, and we'll do so in more

6748
03:46:48,080 --> 03:46:52,160
detail shortly, a common technique in

6749
03:46:50,160 --> 03:46:54,399
fishing emails is to include a malicious

6750
03:46:52,160 --> 03:46:56,000
attachment or even a benign attachment

6751
03:46:54,399 --> 03:46:57,520
that eventually leads to a victim

6752
03:46:56,000 --> 03:46:58,520
downloading a malicious payload and

6753
03:46:57,520 --> 03:47:00,880
being

6754
03:46:58,520 --> 03:47:03,359
compromised. We also have abuse of

6755
03:47:00,880 --> 03:47:05,279
legitimate services. So, interestingly,

6756
03:47:03,359 --> 03:47:07,359
an attacker doesn't always have to rely

6757
03:47:05,279 --> 03:47:09,120
on their own means to deliver and host

6758
03:47:07,359 --> 03:47:11,439
malware and weaponize content shared

6759
03:47:09,120 --> 03:47:13,120
within their emails. Attackers

6760
03:47:11,439 --> 03:47:15,199
frequently exploit legitimate file

6761
03:47:13,120 --> 03:47:17,920
sharing and collaboration services such

6762
03:47:15,199 --> 03:47:19,920
as Google Drive or Dropbox and many

6763
03:47:17,920 --> 03:47:21,359
others to facilitate their fishing

6764
03:47:19,920 --> 03:47:24,000
campaigns and distribute malicious

6765
03:47:21,359 --> 03:47:25,520
content to users. And so by leveraging

6766
03:47:24,000 --> 03:47:27,040
the trusted reputation of these

6767
03:47:25,520 --> 03:47:28,560
platforms, attackers can evade

6768
03:47:27,040 --> 03:47:30,560
traditional email filters and security

6769
03:47:28,560 --> 03:47:31,960
controls, making it easier to get to

6770
03:47:30,560 --> 03:47:34,319
their victim's

6771
03:47:31,960 --> 03:47:35,520
inbox. And so an attacker would upload

6772
03:47:34,319 --> 03:47:37,840
their fishing content like their

6773
03:47:35,520 --> 03:47:39,359
malicious document or an executable to a

6774
03:47:37,840 --> 03:47:41,120
file sharing platform like Google Drive

6775
03:47:39,359 --> 03:47:42,960
or Dropbox. They might even password

6776
03:47:41,120 --> 03:47:44,319
protect it and zip the file so that it

6777
03:47:42,960 --> 03:47:46,560
can't be sort of detonated by any

6778
03:47:44,319 --> 03:47:48,160
automated means. They'll then distribute

6779
03:47:46,560 --> 03:47:49,760
the links or the public sharing links to

6780
03:47:48,160 --> 03:47:51,680
these hosted files within their fishing

6781
03:47:49,760 --> 03:47:53,279
emails and include some sort of call to

6782
03:47:51,680 --> 03:47:55,439
action for users to click on the links

6783
03:47:53,279 --> 03:47:57,359
and access the malicious content. And

6784
03:47:55,439 --> 03:47:59,600
because the URL is legitimately coming

6785
03:47:57,359 --> 03:48:00,960
from Google or Dropbox and the former

6786
03:47:59,600 --> 03:48:02,479
almost always being trusted within

6787
03:48:00,960 --> 03:48:04,560
environments, maybe not so much for

6788
03:48:02,479 --> 03:48:06,640
Dropbox, but definitely Google, these

6789
03:48:04,560 --> 03:48:08,160
URLs will often go undetected and

6790
03:48:06,640 --> 03:48:09,840
there's nothing preventing users from

6791
03:48:08,160 --> 03:48:12,120
downloading these files until their

6792
03:48:09,840 --> 03:48:14,880
endpoint security hopefully kicks

6793
03:48:12,120 --> 03:48:16,720
in. So to hopefully demonstrate the use

6794
03:48:14,880 --> 03:48:18,560
of a legitimate service, well, I'm using

6795
03:48:16,720 --> 03:48:20,560
a site called Fish Tank. And you can

6796
03:48:18,560 --> 03:48:22,560
think of this as a big repository of

6797
03:48:20,560 --> 03:48:24,160
potentially malicious URLs that people

6798
03:48:22,560 --> 03:48:25,439
can submit from all over the world.

6799
03:48:24,160 --> 03:48:27,920
We're going to cover this in more detail

6800
03:48:25,439 --> 03:48:29,439
in the URL analysis lesson, but for now,

6801
03:48:27,920 --> 03:48:31,120
I just looked at some of the most recent

6802
03:48:29,439 --> 03:48:32,880
submissions, and I can already see a

6803
03:48:31,120 --> 03:48:34,239
docs.google address right here,

6804
03:48:32,880 --> 03:48:37,199
indicating that someone is trying to

6805
03:48:34,239 --> 03:48:38,560
abuse Google Docs to fish someone. And

6806
03:48:37,199 --> 03:48:40,160
so, I'm just going to click on this

6807
03:48:38,560 --> 03:48:42,239
submission right here, and I'm going to

6808
03:48:40,160 --> 03:48:44,720
copy the URL to see if we can find out

6809
03:48:42,239 --> 03:48:46,479
what's being hosted. And so, again, this

6810
03:48:44,720 --> 03:48:48,000
is something you should not do, but

6811
03:48:46,479 --> 03:48:49,760
considering I'm in a VM, and I'm just

6812
03:48:48,000 --> 03:48:51,199
doing this for research purposes, I'm

6813
03:48:49,760 --> 03:48:53,439
going to see what is actually being

6814
03:48:51,199 --> 03:48:55,359
hosted here.

6815
03:48:53,439 --> 03:48:57,439
Okay, so very interesting. It appears to

6816
03:48:55,359 --> 03:48:59,520
be hosting some sort of image. And this

6817
03:48:57,439 --> 03:49:02,239
is of course an Amazon account lockout

6818
03:48:59,520 --> 03:49:04,000
image. This is not actual HTML. This

6819
03:49:02,239 --> 03:49:06,560
again just appears to be an image of

6820
03:49:04,000 --> 03:49:08,880
some sort. But it also has a hyperlink.

6821
03:49:06,560 --> 03:49:10,319
And if we just copy this link, well,

6822
03:49:08,880 --> 03:49:12,560
I'll just showcase it in a terminal

6823
03:49:10,319 --> 03:49:13,920
window. I'm going to paste it here. And

6824
03:49:12,560 --> 03:49:15,520
we can see some very interesting things

6825
03:49:13,920 --> 03:49:18,160
here. So it looks like it's using an

6826
03:49:15,520 --> 03:49:20,399
actual google.com base URL here, but

6827
03:49:18,160 --> 03:49:22,760
it's passing in an additional uh shorten

6828
03:49:20,399 --> 03:49:24,880
URL using bit.ly within this query

6829
03:49:22,760 --> 03:49:26,720
parameter. And so we could go ahead and

6830
03:49:24,880 --> 03:49:28,000
try to unshorten this like we've done

6831
03:49:26,720 --> 03:49:29,439
before and see what is actually on

6832
03:49:28,000 --> 03:49:32,239
there. But I think this sort of

6833
03:49:29,439 --> 03:49:34,319
demonstrates the point. And in this

6834
03:49:32,239 --> 03:49:37,000
case, we have a fishing attempt with a

6835
03:49:34,319 --> 03:49:39,279
malicious URL hosted on the

6836
03:49:37,000 --> 03:49:40,960
docs.google.com domain, which is most

6837
03:49:39,279 --> 03:49:42,720
likely not something that's going to get

6838
03:49:40,960 --> 03:49:44,319
flagged within many organizations

6839
03:49:42,720 --> 03:49:46,640
because of course this is actually

6840
03:49:44,319 --> 03:49:48,319
belonging to Google. And we can see the

6841
03:49:46,640 --> 03:49:49,720
certificate here is actually signed by

6842
03:49:48,319 --> 03:49:51,840
Google Trust

6843
03:49:49,720 --> 03:49:53,760
Services. And lastly here we have

6844
03:49:51,840 --> 03:49:55,920
farming. And farming is typically a

6845
03:49:53,760 --> 03:49:57,600
two-step technique. The first being more

6846
03:49:55,920 --> 03:49:59,199
so what we've covered before where an

6847
03:49:57,600 --> 03:50:00,640
attacker will redirect a user to a

6848
03:49:59,199 --> 03:50:03,120
fraudulent website that closely

6849
03:50:00,640 --> 03:50:04,720
resembles a legitimate one. And so as

6850
03:50:03,120 --> 03:50:07,279
such, this technique is often used to

6851
03:50:04,720 --> 03:50:08,880
perform credential harvesting attacks.

6852
03:50:07,279 --> 03:50:10,640
But it's a two-step process because

6853
03:50:08,880 --> 03:50:12,640
unlike other methods of spoofing or

6854
03:50:10,640 --> 03:50:14,800
impersonating, which we've talked about,

6855
03:50:12,640 --> 03:50:16,880
farming actually requires configurations

6856
03:50:14,800 --> 03:50:18,800
or malicious code to run on a victim's

6857
03:50:16,880 --> 03:50:20,720
computer or within their DNS server to

6858
03:50:18,800 --> 03:50:23,040
redirect the actual traffic to the

6859
03:50:20,720 --> 03:50:24,560
attackers's controlled website. And so

6860
03:50:23,040 --> 03:50:26,479
we have malwarebased farming which

6861
03:50:24,560 --> 03:50:28,880
occurs when a user unknowingly downloads

6862
03:50:26,479 --> 03:50:30,720
malware like a Trojan or a virus. And

6863
03:50:28,880 --> 03:50:32,479
this malware can then get in front of a

6864
03:50:30,720 --> 03:50:34,640
user's web traffic and redirect them

6865
03:50:32,479 --> 03:50:36,720
accordingly. On the other hand, DNS

6866
03:50:34,640 --> 03:50:39,520
server poisoning involves manipulating

6867
03:50:36,720 --> 03:50:42,239
the actual DNS servers or a user's local

6868
03:50:39,520 --> 03:50:44,239
host file or caches to then redirect the

6869
03:50:42,239 --> 03:50:46,800
user to a fake IP address instead of

6870
03:50:44,239 --> 03:50:46,800
legitimate

6871
03:50:48,279 --> 03:50:52,239
websites. In the immediate lessons

6872
03:50:50,560 --> 03:50:54,560
following this one, we're going to cover

6873
03:50:52,239 --> 03:50:56,960
a number of techniques and tools that we

6874
03:50:54,560 --> 03:50:59,439
can use to extract artifacts and analyze

6875
03:50:56,960 --> 03:51:01,600
emails. However, the key as I've

6876
03:50:59,439 --> 03:51:03,439
mentioned to effective email analysis

6877
03:51:01,600 --> 03:51:05,520
lies in establishing a structured

6878
03:51:03,439 --> 03:51:07,520
methodology that we can consistently

6879
03:51:05,520 --> 03:51:09,279
apply across various situations

6880
03:51:07,520 --> 03:51:11,520
irrespective of what tools we have

6881
03:51:09,279 --> 03:51:13,279
available to us. Right? So, your

6882
03:51:11,520 --> 03:51:15,439
methodology doesn't have to be exactly

6883
03:51:13,279 --> 03:51:17,279
as follows, but definitely consider

6884
03:51:15,439 --> 03:51:19,120
several of these essential steps as a

6885
03:51:17,279 --> 03:51:21,439
good starting point. So, first we're

6886
03:51:19,120 --> 03:51:23,439
going to need to do some initial triage.

6887
03:51:21,439 --> 03:51:25,600
And so upon receiving a suspected

6888
03:51:23,439 --> 03:51:28,000
fishing email, well, the initial step is

6889
03:51:25,600 --> 03:51:30,720
to conduct triage to quickly assess its

6890
03:51:28,000 --> 03:51:32,239
potential threat level. So this involves

6891
03:51:30,720 --> 03:51:34,239
identifying key attributes like the

6892
03:51:32,239 --> 03:51:35,920
sender details or the subject line or

6893
03:51:34,239 --> 03:51:38,239
other urgency indicators that we can

6894
03:51:35,920 --> 03:51:39,600
identify. And so triage helps us in

6895
03:51:38,239 --> 03:51:41,520
determining the appropriate level of

6896
03:51:39,600 --> 03:51:43,600
response and the appropriate timing of a

6897
03:51:41,520 --> 03:51:45,840
response and allocation of resources to

6898
03:51:43,600 --> 03:51:47,439
do our further analysis. So to put it

6899
03:51:45,840 --> 03:51:49,279
simply, in the triage stage, we need to

6900
03:51:47,439 --> 03:51:51,520
quickly assess and prioritize potential

6901
03:51:49,279 --> 03:51:53,520
impact, which will allow us to focus on

6902
03:51:51,520 --> 03:51:54,960
what's most pressing. For example, maybe

6903
03:51:53,520 --> 03:51:56,800
we have an email that initially looks

6904
03:51:54,960 --> 03:51:58,560
like spam that was sent to one employee

6905
03:51:56,800 --> 03:52:00,439
versus a reported email containing an

6906
03:51:58,560 --> 03:52:02,560
attachment that was sent to a number of

6907
03:52:00,439 --> 03:52:04,160
executives. And so next, as we alluded

6908
03:52:02,560 --> 03:52:06,000
to earlier, the header of an email

6909
03:52:04,160 --> 03:52:08,000
contains valuable metadata that we can

6910
03:52:06,000 --> 03:52:10,560
use to quickly analyze and assess its

6911
03:52:08,000 --> 03:52:12,000
true origin. So, an examination of an

6912
03:52:10,560 --> 03:52:13,359
email header will involve things like

6913
03:52:12,000 --> 03:52:15,359
looking at the routing path an email

6914
03:52:13,359 --> 03:52:17,760
took through the internet or the sender

6915
03:52:15,359 --> 03:52:19,600
IP address or the domain authenticity

6916
03:52:17,760 --> 03:52:21,920
and maybe if we can identify anomalies

6917
03:52:19,600 --> 03:52:23,359
or signs of spoofing. And so, when we do

6918
03:52:21,920 --> 03:52:24,800
sender examination, well, that's going

6919
03:52:23,359 --> 03:52:27,040
to include things like verifying the

6920
03:52:24,800 --> 03:52:28,560
sender's identity. For example, you

6921
03:52:27,040 --> 03:52:30,800
know, is this really a Microsoft owned

6922
03:52:28,560 --> 03:52:32,800
domain? Well, if we do a reverse DNS

6923
03:52:30,800 --> 03:52:35,120
lookup, what is the email server that

6924
03:52:32,800 --> 03:52:37,359
returns? Is it Microsoft owned? Did this

6925
03:52:35,120 --> 03:52:38,319
email pass an SPF and DKIM check? Well,

6926
03:52:37,359 --> 03:52:41,040
these are all things that we're going to

6927
03:52:38,319 --> 03:52:43,199
cover in the next lesson. And so, next,

6928
03:52:41,040 --> 03:52:45,120
we want to do some content examination.

6929
03:52:43,199 --> 03:52:47,120
And this involves analyzing the body of

6930
03:52:45,120 --> 03:52:48,880
the email for any suspicious elements

6931
03:52:47,120 --> 03:52:50,680
like grammatical errors or generic

6932
03:52:48,880 --> 03:52:52,800
greetings or unusual or awkward

6933
03:52:50,680 --> 03:52:54,720
language. And sometimes we can catch

6934
03:52:52,800 --> 03:52:57,040
some immediate red flags, even as far

6935
03:52:54,720 --> 03:52:58,399
back as in the initial triage stage. And

6936
03:52:57,040 --> 03:53:00,319
these red flags might really give an

6937
03:52:58,399 --> 03:53:01,840
email away as being fishing. However, we

6938
03:53:00,319 --> 03:53:04,000
can't always assume, which is why we

6939
03:53:01,840 --> 03:53:05,439
have to have this methodology. And we

6940
03:53:04,000 --> 03:53:06,880
can also look for any common social

6941
03:53:05,439 --> 03:53:09,199
engineering techniques that we looked at

6942
03:53:06,880 --> 03:53:11,840
earlier. So things like urgency or trust

6943
03:53:09,199 --> 03:53:13,439
or authority or scarcity. Fishing emails

6944
03:53:11,840 --> 03:53:15,120
will often contain course of language

6945
03:53:13,439 --> 03:53:18,080
and requests for sensitive information

6946
03:53:15,120 --> 03:53:20,080
or call to actions. Next, we'll want to

6947
03:53:18,080 --> 03:53:22,000
look at the web and URL artifacts,

6948
03:53:20,080 --> 03:53:23,680
right? So URLs embedded within fishing

6949
03:53:22,000 --> 03:53:26,080
emails need to be analyzed to determine

6950
03:53:23,680 --> 03:53:27,760
their legitimacy and their destination.

6951
03:53:26,080 --> 03:53:30,160
If we're faced with an oddlooking or

6952
03:53:27,760 --> 03:53:31,680
maybe worse a shortened URL, well, we

6953
03:53:30,160 --> 03:53:33,920
can employ various techniques such as

6954
03:53:31,680 --> 03:53:36,080
URL parsing or URL detonation and

6955
03:53:33,920 --> 03:53:37,760
scanning and domain reputation checks to

6956
03:53:36,080 --> 03:53:40,160
assess the risk associated with

6957
03:53:37,760 --> 03:53:42,000
accessing the link content. And like

6958
03:53:40,160 --> 03:53:43,840
with any URL artifacts that we find,

6959
03:53:42,000 --> 03:53:46,160
well, any email attachments also need to

6960
03:53:43,840 --> 03:53:47,600
be investigated. And so, we'll employ

6961
03:53:46,160 --> 03:53:49,600
malware analysis techniques like

6962
03:53:47,600 --> 03:53:51,760
sandboxing and file signature analysis

6963
03:53:49,600 --> 03:53:53,279
and behavioral analysis. These can all

6964
03:53:51,760 --> 03:53:55,760
be done through manual and automated

6965
03:53:53,279 --> 03:53:57,600
scanning means. But most commonly at

6966
03:53:55,760 --> 03:53:59,199
least the file hashes need to be safely

6967
03:53:57,600 --> 03:54:00,720
extracted as artifacts and reviewed

6968
03:53:59,199 --> 03:54:03,279
through a malware database to determine

6969
03:54:00,720 --> 03:54:04,960
if it's a known malware sample. And in

6970
03:54:03,279 --> 03:54:06,720
addition to the hands-on analysis we

6971
03:54:04,960 --> 03:54:08,640
perform, well, we should also include

6972
03:54:06,720 --> 03:54:10,640
some holistic analysis and consider the

6973
03:54:08,640 --> 03:54:12,399
broader organizational context as well

6974
03:54:10,640 --> 03:54:14,720
as recent security incidents to gauge

6975
03:54:12,399 --> 03:54:16,080
the credibility of a fishing email. So

6976
03:54:14,720 --> 03:54:17,680
we can look at patterns within our

6977
03:54:16,080 --> 03:54:19,199
organization or look in our ticket

6978
03:54:17,680 --> 03:54:21,199
system for recent or similar fishing

6979
03:54:19,199 --> 03:54:23,040
emails. You know, maybe we assess the

6980
03:54:21,199 --> 03:54:24,880
scope and look at the IoC's or artifacts

6981
03:54:23,040 --> 03:54:26,319
that we've identified and perform almost

6982
03:54:24,880 --> 03:54:28,160
a mini threat hunt over the

6983
03:54:26,319 --> 03:54:30,080
organization's email system to see if

6984
03:54:28,160 --> 03:54:31,760
there are similar attempts going on. And

6985
03:54:30,080 --> 03:54:33,600
maybe we can identify recurring themes

6986
03:54:31,760 --> 03:54:35,439
like a sender's address or tactics used

6987
03:54:33,600 --> 03:54:37,040
by threat actors that will allow us to

6988
03:54:35,439 --> 03:54:39,120
more efficiently and proactively

6989
03:54:37,040 --> 03:54:40,800
integrate defense measures. And speaking

6990
03:54:39,120 --> 03:54:42,319
of defense measures, well, upon

6991
03:54:40,800 --> 03:54:44,080
identification and verdict of any

6992
03:54:42,319 --> 03:54:46,319
fishing attempt, well, we need to take

6993
03:54:44,080 --> 03:54:48,319
either reactive or proactive defense

6994
03:54:46,319 --> 03:54:50,640
measures or both, depending on if the

6995
03:54:48,319 --> 03:54:52,160
attempt was successful or not. So,

6996
03:54:50,640 --> 03:54:53,680
reactive defense measures are going to

6997
03:54:52,160 --> 03:54:55,439
include things like invoking incident

6998
03:54:53,680 --> 03:54:57,279
response procedures for containment and

6999
03:54:55,439 --> 03:54:59,439
mitigation and remediation in the event

7000
03:54:57,279 --> 03:55:01,040
of a successful fishing attack. For

7001
03:54:59,439 --> 03:55:02,160
example, if a user was successfully

7002
03:55:01,040 --> 03:55:04,160
fished and they provided their

7003
03:55:02,160 --> 03:55:05,680
credentials, well, we need to initiate

7004
03:55:04,160 --> 03:55:07,520
instant response procedures to

7005
03:55:05,680 --> 03:55:09,040
temporarily disable their account or

7006
03:55:07,520 --> 03:55:11,439
review their login history and change

7007
03:55:09,040 --> 03:55:13,199
their credentials or rotate any keys and

7008
03:55:11,439 --> 03:55:14,840
even perform a full system scan or

7009
03:55:13,199 --> 03:55:16,720
reformatting depending on a deeper

7010
03:55:14,840 --> 03:55:18,479
investigation. And on the other hand,

7011
03:55:16,720 --> 03:55:20,000
proactive defense measures will involve

7012
03:55:18,479 --> 03:55:22,319
things like implementing technical

7013
03:55:20,000 --> 03:55:23,840
controls like email filtering or DNS

7014
03:55:22,319 --> 03:55:25,760
blacklisting and endpoint protection

7015
03:55:23,840 --> 03:55:28,000
based on the IoC's and artifacts that

7016
03:55:25,760 --> 03:55:30,160
we've identified. And we should also be

7017
03:55:28,000 --> 03:55:31,680
educating users about fishing awareness

7018
03:55:30,160 --> 03:55:34,160
and provide guidelines on how to

7019
03:55:31,680 --> 03:55:35,640
identify suspicious emails and how users

7020
03:55:34,160 --> 03:55:38,160
can report incidents quickly to the

7021
03:55:35,640 --> 03:55:40,160
sock. And lastly here, this brings us to

7022
03:55:38,160 --> 03:55:41,439
documentation and reporting, which in

7023
03:55:40,160 --> 03:55:42,720
reality should be a step that is

7024
03:55:41,439 --> 03:55:44,239
followed through each stage of the

7025
03:55:42,720 --> 03:55:46,319
methodology, not just something that we

7026
03:55:44,239 --> 03:55:48,000
shoehorn at the end. So while we

7027
03:55:46,319 --> 03:55:49,920
investigate emails and collect artifacts

7028
03:55:48,000 --> 03:55:51,600
and analyze our senders and even look at

7029
03:55:49,920 --> 03:55:53,199
URLs and attachments, well, we need to

7030
03:55:51,600 --> 03:55:55,279
keep detailed notes and update our

7031
03:55:53,199 --> 03:55:57,040
tickets accordingly and accurately. And

7032
03:55:55,279 --> 03:55:59,120
if we take any defensive actions, well,

7033
03:55:57,040 --> 03:56:00,880
we need to document these as well. Like

7034
03:55:59,120 --> 03:56:02,640
if 6 months down the road a stakeholder

7035
03:56:00,880 --> 03:56:04,640
is asking why the sock block a certain

7036
03:56:02,640 --> 03:56:07,199
domain or an email, well, we need to be

7037
03:56:04,640 --> 03:56:09,040
able to go back and justify our actions.

7038
03:56:07,199 --> 03:56:11,120
Our documentation needs to be clear and

7039
03:56:09,040 --> 03:56:12,800
thorough. So much so that any other

7040
03:56:11,120 --> 03:56:14,399
analyst can come by after us and make

7041
03:56:12,800 --> 03:56:16,640
the same determinations and verdicts

7042
03:56:14,399 --> 03:56:18,560
based on our findings. So, as our

7043
03:56:16,640 --> 03:56:20,319
investigation progresses, we should be

7044
03:56:18,560 --> 03:56:22,239
continually updating the status inside

7045
03:56:20,319 --> 03:56:23,359
our ticket management system. and we

7046
03:56:22,239 --> 03:56:24,960
need to make sure to close out the

7047
03:56:23,359 --> 03:56:28,319
tickets and communicate to users on the

7048
03:56:24,960 --> 03:56:28,319
reported emails verdict as

7049
03:56:28,920 --> 03:56:33,520
needed. Let's start analyzing some real

7050
03:56:31,600 --> 03:56:35,680
emails and learn how we can use header

7051
03:56:33,520 --> 03:56:38,319
analysis to identify the sender of an

7052
03:56:35,680 --> 03:56:40,399
email as well as their legitimacy. If

7053
03:56:38,319 --> 03:56:42,640
you recall, email headers are just

7054
03:56:40,399 --> 03:56:44,399
simply text files with multiple lines

7055
03:56:42,640 --> 03:56:46,560
indicating a header name and a header

7056
03:56:44,399 --> 03:56:48,720
value. Because of this, we can

7057
03:56:46,560 --> 03:56:50,960
essentially use any text editor or even

7058
03:56:48,720 --> 03:56:53,120
command line tools to view the header

7059
03:56:50,960 --> 03:56:55,600
information of an email as long as we

7060
03:56:53,120 --> 03:56:58,080
have a copy of the email saved. In some

7061
03:56:55,600 --> 03:56:59,680
cases, depending on the email client, we

7062
03:56:58,080 --> 03:57:02,800
can actually view these headers directly

7063
03:56:59,680 --> 03:57:04,560
in the program itself. For example, in

7064
03:57:02,800 --> 03:57:08,399
Thunderbird, we can just go under the

7065
03:57:04,560 --> 03:57:08,399
view tab here and click on message

7066
03:57:10,680 --> 03:57:16,279
source. In Gmail, for instance, we can

7067
03:57:13,600 --> 03:57:18,960
just hover over an email under the more

7068
03:57:16,279 --> 03:57:21,760
icon and either go down to download

7069
03:57:18,960 --> 03:57:24,800
message to download AEML file of the

7070
03:57:21,760 --> 03:57:26,880
email or we can go up to show original.

7071
03:57:24,800 --> 03:57:29,040
And if we click on show original, this

7072
03:57:26,880 --> 03:57:30,720
is going to give us a full output of the

7073
03:57:29,040 --> 03:57:33,319
email headers, which we can then

7074
03:57:30,720 --> 03:57:36,080
download or copy to our

7075
03:57:33,319 --> 03:57:38,160
clipboard. on an Outlookbased system,

7076
03:57:36,080 --> 03:57:40,000
specifically Outlook on the web, we can

7077
03:57:38,160 --> 03:57:41,520
do something very similar where we head

7078
03:57:40,000 --> 03:57:44,560
over to these three dots for more

7079
03:57:41,520 --> 03:57:46,560
actions. Click on it and we can then go

7080
03:57:44,560 --> 03:57:49,359
to save as if we want to download the

7081
03:57:46,560 --> 03:57:52,239
email or alternatively we can go to view

7082
03:57:49,359 --> 03:57:54,160
and click on view message source. And by

7083
03:57:52,239 --> 03:57:56,080
clicking on this again, we will get an

7084
03:57:54,160 --> 03:57:58,239
output of the email headers which we can

7085
03:57:56,080 --> 03:57:58,239
then

7086
03:57:58,359 --> 03:58:02,800
copy. And you can easily look up these

7087
03:58:00,880 --> 03:58:04,319
steps to view email headers depending on

7088
03:58:02,800 --> 03:58:07,199
the clients and the tooling that your

7089
03:58:04,319 --> 03:58:08,720
organization uses. Additionally, if

7090
03:58:07,199 --> 03:58:10,800
you're using some sort of ticketing

7091
03:58:08,720 --> 03:58:12,880
system like Jira or Service Now to

7092
03:58:10,800 --> 03:58:14,560
handle fishing reports and you have some

7093
03:58:12,880 --> 03:58:16,720
sort of workflow in place that allows

7094
03:58:14,560 --> 03:58:19,199
users within the organization to report

7095
03:58:16,720 --> 03:58:20,560
suspicious emails, what typically

7096
03:58:19,199 --> 03:58:22,319
happens is that the email will

7097
03:58:20,560 --> 03:58:24,319
automatically forward itself as an

7098
03:58:22,319 --> 03:58:26,399
attachment to a fishing analysis

7099
03:58:24,319 --> 03:58:27,760
mailbox. And there might be some further

7100
03:58:26,399 --> 03:58:29,920
automation in place that will

7101
03:58:27,760 --> 03:58:32,160
subsequently create individual tickets

7102
03:58:29,920 --> 03:58:35,040
or alerts within the ticketing system to

7103
03:58:32,160 --> 03:58:37,279
create cases for analysts to then triage

7104
03:58:35,040 --> 03:58:39,760
within these tickets themselves. The

7105
03:58:37,279 --> 03:58:42,319
extracted email and typically within a

7106
03:58:39,760 --> 03:58:44,479
ML file format will be available to view

7107
03:58:42,319 --> 03:58:46,000
and download. And this file contains all

7108
03:58:44,479 --> 03:58:48,160
of the original headers that we're

7109
03:58:46,000 --> 03:58:50,080
interested in. And note that if a user

7110
03:58:48,160 --> 03:58:51,520
forwards an email the typical way

7111
03:58:50,080 --> 03:58:54,080
through pressing the forward button in

7112
03:58:51,520 --> 03:58:55,680
their email client, in most cases, the

7113
03:58:54,080 --> 03:58:57,520
original headers will be lost, which

7114
03:58:55,680 --> 03:58:59,680
makes the analysis portion much more

7115
03:58:57,520 --> 03:59:01,680
difficult. This is why it's important to

7116
03:58:59,680 --> 03:59:03,439
forward the email itself as an

7117
03:59:01,680 --> 03:59:05,199
attachment, which is typically an option

7118
03:59:03,439 --> 03:59:06,399
in email clients if it's not already

7119
03:59:05,199 --> 03:59:09,120
being done through some sort of

7120
03:59:06,399 --> 03:59:10,640
automatic workflow. So, now that we have

7121
03:59:09,120 --> 03:59:12,640
some copies of emails we want to

7122
03:59:10,640 --> 03:59:14,720
investigate, we can use a number of

7123
03:59:12,640 --> 03:59:17,520
different tools or methods to view its

7124
03:59:14,720 --> 03:59:19,520
contents. So, first for this lesson,

7125
03:59:17,520 --> 03:59:22,080
navigate to the fishing analysis folder

7126
03:59:19,520 --> 03:59:24,880
on the desktop and then open the header

7127
03:59:22,080 --> 03:59:27,600
analysis folder. And from here, let's

7128
03:59:24,880 --> 03:59:29,199
start with sample 1. ML. So, we just

7129
03:59:27,600 --> 03:59:30,960
double click on this to open it up in

7130
03:59:29,199 --> 03:59:32,479
Thunderbird. And you might see this

7131
03:59:30,960 --> 03:59:34,479
connection failed. You can just ignore

7132
03:59:32,479 --> 03:59:36,800
that message, but eventually the email

7133
03:59:34,479 --> 03:59:38,239
will open up as seen above. So, this is

7134
03:59:36,800 --> 03:59:40,000
the first email that we're going to be

7135
03:59:38,239 --> 03:59:41,359
analyzing. And so, we can see what it

7136
03:59:40,000 --> 03:59:43,600
looks like initially. We can see this

7137
03:59:41,359 --> 03:59:46,160
Chase Bank logo. It appears to be asking

7138
03:59:43,600 --> 03:59:47,520
us to restore or reactivate our account.

7139
03:59:46,160 --> 03:59:49,199
And we can see some of the common

7140
03:59:47,520 --> 03:59:50,359
headers. So we have the from field here

7141
03:59:49,199 --> 03:59:52,239
which is

7142
03:59:50,359 --> 03:59:54,800
alerts@chase.com. We have the two field

7143
03:59:52,239 --> 03:59:57,120
which is bob sanders. The subject line

7144
03:59:54,800 --> 03:59:58,640
so your bank account has been blocked as

7145
03:59:57,120 --> 04:00:00,239
well as the timestamp over here on the

7146
03:59:58,640 --> 04:00:01,359
right which we've looked at earlier. So

7147
04:00:00,239 --> 04:00:03,359
these are some of the common headers

7148
04:00:01,359 --> 04:00:04,960
that we've seen before. But I mentioned

7149
04:00:03,359 --> 04:00:07,199
it's essentially just a text document

7150
04:00:04,960 --> 04:00:08,960
that makes up email messages. So if we

7151
04:00:07,199 --> 04:00:11,680
go back to our folder, I'm just going to

7152
04:00:08,960 --> 04:00:13,279
rightclick and click open in terminal.

7153
04:00:11,680 --> 04:00:15,439
This is going to open a terminal session

7154
04:00:13,279 --> 04:00:16,800
in the folder that we were looking at.

7155
04:00:15,439 --> 04:00:18,880
And from here, I'm just going to run an

7156
04:00:16,800 --> 04:00:20,479
ls to list out the contents. And we can

7157
04:00:18,880 --> 04:00:23,760
see the sample emails that we have in

7158
04:00:20,479 --> 04:00:27,040
this folder. I'm simply going to cat out

7159
04:00:23,760 --> 04:00:28,560
the sample one email file. And just as

7160
04:00:27,040 --> 04:00:30,239
you can see when we were exporting the

7161
04:00:28,560 --> 04:00:32,000
source of the email itself, we're

7162
04:00:30,239 --> 04:00:33,840
getting the same information here. So

7163
04:00:32,000 --> 04:00:36,720
this is the HTML markup that is making

7164
04:00:33,840 --> 04:00:38,560
up the email body. And if we scroll up,

7165
04:00:36,720 --> 04:00:40,560
all we can actually get to the actual

7166
04:00:38,560 --> 04:00:42,000
headers.

7167
04:00:40,560 --> 04:00:44,000
So much so that we don't need to just

7168
04:00:42,000 --> 04:00:46,720
cat out the file. If we wanted to find

7169
04:00:44,000 --> 04:00:48,960
something like the from header, well, we

7170
04:00:46,720 --> 04:00:51,199
could just run a GP command like this.

7171
04:00:48,960 --> 04:00:54,120
And we can see immediately we get the

7172
04:00:51,199 --> 04:00:56,319
from header returned with alerts at

7173
04:00:54,120 --> 04:00:58,399
chase.com. But again, working with it in

7174
04:00:56,319 --> 04:01:00,479
a command line like this isn't ideal. So

7175
04:00:58,399 --> 04:01:03,279
what we can also do is open it in a text

7176
04:01:00,479 --> 04:01:05,279
editor like Sublime Text. So to do that,

7177
04:01:03,279 --> 04:01:07,760
I already have Sublime Text installed in

7178
04:01:05,279 --> 04:01:10,399
this lab. So all we need to do is just

7179
04:01:07,760 --> 04:01:12,479
run the suvl syntax here to open up

7180
04:01:10,399 --> 04:01:16,000
Sublime Text and provide the file that

7181
04:01:12,479 --> 04:01:16,000
we want to open. Sample

7182
04:01:16,439 --> 04:01:21,520
1.ML. You can see here we have the email

7183
04:01:18,880 --> 04:01:23,279
message opened up in Sublime Text. But

7184
04:01:21,520 --> 04:01:25,199
when we open up an email in Sublime

7185
04:01:23,279 --> 04:01:27,040
Text, by default, we don't get the

7186
04:01:25,199 --> 04:01:29,520
benefit of syntax highlighting that

7187
04:01:27,040 --> 04:01:31,520
makes our lives easier. But fortunately,

7188
04:01:29,520 --> 04:01:33,840
Richard Davis, the founder behind 13

7189
04:01:31,520 --> 04:01:35,760
cubed, developed a super useful package

7190
04:01:33,840 --> 04:01:37,760
that we can install in Sublime Text to

7191
04:01:35,760 --> 04:01:39,520
assist with this. And I will have the

7192
04:01:37,760 --> 04:01:41,520
link down below. But essentially, this

7193
04:01:39,520 --> 04:01:44,080
is a syntax highlighter plugin that we

7194
04:01:41,520 --> 04:01:45,760
can use specifically for email messages.

7195
04:01:44,080 --> 04:01:48,319
So, all we need to do is go up into the

7196
04:01:45,760 --> 04:01:49,960
toolbar here under tools and click on

7197
04:01:48,319 --> 04:01:52,080
install package

7198
04:01:49,960 --> 04:01:54,800
control. We'll get this message that it

7199
04:01:52,080 --> 04:01:57,199
was successfully installed. And then we

7200
04:01:54,800 --> 04:01:58,439
want to press control shift and p to

7201
04:01:57,199 --> 04:02:00,880
open the command

7202
04:01:58,439 --> 04:02:02,640
pallet. We just want to type in install

7203
04:02:00,880 --> 04:02:05,359
package. And then we're going to click

7204
04:02:02,640 --> 04:02:07,359
on this option here. And then we can

7205
04:02:05,359 --> 04:02:08,960
just start typing in email. We can see

7206
04:02:07,359 --> 04:02:11,120
the first option here is the email

7207
04:02:08,960 --> 04:02:13,279
header syntax highlighting plugin

7208
04:02:11,120 --> 04:02:14,720
developed by 13 cubed. And this is the

7209
04:02:13,279 --> 04:02:17,520
one that we want to install. So I'm just

7210
04:02:14,720 --> 04:02:19,040
going to click on this. And now once we

7211
04:02:17,520 --> 04:02:21,040
go to our syntax here in the bottom

7212
04:02:19,040 --> 04:02:23,439
right, well, it's currently set to plain

7213
04:02:21,040 --> 04:02:26,319
text. If we click on this and we start

7214
04:02:23,439 --> 04:02:28,319
scrolling up, well, we can see this new

7215
04:02:26,319 --> 04:02:30,399
email header option here. So, if we

7216
04:02:28,319 --> 04:02:32,640
click on this, we can suddenly see our

7217
04:02:30,399 --> 04:02:34,080
file becomes much more readable. So, we

7218
04:02:32,640 --> 04:02:36,160
have some color and highlighting here

7219
04:02:34,080 --> 04:02:38,000
that is separating out the header name

7220
04:02:36,160 --> 04:02:39,600
versus its value. And we have an

7221
04:02:38,000 --> 04:02:41,279
additional color here to separate

7222
04:02:39,600 --> 04:02:43,359
extended or custom headers, which we're

7223
04:02:41,279 --> 04:02:45,600
going to talk about in a bit. And next,

7224
04:02:43,359 --> 04:02:47,279
I quickly wanted to look at the ANA or

7225
04:02:45,600 --> 04:02:49,199
the internet assigned numbers authority

7226
04:02:47,279 --> 04:02:51,600
page, specifically the standard that

7227
04:02:49,199 --> 04:02:53,040
outlines message headers. And so this

7228
04:02:51,600 --> 04:02:54,720
link contains all of the various

7229
04:02:53,040 --> 04:02:56,640
standardized message headers, including

7230
04:02:54,720 --> 04:02:58,880
their names and descriptions and any

7231
04:02:56,640 --> 04:03:00,640
associated protocols. And you'll see

7232
04:02:58,880 --> 04:03:02,880
that there are tons and tons of headers

7233
04:03:00,640 --> 04:03:05,040
here. Some of which are more common and

7234
04:03:02,880 --> 04:03:07,120
some not so much because I don't want

7235
04:03:05,040 --> 04:03:08,720
this lesson to be a week long, but we're

7236
04:03:07,120 --> 04:03:10,640
going to focus on the most common and

7237
04:03:08,720 --> 04:03:12,960
most useful and important headers that

7238
04:03:10,640 --> 04:03:14,560
you're going to want to know about. So

7239
04:03:12,960 --> 04:03:16,960
let's get back to the email and take a

7240
04:03:14,560 --> 04:03:19,680
look at some of these common headers. So

7241
04:03:16,960 --> 04:03:21,920
the first one here is the date.

7242
04:03:19,680 --> 04:03:23,920
The date header in an email specifies

7243
04:03:21,920 --> 04:03:26,080
the date and time when the message was

7244
04:03:23,920 --> 04:03:27,840
composed or sent. We'll often want to

7245
04:03:26,080 --> 04:03:29,760
document the date and time of an email

7246
04:03:27,840 --> 04:03:31,600
for our records. Whether it be this

7247
04:03:29,760 --> 04:03:33,439
timestamp directly from the header or

7248
04:03:31,600 --> 04:03:35,359
from the email client or from the ticket

7249
04:03:33,439 --> 04:03:37,040
that was created. Knowing when an email

7250
04:03:35,359 --> 04:03:38,640
was delivered can be very useful in

7251
04:03:37,040 --> 04:03:40,880
performing email searches across the

7252
04:03:38,640 --> 04:03:42,800
organization for similar emails or for

7253
04:03:40,880 --> 04:03:44,720
correlating other suspicious activity

7254
04:03:42,800 --> 04:03:46,800
that might have resulted in a fish like

7255
04:03:44,720 --> 04:03:49,199
in our SIM for instance. Right above

7256
04:03:46,800 --> 04:03:51,040
this we have the from header. The from

7257
04:03:49,199 --> 04:03:53,120
header, as we're likely familiar with,

7258
04:03:51,040 --> 04:03:55,120
specifies the supposed sender of an

7259
04:03:53,120 --> 04:03:56,960
email. This is the header that will be

7260
04:03:55,120 --> 04:03:59,600
displayed in email clients to show who

7261
04:03:56,960 --> 04:04:01,359
sent a specific email. However, because

7262
04:03:59,600 --> 04:04:03,279
the from header can be set to any

7263
04:04:01,359 --> 04:04:04,960
arbitrary value, well, this is one of

7264
04:04:03,279 --> 04:04:06,800
the most common headers that attackers

7265
04:04:04,960 --> 04:04:08,399
can spoof to make it look like a fishing

7266
04:04:06,800 --> 04:04:10,640
email came from someone else or a

7267
04:04:08,399 --> 04:04:12,080
trusted organization. But we should

7268
04:04:10,640 --> 04:04:14,080
still document this though because we

7269
04:04:12,080 --> 04:04:15,840
can use it to find discrepancies as well

7270
04:04:14,080 --> 04:04:18,680
as use it as an artifact to search off

7271
04:04:15,840 --> 04:04:20,960
of. So, next we have the subject

7272
04:04:18,680 --> 04:04:22,960
line. And again, we're used to seeing

7273
04:04:20,960 --> 04:04:24,720
the email subject, which is of course

7274
04:04:22,960 --> 04:04:26,319
the subject that appears in your email

7275
04:04:24,720 --> 04:04:28,720
client when you receive an email in your

7276
04:04:26,319 --> 04:04:30,080
inbox. Again, this is a useful header to

7277
04:04:28,720 --> 04:04:31,840
document because we can almost think of

7278
04:04:30,080 --> 04:04:33,359
it as a signature or a fingerprint of an

7279
04:04:31,840 --> 04:04:35,439
email should we determine it to be

7280
04:04:33,359 --> 04:04:37,120
malicious. For example, we can use a

7281
04:04:35,439 --> 04:04:39,040
subject line to perform searches against

7282
04:04:37,120 --> 04:04:41,279
our email gateway and look for other

7283
04:04:39,040 --> 04:04:43,120
associated emails or in rare cases

7284
04:04:41,279 --> 04:04:45,439
actually block specific email subject

7285
04:04:43,120 --> 04:04:47,279
lines from entering our organization.

7286
04:04:45,439 --> 04:04:49,279
And along the lines of fingerprinting an

7287
04:04:47,279 --> 04:04:51,439
email through artifacts, well, we have

7288
04:04:49,279 --> 04:04:54,080
the message ID field as you can see

7289
04:04:51,439 --> 04:04:56,239
here. And the message ID header is a

7290
04:04:54,080 --> 04:04:58,880
very useful one for us because it is a

7291
04:04:56,239 --> 04:05:01,199
unique ID generated by the first MTA

7292
04:04:58,880 --> 04:05:03,040
that the message traverses through. And

7293
04:05:01,199 --> 04:05:04,880
these message IDs should always be

7294
04:05:03,040 --> 04:05:06,880
unique by the server that generates it

7295
04:05:04,880 --> 04:05:09,279
and pertains to a single version of that

7296
04:05:06,880 --> 04:05:10,880
email. That means if we ever find a

7297
04:05:09,279 --> 04:05:12,720
duplicate message ID in our email

7298
04:05:10,880 --> 04:05:14,399
gateway, well, it could very likely be

7299
04:05:12,720 --> 04:05:16,720
an indication of something malicious

7300
04:05:14,399 --> 04:05:19,520
going on. And these IDs are made up of

7301
04:05:16,720 --> 04:05:21,920
two parts. And so anything before the at

7302
04:05:19,520 --> 04:05:23,840
sign here or this left side of the ID,

7303
04:05:21,920 --> 04:05:25,920
the standard documents that it should be

7304
04:05:23,840 --> 04:05:27,760
a unique identifier, although there are

7305
04:05:25,920 --> 04:05:29,600
no specific algorithm requirements in

7306
04:05:27,760 --> 04:05:32,399
the standard. And on the right hand of

7307
04:05:29,600 --> 04:05:34,080
the message ID, but we expect to see the

7308
04:05:32,399 --> 04:05:36,080
domain name or the IP address of the

7309
04:05:34,080 --> 04:05:38,720
host in which the message identifier was

7310
04:05:36,080 --> 04:05:40,560
created. That means in theory if we

7311
04:05:38,720 --> 04:05:42,720
identify a specific mail system domain

7312
04:05:40,560 --> 04:05:44,640
that the email originated from but the

7313
04:05:42,720 --> 04:05:46,239
message ID contains a different domain

7314
04:05:44,640 --> 04:05:48,560
name well again this could be a hint

7315
04:05:46,239 --> 04:05:50,239
that the email was forged. We also want

7316
04:05:48,560 --> 04:05:52,000
to document the recipient email address

7317
04:05:50,239 --> 04:05:54,080
during our triage stage because this is

7318
04:05:52,000 --> 04:05:56,720
where we can determine scope and we can

7319
04:05:54,080 --> 04:05:58,160
do this through the two header. If we

7320
04:05:56,720 --> 04:06:00,399
have multiple users that received the

7321
04:05:58,160 --> 04:06:02,239
same suspicious email, well we need to

7322
04:06:00,399 --> 04:06:04,720
be aware in case we need to take action

7323
04:06:02,239 --> 04:06:06,160
across anyone else that received it. And

7324
04:06:04,720 --> 04:06:07,680
you might not always be able to see

7325
04:06:06,160 --> 04:06:09,760
multiple emails listed under the

7326
04:06:07,680 --> 04:06:11,920
recipients. It's quite trivial for an

7327
04:06:09,760 --> 04:06:14,640
attacker to utilize blind carbon copy or

7328
04:06:11,920 --> 04:06:16,239
BCC to include multiple recipients and

7329
04:06:14,640 --> 04:06:18,560
prevent each of those recipients from

7330
04:06:16,239 --> 04:06:20,399
knowing who else received the email. In

7331
04:06:18,560 --> 04:06:22,319
this case, this is where our timestamps

7332
04:06:20,399 --> 04:06:24,560
and subject line and from headers become

7333
04:06:22,319 --> 04:06:26,160
useful to have documented so we can

7334
04:06:24,560 --> 04:06:28,479
perform our own search at the email

7335
04:06:26,160 --> 04:06:31,760
gateway level. And next here we have the

7336
04:06:28,479 --> 04:06:34,239
reply to address. The reply to address

7337
04:06:31,760 --> 04:06:35,760
in an email message specifies the email

7338
04:06:34,239 --> 04:06:37,680
address to which replies should be

7339
04:06:35,760 --> 04:06:39,520
directed to when a recipient responds to

7340
04:06:37,680 --> 04:06:41,279
it. And it's different from the from

7341
04:06:39,520 --> 04:06:43,040
address which indicates the sender of

7342
04:06:41,279 --> 04:06:45,760
the email. And of course, there are

7343
04:06:43,040 --> 04:06:47,600
legitimate uses for a reply to address.

7344
04:06:45,760 --> 04:06:49,760
But many times if an attacker is

7345
04:06:47,600 --> 04:06:51,760
spoofing a legitimate domain, well, they

7346
04:06:49,760 --> 04:06:53,600
have to specify a different reply to

7347
04:06:51,760 --> 04:06:55,439
address because they don't actually have

7348
04:06:53,600 --> 04:06:58,239
access or have control over the

7349
04:06:55,439 --> 04:07:00,239
legitimate domain that they're spoofing.

7350
04:06:58,239 --> 04:07:02,399
For example, if an attacker has spoofed

7351
04:07:00,239 --> 04:07:04,880
accounts@ microsoft.com in the from

7352
04:07:02,399 --> 04:07:06,560
header, well, any replies to this email

7353
04:07:04,880 --> 04:07:08,640
would not actually be received by the

7354
04:07:06,560 --> 04:07:11,479
attacker since they don't have control

7355
04:07:08,640 --> 04:07:13,760
over the actual accounts@ microsoft.com

7356
04:07:11,479 --> 04:07:15,840
mailbox. Instead, an attacker would

7357
04:07:13,760 --> 04:07:18,239
commonly insert the address of a mailbox

7358
04:07:15,840 --> 04:07:19,960
that they own under the reply to field,

7359
04:07:18,239 --> 04:07:21,760
such as

7360
04:07:19,960 --> 04:07:24,399
attacker123@malware.com to ensure that

7361
04:07:21,760 --> 04:07:26,720
they capture any replies. And we also

7362
04:07:24,399 --> 04:07:28,560
have the return path here. And this

7363
04:07:26,720 --> 04:07:30,560
header is also known as the envelope

7364
04:07:28,560 --> 04:07:32,479
sender address or the bounce address.

7365
04:07:30,560 --> 04:07:34,160
And it specifies the email address to

7366
04:07:32,479 --> 04:07:36,720
which bounce messages or delivery

7367
04:07:34,160 --> 04:07:38,800
failure notifications should be sent.

7368
04:07:36,720 --> 04:07:40,560
Similar to the reply to header, we can

7369
04:07:38,800 --> 04:07:42,800
check if this header matches what we saw

7370
04:07:40,560 --> 04:07:44,479
in the from header. And again, sometimes

7371
04:07:42,800 --> 04:07:46,399
there are legitimate purposes for why

7372
04:07:44,479 --> 04:07:48,479
this doesn't match. But if an attacker

7373
04:07:46,399 --> 04:07:50,399
is using a service to mass fish a number

7374
04:07:48,479 --> 04:07:52,319
of potential victims and doesn't care

7375
04:07:50,399 --> 04:07:54,880
about reconnaissance, they might want to

7376
04:07:52,319 --> 04:07:56,800
direct the bounceback somewhere else.

7377
04:07:54,880 --> 04:07:58,160
And so you'll notice with our syntax

7378
04:07:56,800 --> 04:08:00,880
highlighting, we can see these

7379
04:07:58,160 --> 04:08:03,760
standardized headers in one color and

7380
04:08:00,880 --> 04:08:05,680
these X-Type headers in another color.

7381
04:08:03,760 --> 04:08:08,160
And these X-Type headers are also known

7382
04:08:05,680 --> 04:08:09,920
as experimental or extension headers.

7383
04:08:08,160 --> 04:08:12,960
And often you'll see them referred to as

7384
04:08:09,920 --> 04:08:14,720
custom headers as well. And these are

7385
04:08:12,960 --> 04:08:17,359
additional headers that don't fit within

7386
04:08:14,720 --> 04:08:18,960
the standards adopted from the AA, but

7387
04:08:17,359 --> 04:08:20,960
they are sometimes used by mail

7388
04:08:18,960 --> 04:08:22,640
providers or security solutions to add

7389
04:08:20,960 --> 04:08:24,720
additional functionality to email

7390
04:08:22,640 --> 04:08:26,560
clients and filters and do things like

7391
04:08:24,720 --> 04:08:28,239
spam checks or tracking or

7392
04:08:26,560 --> 04:08:30,319
authentication results and other

7393
04:08:28,239 --> 04:08:32,399
additional metadata. And we have some

7394
04:08:30,319 --> 04:08:34,880
that are particularly useful for us, but

7395
04:08:32,399 --> 04:08:37,520
not always present. For example, here we

7396
04:08:34,880 --> 04:08:39,279
have the X sender IP. Now, this is one

7397
04:08:37,520 --> 04:08:41,199
of the most commonly seen X headers out

7398
04:08:39,279 --> 04:08:43,279
there and is actually pretty useful for

7399
04:08:41,199 --> 04:08:45,439
us as an investigator if it's present,

7400
04:08:43,279 --> 04:08:47,279
but of course, it's not always present.

7401
04:08:45,439 --> 04:08:50,000
You might also see a header called XO

7402
04:08:47,279 --> 04:08:51,359
originating IP and it essentially serves

7403
04:08:50,000 --> 04:08:53,359
the same purpose. And again, you might

7404
04:08:51,359 --> 04:08:54,920
see this or not or one or the other. It

7405
04:08:53,359 --> 04:08:57,680
entirely depends on the email

7406
04:08:54,920 --> 04:08:59,680
infrastructure. And the Xorinating IP or

7407
04:08:57,680 --> 04:09:01,680
the X sender IP header typically

7408
04:08:59,680 --> 04:09:03,359
indicates the IP address of the device

7409
04:09:01,680 --> 04:09:05,520
or server from which the email

7410
04:09:03,359 --> 04:09:06,960
originated from. and it's added to the

7411
04:09:05,520 --> 04:09:09,439
email headers by the sender's email

7412
04:09:06,960 --> 04:09:10,880
client or the message submission agent.

7413
04:09:09,439 --> 04:09:12,880
And the catch here is that certain

7414
04:09:10,880 --> 04:09:14,960
providers will not include this header.

7415
04:09:12,880 --> 04:09:17,680
For example, Google does not include the

7416
04:09:14,960 --> 04:09:19,680
header while Microsoft typically does.

7417
04:09:17,680 --> 04:09:21,359
And once we obtain the originating IP

7418
04:09:19,680 --> 04:09:23,680
address, we can perform certain

7419
04:09:21,359 --> 04:09:25,199
investigative actions like geoloccating

7420
04:09:23,680 --> 04:09:26,880
it to determine where the server is

7421
04:09:25,199 --> 04:09:28,880
geographically and what autonomous

7422
04:09:26,880 --> 04:09:31,439
system organization or ASN does it

7423
04:09:28,880 --> 04:09:33,680
belong to. We can also check the IP's

7424
04:09:31,439 --> 04:09:35,680
reputation or perform a reverse DNS

7425
04:09:33,680 --> 04:09:38,080
lookup to identify what domain or host

7426
04:09:35,680 --> 04:09:39,920
name the mail server resolves to. And

7427
04:09:38,080 --> 04:09:41,760
now if we don't have access to this

7428
04:09:39,920 --> 04:09:44,239
header, there are still ways in which we

7429
04:09:41,760 --> 04:09:46,160
can retrieve the originating IP address.

7430
04:09:44,239 --> 04:09:48,080
The most useful and reliable way is

7431
04:09:46,160 --> 04:09:49,920
through the received headers. And we

7432
04:09:48,080 --> 04:09:51,000
have to scroll to the top to see these

7433
04:09:49,920 --> 04:09:53,760
received

7434
04:09:51,000 --> 04:09:56,000
headers. Now, I wanted to cover some of

7435
04:09:53,760 --> 04:09:58,560
the more basic headers to get a feel for

7436
04:09:56,000 --> 04:09:59,800
what makes up an email. But there is one

7437
04:09:58,560 --> 04:10:02,160
type of header that in our

7438
04:09:59,800 --> 04:10:03,680
investigations is going to arguably be

7439
04:10:02,160 --> 04:10:05,279
the most important header that you're

7440
04:10:03,680 --> 04:10:08,560
going to come across. And that is of

7441
04:10:05,279 --> 04:10:10,080
course the received header. And now the

7442
04:10:08,560 --> 04:10:12,399
main thing you'll notice here is that

7443
04:10:10,080 --> 04:10:14,160
there are multiple received headers. And

7444
04:10:12,399 --> 04:10:16,479
this is normal and you'll typically see

7445
04:10:14,160 --> 04:10:18,000
more than one. If you remember when we

7446
04:10:16,479 --> 04:10:19,520
talked about how the email protocol

7447
04:10:18,000 --> 04:10:21,279
works, we mentioned that emails

7448
04:10:19,520 --> 04:10:23,760
typically go through a relay of mail

7449
04:10:21,279 --> 04:10:26,640
servers or MTAs as they are routed from

7450
04:10:23,760 --> 04:10:28,560
sender to recipient. The number of

7451
04:10:26,640 --> 04:10:30,800
received headers you see are going to

7452
04:10:28,560 --> 04:10:33,000
vary depending on how many MTAs the

7453
04:10:30,800 --> 04:10:35,600
message had to traverse within its

7454
04:10:33,000 --> 04:10:37,439
journey. And so each email server that

7455
04:10:35,600 --> 04:10:38,960
handles the message adds its own

7456
04:10:37,439 --> 04:10:40,880
received header, creating a

7457
04:10:38,960 --> 04:10:43,680
chronological record known as the

7458
04:10:40,880 --> 04:10:45,439
received chain. These headers typically

7459
04:10:43,680 --> 04:10:47,840
can't be spoofed as they're added by the

7460
04:10:45,439 --> 04:10:49,600
MTAs themselves. So they're often a

7461
04:10:47,840 --> 04:10:52,239
reliable metric that we can use to

7462
04:10:49,600 --> 04:10:54,319
perform our investigations. And you can

7463
04:10:52,239 --> 04:10:55,920
almost think of it like a passport. As

7464
04:10:54,319 --> 04:10:57,600
you travel across the world, well,

7465
04:10:55,920 --> 04:10:59,760
you'll likely stop in various countries

7466
04:10:57,600 --> 04:11:01,520
along the way. And at each stage in the

7467
04:10:59,760 --> 04:11:03,439
process, well, you'll receive a check or

7468
04:11:01,520 --> 04:11:05,680
a stamp as you pass through various

7469
04:11:03,439 --> 04:11:07,520
checkpoints or layovers. An important

7470
04:11:05,680 --> 04:11:10,080
point here is that the received headers

7471
04:11:07,520 --> 04:11:11,920
are in reverse chronological order,

7472
04:11:10,080 --> 04:11:13,960
meaning that the first header we see is

7473
04:11:11,920 --> 04:11:16,479
the most recent or closest to the

7474
04:11:13,960 --> 04:11:18,080
recipient. And at the bottom, the last

7475
04:11:16,479 --> 04:11:19,840
received header we find in the email is

7476
04:11:18,080 --> 04:11:22,000
the one closest to the sender or the

7477
04:11:19,840 --> 04:11:23,359
originating server.

7478
04:11:22,000 --> 04:11:25,359
Which means that if we want to figure

7479
04:11:23,359 --> 04:11:26,880
out where an email actually came from,

7480
04:11:25,359 --> 04:11:29,439
well, we should start from the bottom

7481
04:11:26,880 --> 04:11:31,040
and move upwards. Depending on the route

7482
04:11:29,439 --> 04:11:33,040
the email path took to get to our

7483
04:11:31,040 --> 04:11:35,160
trusted infrastructure, we might need to

7484
04:11:33,040 --> 04:11:37,760
look at a few of the earliest received

7485
04:11:35,160 --> 04:11:39,439
headers. And as such, it's technically

7486
04:11:37,760 --> 04:11:41,279
possible that the original sender of the

7487
04:11:39,439 --> 04:11:42,960
email might have included spoofed

7488
04:11:41,279 --> 04:11:44,399
headers to try and hide that they are

7489
04:11:42,960 --> 04:11:46,080
the original sender of the message

7490
04:11:44,399 --> 04:11:48,560
instead of just a waypoint along the

7491
04:11:46,080 --> 04:11:50,160
way. As such, the only received headers

7492
04:11:48,560 --> 04:11:52,520
that we should trust are the ones

7493
04:11:50,160 --> 04:11:54,479
generated by our own trusted internal

7494
04:11:52,520 --> 04:11:56,319
infrastructure or basically when the

7495
04:11:54,479 --> 04:11:58,800
email is passed along to the MTAs that

7496
04:11:56,319 --> 04:12:00,720
we trust. And so another way to put this

7497
04:11:58,800 --> 04:12:02,880
is that the most important hops in an

7498
04:12:00,720 --> 04:12:04,319
email's path across the internet is the

7499
04:12:02,880 --> 04:12:05,920
first time that our trusted

7500
04:12:04,319 --> 04:12:08,120
infrastructure, you could think of this

7501
04:12:05,920 --> 04:12:10,479
as Microsoft or our own organization's

7502
04:12:08,120 --> 04:12:12,560
MTA, interacts with the server that is

7503
04:12:10,479 --> 04:12:14,160
sending the email. And we could go as

7504
04:12:12,560 --> 04:12:15,840
far as to say that anything under this

7505
04:12:14,160 --> 04:12:17,359
trusted received header cannot be

7506
04:12:15,840 --> 04:12:20,640
trusted as the attacker could have

7507
04:12:17,359 --> 04:12:22,080
modified or spoofed anything below this.

7508
04:12:20,640 --> 04:12:23,760
In this case, we can see this first

7509
04:12:22,080 --> 04:12:25,439
received header here which was

7510
04:12:23,760 --> 04:12:27,359
supposedly sent by a proton mail

7511
04:12:25,439 --> 04:12:29,520
address. But we can see it was received

7512
04:12:27,359 --> 04:12:30,680
by the Outlook domain with the Microsoft

7513
04:12:29,520 --> 04:12:33,279
SMTP

7514
04:12:30,680 --> 04:12:35,199
server. And so we can be relatively sure

7515
04:12:33,279 --> 04:12:36,800
that this was the original sender and

7516
04:12:35,199 --> 04:12:39,680
this was the original sender's IP

7517
04:12:36,800 --> 04:12:41,760
address. And if you recall, this is the

7518
04:12:39,680 --> 04:12:44,560
same IP address that we saw in the X

7519
04:12:41,760 --> 04:12:46,160
sender IP header. So now that we've

7520
04:12:44,560 --> 04:12:48,160
identified some IP addresses that could

7521
04:12:46,160 --> 04:12:50,080
be useful to us, we can perform some

7522
04:12:48,160 --> 04:12:52,560
further investigation to obtain more

7523
04:12:50,080 --> 04:12:54,880
data about the original sender. So to do

7524
04:12:52,560 --> 04:12:56,960
this, we can use any free IP or domain

7525
04:12:54,880 --> 04:12:59,199
lookup service out there or even the who

7526
04:12:56,960 --> 04:13:00,960
is command in our terminal. And if you

7527
04:12:59,199 --> 04:13:04,239
don't have who is installed, well, we

7528
04:13:00,960 --> 04:13:06,880
can run pseudo app to install who is.

7529
04:13:04,239 --> 04:13:08,720
Just need to put in your password there.

7530
04:13:06,880 --> 04:13:11,600
And once it's installed, we can just run

7531
04:13:08,720 --> 04:13:13,279
a who is and paste in that IP address.

7532
04:13:11,600 --> 04:13:15,880
And if we scroll up, we can start to see

7533
04:13:13,279 --> 04:13:18,159
some very useful

7534
04:13:15,880 --> 04:13:20,800
information. Similarly, we can go to a

7535
04:13:18,159 --> 04:13:20,800
site like who

7536
04:13:21,000 --> 04:13:24,840
is.domaintools.com. And again, if we

7537
04:13:22,640 --> 04:13:26,640
paste in that IP address and click on

7538
04:13:24,840 --> 04:13:28,960
search, we're going to get the same

7539
04:13:26,640 --> 04:13:30,479
results in the browser. So here we can

7540
04:13:28,960 --> 04:13:32,960
see that the country that this IP

7541
04:13:30,479 --> 04:13:34,800
address belongs to is in Switzerland.

7542
04:13:32,960 --> 04:13:38,159
And the reverse DNS lookup or the

7543
04:13:34,800 --> 04:13:38,159
resolved host points to

7544
04:13:39,479 --> 04:13:43,359
mail-4140.protonmail.ch. And we can also

7545
04:13:41,199 --> 04:13:44,840
see the ASN or the autonomous system

7546
04:13:43,359 --> 04:13:46,880
number belongs to

7547
04:13:44,840 --> 04:13:48,800
Protonag, which confirms that we're

7548
04:13:46,880 --> 04:13:51,760
dealing with a Proton Mail email system

7549
04:13:48,800 --> 04:13:53,520
that originally sent this email. And

7550
04:13:51,760 --> 04:13:55,279
this obviously does not match up with

7551
04:13:53,520 --> 04:13:57,040
Chase Bank, which is what the sender

7552
04:13:55,279 --> 04:13:59,920
wanted us to believe by spoofing the

7553
04:13:57,040 --> 04:14:01,439
sender address as chase.com.

7554
04:13:59,920 --> 04:14:03,279
And of course, we want to ensure that

7555
04:14:01,439 --> 04:14:04,640
the results of this check are well

7556
04:14:03,279 --> 04:14:07,120
documented because they will come in

7557
04:14:04,640 --> 04:14:09,840
handy during our analysis. And so doing

7558
04:14:07,120 --> 04:14:11,359
this extra bit of reverse DNS research,

7559
04:14:09,840 --> 04:14:13,279
we're able to attribute the original

7560
04:14:11,359 --> 04:14:15,199
sending email server and confirm that

7561
04:14:13,279 --> 04:14:18,080
this email did not in fact originate

7562
04:14:15,199 --> 04:14:19,840
from anything related to Chase Bank.

7563
04:14:18,080 --> 04:14:21,439
It's also worth noting that while we

7564
04:14:19,840 --> 04:14:23,760
have some clever solutions to view these

7565
04:14:21,439 --> 04:14:25,199
headers, like with Sublime Text, we also

7566
04:14:23,760 --> 04:14:26,720
have some free tools available to us

7567
04:14:25,199 --> 04:14:29,600
that can parse email headers in an

7568
04:14:26,720 --> 04:14:31,199
easyto- read format.

7569
04:14:29,600 --> 04:14:33,040
One of which is the message header

7570
04:14:31,199 --> 04:14:35,520
analyzer tool which I'll have linked

7571
04:14:33,040 --> 04:14:37,279
down below. And using this tool, we can

7572
04:14:35,520 --> 04:14:39,439
paste in the headers from any email and

7573
04:14:37,279 --> 04:14:40,880
get a nice and easy to read table that

7574
04:14:39,439 --> 04:14:43,359
highlights some of the important headers

7575
04:14:40,880 --> 04:14:45,279
for our analysis. And it's worth noting

7576
04:14:43,359 --> 04:14:46,960
that all of the processing occurs client

7577
04:14:45,279 --> 04:14:48,720
side. So we don't need to worry about

7578
04:14:46,960 --> 04:14:51,040
any sensitive data from legitimate

7579
04:14:48,720 --> 04:14:53,040
emails being collected. And this is an

7580
04:14:51,040 --> 04:14:55,520
open source tool and the repository can

7581
04:14:53,040 --> 04:14:57,800
be found here or linked down below. So

7582
04:14:55,520 --> 04:15:00,399
we can just copy everything from our

7583
04:14:57,800 --> 04:15:02,239
email and paste it into this header

7584
04:15:00,399 --> 04:15:04,159
field here. And when we click analyze

7585
04:15:02,239 --> 04:15:06,080
headers, well, we can immediately see

7586
04:15:04,159 --> 04:15:08,720
that it gets parsed into this easier to

7587
04:15:06,080 --> 04:15:10,399
read format. And so we can see the

7588
04:15:08,720 --> 04:15:12,479
received headers here in this sort of

7589
04:15:10,399 --> 04:15:15,439
table format indicating each hop along

7590
04:15:12,479 --> 04:15:18,319
the way. We can also see the X sender IP

7591
04:15:15,439 --> 04:15:20,319
highlighted here with our IP address. A

7592
04:15:18,319 --> 04:15:22,800
second tool that we have access to is MX

7593
04:15:20,319 --> 04:15:24,560
Toolbox, which is a super useful utility

7594
04:15:22,800 --> 04:15:26,560
that can do a wide variety of things

7595
04:15:24,560 --> 04:15:28,239
like reverse DNS lookups or message

7596
04:15:26,560 --> 04:15:30,319
authentication checks and many more

7597
04:15:28,239 --> 04:15:32,000
things. One of its options is the email

7598
04:15:30,319 --> 04:15:33,840
header analyzer, which can be found in

7599
04:15:32,000 --> 04:15:35,840
the link below. Like with the previous

7600
04:15:33,840 --> 04:15:37,760
tool we just looked at, we can paste in

7601
04:15:35,840 --> 04:15:40,399
an email's header here or source and

7602
04:15:37,760 --> 04:15:41,840
click analyze header. And of course,

7603
04:15:40,399 --> 04:15:44,159
this will parse them to present the

7604
04:15:41,840 --> 04:15:45,439
headers in an easy to understand format.

7605
04:15:44,159 --> 04:15:48,239
So we can see we have the received

7606
04:15:45,439 --> 04:15:49,080
header relay here again with that IP

7607
04:15:48,239 --> 04:15:51,040
address

7608
04:15:49,080 --> 04:15:52,479
identified along with some email

7609
04:15:51,040 --> 04:15:54,800
authentication checks which we'll get

7610
04:15:52,479 --> 04:15:54,800
into

7611
04:15:55,159 --> 04:15:59,359
shortly. Often times attackers won't

7612
04:15:57,680 --> 04:16:01,760
even go as far as to bother with

7613
04:15:59,359 --> 04:16:03,439
spoofing addresses. In these cases, it

7614
04:16:01,760 --> 04:16:05,439
can be very quick to identify that it's

7615
04:16:03,439 --> 04:16:08,080
an email with malicious intent and can

7616
04:16:05,439 --> 04:16:11,159
expedite our investigation. For example,

7617
04:16:08,080 --> 04:16:13,680
let's quickly look at sample

7618
04:16:11,159 --> 04:16:15,800
2.ml. And this is a real fishing email

7619
04:16:13,680 --> 04:16:18,159
that I received in a honeypot

7620
04:16:15,800 --> 04:16:19,920
mailbox. And in this example, we can

7621
04:16:18,159 --> 04:16:22,319
clearly see that the sender is

7622
04:16:19,920 --> 04:16:25,840
attempting to impersonate CIBC, which is

7623
04:16:22,319 --> 04:16:27,439
a large Canadian bank. However, we just

7624
04:16:25,840 --> 04:16:29,359
need to look at the from header to

7625
04:16:27,439 --> 04:16:32,000
realize that this address is just a poor

7626
04:16:29,359 --> 04:16:33,760
attempt at impersonating CIBC using some

7627
04:16:32,000 --> 04:16:36,560
subdomains in the email address itself,

7628
04:16:33,760 --> 04:16:38,399
like CIBC-banking.

7629
04:16:36,560 --> 04:16:40,399
to make it look like it's affiliated.

7630
04:16:38,399 --> 04:16:42,199
And interestingly, the domain of this

7631
04:16:40,399 --> 04:16:45,520
mailbox,

7632
04:16:42,199 --> 04:16:46,960
cib.com, is almost an anagram of CIBC,

7633
04:16:45,520 --> 04:16:48,560
which makes me wonder if this was done

7634
04:16:46,960 --> 04:16:49,800
on purpose to attempt to fool someone

7635
04:16:48,560 --> 04:16:51,920
not paying close

7636
04:16:49,800 --> 04:16:55,680
attention. However, if we want to look

7637
04:16:51,920 --> 04:16:55,680
further, let's open this in Sublime

7638
04:16:58,040 --> 04:17:02,479
Text. We can notice that the return path

7639
04:17:00,640 --> 04:17:05,439
is set to a different email address,

7640
04:17:02,479 --> 04:17:06,880
which raises our suspicion.

7641
04:17:05,439 --> 04:17:08,880
Additionally, if we look at the received

7642
04:17:06,880 --> 04:17:10,640
headers from the bottom up, we can

7643
04:17:08,880 --> 04:17:13,600
notice that the originating mail server

7644
04:17:10,640 --> 04:17:15,359
is affiliated with Comcast Business. And

7645
04:17:13,600 --> 04:17:16,479
if we look at the X sender IP or

7646
04:17:15,359 --> 04:17:21,040
continue looking through the email

7647
04:17:16,479 --> 04:17:21,040
headers, we'll notice the IP address of

7648
04:17:21,800 --> 04:17:26,159
190.6.201.67. And so to be thorough and

7649
04:17:23,920 --> 04:17:29,560
complete here, let's do a reverse DNS

7650
04:17:26,159 --> 04:17:29,560
lookup again.

7651
04:17:29,760 --> 04:17:34,239
So, if we paste in that IP address,

7652
04:17:32,239 --> 04:17:36,640
we'll quickly find that the IP address

7653
04:17:34,239 --> 04:17:38,319
is located in Honduras and is affiliated

7654
04:17:36,640 --> 04:17:40,960
with a Honduran telecommunications

7655
04:17:38,319 --> 04:17:43,960
company called Cable Color, which is not

7656
04:17:40,960 --> 04:17:46,159
at all related to CIBC

7657
04:17:43,960 --> 04:17:47,760
Bank. So, I think that was a good first

7658
04:17:46,159 --> 04:17:49,120
look into email headers, and I'm going

7659
04:17:47,760 --> 04:17:50,399
to cut it short here so we can talk

7660
04:17:49,120 --> 04:17:54,000
about authentication headers

7661
04:17:50,399 --> 04:17:55,359
specifically in the next lesson.

7662
04:17:54,000 --> 04:17:56,880
Now, let's talk about email

7663
04:17:55,359 --> 04:17:59,199
authentication headers because we've

7664
04:17:56,880 --> 04:18:00,479
been hinting at them a few times so far.

7665
04:17:59,199 --> 04:18:02,399
There are three major email

7666
04:18:00,479 --> 04:18:06,000
authentication technologies out there.

7667
04:18:02,399 --> 04:18:07,760
We have SPF, DKIM, and Demar. And using

7668
04:18:06,000 --> 04:18:09,920
these protocols, we can check if a

7669
04:18:07,760 --> 04:18:11,960
domain actually did send an email and

7670
04:18:09,920 --> 04:18:14,800
essentially identify potential email

7671
04:18:11,960 --> 04:18:17,600
spoofing. So, first we have SPF or the

7672
04:18:14,800 --> 04:18:19,520
sender policy framework. And this is a

7673
04:18:17,600 --> 04:18:21,120
mechanism that allows domain owners to

7674
04:18:19,520 --> 04:18:23,279
specify which mail servers are

7675
04:18:21,120 --> 04:18:25,439
authorized to send emails on behalf of

7676
04:18:23,279 --> 04:18:27,520
their domain. And it works by publishing

7677
04:18:25,439 --> 04:18:30,640
SPF records in the domain name systems

7678
04:18:27,520 --> 04:18:32,640
or the DNS for a domain. And these SPF

7679
04:18:30,640 --> 04:18:34,479
records contain a list of IP addresses

7680
04:18:32,640 --> 04:18:36,199
or domain names of servers that are

7681
04:18:34,479 --> 04:18:38,479
authorized to send emails for the

7682
04:18:36,199 --> 04:18:40,720
domain. For example, we can check the

7683
04:18:38,479 --> 04:18:44,000
SPF records for any domain manually

7684
04:18:40,720 --> 04:18:46,000
using the NS lookup or dig command. So,

7685
04:18:44,000 --> 04:18:47,239
for example, if I want to check the SPF

7686
04:18:46,000 --> 04:18:49,199
records for

7687
04:18:47,239 --> 04:18:51,920
showdown.io, well, I can just use the

7688
04:18:49,199 --> 04:18:53,680
nsookup command, I can set the type to

7689
04:18:51,920 --> 04:18:56,000
text because this is the format in which

7690
04:18:53,680 --> 04:18:57,720
the SPF records are published. I can

7691
04:18:56,000 --> 04:18:59,760
specify the domain, so

7692
04:18:57,720 --> 04:19:01,359
shodden.io. And because this is going to

7693
04:18:59,760 --> 04:19:02,960
give us all of the text records for the

7694
04:19:01,359 --> 04:19:04,399
domain, well, I can pipe this to

7695
04:19:02,960 --> 04:19:07,520
something like GP where I can just

7696
04:19:04,399 --> 04:19:09,199
search for SPF records. And if we run

7697
04:19:07,520 --> 04:19:12,479
that, we can see this string here, which

7698
04:19:09,199 --> 04:19:14,000
is the SPF record itself. Now, before we

7699
04:19:12,479 --> 04:19:16,239
jump into this, we can also do this with

7700
04:19:14,000 --> 04:19:17,960
dig. So, if I run dig, I'm just going to

7701
04:19:16,239 --> 04:19:19,760
search for text records for

7702
04:19:17,960 --> 04:19:22,920
showdown.io. And again, I'm going to

7703
04:19:19,760 --> 04:19:25,439
pipe this to Grep where I can search for

7704
04:19:22,920 --> 04:19:26,880
SPF. And again, we get a very similar

7705
04:19:25,439 --> 04:19:29,279
string here, which is the record that

7706
04:19:26,880 --> 04:19:31,680
was published. So, let's look at this in

7707
04:19:29,279 --> 04:19:33,600
more detail. So, first we have the

7708
04:19:31,680 --> 04:19:35,040
version and this specifies the SPF

7709
04:19:33,600 --> 04:19:36,800
version being used, which in this case

7710
04:19:35,040 --> 04:19:39,600
and in most cases is going to be version

7711
04:19:36,800 --> 04:19:42,239
one. Next, we have this IP address here

7712
04:19:39,600 --> 04:19:44,080
along with this IP address. So, this

7713
04:19:42,239 --> 04:19:47,040
specifies that these IP addresses are

7714
04:19:44,080 --> 04:19:49,399
allowed to send email for the domain. We

7715
04:19:47,040 --> 04:19:51,680
also have include an S

7716
04:19:49,399 --> 04:19:54,840
spf.google.com. So, this includes the

7717
04:19:51,680 --> 04:19:57,199
SPF record of this domain here, this

7718
04:19:54,840 --> 04:19:59,359
spf.google.com when evaluating SPF for

7719
04:19:57,199 --> 04:20:01,520
the Showdown domain. So, this allows

7720
04:19:59,359 --> 04:20:03,359
Google's servers to send email on behalf

7721
04:20:01,520 --> 04:20:05,600
of Showdown. So, this is basically

7722
04:20:03,359 --> 04:20:07,680
saying include everything from this SPF

7723
04:20:05,600 --> 04:20:09,680
record. And if we were to look at that

7724
04:20:07,680 --> 04:20:12,279
SPF record, well, we can see everything

7725
04:20:09,680 --> 04:20:15,159
that it's going to

7726
04:20:12,279 --> 04:20:17,600
include. And lastly, here we have this

7727
04:20:15,159 --> 04:20:19,439
dashall. And this specifies the policy

7728
04:20:17,600 --> 04:20:21,680
for mail servers that don't match any of

7729
04:20:19,439 --> 04:20:23,920
the previous mechanisms. And in this

7730
04:20:21,680 --> 04:20:25,600
case, the dash all indicates a strict

7731
04:20:23,920 --> 04:20:27,840
policy, meaning that emails from

7732
04:20:25,600 --> 04:20:29,120
unauthorized senders should be rejected.

7733
04:20:27,840 --> 04:20:31,439
And the other one you'll see is the

7734
04:20:29,120 --> 04:20:33,680
tilda all. And this qualifier is the

7735
04:20:31,439 --> 04:20:35,439
soft fail. And this suggests that the

7736
04:20:33,680 --> 04:20:37,920
server should accept mail from IPs not

7737
04:20:35,439 --> 04:20:39,760
explicitly listed in the SPF record, but

7738
04:20:37,920 --> 04:20:41,840
it should treat them with suspicion. But

7739
04:20:39,760 --> 04:20:43,920
the dash all that we can see here, this

7740
04:20:41,840 --> 04:20:45,840
means a hard fail. So it specifies a

7741
04:20:43,920 --> 04:20:48,239
strict policy in which emails from IPs

7742
04:20:45,840 --> 04:20:50,319
not explicitly listed in this record

7743
04:20:48,239 --> 04:20:51,840
should be rejected. It is the most

7744
04:20:50,319 --> 04:20:53,279
secure option, but it can potentially

7745
04:20:51,840 --> 04:20:56,239
result in legitimate emails being

7746
04:20:53,279 --> 04:20:58,319
rejected if not configured properly. And

7747
04:20:56,239 --> 04:21:00,000
so when an email is received, the

7748
04:20:58,319 --> 04:21:02,720
recipient's email server is going to

7749
04:21:00,000 --> 04:21:04,800
perform an SPF check by querying the DNS

7750
04:21:02,720 --> 04:21:06,880
records of the sender's domain. If the

7751
04:21:04,800 --> 04:21:08,960
IP address of the sending mail server

7752
04:21:06,880 --> 04:21:11,279
matches any of the authorized IPs or

7753
04:21:08,960 --> 04:21:13,279
domains listed in the SPF record, well,

7754
04:21:11,279 --> 04:21:15,920
the email is going to pass that SPF

7755
04:21:13,279 --> 04:21:17,439
check. However, if the IP address is not

7756
04:21:15,920 --> 04:21:19,279
listed or is listed with a different

7757
04:21:17,439 --> 04:21:22,159
domain, the email is going to fail the

7758
04:21:19,279 --> 04:21:24,080
SPF check. And so you might be thinking

7759
04:21:22,159 --> 04:21:26,239
that this doesn't actually verify

7760
04:21:24,080 --> 04:21:28,159
whether a sender is legitimate or not.

7761
04:21:26,239 --> 04:21:30,239
All it does is verify that the sender

7762
04:21:28,159 --> 04:21:32,479
matches or is authorized by the domain

7763
04:21:30,239 --> 04:21:35,199
specified in the emails from address.

7764
04:21:32,479 --> 04:21:37,040
You'd be exactly right. If an attacker

7765
04:21:35,199 --> 04:21:39,199
registers their own domain, maybe a

7766
04:21:37,040 --> 04:21:41,279
lookalike domain, and sets up SPF

7767
04:21:39,199 --> 04:21:43,520
records themselves, or uses a service

7768
04:21:41,279 --> 04:21:45,520
like Gmail or Yahoo, well, the attacker

7769
04:21:43,520 --> 04:21:47,359
is going to pass that SPF check with no

7770
04:21:45,520 --> 04:21:49,680
issue. So it should never be looked at

7771
04:21:47,359 --> 04:21:50,960
in a vacuum. This is why it's equally

7772
04:21:49,680 --> 04:21:52,960
important for us to look into the

7773
04:21:50,960 --> 04:21:55,760
sender's actual domain along with

7774
04:21:52,960 --> 04:21:58,159
performing these authentication checks.

7775
04:21:55,760 --> 04:22:00,720
So next we have DKIM which stands for

7776
04:21:58,159 --> 04:22:02,960
domain keys identified mail and this is

7777
04:22:00,720 --> 04:22:05,760
a method used to authenticate the origin

7778
04:22:02,960 --> 04:22:08,159
of email messages. Its primary purpose

7779
04:22:05,760 --> 04:22:10,239
is to allow a receiver to verify that an

7780
04:22:08,159 --> 04:22:12,560
email message was indeed sent from the

7781
04:22:10,239 --> 04:22:14,239
domain that it claims to be and also

7782
04:22:12,560 --> 04:22:16,560
that the message content has not been

7783
04:22:14,239 --> 04:22:19,159
tampered with during transit. And it

7784
04:22:16,560 --> 04:22:21,279
does this using PKI or public key

7785
04:22:19,159 --> 04:22:23,439
infrastructure. And so when an email is

7786
04:22:21,279 --> 04:22:25,279
sent from a domain with DKIM enabled,

7787
04:22:23,439 --> 04:22:27,279
the sending mail server is going to add

7788
04:22:25,279 --> 04:22:29,359
a digital signature to the email header

7789
04:22:27,279 --> 04:22:31,760
using a unique private key associated

7790
04:22:29,359 --> 04:22:33,439
with that domain. The public key

7791
04:22:31,760 --> 04:22:35,600
corresponding to the private key that is

7792
04:22:33,439 --> 04:22:38,239
used is then published to the DNS record

7793
04:22:35,600 --> 04:22:40,159
of the sending domain. And so upon

7794
04:22:38,239 --> 04:22:41,920
receiving the email, the recipient's

7795
04:22:40,159 --> 04:22:44,479
email server is going to retrieve the

7796
04:22:41,920 --> 04:22:47,520
public key from the sender's DNS record

7797
04:22:44,479 --> 04:22:49,199
and use it to verify the DKIM signature.

7798
04:22:47,520 --> 04:22:50,560
If the signature is valid and the

7799
04:22:49,199 --> 04:22:52,319
message content hasn't been tampered

7800
04:22:50,560 --> 04:22:54,880
with, well, the email is considered

7801
04:22:52,319 --> 04:22:57,120
authentic or passes the check. And

7802
04:22:54,880 --> 04:22:58,960
again, it's crucial to note that DKIM

7803
04:22:57,120 --> 04:23:01,600
alone doesn't evaluate the content of

7804
04:22:58,960 --> 04:23:03,520
the email or the intent behind it. While

7805
04:23:01,600 --> 04:23:05,600
it establishes the legitimacy of the

7806
04:23:03,520 --> 04:23:07,680
domain, it doesn't assess whether the

7807
04:23:05,600 --> 04:23:09,840
domain itself or the sender's intentions

7808
04:23:07,680 --> 04:23:11,359
are malicious or not. For example, an

7809
04:23:09,840 --> 04:23:13,359
attacker could still use a typo

7810
04:23:11,359 --> 04:23:15,439
squatting attack to register a domain

7811
04:23:13,359 --> 04:23:17,600
that looks similar and set up DKIM and

7812
04:23:15,439 --> 04:23:19,840
SPF themselves to pass on their own

7813
04:23:17,600 --> 04:23:21,840
lookalike domain. Or perhaps a

7814
04:23:19,840 --> 04:23:23,120
legitimate mailbox was compromised. And

7815
04:23:21,840 --> 04:23:25,120
of course, in this case, it's going to

7816
04:23:23,120 --> 04:23:27,680
pass the DKIM checks if it's being sent

7817
04:23:25,120 --> 04:23:30,239
from an actual mailbox. And lastly here

7818
04:23:27,680 --> 04:23:32,520
we have Dmark or domain-based message

7819
04:23:30,239 --> 04:23:35,040
authentication reporting and

7820
04:23:32,520 --> 04:23:37,359
conformance. And DMARK works alongside

7821
04:23:35,040 --> 04:23:39,359
SPF and DKIM to enhance the overall

7822
04:23:37,359 --> 04:23:42,159
email authentication with additional

7823
04:23:39,359 --> 04:23:43,840
reporting mechanisms. And so while SPF

7824
04:23:42,159 --> 04:23:45,520
and DKIM individually authenticate

7825
04:23:43,840 --> 04:23:48,000
emails by verifying the sender's domain

7826
04:23:45,520 --> 04:23:49,840
and ensuring message integrity, Demar

7827
04:23:48,000 --> 04:23:52,560
adds an extra layer of control and

7828
04:23:49,840 --> 04:23:54,640
visibility for domain owners. And so

7829
04:23:52,560 --> 04:23:56,159
Demar allows domain owners to specify

7830
04:23:54,640 --> 04:23:58,319
policies regarding how their email

7831
04:23:56,159 --> 04:24:00,640
should be handled if they fail SPF or

7832
04:23:58,319 --> 04:24:01,920
DKIM checks. And these policies can

7833
04:24:00,640 --> 04:24:03,760
include things like none, which

7834
04:24:01,920 --> 04:24:05,600
instructs receiving mail servers to only

7835
04:24:03,760 --> 04:24:08,159
report on email authentication results

7836
04:24:05,600 --> 04:24:10,000
without taking any action. We also have

7837
04:24:08,159 --> 04:24:11,920
quarantine, which directs suspicious

7838
04:24:10,000 --> 04:24:14,000
emails to the recipient spam or

7839
04:24:11,920 --> 04:24:16,000
quarantine folder. And we also have

7840
04:24:14,000 --> 04:24:18,159
reject, which outright rejects email for

7841
04:24:16,000 --> 04:24:20,399
failed authentication. And so it's

7842
04:24:18,159 --> 04:24:22,159
important to note that demark policies

7843
04:24:20,399 --> 04:24:23,760
only outline what actions receiving

7844
04:24:22,159 --> 04:24:26,080
email servers should take when they

7845
04:24:23,760 --> 04:24:27,840
encounter emails that fail demar checks,

7846
04:24:26,080 --> 04:24:30,080
but they don't technically mandate or

7847
04:24:27,840 --> 04:24:31,600
enforce compliance. And so ultimately

7848
04:24:30,080 --> 04:24:33,120
the recipient's mail server

7849
04:24:31,600 --> 04:24:35,960
administrators can choose whether or not

7850
04:24:33,120 --> 04:24:38,479
to honor demark policies set by sending

7851
04:24:35,960 --> 04:24:40,159
domains. And now that was uh quite a bit

7852
04:24:38,479 --> 04:24:43,040
of theory here. So let's look at some

7853
04:24:40,159 --> 04:24:44,800
email authentication headers in action.

7854
04:24:43,040 --> 04:24:47,199
And so let's go to our fishing analysis

7855
04:24:44,800 --> 04:24:50,720
folder. Open up the header analysis

7856
04:24:47,199 --> 04:24:50,720
folder as well and go to

7857
04:24:50,920 --> 04:24:55,279
sample3.l and we can see here we have an

7858
04:24:53,439 --> 04:24:57,479
email that claims to be from namecheep

7859
04:24:55,279 --> 04:24:59,600
renewals and namecheep is a domain

7860
04:24:57,479 --> 04:25:01,520
registar and it looks like we're getting

7861
04:24:59,600 --> 04:25:03,640
some sense of urgency here because we

7862
04:25:01,520 --> 04:25:06,319
only have 7 days left to renew our

7863
04:25:03,640 --> 04:25:09,319
domain. So let's open this up in sublime

7864
04:25:06,319 --> 04:25:09,319
text.

7865
04:25:11,520 --> 04:25:15,520
When we look at the received headers, we

7866
04:25:13,600 --> 04:25:17,600
can identify when the email was routed

7867
04:25:15,520 --> 04:25:20,319
from the sender mail server to our

7868
04:25:17,600 --> 04:25:24,399
trusted Google mail server. And the IP

7869
04:25:20,319 --> 04:25:24,399
address that we can identify here is

7870
04:25:25,080 --> 04:25:29,120
149.72.142.11. So this is the received

7871
04:25:27,120 --> 04:25:30,960
header that tells us when the message

7872
04:25:29,120 --> 04:25:32,960
left the sender's hands or who the

7873
04:25:30,960 --> 04:25:34,800
sender claimed to be and into our

7874
04:25:32,960 --> 04:25:36,880
trusted infrastructure, in this case,

7875
04:25:34,800 --> 04:25:38,880
Google's mail servers.

7876
04:25:36,880 --> 04:25:40,960
And so we can genuinely trust that this

7877
04:25:38,880 --> 04:25:42,560
IP address relates to our sender because

7878
04:25:40,960 --> 04:25:44,640
it can't be spoofed. You know, there was

7879
04:25:42,560 --> 04:25:46,560
a genuine TCP connection that was made

7880
04:25:44,640 --> 04:25:50,080
between these two servers. And this is

7881
04:25:46,560 --> 04:25:50,080
the artifact from it, this received

7882
04:25:50,279 --> 04:25:55,920
header. And so if we perform a lookup on

7883
04:25:53,040 --> 04:25:58,319
this IP address, we can see that it

7884
04:25:55,920 --> 04:26:00,560
actually returns as send grid, which is

7885
04:25:58,319 --> 04:26:02,800
a very common email marketing solution,

7886
04:26:00,560 --> 04:26:04,640
which could in theory be abused. But we

7887
04:26:02,800 --> 04:26:08,040
can also see the reverse DNS of this

7888
04:26:04,640 --> 04:26:10,000
mail server which does in fact return as

7889
04:26:08,040 --> 04:26:12,000
namecheep.com. And so now that we know

7890
04:26:10,000 --> 04:26:15,479
the original sender and mail server,

7891
04:26:12,000 --> 04:26:17,680
let's look at the authentication

7892
04:26:15,479 --> 04:26:20,080
checks. And so this is where we should

7893
04:26:17,680 --> 04:26:21,960
focus our efforts particularly with our

7894
04:26:20,080 --> 04:26:26,560
first check which will be

7895
04:26:21,960 --> 04:26:28,479
SPF. We can see the header received SPF.

7896
04:26:26,560 --> 04:26:30,159
This is a very important header for us

7897
04:26:28,479 --> 04:26:31,760
because it provides information about

7898
04:26:30,159 --> 04:26:33,760
whether the email server that received

7899
04:26:31,760 --> 04:26:35,840
the message considers the sending server

7900
04:26:33,760 --> 04:26:38,479
to be authorized to send emails on

7901
04:26:35,840 --> 04:26:40,319
behalf of the purported sender domain.

7902
04:26:38,479 --> 04:26:42,800
So what basically happened is that our

7903
04:26:40,319 --> 04:26:45,040
email server or Google read the domain

7904
04:26:42,800 --> 04:26:48,120
from the return path email header. In

7905
04:26:45,040 --> 04:26:50,000
this case this mail service mailout

7906
04:26:48,120 --> 04:26:51,680
one.namecheep.com it then check that

7907
04:26:50,000 --> 04:26:54,120
domain's DNS records to ask something

7908
04:26:51,680 --> 04:26:56,399
like hello mailout 1.namecheep.com

7909
04:26:54,120 --> 04:26:58,319
namecheep.com. Do you have any SPF

7910
04:26:56,399 --> 04:27:01,359
records published? And if so, do you

7911
04:26:58,319 --> 04:27:01,359
send email from

7912
04:27:01,560 --> 04:27:05,040
149.72.142.11 because we just got an

7913
04:27:03,600 --> 04:27:07,359
email from this domain that claimed to

7914
04:27:05,040 --> 04:27:09,439
be from you. And so we can manually

7915
04:27:07,359 --> 04:27:11,120
check the SPF records ourselves and

7916
04:27:09,439 --> 04:27:13,279
mimic what Google did here on the back

7917
04:27:11,120 --> 04:27:15,199
end. And so if you remember, we can use

7918
04:27:13,279 --> 04:27:17,120
something like dig or nsookup to do

7919
04:27:15,199 --> 04:27:18,080
this. So I'm just going to look for text

7920
04:27:17,120 --> 04:27:21,080
records for mail

7921
04:27:18,080 --> 04:27:21,080
servicemail.namecheep.com.

7922
04:27:22,159 --> 04:27:25,439
It's actually email out one. I was uh

7923
04:27:24,159 --> 04:27:27,279
scratching my head figuring out why that

7924
04:27:25,439 --> 04:27:29,199
wasn't working. It's mail service email

7925
04:27:27,279 --> 04:27:30,640
out one. And if you remember, this is

7926
04:27:29,199 --> 04:27:33,560
going to return all the text records. So

7927
04:27:30,640 --> 04:27:36,159
I want to GP out specifically for

7928
04:27:33,560 --> 04:27:38,960
SPF. And we can see here we have the

7929
04:27:36,159 --> 04:27:42,840
full SPF record that was published. And

7930
04:27:38,960 --> 04:27:44,720
in this case, the SPF record is include

7931
04:27:42,840 --> 04:27:46,479
sendgrid.net, which means that it

7932
04:27:44,720 --> 04:27:48,960
includes itself and all of the records

7933
04:27:46,479 --> 04:27:50,960
within sendrid.net within this SPF

7934
04:27:48,960 --> 04:27:53,920
record. And if we look at all the

7935
04:27:50,960 --> 04:27:53,920
records designated by

7936
04:27:55,720 --> 04:27:59,760
sendgrid.net, well, we can see a number

7937
04:27:57,840 --> 04:28:02,560
of IP address ranges published as

7938
04:27:59,760 --> 04:28:04,640
authorized senders in their SPF record.

7939
04:28:02,560 --> 04:28:07,159
And specifically, we can see this block

7940
04:28:04,640 --> 04:28:10,640
here of

7941
04:28:07,159 --> 04:28:12,560
149.72.0.0 on this /16 subnet. And this

7942
04:28:10,640 --> 04:28:15,479
is a cider block containing all of the

7943
04:28:12,560 --> 04:28:20,199
IP addresses in the range of

7944
04:28:15,479 --> 04:28:22,479
149.72.0.0 all the way to 149.72.255.

7945
04:28:20,199 --> 04:28:23,840
255.255. And of course, the IP address

7946
04:28:22,479 --> 04:28:25,840
of the original sender that we

7947
04:28:23,840 --> 04:28:28,319
identified earlier and the one that our

7948
04:28:25,840 --> 04:28:30,720
email server used to check SPF is within

7949
04:28:28,319 --> 04:28:32,560
this range, meaning it passed the check.

7950
04:28:30,720 --> 04:28:34,760
In summary, the email originated from

7951
04:28:32,560 --> 04:28:36,760
this 022.mmail

7952
04:28:34,760 --> 04:28:39,279
service.namecheep.com with this IP

7953
04:28:36,760 --> 04:28:42,040
address, which is authorized to send

7954
04:28:39,279 --> 04:28:43,920
emails for mail

7955
04:28:42,040 --> 04:28:45,520
serviceout.namecheep.com. And the SPF

7956
04:28:43,920 --> 04:28:47,760
record for this domain includes

7957
04:28:45,520 --> 04:28:49,399
sendgrid.net, net indicating that emails

7958
04:28:47,760 --> 04:28:51,520
may be sent through Sengid's

7959
04:28:49,399 --> 04:28:53,359
infrastructure and the receiving email

7960
04:28:51,520 --> 04:28:55,040
server in this case Google server

7961
04:28:53,359 --> 04:28:58,800
verified this and allowed the email to

7962
04:28:55,040 --> 04:29:00,880
pass through. So next let's look at DKIM

7963
04:28:58,800 --> 04:29:03,279
and you can see we have a DKIM signature

7964
04:29:00,880 --> 04:29:06,000
header here. Well actually we have two

7965
04:29:03,279 --> 04:29:07,680
one for namecheep and one for send grid.

7966
04:29:06,000 --> 04:29:09,120
Both signatures seem to be using the

7967
04:29:07,680 --> 04:29:10,960
same body hash and including the same

7968
04:29:09,120 --> 04:29:13,439
set of header fields but they will come

7969
04:29:10,960 --> 04:29:15,040
from different domains and selectors.

7970
04:29:13,439 --> 04:29:16,560
And this can indicate what we already

7971
04:29:15,040 --> 04:29:17,760
confirmed, which is that the email was

7972
04:29:16,560 --> 04:29:19,720
processed through multiple email

7973
04:29:17,760 --> 04:29:21,760
systems, each applying its own DKIM

7974
04:29:19,720 --> 04:29:23,520
signature. And since we're looking for

7975
04:29:21,760 --> 04:29:25,359
integrity with DKIM, well, let's focus

7976
04:29:23,520 --> 04:29:27,720
on the signature closest to the source

7977
04:29:25,359 --> 04:29:29,760
or the namecheep one, and break down its

7978
04:29:27,720 --> 04:29:31,680
components. So, first we have the

7979
04:29:29,760 --> 04:29:34,239
version, and this is version one, which

7980
04:29:31,680 --> 04:29:35,680
typically should always be one. Next

7981
04:29:34,239 --> 04:29:37,600
here with this a field, well, this

7982
04:29:35,680 --> 04:29:39,600
actually refers to the algorithm that

7983
04:29:37,600 --> 04:29:41,840
was used to generate the signature. In

7984
04:29:39,600 --> 04:29:43,439
this case, we have Shaw 256, which is

7985
04:29:41,840 --> 04:29:44,800
what you'll typically see. But also be

7986
04:29:43,439 --> 04:29:47,040
warned if you see a weaker algorithm

7987
04:29:44,800 --> 04:29:48,720
like Shaw 1. It doesn't necessarily mean

7988
04:29:47,040 --> 04:29:50,239
that it's a malicious email. It just

7989
04:29:48,720 --> 04:29:52,000
means that a weaker algorithm was used

7990
04:29:50,239 --> 04:29:53,600
to generate the hash, indicating a

7991
04:29:52,000 --> 04:29:54,880
higher chance of hash collisions. But

7992
04:29:53,600 --> 04:29:58,040
it's not really something to worry

7993
04:29:54,880 --> 04:30:00,120
about. We also have this C equals

7994
04:29:58,040 --> 04:30:02,479
relax/reaxed. And this refers to the

7995
04:30:00,120 --> 04:30:04,720
canonicalization algorithm used for both

7996
04:30:02,479 --> 04:30:07,279
the header fields, this first one, and

7997
04:30:04,720 --> 04:30:09,120
the body of the message. So, DKIM uses

7998
04:30:07,279 --> 04:30:10,720
this to ensure that the signed content

7999
04:30:09,120 --> 04:30:12,720
like the headers and the body are

8000
04:30:10,720 --> 04:30:14,080
consistent across email systems to

8001
04:30:12,720 --> 04:30:15,760
prevent the signatures from being

8002
04:30:14,080 --> 04:30:18,239
mismatched or failing due to whites

8003
04:30:15,760 --> 04:30:19,920
space or formatting changes. And so,

8004
04:30:18,239 --> 04:30:21,439
relaxed means that you know minor

8005
04:30:19,920 --> 04:30:23,040
changes in the whites space and line

8006
04:30:21,439 --> 04:30:24,960
breaks are permitted between the header

8007
04:30:23,040 --> 04:30:27,000
and body which are accepted variations

8008
04:30:24,960 --> 04:30:29,359
that still maintain the contents

8009
04:30:27,000 --> 04:30:30,359
integrity. And we also have the domain

8010
04:30:29,359 --> 04:30:32,800
here. So,

8011
04:30:30,359 --> 04:30:35,199
namecheep.com and if we look down to s

8012
04:30:32,800 --> 04:30:36,960
here, this is the selector.

8013
04:30:35,199 --> 04:30:38,640
And so together the domain and the

8014
04:30:36,960 --> 04:30:41,120
selector are used to locate the

8015
04:30:38,640 --> 04:30:43,920
associated public key that email systems

8016
04:30:41,120 --> 04:30:46,319
can use to verify the signature. So now

8017
04:30:43,920 --> 04:30:48,080
that we know the domain and the selector

8018
04:30:46,319 --> 04:30:50,120
we can actually manually check the

8019
04:30:48,080 --> 04:30:53,279
public key ourselves through

8020
04:30:50,120 --> 04:30:55,040
DNS. And so to do this the syntax will

8021
04:30:53,279 --> 04:30:57,120
be the following. And again we can use

8022
04:30:55,040 --> 04:30:58,960
nsookup or dig to do this. I'll use

8023
04:30:57,120 --> 04:31:01,439
nsookup because we can also do this on

8024
04:30:58,960 --> 04:31:04,800
Windows as well. And I'm going to put in

8025
04:31:01,439 --> 04:31:06,399
that selector as the subdomain here.

8026
04:31:04,800 --> 04:31:09,199
And typically the syntax here is going

8027
04:31:06,399 --> 04:31:10,560
to be an underscore with domain key. And

8028
04:31:09,199 --> 04:31:12,040
then we're going to put in the domain.

8029
04:31:10,560 --> 04:31:14,560
So

8030
04:31:12,040 --> 04:31:16,359
namecheep.com. And if we look this up,

8031
04:31:14,560 --> 04:31:18,159
well, we get this

8032
04:31:16,359 --> 04:31:20,720
response. We can see there is a

8033
04:31:18,159 --> 04:31:23,120
canonical name set to this sendgrid.net

8034
04:31:20,720 --> 04:31:25,080
domain. But we can also see the contents

8035
04:31:23,120 --> 04:31:28,399
of the public key

8036
04:31:25,080 --> 04:31:29,680
itself. And if we go back to our email,

8037
04:31:28,399 --> 04:31:31,840
well, we also have a couple other

8038
04:31:29,680 --> 04:31:33,680
fields. So we have BH here. And this is

8039
04:31:31,840 --> 04:31:36,760
the body hash which was computed using

8040
04:31:33,680 --> 04:31:40,000
that hashing algorithm and encoded in B

8041
04:31:36,760 --> 04:31:42,720
64. And under that we have the B field

8042
04:31:40,000 --> 04:31:44,479
which is the DKIM signature itself which

8043
04:31:42,720 --> 04:31:47,120
is calculated based on the header fields

8044
04:31:44,479 --> 04:31:48,800
and the body hash itself. And now we

8045
04:31:47,120 --> 04:31:50,560
don't have to verify this manually. Of

8046
04:31:48,800 --> 04:31:52,399
course obviously our email system has

8047
04:31:50,560 --> 04:31:54,080
done this automatically for us but we

8048
04:31:52,399 --> 04:31:56,640
can also use several tools at our

8049
04:31:54,080 --> 04:31:58,640
disposal to do this ourselves. Now

8050
04:31:56,640 --> 04:32:00,960
instead of using NS lookup well we can

8051
04:31:58,640 --> 04:32:02,640
do this lookup through MX Toolbox. Now

8052
04:32:00,960 --> 04:32:03,479
if you remember we had the domain name

8053
04:32:02,640 --> 04:32:05,600
which was

8054
04:32:03,479 --> 04:32:09,840
namecheepief.com and we had the selector

8055
04:32:05,600 --> 04:32:09,840
or S1 and if we do a DKIM

8056
04:32:10,279 --> 04:32:14,399
lookup well we can get the same result.

8057
04:32:12,720 --> 04:32:17,000
We can see the public key here along

8058
04:32:14,399 --> 04:32:19,359
with the other details of that DKIM

8059
04:32:17,000 --> 04:32:22,080
signature. And now if we go to the email

8060
04:32:19,359 --> 04:32:25,040
header analyzer and we copy the contents

8061
04:32:22,080 --> 04:32:26,880
of our email and paste it in we can

8062
04:32:25,040 --> 04:32:30,239
analyze the header which will perform

8063
04:32:26,880 --> 04:32:31,880
some DM checks for us.

8064
04:32:30,239 --> 04:32:34,479
If we scroll down to

8065
04:32:31,880 --> 04:32:36,239
dkimnamecheep.com with this S1 selector,

8066
04:32:34,479 --> 04:32:38,560
well, this was the DKIM signature that

8067
04:32:36,239 --> 04:32:40,479
we were analyzing manually. If we click

8068
04:32:38,560 --> 04:32:42,680
on show here, we can see all of the

8069
04:32:40,479 --> 04:32:45,040
checks that were

8070
04:32:42,680 --> 04:32:46,880
performed. So, we can see that the DKIM

8071
04:32:45,040 --> 04:32:48,800
record was found and that the record was

8072
04:32:46,880 --> 04:32:50,319
valid. We can see that the public key

8073
04:32:48,800 --> 04:32:52,239
was present, which of course we verified

8074
04:32:50,319 --> 04:32:54,479
manually, but that the signature was

8075
04:32:52,239 --> 04:32:56,399
also valid. We can see that the

8076
04:32:54,479 --> 04:32:57,920
signature domain matched and there was

8077
04:32:56,399 --> 04:33:00,159
alignment with the signature in the

8078
04:32:57,920 --> 04:33:02,080
domain. And so alignment is when the

8079
04:33:00,159 --> 04:33:03,959
DKIM signing domain matches the header

8080
04:33:02,080 --> 04:33:06,480
from domain. In this case, it was

8081
04:33:03,959 --> 04:33:08,680
namecheep.com. So it does check out.

8082
04:33:06,480 --> 04:33:10,719
You'll notice that the body hash did not

8083
04:33:08,680 --> 04:33:12,240
verify. And this is something you want

8084
04:33:10,719 --> 04:33:13,680
to make note of because it means

8085
04:33:12,240 --> 04:33:15,680
something in the contents of the email

8086
04:33:13,680 --> 04:33:17,760
message were changed, obviously breaking

8087
04:33:15,680 --> 04:33:19,600
integrity. However, in this case, it's

8088
04:33:17,760 --> 04:33:21,680
actually expected here because for the

8089
04:33:19,600 --> 04:33:23,279
course, I had to manually redact some

8090
04:33:21,680 --> 04:33:24,959
identifiable information like the

8091
04:33:23,279 --> 04:33:26,320
original recipient. So just trust that

8092
04:33:24,959 --> 04:33:29,199
we don't need to worry about the body

8093
04:33:26,320 --> 04:33:31,760
hash check for this example.

8094
04:33:29,199 --> 04:33:34,480
So let's put all of this together using

8095
04:33:31,760 --> 04:33:36,719
the authentication results header which

8096
04:33:34,480 --> 04:33:38,561
we can see here. The authentication

8097
04:33:36,719 --> 04:33:39,760
results header is used to convey the

8098
04:33:38,561 --> 04:33:42,320
results of all these various

8099
04:33:39,760 --> 04:33:44,480
authentication checks. And in our email

8100
04:33:42,320 --> 04:33:46,480
it indicates that DKIM passed the check

8101
04:33:44,480 --> 04:33:48,480
for both namecheep and send grid. In

8102
04:33:46,480 --> 04:33:50,799
this case we can see that SPF passed as

8103
04:33:48,480 --> 04:33:53,039
well. And lastly we can see the actual

8104
04:33:50,799 --> 04:33:54,959
demark policy. In this case, we passed,

8105
04:33:53,039 --> 04:33:56,879
but had we failed, well, it's set to

8106
04:33:54,959 --> 04:33:58,799
reject, indicating that it would tell

8107
04:33:56,879 --> 04:34:00,039
mail servers to reject this email if it

8108
04:33:58,799 --> 04:34:02,799
did not

8109
04:34:00,039 --> 04:34:04,879
pass. So, after all of the analysis we

8110
04:34:02,799 --> 04:34:07,039
done, well, do you think this email was

8111
04:34:04,879 --> 04:34:08,799
real or was it a fishing attempt? Well,

8112
04:34:07,039 --> 04:34:10,480
if not obvious already, with all our

8113
04:34:08,799 --> 04:34:12,639
checks, it was in fact a legitimate

8114
04:34:10,480 --> 04:34:14,400
email. Now, I will stress again that

8115
04:34:12,639 --> 04:34:16,400
these email authentication checks are

8116
04:34:14,400 --> 04:34:18,480
not a silver bullet for determining the

8117
04:34:16,400 --> 04:34:20,000
legitimacy of an email. They simply

8118
04:34:18,480 --> 04:34:21,520
confirm that the email has passed

8119
04:34:20,000 --> 04:34:24,240
through certain authentication protocols

8120
04:34:21,520 --> 04:34:26,320
like SPF and DKIM. While passing these

8121
04:34:24,240 --> 04:34:28,000
checks is a positive sign, it never

8122
04:34:26,320 --> 04:34:30,400
guarantees that the email is completely

8123
04:34:28,000 --> 04:34:31,760
safe or genuine. Right? So attackers

8124
04:34:30,400 --> 04:34:33,240
have various methods to exploit

8125
04:34:31,760 --> 04:34:35,600
loopholes in these authentication

8126
04:34:33,240 --> 04:34:37,199
systems like for example registering a

8127
04:34:35,600 --> 04:34:38,799
lookalike domain and setting up the

8128
04:34:37,199 --> 04:34:41,039
infrastructure to pass these checks

8129
04:34:38,799 --> 04:34:43,359
themselves or actually compromising a

8130
04:34:41,039 --> 04:34:45,119
legitimate mailbox. or an attacker might

8131
04:34:43,359 --> 04:34:46,959
leverage legitimate email services like

8132
04:34:45,119 --> 04:34:48,879
Google or Yahoo, which will pass all of

8133
04:34:46,959 --> 04:34:50,080
these checks. So, of course, while

8134
04:34:48,879 --> 04:34:52,240
they're important, they should not be

8135
04:34:50,080 --> 04:34:53,680
blindly trusted. Malicious emails can

8136
04:34:52,240 --> 04:34:54,959
sometimes slip through these checks, and

8137
04:34:53,680 --> 04:34:56,639
legitimate emails might also

8138
04:34:54,959 --> 04:34:58,719
occasionally fail them, mostly due to

8139
04:34:56,639 --> 04:35:00,160
configuration issues. And so, it's

8140
04:34:58,719 --> 04:35:01,920
essential for us to conduct further

8141
04:35:00,160 --> 04:35:04,080
analysis beyond just relying on

8142
04:35:01,920 --> 04:35:06,160
authentication results. So we need to

8143
04:35:04,080 --> 04:35:07,920
verify the domain and the sending IP

8144
04:35:06,160 --> 04:35:09,520
address doing reverse lookups and seeing

8145
04:35:07,920 --> 04:35:11,680
what email server is actually on the

8146
04:35:09,520 --> 04:35:13,119
other end and also assessing the overall

8147
04:35:11,680 --> 04:35:15,039
context of the email and carefully

8148
04:35:13,119 --> 04:35:17,760
examining its content which we're going

8149
04:35:15,039 --> 04:35:17,760
to do in the next

8150
04:35:18,840 --> 04:35:23,600
lesson. Now that we've discussed header

8151
04:35:21,279 --> 04:35:25,760
analysis, let's shift our focus to the

8152
04:35:23,600 --> 04:35:27,760
substance of these emails, right? What

8153
04:35:25,760 --> 04:35:29,199
language does the email employ? Are

8154
04:35:27,760 --> 04:35:31,039
there any indicators of social

8155
04:35:29,199 --> 04:35:32,561
engineering tactics? How does the email

8156
04:35:31,039 --> 04:35:34,080
appear when it's viewed in the client?

8157
04:35:32,561 --> 04:35:36,561
We can think of considerations like the

8158
04:35:34,080 --> 04:35:37,879
content type, encoding or wording or

8159
04:35:36,561 --> 04:35:40,080
even grammar and

8160
04:35:37,879 --> 04:35:42,080
formatting. So to start, let's open our

8161
04:35:40,080 --> 04:35:44,480
fishing analysis folder and let's head

8162
04:35:42,080 --> 04:35:47,400
to the content analysis directory and

8163
04:35:44,480 --> 04:35:49,520
open up sample 1.

8164
04:35:47,400 --> 04:35:50,959
ML. So this is going to be the first

8165
04:35:49,520 --> 04:35:52,719
email that we're looking at. And

8166
04:35:50,959 --> 04:35:56,199
specifically, let's also open this up in

8167
04:35:52,719 --> 04:35:56,199
Sublime Text.

8168
04:35:58,400 --> 04:36:02,799
And so in a typical email file, the

8169
04:36:00,719 --> 04:36:04,879
actual body of the email consists of the

8170
04:36:02,799 --> 04:36:07,359
MIME or the multi-purpose internet mail

8171
04:36:04,879 --> 04:36:08,879
extension parts. And so if we look at

8172
04:36:07,359 --> 04:36:10,279
this header here, we can see the MIME

8173
04:36:08,879 --> 04:36:13,039
version of

8174
04:36:10,279 --> 04:36:15,279
1.0. And MIME allows emails to contain

8175
04:36:13,039 --> 04:36:18,799
different types of content like plain

8176
04:36:15,279 --> 04:36:20,320
text or HTML or images and attachments.

8177
04:36:18,799 --> 04:36:22,561
Each part of an email is typically

8178
04:36:20,320 --> 04:36:23,920
separated by a boundary similar to this

8179
04:36:22,561 --> 04:36:25,520
one.

8180
04:36:23,920 --> 04:36:27,600
So again, some of these headers we have

8181
04:36:25,520 --> 04:36:30,000
the mime version and so this indicates

8182
04:36:27,600 --> 04:36:32,561
the version of mine that's being used.

8183
04:36:30,000 --> 04:36:34,400
We also have the content type. So this

8184
04:36:32,561 --> 04:36:36,561
header will specify the type of content

8185
04:36:34,400 --> 04:36:38,320
in the email body. So it can be plain

8186
04:36:36,561 --> 04:36:40,959
text like we see here or it could be

8187
04:36:38,320 --> 04:36:42,439
text/ HTML for HTML content. And there

8188
04:36:40,959 --> 04:36:44,400
are many other

8189
04:36:42,439 --> 04:36:46,480
possibilities. And next we have the

8190
04:36:44,400 --> 04:36:48,320
content transfer encoding header. And

8191
04:36:46,480 --> 04:36:50,719
this header specifies how the content is

8192
04:36:48,320 --> 04:36:52,959
encoded for transmission. So common ones

8193
04:36:50,719 --> 04:36:55,199
you'll see are 7 bit or 8 bit or even

8194
04:36:52,959 --> 04:36:57,439
base 64 which we looked at earlier or

8195
04:36:55,199 --> 04:36:58,959
quoted printable and of course in our

8196
04:36:57,439 --> 04:37:01,600
example it's 7 bit and this means that

8197
04:36:58,959 --> 04:37:03,840
no encoding is applied and we talked

8198
04:37:01,600 --> 04:37:05,760
about the boundary and so each mime part

8199
04:37:03,840 --> 04:37:08,320
is separated by a generated boundary

8200
04:37:05,760 --> 04:37:10,000
string and so this boundary is used to

8201
04:37:08,320 --> 04:37:12,320
differentiate and distinguish different

8202
04:37:10,000 --> 04:37:14,639
parts of the email body and so the

8203
04:37:12,320 --> 04:37:16,320
presence of two boundary strings here

8204
04:37:14,639 --> 04:37:18,639
indicates that the email contains two

8205
04:37:16,320 --> 04:37:20,561
parts and this is a common practice in

8206
04:37:18,639 --> 04:37:22,320
mime encoded emails. to provide an

8207
04:37:20,561 --> 04:37:24,320
alternate representation of the same

8208
04:37:22,320 --> 04:37:26,320
content. In this case, we don't have any

8209
04:37:24,320 --> 04:37:28,959
plain text content. All of it is under

8210
04:37:26,320 --> 04:37:30,959
this HTML here. And we can see the text

8211
04:37:28,959 --> 04:37:34,039
HTML under the content type indicating

8212
04:37:30,959 --> 04:37:36,480
that this is going to be HTML rendered

8213
04:37:34,039 --> 04:37:38,561
content. Just as a quick aside, this is

8214
04:37:36,480 --> 04:37:40,240
a completely separate email, but you can

8215
04:37:38,561 --> 04:37:42,719
see if we scroll down to the content

8216
04:37:40,240 --> 04:37:45,279
section, we have two different types of

8217
04:37:42,719 --> 04:37:47,439
content here. The first version of the

8218
04:37:45,279 --> 04:37:50,320
email as signified by the content type

8219
04:37:47,439 --> 04:37:52,719
header is a plain text email. And we can

8220
04:37:50,320 --> 04:37:55,760
see here this email is just written in

8221
04:37:52,719 --> 04:37:58,719
plain text. If we scroll down, we can

8222
04:37:55,760 --> 04:38:01,520
see a second content type partitioned by

8223
04:37:58,719 --> 04:38:05,680
the content boundary. And in this case,

8224
04:38:01,520 --> 04:38:07,520
it is an HTML version of the same email.

8225
04:38:05,680 --> 04:38:09,840
And if we were to open this in our email

8226
04:38:07,520 --> 04:38:12,240
client, well, we can obviously see the

8227
04:38:09,840 --> 04:38:13,920
HTML version of the email signified by

8228
04:38:12,240 --> 04:38:16,639
the images and the different styling

8229
04:38:13,920 --> 04:38:19,279
here. But if we go up to the view tab

8230
04:38:16,639 --> 04:38:22,000
and go down to message body, well, we

8231
04:38:19,279 --> 04:38:24,240
can change it from original HTML to

8232
04:38:22,000 --> 04:38:26,000
something like plain text. And now we're

8233
04:38:24,240 --> 04:38:28,039
visually seeing that plain text version

8234
04:38:26,000 --> 04:38:30,561
of the

8235
04:38:28,039 --> 04:38:33,439
email. Now, let's return to the email in

8236
04:38:30,561 --> 04:38:35,359
the client. And we can see some oddities

8237
04:38:33,439 --> 04:38:37,240
right off the bat that might provide red

8238
04:38:35,359 --> 04:38:39,920
flags that this isn't a legitimate

8239
04:38:37,240 --> 04:38:42,160
email. Well, first off, the email is

8240
04:38:39,920 --> 04:38:44,480
claiming to be from Trust Wallet, a

8241
04:38:42,160 --> 04:38:45,840
cryptocurrency trading platform. At

8242
04:38:44,480 --> 04:38:46,760
first glance, I didn't know what Trust

8243
04:38:45,840 --> 04:38:49,199
Wallet

8244
04:38:46,760 --> 04:38:50,799
was. But a simple Google search showed

8245
04:38:49,199 --> 04:38:52,160
me that the organization that the email

8246
04:38:50,799 --> 04:38:54,879
claims to be from is somewhat

8247
04:38:52,160 --> 04:38:56,639
legitimate. However, the first thing I

8248
04:38:54,879 --> 04:38:58,160
notice is that there is a discrepancy

8249
04:38:56,639 --> 04:39:00,400
between how the company name is spelled

8250
04:38:58,160 --> 04:39:03,039
in the email versus how the company name

8251
04:39:00,400 --> 04:39:04,799
is actually spelled. So, we can see in

8252
04:39:03,039 --> 04:39:06,480
the email, well, we don't have a space

8253
04:39:04,799 --> 04:39:08,959
between trust and wallet. It's all one

8254
04:39:06,480 --> 04:39:11,439
word, but the actual company is two

8255
04:39:08,959 --> 04:39:12,959
words, trust and wallet. And there are

8256
04:39:11,439 --> 04:39:15,039
also a couple of random grammar and

8257
04:39:12,959 --> 04:39:17,600
spelling oddities in the email, such as

8258
04:39:15,039 --> 04:39:20,400
the greeting. So, we can see hi dear

8259
04:39:17,600 --> 04:39:22,080
semicolon customer. This appears to be a

8260
04:39:20,400 --> 04:39:24,000
failed attempt at writing a generic

8261
04:39:22,080 --> 04:39:26,240
greeting since it sounds awkward and

8262
04:39:24,000 --> 04:39:27,600
contains awkward punctuation. Sometimes

8263
04:39:26,240 --> 04:39:29,600
you'll see fishing emails that can

8264
04:39:27,600 --> 04:39:32,240
actually parse and decipher a mailbox's

8265
04:39:29,600 --> 04:39:34,080
associated name such as Andrew or Bob or

8266
04:39:32,240 --> 04:39:35,600
Emily. But in this case, less

8267
04:39:34,080 --> 04:39:38,200
configuration was done on the attacker

8268
04:39:35,600 --> 04:39:40,400
end to just give a generic customer

8269
04:39:38,200 --> 04:39:42,400
greeting. The first line of the email

8270
04:39:40,400 --> 04:39:44,638
here also indicates a potential attempt

8271
04:39:42,400 --> 04:39:46,320
at inducing a sense of urgency, claiming

8272
04:39:44,638 --> 04:39:48,080
that we have an unverified account that

8273
04:39:46,320 --> 04:39:50,160
will be suspended if we don't action the

8274
04:39:48,080 --> 04:39:52,320
email. And of course, this isn't always

8275
04:39:50,160 --> 04:39:53,840
a case closed kind of indicator, but

8276
04:39:52,320 --> 04:39:55,680
seeing these types of social engineering

8277
04:39:53,840 --> 04:39:57,000
tactics come into play should raise our

8278
04:39:55,680 --> 04:39:58,878
suspicion and warrant further

8279
04:39:57,000 --> 04:40:00,718
investigation. You'll often see this

8280
04:39:58,878 --> 04:40:02,638
done with expiring accounts or claiming

8281
04:40:00,718 --> 04:40:04,400
accounts will be suspended because in

8282
04:40:02,638 --> 04:40:05,520
many cases, money and bank details are

8283
04:40:04,400 --> 04:40:07,600
involved like with banks and

8284
04:40:05,520 --> 04:40:09,520
cryptocurrency exchanges. Well, victims

8285
04:40:07,600 --> 04:40:12,440
might feel a heightened sense of urgency

8286
04:40:09,520 --> 04:40:14,638
and quite easily click on malicious

8287
04:40:12,440 --> 04:40:16,718
links. And so, let's take a look at

8288
04:40:14,638 --> 04:40:18,400
sample two.

8289
04:40:16,718 --> 04:40:20,400
And again, this also claims to be from

8290
04:40:18,400 --> 04:40:22,080
Trust Wallet. And we can obviously go

8291
04:40:20,400 --> 04:40:23,440
into the headers and almost immediately

8292
04:40:22,080 --> 04:40:25,520
identify this as a spoofing or

8293
04:40:23,440 --> 04:40:27,760
impersonation attempt, but let's just

8294
04:40:25,520 --> 04:40:29,600
focus on the content. This time, they

8295
04:40:27,760 --> 04:40:31,200
seem to have typed the Trust Wallet name

8296
04:40:29,600 --> 04:40:33,360
correctly, but we're still getting a

8297
04:40:31,200 --> 04:40:35,600
generic greeting with dear customer, and

8298
04:40:33,360 --> 04:40:37,440
a lot of poor grammar. For example, we

8299
04:40:35,600 --> 04:40:39,520
can see the possessive accent here next

8300
04:40:37,440 --> 04:40:41,760
to NFTTS, which grammatically shouldn't

8301
04:40:39,520 --> 04:40:44,000
be there as it's indicating a plural.

8302
04:40:41,760 --> 04:40:46,000
Lastly, down here, the word assistant is

8303
04:40:44,000 --> 04:40:47,760
spelled incorrectly, indicating whoever

8304
04:40:46,000 --> 04:40:49,920
wrote this email might not have English

8305
04:40:47,760 --> 04:40:51,440
as a first language. And surprisingly,

8306
04:40:49,920 --> 04:40:52,560
this is a very common occurrence. You

8307
04:40:51,440 --> 04:40:54,000
know, you don't have to be an English

8308
04:40:52,560 --> 04:40:55,840
major, but being able to spot

8309
04:40:54,000 --> 04:40:57,680
grammatical or spelling errors can

8310
04:40:55,840 --> 04:40:59,680
quickly raise suspicion that an email

8311
04:40:57,680 --> 04:41:01,280
did not come from a professional source.

8312
04:40:59,680 --> 04:41:03,520
But on the other side, with things like

8313
04:41:01,280 --> 04:41:05,440
AI and options like chat GPT are

8314
04:41:03,520 --> 04:41:06,958
becoming so readily available, well,

8315
04:41:05,440 --> 04:41:08,560
attackers from all around the world can

8316
04:41:06,958 --> 04:41:10,798
quickly generate legitimate sounding

8317
04:41:08,560 --> 04:41:12,120
copy for emails, which is why this alone

8318
04:41:10,798 --> 04:41:14,160
can't be our only

8319
04:41:12,120 --> 04:41:16,040
barometer. So, next, let's take a look

8320
04:41:14,160 --> 04:41:18,400
at sample

8321
04:41:16,040 --> 04:41:20,240
3. And in this case, we'll find a

8322
04:41:18,400 --> 04:41:22,240
genuinely convincing looking body

8323
04:41:20,240 --> 04:41:24,080
resembling an Amazon account suspension

8324
04:41:22,240 --> 04:41:26,958
notice. And it uses all the correct

8325
04:41:24,080 --> 04:41:28,638
formatting and logos and fonts. They

8326
04:41:26,958 --> 04:41:30,878
likely copied this from a legitimate

8327
04:41:28,638 --> 04:41:32,320
Amazon email. And so you can imagine

8328
04:41:30,878 --> 04:41:33,840
that someone who might have recently

8329
04:41:32,320 --> 04:41:35,600
ordered something on Amazon, which of

8330
04:41:33,840 --> 04:41:37,040
course is quite common these days, could

8331
04:41:35,600 --> 04:41:38,718
receive this email and jump to

8332
04:41:37,040 --> 04:41:40,560
conclusions out of fear and manipulation

8333
04:41:38,718 --> 04:41:42,400
of authority. And in this case, the

8334
04:41:40,560 --> 04:41:44,080
content of this fish was done so well

8335
04:41:42,400 --> 04:41:45,680
that we can't just rely on content

8336
04:41:44,080 --> 04:41:47,680
inspection alone. And of course, we

8337
04:41:45,680 --> 04:41:49,920
never should. And so we'll need to look

8338
04:41:47,680 --> 04:41:51,920
at other methods of analysis like header

8339
04:41:49,920 --> 04:41:54,320
analysis and URL inspection, which we'll

8340
04:41:51,920 --> 04:41:56,080
get to in the next section.

8341
04:41:54,320 --> 04:41:58,798
And now we talked a bit about encoding

8342
04:41:56,080 --> 04:42:00,718
before. B 64 encoding is a method used

8343
04:41:58,798 --> 04:42:02,638
to encode binary data into ASKY

8344
04:42:00,718 --> 04:42:04,160
characters, making it suitable for

8345
04:42:02,638 --> 04:42:06,560
transmission over textbased channels

8346
04:42:04,160 --> 04:42:08,718
like email. And so B 64 is very common

8347
04:42:06,560 --> 04:42:11,600
within emails because it converts binary

8348
04:42:08,718 --> 04:42:13,520
data into a string of asky characters.

8349
04:42:11,600 --> 04:42:15,440
And so B 64 encoding is often

8350
04:42:13,520 --> 04:42:17,200
legitimately used within email messages

8351
04:42:15,440 --> 04:42:19,120
for things like presenting non-asky

8352
04:42:17,200 --> 04:42:21,200
characters or email attachments like

8353
04:42:19,120 --> 04:42:22,798
images or documents. But it can also be

8354
04:42:21,200 --> 04:42:24,798
used to offiscate the email's content

8355
04:42:22,798 --> 04:42:26,958
and potentially evade detection by very

8356
04:42:24,798 --> 04:42:28,480
weak email filters. Either way, we

8357
04:42:26,958 --> 04:42:30,760
should be familiar with recognizing and

8358
04:42:28,480 --> 04:42:32,798
decoding it to reveal the true email

8359
04:42:30,760 --> 04:42:36,080
content. For example, let's open up

8360
04:42:32,798 --> 04:42:38,480
sample 4. And let's also open it up in

8361
04:42:36,080 --> 04:42:38,480
Sublime

8362
04:42:39,080 --> 04:42:43,120
Text. So, if we scroll down to the

8363
04:42:41,360 --> 04:42:44,798
content of this email, and we can also

8364
04:42:43,120 --> 04:42:48,000
see it from the preview window here, we

8365
04:42:44,798 --> 04:42:50,400
have a long block of B 64 content. And

8366
04:42:48,000 --> 04:42:51,840
how do I know it's B 64 data? Well,

8367
04:42:50,400 --> 04:42:53,840
partly due to experience and knowing

8368
04:42:51,840 --> 04:42:54,958
what base 64 strings look like. And

8369
04:42:53,840 --> 04:42:56,718
admittedly, there's some common

8370
04:42:54,958 --> 04:42:58,920
indicators like this one or two equal

8371
04:42:56,718 --> 04:43:00,958
signs at the end which indicate padding

8372
04:42:58,920 --> 04:43:02,638
characters. But of course, we can also

8373
04:43:00,958 --> 04:43:04,560
just scroll up and realize that the

8374
04:43:02,638 --> 04:43:05,638
content transfer encoding here is set to

8375
04:43:04,560 --> 04:43:08,160
base

8376
04:43:05,638 --> 04:43:09,440
64. And I believe in a previous lesson

8377
04:43:08,160 --> 04:43:11,280
we looked at doing this through the

8378
04:43:09,440 --> 04:43:13,718
terminal. But we can also use a tool

8379
04:43:11,280 --> 04:43:16,160
like Cybersh to decode this for

8380
04:43:13,718 --> 04:43:19,840
us. So I'm just going to copy the entire

8381
04:43:16,160 --> 04:43:19,840
string here. And I'm going to open up

8382
04:43:21,000 --> 04:43:25,440
Cybersh. And in this input window here,

8383
04:43:23,440 --> 04:43:27,520
we can just paste in the contents. And

8384
04:43:25,440 --> 04:43:30,400
if we go under operations, well, we can

8385
04:43:27,520 --> 04:43:32,080
see it already. If we do from B 64, you

8386
04:43:30,400 --> 04:43:34,718
can see that this operation will decode

8387
04:43:32,080 --> 04:43:37,360
data from an ASKI B 64 string back into

8388
04:43:34,718 --> 04:43:39,760
its raw format. So if we drag this over

8389
04:43:37,360 --> 04:43:41,440
to our recipe and let it go, well, we

8390
04:43:39,760 --> 04:43:44,718
can see in our output that it was

8391
04:43:41,440 --> 04:43:46,080
successfully decoded into HTML text. And

8392
04:43:44,718 --> 04:43:48,480
so if we look at this, this is the

8393
04:43:46,080 --> 04:43:50,200
actual HTML and CSS markup that made up

8394
04:43:48,480 --> 04:43:52,798
our

8395
04:43:50,200 --> 04:43:54,958
email. So next, let's cover another

8396
04:43:52,798 --> 04:43:56,958
encoding mechanism called HTML entity

8397
04:43:54,958 --> 04:43:58,878
encoding, where in reality, this is

8398
04:43:56,958 --> 04:44:01,520
really just a sequence of characters to

8399
04:43:58,878 --> 04:44:03,760
represent specific HTML characters. And

8400
04:44:01,520 --> 04:44:05,440
so HTML uses entities to display

8401
04:44:03,760 --> 04:44:07,040
characters that are reserved for HTML

8402
04:44:05,440 --> 04:44:08,878
syntax or characters that have

8403
04:44:07,040 --> 04:44:10,480
specialized meanings like the angled

8404
04:44:08,878 --> 04:44:12,638
brackets here, the less than and greater

8405
04:44:10,480 --> 04:44:15,280
signs or things like amperands and

8406
04:44:12,638 --> 04:44:18,000
non-breing spaces. So for example, if we

8407
04:44:15,280 --> 04:44:21,040
go back into Cybersh and if we just put

8408
04:44:18,000 --> 04:44:23,600
an and symbol here and if we go under

8409
04:44:21,040 --> 04:44:26,878
operations and look for we can just do a

8410
04:44:23,600 --> 04:44:29,360
search for HTML entity. And if we drag

8411
04:44:26,878 --> 04:44:31,440
over to HTML entity, well, this is going

8412
04:44:29,360 --> 04:44:34,160
to convert characters into those HTML

8413
04:44:31,440 --> 04:44:35,840
entities. And if we drag this over,

8414
04:44:34,160 --> 04:44:37,520
well, we can see our and symbol here

8415
04:44:35,840 --> 04:44:40,240
turned into this and AMP with a

8416
04:44:37,520 --> 04:44:42,160
semicolon at the end. And for example,

8417
04:44:40,240 --> 04:44:43,760
if I were to check off this convert all

8418
04:44:42,160 --> 04:44:45,680
characters, well, this is going to

8419
04:44:43,760 --> 04:44:48,240
basically convert everything I type into

8420
04:44:45,680 --> 04:44:50,160
HTML entities. If I just type in test,

8421
04:44:48,240 --> 04:44:52,400
for example, well, we can see a number

8422
04:44:50,160 --> 04:44:54,480
of HTML entities. This one refers to the

8423
04:44:52,400 --> 04:44:55,798
letter T. This one refers to the letter

8424
04:44:54,480 --> 04:44:58,400
E and so

8425
04:44:55,798 --> 04:44:59,920
on. And so attackers often employ

8426
04:44:58,400 --> 04:45:02,240
various techniques to bypass spam

8427
04:44:59,920 --> 04:45:04,320
filters. And the use of HTML entities is

8428
04:45:02,240 --> 04:45:07,120
one such method. And you can likely see

8429
04:45:04,320 --> 04:45:08,958
how HTML entities can be leveraged. For

8430
04:45:07,120 --> 04:45:10,798
example, suppose we have a spam filter

8431
04:45:08,958 --> 04:45:12,878
in place to reject or quarantine any

8432
04:45:10,798 --> 04:45:14,878
emails that include the phrase Bitcoin.

8433
04:45:12,878 --> 04:45:16,560
And bear with me in this scenario. Maybe

8434
04:45:14,878 --> 04:45:18,160
our organization has nothing to do with

8435
04:45:16,560 --> 04:45:21,120
Bitcoin and we've been seeing an uptick

8436
04:45:18,160 --> 04:45:22,480
in cryptocurrency related scams.

8437
04:45:21,120 --> 04:45:24,638
In this case, an attacker could just

8438
04:45:22,480 --> 04:45:26,878
insert one of these entity characters to

8439
04:45:24,638 --> 04:45:28,638
potentially bypass the spam filter. And

8440
04:45:26,878 --> 04:45:30,080
I'll say any good quality filters will

8441
04:45:28,638 --> 04:45:32,760
be able to decode this and perform

8442
04:45:30,080 --> 04:45:35,040
static analysis to catch this evasion

8443
04:45:32,760 --> 04:45:38,160
attempt. Lastly, let's take a quick look

8444
04:45:35,040 --> 04:45:39,920
at URL encoding. And URL encoding is a

8445
04:45:38,160 --> 04:45:41,600
method used to convert characters into a

8446
04:45:39,920 --> 04:45:43,600
format that can be transmitted over the

8447
04:45:41,600 --> 04:45:45,600
internet. Again, this is often used for

8448
04:45:43,600 --> 04:45:47,680
legitimate purposes, but an attacker may

8449
04:45:45,600 --> 04:45:50,560
attempt to encode URLs to bypass some

8450
04:45:47,680 --> 04:45:52,160
weaker spam filters. And URL encoding

8451
04:45:50,560 --> 04:45:54,160
works by replacing non-alpha numeric

8452
04:45:52,160 --> 04:45:56,400
characters with a percent sign followed

8453
04:45:54,160 --> 04:45:58,080
by a two-digit hexadimal value that

8454
04:45:56,400 --> 04:46:01,040
represents the character in the ASI

8455
04:45:58,080 --> 04:46:04,400
character set. For example, let's paste

8456
04:46:01,040 --> 04:46:07,600
in the cybersh URL into the input. And

8457
04:46:04,400 --> 04:46:09,680
if we do a quick search for URL, well,

8458
04:46:07,600 --> 04:46:11,680
we should see URL encode as an option

8459
04:46:09,680 --> 04:46:13,600
right here. And this is going to encode

8460
04:46:11,680 --> 04:46:16,080
potentially problematic characters into

8461
04:46:13,600 --> 04:46:18,560
that percent encoding. So, if we drag

8462
04:46:16,080 --> 04:46:20,638
this over to the recipe and click on

8463
04:46:18,560 --> 04:46:22,000
encode all special characters, well, we

8464
04:46:20,638 --> 04:46:24,320
can see a number of those characters

8465
04:46:22,000 --> 04:46:26,200
like the colon and the backslashes have

8466
04:46:24,320 --> 04:46:28,798
been transformed into that percent

8467
04:46:26,200 --> 04:46:31,600
encoding. So, if we open up sample email

8468
04:46:28,798 --> 04:46:31,600
5 in sublime

8469
04:46:32,440 --> 04:46:38,560
text and scroll down to the body content

8470
04:46:35,920 --> 04:46:41,520
and if we hit F to do a search, we can

8471
04:46:38,560 --> 04:46:43,600
search for percent to E. And we can see

8472
04:46:41,520 --> 04:46:46,360
a long string of text here that is both

8473
04:46:43,600 --> 04:46:48,638
URL encoded and also HTML entity

8474
04:46:46,360 --> 04:46:51,360
encoded. And of course we can decode

8475
04:46:48,638 --> 04:46:53,080
this using Cybersh. So if I just find

8476
04:46:51,360 --> 04:46:55,360
where it ends based on the quotation

8477
04:46:53,080 --> 04:46:58,080
here and go all the way to where this

8478
04:46:55,360 --> 04:47:00,560
URL starts based on the first quotation,

8479
04:46:58,080 --> 04:47:02,160
I can just copy this. And interestingly

8480
04:47:00,560 --> 04:47:04,160
enough, if we scroll up here to the

8481
04:47:02,160 --> 04:47:06,000
content transfer encoding, we can also

8482
04:47:04,160 --> 04:47:08,000
see that this content is encoded with

8483
04:47:06,000 --> 04:47:09,520
the quoted printable. And so basically

8484
04:47:08,000 --> 04:47:11,280
that's three layers of encoding we have

8485
04:47:09,520 --> 04:47:14,878
here in that URL. So, let's head back

8486
04:47:11,280 --> 04:47:16,320
over to Cybersh and paste in that URL.

8487
04:47:14,878 --> 04:47:18,160
And we can see it doesn't really look

8488
04:47:16,320 --> 04:47:19,798
like a proper URL because it's been

8489
04:47:18,160 --> 04:47:22,480
encoded using that

8490
04:47:19,798 --> 04:47:24,240
quotable. So, first let's look up quoted

8491
04:47:22,480 --> 04:47:27,120
printable and we can select the from

8492
04:47:24,240 --> 04:47:29,280
quoted printable option. Let's drag that

8493
04:47:27,120 --> 04:47:31,440
over to a recipe and we can see our URL

8494
04:47:29,280 --> 04:47:33,760
is starting to look a little bit better.

8495
04:47:31,440 --> 04:47:35,520
But remember, we also have HTML entity

8496
04:47:33,760 --> 04:47:37,280
encoding. So, let's look up that as

8497
04:47:35,520 --> 04:47:39,680
well.

8498
04:47:37,280 --> 04:47:42,280
If we scroll down to from HTML entity

8499
04:47:39,680 --> 04:47:44,718
again, we can drag that into our

8500
04:47:42,280 --> 04:47:46,798
recipe and we can see that our URL was

8501
04:47:44,718 --> 04:47:50,040
cleaned up a little bit. And lastly,

8502
04:47:46,798 --> 04:47:52,718
let's look up URL and go down to URL

8503
04:47:50,040 --> 04:47:55,120
decode and drag that over. And we can

8504
04:47:52,718 --> 04:47:56,040
finally get to our full URL without any

8505
04:47:55,120 --> 04:47:58,000
of that

8506
04:47:56,040 --> 04:48:00,320
encoding. And so now that we have the

8507
04:47:58,000 --> 04:48:03,280
URL decoded, we can now pass it over to

8508
04:48:00,320 --> 04:48:05,040
some tools to conduct URL analysis. And

8509
04:48:03,280 --> 04:48:07,560
speaking of URL analysis, well, let's

8510
04:48:05,040 --> 04:48:10,160
get into that in the next

8511
04:48:07,560 --> 04:48:11,680
lesson. Now, arguably the most important

8512
04:48:10,160 --> 04:48:13,840
thing contained in the content of an

8513
04:48:11,680 --> 04:48:15,120
email message is going to be the URLs,

8514
04:48:13,840 --> 04:48:17,440
which is not something we've covered

8515
04:48:15,120 --> 04:48:20,000
yet. So, let's dive into URL inspection

8516
04:48:17,440 --> 04:48:21,760
and analysis within this lesson. So,

8517
04:48:20,000 --> 04:48:24,000
let's first quickly go over the anatomy

8518
04:48:21,760 --> 04:48:25,680
of a typical fishing URL because we can

8519
04:48:24,000 --> 04:48:27,360
learn to identify some indicators that

8520
04:48:25,680 --> 04:48:29,760
might heighten our suspicion as we go

8521
04:48:27,360 --> 04:48:31,680
about analyzing these links. So in a

8522
04:48:29,760 --> 04:48:34,000
standard URL like the one you can see on

8523
04:48:31,680 --> 04:48:36,600
screen, we often have some or all of

8524
04:48:34,000 --> 04:48:38,798
these components. So first we have the

8525
04:48:36,600 --> 04:48:40,878
protocol and this indicates the

8526
04:48:38,798 --> 04:48:42,798
communication protocol to be used for

8527
04:48:40,878 --> 04:48:44,320
accessing the resource and describes the

8528
04:48:42,798 --> 04:48:46,320
way in which browsers should retrieve

8529
04:48:44,320 --> 04:48:48,718
the information. So common protocols

8530
04:48:46,320 --> 04:48:51,080
you'll see might be HTTP or hypertext

8531
04:48:48,718 --> 04:48:53,360
transfer protocol or of course

8532
04:48:51,080 --> 04:48:56,000
HTTPS. But there can also be protocols

8533
04:48:53,360 --> 04:48:58,000
like FTP here as well. And next you

8534
04:48:56,000 --> 04:49:00,080
might have a subdomain. And so a

8535
04:48:58,000 --> 04:49:02,160
subdomain is like a subdivision of the

8536
04:49:00,080 --> 04:49:04,320
domain that can be used to organize or

8537
04:49:02,160 --> 04:49:07,320
distinguish different sections or zones

8538
04:49:04,320 --> 04:49:09,560
of a website. And so we can think of

8539
04:49:07,320 --> 04:49:11,520
mail.google.com or

8540
04:49:09,560 --> 04:49:13,680
drive.google.com. And in this case we

8541
04:49:11,520 --> 04:49:15,920
have the academy subdomain of the TCM

8542
04:49:13,680 --> 04:49:18,000
domain. And so next of course we have

8543
04:49:15,920 --> 04:49:20,000
the domain name itself. And the domain

8544
04:49:18,000 --> 04:49:21,600
name consists of the second level domain

8545
04:49:20,000 --> 04:49:24,480
which is the name of the website in this

8546
04:49:21,600 --> 04:49:26,400
case TCM sec and the top level domain

8547
04:49:24,480 --> 04:49:28,638
which specifies the type of website that

8548
04:49:26,400 --> 04:49:32,160
it's going to be. And so you might see

8549
04:49:28,638 --> 04:49:35,480
things like.com or.net or.edu or.gov or

8550
04:49:32,160 --> 04:49:37,920
even country specific names like

8551
04:49:35,480 --> 04:49:40,480
or.ca.is. And the combination of this

8552
04:49:37,920 --> 04:49:42,480
tople domain and the second level domain

8553
04:49:40,480 --> 04:49:44,718
is the only part that is unique in the

8554
04:49:42,480 --> 04:49:46,638
URL. And so this is very important

8555
04:49:44,718 --> 04:49:48,718
because attackers can spoof subdomains

8556
04:49:46,638 --> 04:49:50,718
or registered identical domains under

8557
04:49:48,718 --> 04:49:52,480
different top level domains, right? But

8558
04:49:50,718 --> 04:49:55,520
the combination between the second and

8559
04:49:52,480 --> 04:49:57,040
top level domain cannot be copied. And

8560
04:49:55,520 --> 04:49:58,878
so when we put all of this together,

8561
04:49:57,040 --> 04:50:00,480
this becomes the host name. And this is

8562
04:49:58,878 --> 04:50:01,400
made up of the domain name as well as

8563
04:50:00,480 --> 04:50:04,040
any

8564
04:50:01,400 --> 04:50:06,480
subdomains. And so next we have a

8565
04:50:04,040 --> 04:50:07,920
subdirectory. And this is a directory or

8566
04:50:06,480 --> 04:50:09,520
folder within the website's file

8567
04:50:07,920 --> 04:50:11,600
structure or a defined route on the

8568
04:50:09,520 --> 04:50:13,680
server side that is used to organize

8569
04:50:11,600 --> 04:50:15,680
content. In this example, we have a

8570
04:50:13,680 --> 04:50:17,760
subdirectory called courses which holds

8571
04:50:15,680 --> 04:50:19,840
files for various courses hosted on the

8572
04:50:17,760 --> 04:50:22,000
site. And speaking of files, well, this

8573
04:50:19,840 --> 04:50:23,920
is the specific file or resource being

8574
04:50:22,000 --> 04:50:25,878
accessed on the server. So, it could be

8575
04:50:23,920 --> 04:50:28,560
an actual file with an extension like

8576
04:50:25,878 --> 04:50:30,320
a.php or just a route that points to a

8577
04:50:28,560 --> 04:50:32,878
file in more modern applications and

8578
04:50:30,320 --> 04:50:34,798
might not contain a file extension. And

8579
04:50:32,878 --> 04:50:36,480
together, we refer to the file being

8580
04:50:34,798 --> 04:50:38,560
accessed along with any subdirectories

8581
04:50:36,480 --> 04:50:41,200
as the path or the entire location of

8582
04:50:38,560 --> 04:50:43,360
this resource. And optionally, you might

8583
04:50:41,200 --> 04:50:45,120
see things like parameters. And so

8584
04:50:43,360 --> 04:50:47,120
parameters in a URL are additional

8585
04:50:45,120 --> 04:50:48,958
pieces of information that are appended

8586
04:50:47,120 --> 04:50:51,440
to the end of the URL after the question

8587
04:50:48,958 --> 04:50:52,878
mark symbol. And these parameters are

8588
04:50:51,440 --> 04:50:54,878
often used to provide specific

8589
04:50:52,878 --> 04:50:56,638
instructions or data to the server when

8590
04:50:54,878 --> 04:50:58,000
you're requesting a resource. And

8591
04:50:56,638 --> 04:51:01,040
they're typically structured in these

8592
04:50:58,000 --> 04:51:03,120
key value pairs, right? We have t= 129.

8593
04:51:01,040 --> 04:51:04,958
And so we have the name of the key along

8594
04:51:03,120 --> 04:51:06,798
with its corresponding value separated

8595
04:51:04,958 --> 04:51:08,958
by an equal sign. And of course, we can

8596
04:51:06,798 --> 04:51:11,200
have multiple parameters in a URL by

8597
04:51:08,958 --> 04:51:12,560
separating them with the amperand. In

8598
04:51:11,200 --> 04:51:15,040
this case, this is just a madeup

8599
04:51:12,560 --> 04:51:16,560
example, but maybe the t key refers to a

8600
04:51:15,040 --> 04:51:18,560
timestamp of a specific video that

8601
04:51:16,560 --> 04:51:20,560
you're watching on the academy. In this

8602
04:51:18,560 --> 04:51:22,320
case, the value might refer to 129

8603
04:51:20,560 --> 04:51:24,400
seconds. So, when you navigate to this

8604
04:51:22,320 --> 04:51:26,160
URL, the server knows to retrieve or

8605
04:51:24,400 --> 04:51:28,638
display the video starting from the

8606
04:51:26,160 --> 04:51:30,638
129th second. And YouTube actually does

8607
04:51:28,638 --> 04:51:32,718
this exact thing.

8608
04:51:30,638 --> 04:51:34,480
Now, this was a clean example of a URL,

8609
04:51:32,718 --> 04:51:36,320
of course, but let's look at some actual

8610
04:51:34,480 --> 04:51:38,160
recent fishing URLs that I pulled from a

8611
04:51:36,320 --> 04:51:40,040
malware database. And we can see how

8612
04:51:38,160 --> 04:51:42,160
they're

8613
04:51:40,040 --> 04:51:43,760
constructed. And in this case, the first

8614
04:51:42,160 --> 04:51:46,480
thing that jumps out is the absence of

8615
04:51:43,760 --> 04:51:47,920
the HTTPS protocol in the URL. This

8616
04:51:46,480 --> 04:51:50,240
indicates that the connection to the

8617
04:51:47,920 --> 04:51:52,240
website is not secure. And most often

8618
04:51:50,240 --> 04:51:53,920
legitimate login pages, especially those

8619
04:51:52,240 --> 04:51:56,320
with sensitive information like email

8620
04:51:53,920 --> 04:51:57,840
credentials, will use HTTPS and

8621
04:51:56,320 --> 04:51:59,040
automatically upgrade non-scure

8622
04:51:57,840 --> 04:52:00,560
connections to encrypt data

8623
04:51:59,040 --> 04:52:01,840
transmission. And of course, there are

8624
04:52:00,560 --> 04:52:03,680
still legacy sites and bad

8625
04:52:01,840 --> 04:52:05,560
configurations out there, but it should

8626
04:52:03,680 --> 04:52:08,080
be one of those indicators that makes us

8627
04:52:05,560 --> 04:52:09,760
suspicious. And so next, we actually

8628
04:52:08,080 --> 04:52:12,280
have an attempt at subdomain spoofing,

8629
04:52:09,760 --> 04:52:14,560
which we can see here. The subdomain

8630
04:52:12,280 --> 04:52:16,958
apple-lo suggests that this URL is

8631
04:52:14,560 --> 04:52:19,400
associated with Apple's login system.

8632
04:52:16,958 --> 04:52:21,680
However, if we look at the base domain,

8633
04:52:19,400 --> 04:52:24,320
DNSD.net, well, this of course does not

8634
04:52:21,680 --> 04:52:26,160
match Apple's official domain. We also

8635
04:52:24,320 --> 04:52:27,600
have an somewhat unusual domain

8636
04:52:26,160 --> 04:52:29,520
extension. And this is not a huge

8637
04:52:27,600 --> 04:52:31,680
indicator, but we can see the net here

8638
04:52:29,520 --> 04:52:34,320
is a little odd because it's typically

8639
04:52:31,680 --> 04:52:35,840
not a tople domain that Apple would use.

8640
04:52:34,320 --> 04:52:38,080
And so, next here we have an odd

8641
04:52:35,840 --> 04:52:39,920
subdirectory. And to be honest, I'm not

8642
04:52:38,080 --> 04:52:41,920
sure what this means. And you might see

8643
04:52:39,920 --> 04:52:44,160
odd generated UIDs or strings or

8644
04:52:41,920 --> 04:52:45,840
specific routes in certain applications,

8645
04:52:44,160 --> 04:52:48,160
but in this case, it just seems a little

8646
04:52:45,840 --> 04:52:50,080
odd. And if I were to take a guess, the

8647
04:52:48,160 --> 04:52:51,840
attacker probably uses this base domain

8648
04:52:50,080 --> 04:52:53,760
to host a variety of different fishing

8649
04:52:51,840 --> 04:52:56,240
campaigns and likely titles them with

8650
04:52:53,760 --> 04:52:58,000
unique identifiers like this one. And if

8651
04:52:56,240 --> 04:53:00,480
we jump to the end here, we can see a

8652
04:52:58,000 --> 04:53:02,480
suspicious parameter. And this parameter

8653
04:53:00,480 --> 04:53:04,080
seems to be collecting email addresses.

8654
04:53:02,480 --> 04:53:05,920
And I actually redacted the original

8655
04:53:04,080 --> 04:53:07,760
email from the URL. But in the case of

8656
04:53:05,920 --> 04:53:09,520
this actual email, well, the victim who

8657
04:53:07,760 --> 04:53:11,760
received it had their email prefilled

8658
04:53:09,520 --> 04:53:13,520
into the URL. And this is actually

8659
04:53:11,760 --> 04:53:15,440
something you'll see quite commonly and

8660
04:53:13,520 --> 04:53:16,958
is one of those red flag indicators that

8661
04:53:15,440 --> 04:53:19,200
should immediately make you suspicious

8662
04:53:16,958 --> 04:53:21,040
of a URL. Like fishing websites will

8663
04:53:19,200 --> 04:53:23,040
often request personal information like

8664
04:53:21,040 --> 04:53:25,040
email addresses and passwords. And to

8665
04:53:23,040 --> 04:53:26,878
make them seem more credible, attackers

8666
04:53:25,040 --> 04:53:28,958
might try to prefill certain fields in

8667
04:53:26,878 --> 04:53:30,718
the URL or web page to make it look like

8668
04:53:28,958 --> 04:53:32,480
the website is real and it like saved

8669
04:53:30,718 --> 04:53:34,400
your information from last time, right?

8670
04:53:32,480 --> 04:53:37,160
Like email addresses. And they can do

8671
04:53:34,400 --> 04:53:39,440
this very easily by appending it in URL

8672
04:53:37,160 --> 04:53:40,718
parameters. So let's look at another one

8673
04:53:39,440 --> 04:53:42,480
here.

8674
04:53:40,718 --> 04:53:46,520
In this case, we have another example of

8675
04:53:42,480 --> 04:53:48,080
subdomain spoofing. The subdomain

8676
04:53:46,520 --> 04:53:49,360
MetaMask-restoration-sport. Well, this

8677
04:53:48,080 --> 04:53:50,958
suggests that there's a connection here

8678
04:53:49,360 --> 04:53:53,440
to MetaMask, which is a popular

8679
04:53:50,958 --> 04:53:55,320
cryptocurrency website. However, if we

8680
04:53:53,440 --> 04:53:57,600
look at the actual base domain, this

8681
04:53:55,320 --> 04:54:00,240
webflow.io, well, it does not correspond

8682
04:53:57,600 --> 04:54:01,600
obviously to MetaMask in any way. In

8683
04:54:00,240 --> 04:54:03,680
this case, we have the abuse of a

8684
04:54:01,600 --> 04:54:05,440
legitimate service. And so, Web Flow is

8685
04:54:03,680 --> 04:54:07,120
actually a custom website builder. And

8686
04:54:05,440 --> 04:54:09,600
attackers commonly use services like

8687
04:54:07,120 --> 04:54:11,440
this or services like Wix to quickly

8688
04:54:09,600 --> 04:54:14,240
spin up a hosted web page that already

8689
04:54:11,440 --> 04:54:15,840
has the trust of a legitimate service.

8690
04:54:14,240 --> 04:54:17,680
And speaking of that, here is another

8691
04:54:15,840 --> 04:54:19,840
example of subdomain spoofing and the

8692
04:54:17,680 --> 04:54:21,320
use of a legitimate service. And quite

8693
04:54:19,840 --> 04:54:23,680
honestly, I see the

8694
04:54:21,320 --> 04:54:25,680
wicksite.com/my site string so often

8695
04:54:23,680 --> 04:54:27,520
that in my opinion, it's probably a good

8696
04:54:25,680 --> 04:54:29,520
idea to just block any email containing

8697
04:54:27,520 --> 04:54:32,000
this string. And so, can you see what's

8698
04:54:29,520 --> 04:54:33,680
wrong with this URL?

8699
04:54:32,000 --> 04:54:35,840
Well, in this case, we have a form of

8700
04:54:33,680 --> 04:54:38,000
typo squatting where the letter R was

8701
04:54:35,840 --> 04:54:39,520
omitted to create a lookalike domain.

8702
04:54:38,000 --> 04:54:41,280
And so, a user not paying close

8703
04:54:39,520 --> 04:54:43,360
attention could fall for something like

8704
04:54:41,280 --> 04:54:44,760
this very easily if the web page itself

8705
04:54:43,360 --> 04:54:46,878
closely resembled

8706
04:54:44,760 --> 04:54:48,200
Microsoft. Now, how about this one? Can

8707
04:54:46,878 --> 04:54:50,560
you see any red

8708
04:54:48,200 --> 04:54:53,680
flags? Well, we have some potentially

8709
04:54:50,560 --> 04:54:55,400
suspicious subdomains and also this

8710
04:54:53,680 --> 04:54:57,680
query parameter is a little hard to

8711
04:54:55,400 --> 04:55:00,160
understand. But actually in this case

8712
04:54:57,680 --> 04:55:01,840
this is a legitimate URL and I wanted to

8713
04:55:00,160 --> 04:55:03,680
include this to show that legitimate

8714
04:55:01,840 --> 04:55:06,160
sites can have a number of subdomains

8715
04:55:03,680 --> 04:55:07,240
especially in the login process. In this

8716
04:55:06,160 --> 04:55:09,280
case we have

8717
04:55:07,240 --> 04:55:11,000
connect.secure but we can see that the

8718
04:55:09,280 --> 04:55:13,040
base domain or the full domain is

8719
04:55:11,000 --> 04:55:15,520
wellsfargo.com which is the legitimate

8720
04:55:13,040 --> 04:55:17,520
site for the bank. And legitimate sites

8721
04:55:15,520 --> 04:55:19,360
can also use weird or vague parameters

8722
04:55:17,520 --> 04:55:21,680
to control different aspects of the page

8723
04:55:19,360 --> 04:55:24,080
or rendering. In this case we have

8724
04:55:21,680 --> 04:55:25,280
origin equals co. And in this case, I'm

8725
04:55:24,080 --> 04:55:26,798
not actually sure, but it could be

8726
04:55:25,280 --> 04:55:28,480
indicating that the login request is

8727
04:55:26,798 --> 04:55:30,878
coming from the consumer online banking

8728
04:55:28,480 --> 04:55:32,320
or the COB platform. And of course, this

8729
04:55:30,878 --> 04:55:34,080
is just a guess. And we don't actually

8730
04:55:32,320 --> 04:55:35,760
have to go around trying to deconstruct

8731
04:55:34,080 --> 04:55:37,400
every parameter we find, but it's

8732
04:55:35,760 --> 04:55:40,080
definitely something to look out

8733
04:55:37,400 --> 04:55:42,958
for. And now, what about this one? It

8734
04:55:40,080 --> 04:55:45,480
looks very similar, but do you see it?

8735
04:55:42,958 --> 04:55:47,680
Well, the S was omitted to read Well

8736
04:55:45,480 --> 04:55:49,200
Fargo. Now, of course, this is not a

8737
04:55:47,680 --> 04:55:51,200
real example. I just modified the one

8738
04:55:49,200 --> 04:55:52,718
from before. But in this case, in our

8739
04:55:51,200 --> 04:55:54,480
example, the attacker would have set up

8740
04:55:52,718 --> 04:55:56,440
the web page and the subdomains in such

8741
04:55:54,480 --> 04:55:58,638
a way to mimic the original almost

8742
04:55:56,440 --> 04:56:00,560
exactly. This is why it's so important

8743
04:55:58,638 --> 04:56:02,718
to understand that the only true unique

8744
04:56:00,560 --> 04:56:04,760
portion of a URL is the combination of

8745
04:56:02,718 --> 04:56:07,040
the domain name and the top level

8746
04:56:04,760 --> 04:56:09,440
domain. Now, lastly, what about this

8747
04:56:07,040 --> 04:56:11,200
one? And it's identical to the ones

8748
04:56:09,440 --> 04:56:13,440
before, but in this case, the top level

8749
04:56:11,200 --> 04:56:15,360
domain has been changed. Now, remember

8750
04:56:13,440 --> 04:56:17,760
the second level domain or Wells Fargo

8751
04:56:15,360 --> 04:56:19,920
and the tople domain.com cannot be

8752
04:56:17,760 --> 04:56:21,360
spoofed. they're completely unique. But

8753
04:56:19,920 --> 04:56:23,440
in this case, an attacker would have

8754
04:56:21,360 --> 04:56:26,000
registered a very similar domain with a

8755
04:56:23,440 --> 04:56:28,240
tople domain that looks like.com, but in

8756
04:56:26,000 --> 04:56:30,160
this case isn't. And again, this isn't a

8757
04:56:28,240 --> 04:56:31,760
real example. And Wells Fargo might have

8758
04:56:30,160 --> 04:56:33,680
actually purchased the Docam variant of

8759
04:56:31,760 --> 04:56:36,040
the domain proactively to prevent this

8760
04:56:33,680 --> 04:56:38,000
kind of typo

8761
04:56:36,040 --> 04:56:40,240
squatting. Okay, let's get back to

8762
04:56:38,000 --> 04:56:42,638
business. So the first step in URL

8763
04:56:40,240 --> 04:56:44,878
analysis is of course extracting the

8764
04:56:42,638 --> 04:56:46,718
URLs from the email content. And this

8765
04:56:44,878 --> 04:56:48,160
can either be done manually or through a

8766
04:56:46,718 --> 04:56:50,560
number of different automated tools or

8767
04:56:48,160 --> 04:56:52,000
scripts. So the first method we'll cover

8768
04:56:50,560 --> 04:56:53,680
is not something I'd typically

8769
04:56:52,000 --> 04:56:55,360
recommend, but still something that we

8770
04:56:53,680 --> 04:56:57,280
can demonstrate. So first, let's

8771
04:56:55,360 --> 04:56:59,840
navigate to the URL analysis folder

8772
04:56:57,280 --> 04:57:03,000
within the fishing analysis section, and

8773
04:56:59,840 --> 04:57:05,360
let's open up sample 1.

8774
04:57:03,000 --> 04:57:07,200
ML. And you'll probably recognize this

8775
04:57:05,360 --> 04:57:09,600
chasebank fish from the header analysis

8776
04:57:07,200 --> 04:57:11,600
section. So now that we have the email

8777
04:57:09,600 --> 04:57:14,480
opened up in our client, we can actually

8778
04:57:11,600 --> 04:57:17,520
use our client itself to hover over and

8779
04:57:14,480 --> 04:57:19,120
view URLs or hyperlinks within an email.

8780
04:57:17,520 --> 04:57:20,718
So for example, if we move our mouse

8781
04:57:19,120 --> 04:57:22,560
over to the reactivate your account

8782
04:57:20,718 --> 04:57:25,600
link, well, we can see in the bottom of

8783
04:57:22,560 --> 04:57:27,920
our client where that URL leads to. And

8784
04:57:25,600 --> 04:57:30,718
for any links or URLs that we find, we

8785
04:57:27,920 --> 04:57:32,440
can rightclick on the link itself and

8786
04:57:30,718 --> 04:57:35,040
click to copy the link location

8787
04:57:32,440 --> 04:57:36,638
manually. And the issue with this method

8788
04:57:35,040 --> 04:57:39,280
is that when we're potentially dealing

8789
04:57:36,638 --> 04:57:41,040
with malicious URLs. So you can imagine

8790
04:57:39,280 --> 04:57:42,560
that a simple misclick like if you

8791
04:57:41,040 --> 04:57:44,320
accidentally hit the left mouse button

8792
04:57:42,560 --> 04:57:45,680
instead of the right, well, it means

8793
04:57:44,320 --> 04:57:48,480
that we could accidentally end up

8794
04:57:45,680 --> 04:57:51,040
visiting the page. And also this method

8795
04:57:48,480 --> 04:57:52,958
relies on visual inspection. And so it's

8796
04:57:51,040 --> 04:57:55,120
very easy for us to miss a hyperlink by

8797
04:57:52,958 --> 04:57:57,120
not seeing it in the email. Or even some

8798
04:57:55,120 --> 04:57:59,120
CSS styles could be implemented so that

8799
04:57:57,120 --> 04:58:01,040
URLs aren't colored blue or not

8800
04:57:59,120 --> 04:58:03,120
underlined or not in a button like this,

8801
04:58:01,040 --> 04:58:04,400
which we're used to seeing. You know, we

8802
04:58:03,120 --> 04:58:06,160
could even be dealing with an image

8803
04:58:04,400 --> 04:58:07,920
that's clickable that we won't really

8804
04:58:06,160 --> 04:58:10,638
notice unless we hover our mouse over

8805
04:58:07,920 --> 04:58:13,040
every word. And so, this leads us to

8806
04:58:10,638 --> 04:58:14,560
some more robust methods. And as you're

8807
04:58:13,040 --> 04:58:16,400
familiar by now, well, we've been

8808
04:58:14,560 --> 04:58:18,638
opening up emails inside of Sublime

8809
04:58:16,400 --> 04:58:20,560
Text. We could essentially use any text

8810
04:58:18,638 --> 04:58:22,638
editor, even like Notepad on Windows,

8811
04:58:20,560 --> 04:58:25,040
but Sublime Text is a useful and also a

8812
04:58:22,638 --> 04:58:26,878
personal choice.

8813
04:58:25,040 --> 04:58:29,040
And so once we open up sample one in

8814
04:58:26,878 --> 04:58:30,958
Sublime Text, we can use the native

8815
04:58:29,040 --> 04:58:33,440
search functionality to find any

8816
04:58:30,958 --> 04:58:34,718
instances of URLs in the file. So this

8817
04:58:33,440 --> 04:58:36,560
is going to require a bit of logical

8818
04:58:34,718 --> 04:58:38,878
thinking, but if we hit Ctrl+F, we can

8819
04:58:36,560 --> 04:58:41,560
open up this search pane. And then we

8820
04:58:38,878 --> 04:58:43,920
can search for specific strings like

8821
04:58:41,560 --> 04:58:46,080
HTTP. And we're not always going to get

8822
04:58:43,920 --> 04:58:48,560
a URL with this method because sometimes

8823
04:58:46,080 --> 04:58:50,160
HTTP is a string that's included in the

8824
04:58:48,560 --> 04:58:52,160
body of the content or maybe somewhere

8825
04:58:50,160 --> 04:58:53,760
in the headers. But if we keep scrolling

8826
04:58:52,160 --> 04:58:55,440
around, we can see we have four matches

8827
04:58:53,760 --> 04:58:58,320
here in total. And the first one here,

8828
04:58:55,440 --> 04:59:00,320
we get a URL. And the next one here, we

8829
04:58:58,320 --> 04:59:02,080
also get that URL. And this specifically

8830
04:59:00,320 --> 04:59:03,600
is the reactivate your account button

8831
04:59:02,080 --> 04:59:05,840
that we were looking at in the rendered

8832
04:59:03,600 --> 04:59:07,920
content. Alternatively, we can search

8833
04:59:05,840 --> 04:59:10,160
for things like the opening bracket in

8834
04:59:07,920 --> 04:59:12,878
HTML. And then search for the A which is

8835
04:59:10,160 --> 04:59:15,600
an anchor tag. And in HTML, an anchor

8836
04:59:12,878 --> 04:59:17,360
tag like this is used for hyperlinks.

8837
04:59:15,600 --> 04:59:19,840
And so again, we can immediately find

8838
04:59:17,360 --> 04:59:21,680
this reactivate your account link. And

8839
04:59:19,840 --> 04:59:23,600
of course, the advantages of this method

8840
04:59:21,680 --> 04:59:26,080
are that we have no risk of accidentally

8841
04:59:23,600 --> 04:59:28,000
clicking on a link. And also, we won't

8842
04:59:26,080 --> 04:59:30,638
miss any findings as long as we use the

8843
04:59:28,000 --> 04:59:32,560
right search strings. As another method,

8844
04:59:30,638 --> 04:59:35,280
we can also return to the ever useful

8845
04:59:32,560 --> 04:59:37,440
Cybersheef to automatically extract URLs

8846
04:59:35,280 --> 04:59:38,840
from an email file. And so, let's

8847
04:59:37,440 --> 04:59:41,200
navigate back to

8848
04:59:38,840 --> 04:59:43,040
Cybersh. And in this case, we can either

8849
04:59:41,200 --> 04:59:45,280
paste the entire contents of the email

8850
04:59:43,040 --> 04:59:47,840
message or alternatively, we can click

8851
04:59:45,280 --> 04:59:49,120
on this open file as input button. And

8852
04:59:47,840 --> 04:59:51,040
from here we can navigate through our

8853
04:59:49,120 --> 04:59:53,760
explorer window to find the specific

8854
04:59:51,040 --> 04:59:55,520
file that we want to upload. And you can

8855
04:59:53,760 --> 04:59:58,240
see here once doing that we've uploaded

8856
04:59:55,520 --> 05:00:00,320
the entire file into the input. Now if

8857
04:59:58,240 --> 05:00:02,440
you remember this specific email was

8858
05:00:00,320 --> 05:00:04,798
encoded with that quoted printable

8859
05:00:02,440 --> 05:00:06,718
encoding. And in this type of encoding

8860
05:00:04,798 --> 05:00:08,958
well our URL is actually being split

8861
05:00:06,718 --> 05:00:10,878
into multiple lines. Meaning that if we

8862
05:00:08,958 --> 05:00:12,638
were to just try to extract URLs the

8863
05:00:10,878 --> 05:00:14,798
normal way, well we wouldn't be able to

8864
05:00:12,638 --> 05:00:16,878
do that. So if you remember what we need

8865
05:00:14,798 --> 05:00:19,440
to do is to first decode this from that

8866
05:00:16,878 --> 05:00:21,200
quoted printable encoding and so we can

8867
05:00:19,440 --> 05:00:23,040
just search for quote here and we can

8868
05:00:21,200 --> 05:00:26,160
select the from quoted printable and

8869
05:00:23,040 --> 05:00:28,718
drag it into our recipe and from here we

8870
05:00:26,160 --> 05:00:31,360
can then search for URL and what we're

8871
05:00:28,718 --> 05:00:33,200
looking for here is extract URLs and

8872
05:00:31,360 --> 05:00:36,240
what this is going to do is as the title

8873
05:00:33,200 --> 05:00:37,840
suggests extract any URLs from the text

8874
05:00:36,240 --> 05:00:39,680
and you can see here once we drag that

8875
05:00:37,840 --> 05:00:42,400
into a recipe we are getting those two

8876
05:00:39,680 --> 05:00:44,080
URLs that we identified earlier. And

8877
05:00:42,400 --> 05:00:45,680
lastly, while we're here, and this is

8878
05:00:44,080 --> 05:00:48,480
something we'll cover shortly, but we

8879
05:00:45,680 --> 05:00:51,280
can use Cyerechef to defang the URLs.

8880
05:00:48,480 --> 05:00:52,638
And to defang a URL means to modify it

8881
05:00:51,280 --> 05:00:54,638
in such a way that it no longer

8882
05:00:52,638 --> 05:00:56,080
functions as a clickable hyperlink. And

8883
05:00:54,638 --> 05:00:58,160
this is often done for security

8884
05:00:56,080 --> 05:00:59,600
purposes, especially in context where we

8885
05:00:58,160 --> 05:01:01,760
might not want to click on a malicious

8886
05:00:59,600 --> 05:01:03,840
link. Now you can imagine that as we

8887
05:01:01,760 --> 05:01:06,400
document these specific URLs either in

8888
05:01:03,840 --> 05:01:08,000
our report or in a ticket. Well, when we

8889
05:01:06,400 --> 05:01:09,520
paste them into our ticketing system,

8890
05:01:08,000 --> 05:01:11,680
these URLs can sometimes be

8891
05:01:09,520 --> 05:01:13,600
automatically converted into a clickable

8892
05:01:11,680 --> 05:01:15,360
hyperlink. And obviously, as we are

8893
05:01:13,600 --> 05:01:17,040
dealing with potentially malicious URLs

8894
05:01:15,360 --> 05:01:18,480
here, well, we want a way to prevent

8895
05:01:17,040 --> 05:01:21,040
them from being automatically turned

8896
05:01:18,480 --> 05:01:23,878
into links. And so by adding the defang

8897
05:01:21,040 --> 05:01:27,520
URL option, which we can simply search

8898
05:01:23,878 --> 05:01:29,440
defang, we can drag over the defang URL.

8899
05:01:27,520 --> 05:01:31,120
And you can see these hyperlinks were

8900
05:01:29,440 --> 05:01:33,760
changed slightly. Instead of the

8901
05:01:31,120 --> 05:01:36,400
protocol as HTTPS, it added these two

8902
05:01:33,760 --> 05:01:38,080
X's here to make it an invalid protocol.

8903
05:01:36,400 --> 05:01:40,320
Additionally, certain things like the

8904
05:01:38,080 --> 05:01:42,798
dots separating the subdomains or the

8905
05:01:40,320 --> 05:01:44,958
col/ slash to indicate the protocol have

8906
05:01:42,798 --> 05:01:47,040
been squared out in these brackets.

8907
05:01:44,958 --> 05:01:48,958
These defanged URLs are now safe for us

8908
05:01:47,040 --> 05:01:51,680
to document and it is of course best

8909
05:01:48,958 --> 05:01:53,280
practice to do so.

8910
05:01:51,680 --> 05:01:54,718
And lastly, there are of course other

8911
05:01:53,280 --> 05:01:56,000
ways to do this. And I want to

8912
05:01:54,718 --> 05:01:57,920
demonstrate a tool that I wrote

8913
05:01:56,000 --> 05:01:59,760
specifically for this that can save us a

8914
05:01:57,920 --> 05:02:01,920
lot of manual work. And this is the

8915
05:01:59,760 --> 05:02:03,360
email IC extractor. And it's definitely

8916
05:02:01,920 --> 05:02:05,200
not the only kind of script out there

8917
05:02:03,360 --> 05:02:06,878
for this purpose. But it is a Python

8918
05:02:05,200 --> 05:02:08,878
script that is designed to aid in email

8919
05:02:06,878 --> 05:02:10,958
forensics and analysis by extracting

8920
05:02:08,878 --> 05:02:12,560
various components from the email files.

8921
05:02:10,958 --> 05:02:14,718
So it will extract things like the IP

8922
05:02:12,560 --> 05:02:16,480
addresses, the URLs, and even headers

8923
05:02:14,718 --> 05:02:18,958
and attachment information. And it will

8924
05:02:16,480 --> 05:02:20,480
all do this in this defanged format. So,

8925
05:02:18,958 --> 05:02:23,200
if you're curious, we can open it up

8926
05:02:20,480 --> 05:02:25,760
here by clicking on ei.py and click on

8927
05:02:23,200 --> 05:02:27,600
the raw view. We could clone the entire

8928
05:02:25,760 --> 05:02:30,000
repository, but we really only need the

8929
05:02:27,600 --> 05:02:31,718
script itself. And back in our terminal,

8930
05:02:30,000 --> 05:02:33,920
I'm going to back out into the tools

8931
05:02:31,718 --> 05:02:36,798
directory. And then I'm just going to w

8932
05:02:33,920 --> 05:02:38,320
get that URL to copy the Python file.

8933
05:02:36,798 --> 05:02:40,080
And now all we need to do is run the

8934
05:02:38,320 --> 05:02:42,080
Python script. And we can do that with

8935
05:02:40,080 --> 05:02:44,320
Python 3 and then provide the name of

8936
05:02:42,080 --> 05:02:46,320
the script. And you can see we're

8937
05:02:44,320 --> 05:02:48,400
getting the usage information here. So,

8938
05:02:46,320 --> 05:02:49,878
it wants us to provide a file path to

8939
05:02:48,400 --> 05:02:52,080
the email file that we want to

8940
05:02:49,878 --> 05:02:54,000
investigate. So, in this case, we can

8941
05:02:52,080 --> 05:02:56,240
back out of the tools folder, go into

8942
05:02:54,000 --> 05:02:59,120
our URL analysis folder, and then we can

8943
05:02:56,240 --> 05:03:00,798
select sample 1. ML. And when we hit the

8944
05:02:59,120 --> 05:03:02,920
enter key here, it's going to run those

8945
05:03:00,798 --> 05:03:05,600
automated checks for

8946
05:03:02,920 --> 05:03:07,840
us. And so, you can see if I scroll up,

8947
05:03:05,600 --> 05:03:09,520
we extracted several things like the IP

8948
05:03:07,840 --> 05:03:11,040
addresses, and these were specifically

8949
05:03:09,520 --> 05:03:13,120
from the email headers if you remember

8950
05:03:11,040 --> 05:03:15,040
correctly. And this script even

8951
05:03:13,120 --> 05:03:17,280
introduces some enrichment capabilities

8952
05:03:15,040 --> 05:03:19,360
to do that IP lookup. So we can see the

8953
05:03:17,280 --> 05:03:21,760
AS number and we can see the location of

8954
05:03:19,360 --> 05:03:23,280
this IP address. In this case, we don't

8955
05:03:21,760 --> 05:03:25,200
get the information for the first IP

8956
05:03:23,280 --> 05:03:27,600
address because if you recall, this is a

8957
05:03:25,200 --> 05:03:29,440
private IP address. But if we scroll

8958
05:03:27,600 --> 05:03:31,920
down, we can see the extracted URL

8959
05:03:29,440 --> 05:03:34,000
section. And much like with Cybersh, we

8960
05:03:31,920 --> 05:03:35,680
getting that same output in defanged

8961
05:03:34,000 --> 05:03:37,360
format.

8962
05:03:35,680 --> 05:03:38,958
We can also see some common and useful

8963
05:03:37,360 --> 05:03:41,120
headers for us like the authentication

8964
05:03:38,958 --> 05:03:42,798
results, the from the date, the message

8965
05:03:41,120 --> 05:03:44,878
ID, all of these things that we

8966
05:03:42,798 --> 05:03:46,240
typically want to document. And of

8967
05:03:44,878 --> 05:03:47,840
course, this is a very quick and easy

8968
05:03:46,240 --> 05:03:49,680
way to do it. But of course, it's not

8969
05:03:47,840 --> 05:03:51,440
foolproof. So that's why I wanted to go

8970
05:03:49,680 --> 05:03:53,360
through manually extracting headers

8971
05:03:51,440 --> 05:03:54,958
first so we understand the reasons why

8972
05:03:53,360 --> 05:03:57,520
and the methodology before we start

8973
05:03:54,958 --> 05:03:59,200
relying on tools like this. And now once

8974
05:03:57,520 --> 05:04:01,040
we've extracted the URLs from our

8975
05:03:59,200 --> 05:04:02,480
suspicious email, well, we're of course

8976
05:04:01,040 --> 05:04:04,400
going to want to analyze them and

8977
05:04:02,480 --> 05:04:06,560
perform reputation checks to help us

8978
05:04:04,400 --> 05:04:08,000
determine if they're malicious or not.

8979
05:04:06,560 --> 05:04:09,760
And of course, we have plenty of tools

8980
05:04:08,000 --> 05:04:10,878
at our disposal to perform these checks,

8981
05:04:09,760 --> 05:04:12,878
which we're going to cover in this

8982
05:04:10,878 --> 05:04:14,958
lesson. And again, it's important to

8983
05:04:12,878 --> 05:04:16,718
note that these tools are not foolproof.

8984
05:04:14,958 --> 05:04:18,878
And what I mean is we can't just blindly

8985
05:04:16,718 --> 05:04:20,480
trust these tools to give us a verdict.

8986
05:04:18,878 --> 05:04:22,878
We have to use critical thinking skills

8987
05:04:20,480 --> 05:04:24,638
and make our own judgment. And so just

8988
05:04:22,878 --> 05:04:26,638
because a URL is not identified as

8989
05:04:24,638 --> 05:04:28,400
malicious by our tooling, well, it does

8990
05:04:26,638 --> 05:04:30,400
not mean that it's safe. It just means

8991
05:04:28,400 --> 05:04:32,718
that the URL in question might not have

8992
05:04:30,400 --> 05:04:34,638
been submitted and reported before. And

8993
05:04:32,718 --> 05:04:36,798
now a blessing and a curse here is that

8994
05:04:34,638 --> 05:04:39,040
malicious websites often get taken down

8995
05:04:36,798 --> 05:04:40,798
quickly. Either through individuals and

8996
05:04:39,040 --> 05:04:43,120
organizations investigating them and

8997
05:04:40,798 --> 05:04:44,638
reporting these websites or the ISPs

8998
05:04:43,120 --> 05:04:46,160
themselves and the registars being made

8999
05:04:44,638 --> 05:04:48,560
aware through alerts and taking them

9000
05:04:46,160 --> 05:04:50,320
down or even services like Google Safe

9001
05:04:48,560 --> 05:04:52,520
Browsing and Microsoft Smart Screen

9002
05:04:50,320 --> 05:04:54,958
updating their signatures to block these

9003
05:04:52,520 --> 05:04:56,878
sites. And so because of this, some of

9004
05:04:54,958 --> 05:04:58,560
the URLs in the emails here might not be

9005
05:04:56,878 --> 05:05:00,638
live when you're watching this lesson.

9006
05:04:58,560 --> 05:05:02,480
And so to get some live and recent URL

9007
05:05:00,638 --> 05:05:04,958
samples, I'm going to be using Fish

9008
05:05:02,480 --> 05:05:06,798
Tank, which I briefly showcased before.

9009
05:05:04,958 --> 05:05:08,480
And essentially, Fish Tank is a database

9010
05:05:06,798 --> 05:05:11,560
where researchers can report malicious

9011
05:05:08,480 --> 05:05:13,520
fishing URLs for community review and

9012
05:05:11,560 --> 05:05:15,600
categorization. So let's start looking

9013
05:05:13,520 --> 05:05:18,080
at a tool that is self-proclaimed as a

9014
05:05:15,600 --> 05:05:19,360
screenshot as a service tool. So, you

9015
05:05:18,080 --> 05:05:21,280
might have wondered if there's a way for

9016
05:05:19,360 --> 05:05:23,440
us to get a visual representation of

9017
05:05:21,280 --> 05:05:25,360
what a specific website or URL looks

9018
05:05:23,440 --> 05:05:27,120
like without us having to actually

9019
05:05:25,360 --> 05:05:29,680
navigate to it and potentially expose

9020
05:05:27,120 --> 05:05:31,840
ourselves to a malicious site. Well, we

9021
05:05:29,680 --> 05:05:33,360
can use a tool called URL to PNG for

9022
05:05:31,840 --> 05:05:36,000
this. And I'll have this link down

9023
05:05:33,360 --> 05:05:37,680
below. And by inputting a suspicious URL

9024
05:05:36,000 --> 05:05:39,520
into this site, we can generate a

9025
05:05:37,680 --> 05:05:41,440
snapshot of its current appearance,

9026
05:05:39,520 --> 05:05:43,760
allowing us to assess if it's legitimate

9027
05:05:41,440 --> 05:05:45,680
based on visual cues like the design and

9028
05:05:43,760 --> 05:05:47,120
content and layout. Of course, this

9029
05:05:45,680 --> 05:05:48,638
isn't foolproof, but it's a great

9030
05:05:47,120 --> 05:05:50,160
resource for us to be able to grab a

9031
05:05:48,638 --> 05:05:52,480
screenshot of a website that we can put

9032
05:05:50,160 --> 05:05:54,320
in our reports or tickets. And of

9033
05:05:52,480 --> 05:05:55,840
course, just like I mentioned, this does

9034
05:05:54,320 --> 05:05:57,520
not provide any insight into the

9035
05:05:55,840 --> 05:05:59,440
underlying safety or security of the

9036
05:05:57,520 --> 05:06:01,520
website. So, even if a site appears

9037
05:05:59,440 --> 05:06:03,600
benign in a screenshot, well, it could

9038
05:06:01,520 --> 05:06:05,200
of course still be malicious. And so, as

9039
05:06:03,600 --> 05:06:06,878
such, we need to complement this tool

9040
05:06:05,200 --> 05:06:07,798
with other analysis methods that we're

9041
05:06:06,878 --> 05:06:10,000
going to

9042
05:06:07,798 --> 05:06:12,560
cover. So, I'm going to try to find a

9043
05:06:10,000 --> 05:06:14,080
live link here that we can analyze. And

9044
05:06:12,560 --> 05:06:16,878
specifically, I can see this one near

9045
05:06:14,080 --> 05:06:16,878
the bottom. this

9046
05:06:17,080 --> 05:06:21,440
sp5618.com/lo because it says /lo. Well,

9047
05:06:19,680 --> 05:06:23,120
this is particularly interesting for me.

9048
05:06:21,440 --> 05:06:24,878
This is most likely a credential capture

9049
05:06:23,120 --> 05:06:27,840
page. So, I'm going to copy this link

9050
05:06:24,878 --> 05:06:29,760
and head back over to URL to png. From

9051
05:06:27,840 --> 05:06:31,840
here, I'll just scroll down to where we

9052
05:06:29,760 --> 05:06:34,440
find this URL bar. And I can just paste

9053
05:06:31,840 --> 05:06:36,638
in our URL here and click on I'm not a

9054
05:06:34,440 --> 05:06:39,200
robot. And from here, I just click on

9055
05:06:36,638 --> 05:06:41,040
the green button here to start the scan.

9056
05:06:39,200 --> 05:06:42,480
And you can see almost immediately we're

9057
05:06:41,040 --> 05:06:44,480
greeted with what looks like some sort

9058
05:06:42,480 --> 05:06:45,680
of credential capture page.

9059
05:06:44,480 --> 05:06:47,920
Specifically, it looks to be

9060
05:06:45,680 --> 05:06:49,520
impersonating the Shopppee service. And

9061
05:06:47,920 --> 05:06:51,440
if we look up Shopppee, well, it appears

9062
05:06:49,520 --> 05:06:53,920
to be some sort of e-commerce platform

9063
05:06:51,440 --> 05:06:56,480
based in Southeast Asia. And of course,

9064
05:06:53,920 --> 05:06:57,798
the actual domain here is shopppee.com

9065
05:06:56,480 --> 05:07:00,160
and not this

9066
05:06:57,798 --> 05:07:02,280
SP5618. So, it's clear that we most

9067
05:07:00,160 --> 05:07:04,920
likely found a credential capture page

9068
05:07:02,280 --> 05:07:06,958
here. And so, this leads us to

9069
05:07:04,920 --> 05:07:08,718
urlcan.io. And this is an online

9070
05:07:06,958 --> 05:07:10,798
sandboxing tool that allows us to

9071
05:07:08,718 --> 05:07:13,120
analyze and inspect the behavior of URLs

9072
05:07:10,798 --> 05:07:15,440
in a controlled environment. So, I'm

9073
05:07:13,120 --> 05:07:16,878
going to head over to URLcan.io. And we

9074
05:07:15,440 --> 05:07:18,878
can see a bunch of recent scans here

9075
05:07:16,878 --> 05:07:20,958
that other people have performed. And

9076
05:07:18,878 --> 05:07:22,718
one of the key advantages to URL scan is

9077
05:07:20,958 --> 05:07:24,958
that its ability to provide detailed

9078
05:07:22,718 --> 05:07:26,400
reports on the analyzed URL's behavior.

9079
05:07:24,958 --> 05:07:28,000
And these reports can then include

9080
05:07:26,400 --> 05:07:29,920
information about the reputation score

9081
05:07:28,000 --> 05:07:31,840
of the domain or verdicts based on

9082
05:07:29,920 --> 05:07:33,440
previous reports and scanning or even

9083
05:07:31,840 --> 05:07:36,080
the underlying web technologies that

9084
05:07:33,440 --> 05:07:38,160
make up the site. And similar to URL to

9085
05:07:36,080 --> 05:07:40,000
PNG, we can often get a screenshot of

9086
05:07:38,160 --> 05:07:42,240
the site as well. So, it really does it

9087
05:07:40,000 --> 05:07:44,160
all. So, one thing to note here is we

9088
05:07:42,240 --> 05:07:46,560
want to go under options and click on a

9089
05:07:44,160 --> 05:07:48,160
private scan. If we don't, well, our

9090
05:07:46,560 --> 05:07:49,600
scan result and report is going to be

9091
05:07:48,160 --> 05:07:52,080
made public, which you can see with all

9092
05:07:49,600 --> 05:07:53,440
these results here. And sometimes you

9093
05:07:52,080 --> 05:07:55,760
might be dealing with a potentially

9094
05:07:53,440 --> 05:07:57,920
sensitive URL that might contain some

9095
05:07:55,760 --> 05:07:59,440
real data, right? And so to preserve

9096
05:07:57,920 --> 05:08:01,520
some of our privacy, we're going to

9097
05:07:59,440 --> 05:08:02,718
click on this private scan here. And

9098
05:08:01,520 --> 05:08:04,480
then we're just going to paste in our

9099
05:08:02,718 --> 05:08:08,920
URL. So, let's use the same one from

9100
05:08:04,480 --> 05:08:08,920
before and run a private scan.

9101
05:08:08,958 --> 05:08:12,480
And now the report is finished. We can

9102
05:08:10,638 --> 05:08:14,000
immediately see some interesting things.

9103
05:08:12,480 --> 05:08:15,520
First, it looks like it did manage to

9104
05:08:14,000 --> 05:08:17,200
get that screenshot for us. And we're

9105
05:08:15,520 --> 05:08:19,360
seeing the same credential capture login

9106
05:08:17,200 --> 05:08:21,120
page. But we also get a ton of more

9107
05:08:19,360 --> 05:08:23,200
information. Specifically, we can see

9108
05:08:21,120 --> 05:08:25,120
the IP address related to this domain or

9109
05:08:23,200 --> 05:08:26,560
this website. And specifically, if we

9110
05:08:25,120 --> 05:08:28,240
look at the summary here, we can see

9111
05:08:26,560 --> 05:08:30,878
that the website contacts two different

9112
05:08:28,240 --> 05:08:32,798
IPs at runtime. We can see the main IP

9113
05:08:30,878 --> 05:08:34,958
of the website is this and it's located

9114
05:08:32,798 --> 05:08:37,440
in Singapore. We can even see who it

9115
05:08:34,958 --> 05:08:39,040
belongs to or the ISP. And some even

9116
05:08:37,440 --> 05:08:41,200
more interesting information is under

9117
05:08:39,040 --> 05:08:42,878
this live information tab. Specifically,

9118
05:08:41,200 --> 05:08:44,718
we can see that the Google safe browsing

9119
05:08:42,878 --> 05:08:47,280
service already has identified this

9120
05:08:44,718 --> 05:08:48,718
website as malicious. And very

9121
05:08:47,280 --> 05:08:51,760
interestingly, we can see when the

9122
05:08:48,718 --> 05:08:53,798
domain was created on May 10th of 2024,

9123
05:08:51,760 --> 05:08:55,840
which at the time of this recording was

9124
05:08:53,798 --> 05:08:58,160
yesterday, which is almost a silver

9125
05:08:55,840 --> 05:09:00,160
bullet for us because honestly, if a

9126
05:08:58,160 --> 05:09:02,638
domain was registered yesterday or even

9127
05:09:00,160 --> 05:09:04,638
in the last 30 days, most likely it is

9128
05:09:02,638 --> 05:09:06,560
some sort of fishing attempt. And often

9129
05:09:04,638 --> 05:09:09,040
what organizations will do will block

9130
05:09:06,560 --> 05:09:11,040
any email sent by or containing a URL

9131
05:09:09,040 --> 05:09:14,560
that has a domain created in the last 30

9132
05:09:11,040 --> 05:09:16,480
days just because this is so prevalent.

9133
05:09:14,560 --> 05:09:18,400
And so another tool in our arsenal is

9134
05:09:16,480 --> 05:09:19,760
going to be Virus Total. And Virus

9135
05:09:18,400 --> 05:09:21,520
Total, which we're going to look at so

9136
05:09:19,760 --> 05:09:23,360
many times within this course, is an

9137
05:09:21,520 --> 05:09:25,360
immensely popular online service that

9138
05:09:23,360 --> 05:09:27,360
can aggregate multiple antivirus engines

9139
05:09:25,360 --> 05:09:30,000
and other security products or tools to

9140
05:09:27,360 --> 05:09:32,638
scan files or URLs or even just hashes

9141
05:09:30,000 --> 05:09:34,798
for potential threats. And so what we

9142
05:09:32,638 --> 05:09:36,638
can do here is go under the URL tab and

9143
05:09:34,798 --> 05:09:39,120
paste in that URL. We'll use the same

9144
05:09:36,638 --> 05:09:41,040
one we've been using. And by submitting

9145
05:09:39,120 --> 05:09:42,560
a URL to Virus Total, well, we can

9146
05:09:41,040 --> 05:09:44,480
leverage its extensive database of

9147
05:09:42,560 --> 05:09:46,560
signatures to assess the safety of the

9148
05:09:44,480 --> 05:09:48,480
link. And also, Virus Total will allow

9149
05:09:46,560 --> 05:09:50,638
us to view the historical data and also

9150
05:09:48,480 --> 05:09:52,320
community feedback about a URL. And by

9151
05:09:50,638 --> 05:09:54,638
doing this, we can gauge its reputation

9152
05:09:52,320 --> 05:09:56,000
over time. So, I pasted in that URL, and

9153
05:09:54,638 --> 05:09:58,480
I'm just going to hit the enter key to

9154
05:09:56,000 --> 05:10:00,798
run our scan. And we can see almost

9155
05:09:58,480 --> 05:10:03,520
immediately two of 92 security vendors

9156
05:10:00,798 --> 05:10:05,520
flag this URL as malicious. Most likely,

9157
05:10:03,520 --> 05:10:07,840
just because it's so new, I expect to

9158
05:10:05,520 --> 05:10:09,520
see this number grow as time goes on.

9159
05:10:07,840 --> 05:10:11,600
But we can see one of the vendors here

9160
05:10:09,520 --> 05:10:13,638
flagged it as fishing. And if we go

9161
05:10:11,600 --> 05:10:16,160
under the details

9162
05:10:13,638 --> 05:10:18,480
tab, we can again see some interesting

9163
05:10:16,160 --> 05:10:20,160
information. We can see the final URL in

9164
05:10:18,480 --> 05:10:22,560
the case of any redirects. We can see

9165
05:10:20,160 --> 05:10:25,280
the serving IP address. We can even get

9166
05:10:22,560 --> 05:10:27,120
a hash in Shaw 256 of the body of the

9167
05:10:25,280 --> 05:10:28,718
HTTP response that was sent back from

9168
05:10:27,120 --> 05:10:31,120
the server. We can get all of the

9169
05:10:28,718 --> 05:10:32,878
response headers as well. And so again,

9170
05:10:31,120 --> 05:10:34,240
Virus Total is going to be a very useful

9171
05:10:32,878 --> 05:10:35,840
tool for us, and we're definitely going

9172
05:10:34,240 --> 05:10:37,320
to return to it once we get to the file

9173
05:10:35,840 --> 05:10:39,680
attachment analysis

9174
05:10:37,320 --> 05:10:41,520
stage. Now, again, if you recall, we did

9175
05:10:39,680 --> 05:10:43,120
not have an option to do a private scan

9176
05:10:41,520 --> 05:10:44,958
here. So, of course, you want to be very

9177
05:10:43,120 --> 05:10:46,798
careful when submitting sensitive data,

9178
05:10:44,958 --> 05:10:48,798
specifically with URL parameters into

9179
05:10:46,798 --> 05:10:51,680
Virus Total. For example, maybe if this

9180
05:10:48,798 --> 05:10:53,600
URL had a parameter like email equals

9181
05:10:51,680 --> 05:10:55,520
and then some sort of internal email

9182
05:10:53,600 --> 05:10:56,878
address at our company name. Well, it

9183
05:10:55,520 --> 05:10:59,200
would typically be best practice to

9184
05:10:56,878 --> 05:11:00,400
remove this parameter from the URL

9185
05:10:59,200 --> 05:11:02,718
because we don't want it to be scanned

9186
05:11:00,400 --> 05:11:04,560
and logged on virus total. And now

9187
05:11:02,718 --> 05:11:06,560
before we move on, there are a couple of

9188
05:11:04,560 --> 05:11:08,560
other useful tools that I'll cover. So,

9189
05:11:06,560 --> 05:11:10,240
URL void is another such tool that can

9190
05:11:08,560 --> 05:11:12,240
help us detect potentially malicious

9191
05:11:10,240 --> 05:11:15,040
websites and also perform some checks on

9192
05:11:12,240 --> 05:11:16,798
the website's domain or URL reputation.

9193
05:11:15,040 --> 05:11:18,400
And this service is going to run our URL

9194
05:11:16,798 --> 05:11:20,400
through over 30 block list engines and

9195
05:11:18,400 --> 05:11:22,878
also website reputation services to

9196
05:11:20,400 --> 05:11:24,560
generate a verdict for us. So again,

9197
05:11:22,878 --> 05:11:26,120
let's paste in this same URL we've been

9198
05:11:24,560 --> 05:11:28,480
using and hit scan

9199
05:11:26,120 --> 05:11:30,400
website. Interestingly enough, we did

9200
05:11:28,480 --> 05:11:31,680
not get any detections this time.

9201
05:11:30,400 --> 05:11:33,760
However, we get a number of useful

9202
05:11:31,680 --> 05:11:35,360
information that we're used to seeing.

9203
05:11:33,760 --> 05:11:37,120
But in this case, the website was likely

9204
05:11:35,360 --> 05:11:39,440
too new to be captured by any of these

9205
05:11:37,120 --> 05:11:41,040
detection engines. So, of course, this

9206
05:11:39,440 --> 05:11:43,120
is a good example of why we don't just

9207
05:11:41,040 --> 05:11:45,280
blindly trust one tool because if we

9208
05:11:43,120 --> 05:11:47,000
were to only use URLvoid, well, maybe we

9209
05:11:45,280 --> 05:11:49,520
would blindly assume that the site is

9210
05:11:47,000 --> 05:11:51,600
safe. Now, what if we wanted to get the

9211
05:11:49,520 --> 05:11:53,040
actual contents of the web page? You

9212
05:11:51,600 --> 05:11:54,958
know, we've gotten a screenshot before,

9213
05:11:53,040 --> 05:11:57,520
but what about the actual markup and the

9214
05:11:54,958 --> 05:11:59,760
HTTP response? Well, we can use a tool

9215
05:11:57,520 --> 05:12:01,440
like W browser to simulate a browser and

9216
05:11:59,760 --> 05:12:04,000
get the response for us. So, I'm going

9217
05:12:01,440 --> 05:12:05,760
to paste in the URL and hit get here.

9218
05:12:04,000 --> 05:12:07,440
And in our response here, we can see

9219
05:12:05,760 --> 05:12:09,040
general info, but if we scroll down to

9220
05:12:07,440 --> 05:12:11,120
headers, we can get all of the response

9221
05:12:09,040 --> 05:12:13,360
headers. And interestingly, if we go to

9222
05:12:11,120 --> 05:12:15,840
the body, we can see the entire body of

9223
05:12:13,360 --> 05:12:17,680
the response. And interestingly, we can

9224
05:12:15,840 --> 05:12:19,920
see some inline script tags with this

9225
05:12:17,680 --> 05:12:21,600
JavaScript here. So in cases where we

9226
05:12:19,920 --> 05:12:23,280
wanted to return the actual markup or

9227
05:12:21,600 --> 05:12:24,760
response of the body, well we can use a

9228
05:12:23,280 --> 05:12:27,040
tool like wannab

9229
05:12:24,760 --> 05:12:29,120
browser. We also talked before about

9230
05:12:27,040 --> 05:12:31,360
shortened URLs and how attackers can use

9231
05:12:29,120 --> 05:12:32,958
services like bit.ly or tiny URL to

9232
05:12:31,360 --> 05:12:35,040
shorten and offiscate their malicious

9233
05:12:32,958 --> 05:12:36,638
URLs to get around detection. Well,

9234
05:12:35,040 --> 05:12:38,080
fortunately we can also use a tool like

9235
05:12:36,638 --> 05:12:40,080
wannab browser to detonate that

9236
05:12:38,080 --> 05:12:41,840
shortened URL and also follow any

9237
05:12:40,080 --> 05:12:44,480
automatic redirects to arrive at the

9238
05:12:41,840 --> 05:12:46,400
final true website. Now you might

9239
05:12:44,480 --> 05:12:48,878
remember from a previous lesson I set up

9240
05:12:46,400 --> 05:12:53,320
this bit.ly URL to /totally amazing

9241
05:12:48,878 --> 05:12:55,920
website which in turn redirects to TCM

9242
05:12:53,320 --> 05:12:58,320
security. And so if I paste in that URL

9243
05:12:55,920 --> 05:13:00,280
here and hit get one browser is going to

9244
05:12:58,320 --> 05:13:02,240
simulate a browser and follow any

9245
05:13:00,280 --> 05:13:04,320
redirects. And if we look under the

9246
05:13:02,240 --> 05:13:06,718
headers we can see that we got a 301

9247
05:13:04,320 --> 05:13:08,560
response at first. And if we look under

9248
05:13:06,718 --> 05:13:10,600
the location header we can see that we

9249
05:13:08,560 --> 05:13:12,638
were redirected to

9250
05:13:10,600 --> 05:13:16,878
tcm-sec.com. And the second response

9251
05:13:12,638 --> 05:13:18,560
here the 200 is from tcmssec.com.

9252
05:13:16,878 --> 05:13:20,480
In the previous lesson, we demonstrated

9253
05:13:18,560 --> 05:13:22,200
unshorten it to do this similar thing.

9254
05:13:20,480 --> 05:13:24,560
So, let's demonstrate that

9255
05:13:22,200 --> 05:13:27,760
again. And you can see the destination

9256
05:13:24,560 --> 05:13:27,760
URL was in fact

9257
05:13:28,280 --> 05:13:32,080
tcm-sec.com. And lastly, there might be

9258
05:13:30,400 --> 05:13:34,240
cases where we don't get any solid

9259
05:13:32,080 --> 05:13:35,920
results using the above methods. In this

9260
05:13:34,240 --> 05:13:38,000
case, we can turn to some open source

9261
05:13:35,920 --> 05:13:40,000
malicious website exchanges like fish

9262
05:13:38,000 --> 05:13:42,000
tank, which allow researchers to submit

9263
05:13:40,000 --> 05:13:44,638
suspected fishing emails to verify and

9264
05:13:42,000 --> 05:13:46,760
analyze submissions. So, for example, we

9265
05:13:44,638 --> 05:13:51,240
can do a search for that same

9266
05:13:46,760 --> 05:13:53,520
sp5618.com website and click on is it a

9267
05:13:51,240 --> 05:13:55,760
fish. And when we click on that, we can

9268
05:13:53,520 --> 05:13:57,360
see the previous submission. So, while

9269
05:13:55,760 --> 05:13:59,120
this hasn't been assigned a verdict yet,

9270
05:13:57,360 --> 05:14:01,920
we know from our analysis that it most

9271
05:13:59,120 --> 05:14:04,240
likely is a credential capture page.

9272
05:14:01,920 --> 05:14:06,320
Similarly, URL house is a collection of

9273
05:14:04,240 --> 05:14:09,160
malicious URLs submitted by researchers

9274
05:14:06,320 --> 05:14:11,680
and automated scanners. When we view the

9275
05:14:09,160 --> 05:14:14,080
database, we can see when a specific URL

9276
05:14:11,680 --> 05:14:15,920
was added, the URL itself, as well as

9277
05:14:14,080 --> 05:14:18,160
its status, like is it still up or has

9278
05:14:15,920 --> 05:14:19,760
it been taken down, and we can also get

9279
05:14:18,160 --> 05:14:21,520
some tags like what kind of fishing or

9280
05:14:19,760 --> 05:14:23,638
credential harvester is hosted, as well

9281
05:14:21,520 --> 05:14:26,240
as who reported

9282
05:14:23,638 --> 05:14:28,000
it. And lastly, we can use Google Safe

9283
05:14:26,240 --> 05:14:30,878
Browsing to check the status of a

9284
05:14:28,000 --> 05:14:32,320
specific domain. If you recall, the

9285
05:14:30,878 --> 05:14:33,840
domain that we were looking at was

9286
05:14:32,320 --> 05:14:35,360
apparently flagged by Google Safe

9287
05:14:33,840 --> 05:14:37,920
Browsing. So if we were to check the

9288
05:14:35,360 --> 05:14:40,320
status here and click search, well you

9289
05:14:37,920 --> 05:14:42,000
can see that this site is unsafe. And if

9290
05:14:40,320 --> 05:14:43,840
we were to attempt to visit this in a

9291
05:14:42,000 --> 05:14:45,000
Google browser, well, we would receive a

9292
05:14:43,840 --> 05:14:47,200
similar

9293
05:14:45,000 --> 05:14:49,040
warning. I'll also mention that it's

9294
05:14:47,200 --> 05:14:51,200
very important for us to also do a scan

9295
05:14:49,040 --> 05:14:53,680
of the base domain. And what I mean by

9296
05:14:51,200 --> 05:14:55,920
that is suppose we identify a URL that

9297
05:14:53,680 --> 05:14:57,600
has multiple subdomains attached to it

9298
05:14:55,920 --> 05:15:00,240
or maybe for instance we have a number

9299
05:14:57,600 --> 05:15:02,320
of subdirectories in our URL or various

9300
05:15:00,240 --> 05:15:03,920
query parameters. Well, when we want to

9301
05:15:02,320 --> 05:15:05,680
understand the extent of the attack and

9302
05:15:03,920 --> 05:15:07,280
the scope, well, it will be just as

9303
05:15:05,680 --> 05:15:09,360
important for us to understand what the

9304
05:15:07,280 --> 05:15:11,360
base domain of the URL is hosting as

9305
05:15:09,360 --> 05:15:13,360
well, we might be able to determine if

9306
05:15:11,360 --> 05:15:15,520
the fishing attempt is isolated or if

9307
05:15:13,360 --> 05:15:16,798
it's part of a larger campaign or if the

9308
05:15:15,520 --> 05:15:18,240
attacker is attempting to use a

9309
05:15:16,798 --> 05:15:20,798
legitimate service to conduct their

9310
05:15:18,240 --> 05:15:22,958
fishing operations. Or perhaps the base

9311
05:15:20,798 --> 05:15:24,798
domain itself is an actual legitimate

9312
05:15:22,958 --> 05:15:26,878
website that the attacker managed to

9313
05:15:24,798 --> 05:15:29,240
compromise and started to host malicious

9314
05:15:26,878 --> 05:15:31,760
subdirectories and files on the website

9315
05:15:29,240 --> 05:15:33,680
itself. Ensuring that we scan both our

9316
05:15:31,760 --> 05:15:36,400
URL as well as the base domain will

9317
05:15:33,680 --> 05:15:37,600
ensure a more thorough response and it's

9318
05:15:36,400 --> 05:15:38,840
just something that we always want to

9319
05:15:37,600 --> 05:15:41,680
document as

9320
05:15:38,840 --> 05:15:43,280
well. And now you might come across URLs

9321
05:15:41,680 --> 05:15:46,080
that actually come from legitimate

9322
05:15:43,280 --> 05:15:47,840
services like Google or Dropbox. In

9323
05:15:46,080 --> 05:15:49,360
these cases, of course, the URLs and the

9324
05:15:47,840 --> 05:15:51,440
email itself can't be immediately

9325
05:15:49,360 --> 05:15:53,360
written off as clean. Remember, the

9326
05:15:51,440 --> 05:15:55,440
technique that attackers often use is to

9327
05:15:53,360 --> 05:15:57,200
host malicious websites or documents

9328
05:15:55,440 --> 05:15:59,840
using legitimate services to get around

9329
05:15:57,200 --> 05:16:02,480
spam filters and security analysts. Take

9330
05:15:59,840 --> 05:16:03,920
for example this Google Docs URL. Well,

9331
05:16:02,480 --> 05:16:06,400
this is going to come back clean on all

9332
05:16:03,920 --> 05:16:08,400
of our checks because it's affiliated

9333
05:16:06,400 --> 05:16:10,080
with the legitimate Google service. And

9334
05:16:08,400 --> 05:16:11,600
so, we'll need to dive deeper into the

9335
05:16:10,080 --> 05:16:13,760
contents of the URL and what's actually

9336
05:16:11,600 --> 05:16:15,000
being hosted on Google Drive to continue

9337
05:16:13,760 --> 05:16:16,958
our

9338
05:16:15,000 --> 05:16:19,120
investigation. And you can see here when

9339
05:16:16,958 --> 05:16:20,798
we submit this to URL scan, well, it's

9340
05:16:19,120 --> 05:16:22,480
coming back as no verdict. We're not

9341
05:16:20,798 --> 05:16:24,560
getting any malicious classification

9342
05:16:22,480 --> 05:16:26,240
here. When we look at the summary, well,

9343
05:16:24,560 --> 05:16:29,200
we can see this is a legitimate Google

9344
05:16:26,240 --> 05:16:31,798
URL that belongs to Google US. And we

9345
05:16:29,200 --> 05:16:33,680
can see the main domain is in fact

9346
05:16:31,798 --> 05:16:35,680
docs.google.com. And we can see all the

9347
05:16:33,680 --> 05:16:37,080
IP addresses that were contacted do in

9348
05:16:35,680 --> 05:16:39,440
fact belong to

9349
05:16:37,080 --> 05:16:41,120
Google. But interestingly, we can see

9350
05:16:39,440 --> 05:16:42,718
this screenshot here. And of course,

9351
05:16:41,120 --> 05:16:44,320
like we looked at before, this is

9352
05:16:42,718 --> 05:16:46,080
another one of those images that is

9353
05:16:44,320 --> 05:16:47,760
attempting to impersonate an Amazon

9354
05:16:46,080 --> 05:16:49,680
security alert. And I'm sure if we click

9355
05:16:47,760 --> 05:16:52,000
on continue verification here, well, it

9356
05:16:49,680 --> 05:16:53,520
would lead to a malicious website. But

9357
05:16:52,000 --> 05:16:55,280
sometimes you might get a Google Drive

9358
05:16:53,520 --> 05:16:57,120
link. In that case, you need to get a

9359
05:16:55,280 --> 05:16:58,958
copy of the file hosted on Google Drive

9360
05:16:57,120 --> 05:17:00,520
and then perform attachment analysis,

9361
05:16:58,958 --> 05:17:02,638
which we'll get into in the next

9362
05:17:00,520 --> 05:17:03,840
section. Now, at this point, if you

9363
05:17:02,638 --> 05:17:05,680
still haven't been able to make a

9364
05:17:03,840 --> 05:17:07,440
determination either way, even after all

9365
05:17:05,680 --> 05:17:08,798
of these tools and services, it might be

9366
05:17:07,440 --> 05:17:10,958
time to start looking at and setting up

9367
05:17:08,798 --> 05:17:13,160
a secure virtual machine to sandbox the

9368
05:17:10,958 --> 05:17:15,200
link and do some manual inspection and

9369
05:17:13,160 --> 05:17:17,280
analysis. But remember, it's always best

9370
05:17:15,200 --> 05:17:18,958
to air on the side of caution. If we

9371
05:17:17,280 --> 05:17:20,638
still have suspicions at this stage,

9372
05:17:18,958 --> 05:17:22,718
well, it's often best to assume it's

9373
05:17:20,638 --> 05:17:24,240
malicious. And we can also leverage our

9374
05:17:22,718 --> 05:17:25,840
additional analysis that we should have

9375
05:17:24,240 --> 05:17:27,600
already done at this stage. For example,

9376
05:17:25,840 --> 05:17:29,280
if we can already determine the original

9377
05:17:27,600 --> 05:17:31,200
sender was fishy during our header and

9378
05:17:29,280 --> 05:17:33,920
content analysis, well, it's likely that

9379
05:17:31,200 --> 05:17:35,920
this URL can't be trusted either. Now,

9380
05:17:33,920 --> 05:17:37,840
alternatively, we could use a tool or a

9381
05:17:35,920 --> 05:17:39,760
service like Joe Sandbox, which if we

9382
05:17:37,840 --> 05:17:42,080
use the free or basic version, it allows

9383
05:17:39,760 --> 05:17:44,080
us to run a maximum of 15 analyses per

9384
05:17:42,080 --> 05:17:45,680
month. In many of the socks I worked in,

9385
05:17:44,080 --> 05:17:47,360
we typically invested in a tool like

9386
05:17:45,680 --> 05:17:49,200
this that allows multiple analysts to

9387
05:17:47,360 --> 05:17:51,040
run many more scans per day and it can

9388
05:17:49,200 --> 05:17:52,878
be quite useful in expediting the triage

9389
05:17:51,040 --> 05:17:54,638
process. And we're going to get more

9390
05:17:52,878 --> 05:17:56,080
into Joe Sandbox later on and

9391
05:17:54,638 --> 05:17:58,240
specifically use it for attachment and

9392
05:17:56,080 --> 05:17:59,520
malware analysis. But just note that it

9393
05:17:58,240 --> 05:18:02,080
can also be used to browse and

9394
05:17:59,520 --> 05:18:03,680
dynamically detonate URLs. And so

9395
05:18:02,080 --> 05:18:05,280
lastly, just remember that tools are

9396
05:18:03,680 --> 05:18:06,798
always evolving. There are always going

9397
05:18:05,280 --> 05:18:08,480
to be new tools and new updates to

9398
05:18:06,798 --> 05:18:10,638
tools. So we need to understand the

9399
05:18:08,480 --> 05:18:12,320
methodology first. And this methodology

9400
05:18:10,638 --> 05:18:14,080
is that we need to collect artifacts in

9401
05:18:12,320 --> 05:18:16,320
the form of URLs and check their

9402
05:18:14,080 --> 05:18:18,160
reputation against known sources as well

9403
05:18:16,320 --> 05:18:20,400
as using our own analysis to determine

9404
05:18:18,160 --> 05:18:21,840
if they're safe to open. And so in the

9405
05:18:20,400 --> 05:18:23,600
next video we're going to get into email

9406
05:18:21,840 --> 05:18:25,280
attachment analysis which is going to

9407
05:18:23,600 --> 05:18:27,400
have a similar methodology but we're

9408
05:18:25,280 --> 05:18:30,000
going to use some additional

9409
05:18:27,400 --> 05:18:32,560
tools. So far we haven't dealt with any

9410
05:18:30,000 --> 05:18:33,680
emails that contain attachments. So

9411
05:18:32,560 --> 05:18:35,600
let's change that and start

9412
05:18:33,680 --> 05:18:38,160
demonstrating how we can safely analyze

9413
05:18:35,600 --> 05:18:40,240
email attachments. And so email

9414
05:18:38,160 --> 05:18:41,680
attachments can come in various forms.

9415
05:18:40,240 --> 05:18:43,440
They can range from things like actual

9416
05:18:41,680 --> 05:18:44,958
innocent, benign documents to

9417
05:18:43,440 --> 05:18:46,920
potentially harmful files like

9418
05:18:44,958 --> 05:18:49,360
executables or malicious macros and

9419
05:18:46,920 --> 05:18:50,560
scripts. And now a word of caution is

9420
05:18:49,360 --> 05:18:52,638
that anytime we're dealing with

9421
05:18:50,560 --> 05:18:54,560
analyzing potentially malicious files,

9422
05:18:52,638 --> 05:18:56,718
well, we need to do so in a secure and

9423
05:18:54,560 --> 05:18:58,560
controlled environment. And we have many

9424
05:18:56,718 --> 05:19:00,400
tools at our disposal, which we'll cover

9425
05:18:58,560 --> 05:19:03,280
that allow us to abstract any potential

9426
05:19:00,400 --> 05:19:04,798
dangers and analyze files for us. But in

9427
05:19:03,280 --> 05:19:06,718
most cases, we don't even need to look

9428
05:19:04,798 --> 05:19:09,440
at or run the file to perform a quick

9429
05:19:06,718 --> 05:19:10,798
analysis and perform reputation checks.

9430
05:19:09,440 --> 05:19:12,480
And that can be done through file

9431
05:19:10,798 --> 05:19:14,958
hashes, which we're going to focus on in

9432
05:19:12,480 --> 05:19:17,040
this lesson. So, as we mentioned in the

9433
05:19:14,958 --> 05:19:19,280
fundamental section, file hashes and

9434
05:19:17,040 --> 05:19:21,480
hashes in general play a crucial role in

9435
05:19:19,280 --> 05:19:23,840
cyber security and file integrity

9436
05:19:21,480 --> 05:19:25,520
verification. Essentially, a hash is a

9437
05:19:23,840 --> 05:19:27,840
unique fingerprint generated from the

9438
05:19:25,520 --> 05:19:29,440
content of a file. It's a fixed length

9439
05:19:27,840 --> 05:19:32,160
string of characters that's typically

9440
05:19:29,440 --> 05:19:34,240
represented in hexadeimal format. And so

9441
05:19:32,160 --> 05:19:36,160
even a minor change in a file's content

9442
05:19:34,240 --> 05:19:38,400
will result in a wildly different hash

9443
05:19:36,160 --> 05:19:40,320
value. So what that means is that if a

9444
05:19:38,400 --> 05:19:42,240
specific malicious file or document was

9445
05:19:40,320 --> 05:19:43,920
found in an attachment we're analyzing,

9446
05:19:42,240 --> 05:19:46,080
we can potentially look up the unique

9447
05:19:43,920 --> 05:19:47,760
file hash or fingerprint to see if it

9448
05:19:46,080 --> 05:19:49,280
has been reported elsewhere or

9449
05:19:47,760 --> 05:19:50,560
automatically picked up by a number of

9450
05:19:49,280 --> 05:19:52,560
different antivirus and threat

9451
05:19:50,560 --> 05:19:54,320
intelligence platforms. And so common

9452
05:19:52,560 --> 05:19:56,878
algorithms that we use to generate file

9453
05:19:54,320 --> 05:19:59,840
hashes are things like MD5 and Shaw 1

9454
05:19:56,878 --> 05:20:01,600
and most specifically Shaw 256.

9455
05:19:59,840 --> 05:20:03,440
And while in practice it's typically

9456
05:20:01,600 --> 05:20:05,920
recommended to use a stronger hash value

9457
05:20:03,440 --> 05:20:07,840
like Shaw 256 due to things like hash

9458
05:20:05,920 --> 05:20:08,958
collisions, well, it's not as important

9459
05:20:07,840 --> 05:20:10,798
when we're dealing with collecting a

9460
05:20:08,958 --> 05:20:12,560
files hash for reputation checks. And

9461
05:20:10,798 --> 05:20:14,798
it's also very simple to just quickly

9462
05:20:12,560 --> 05:20:16,718
collect all three. Now, how you actually

9463
05:20:14,798 --> 05:20:18,560
obtain the attachment for analysis

9464
05:20:16,718 --> 05:20:21,120
entirely depends on your organization's

9465
05:20:18,560 --> 05:20:22,480
workflow and tooling and procedures. For

9466
05:20:21,120 --> 05:20:23,920
example, if you're dealing with a

9467
05:20:22,480 --> 05:20:25,520
fishing report through an alert in a

9468
05:20:23,920 --> 05:20:27,200
ticketing system, well, there might be

9469
05:20:25,520 --> 05:20:29,200
some workflows and data enrichment

9470
05:20:27,200 --> 05:20:31,040
capabilities in place to extract the

9471
05:20:29,200 --> 05:20:32,560
attachment from the email or even do

9472
05:20:31,040 --> 05:20:34,320
things like retrieve its file hash for

9473
05:20:32,560 --> 05:20:35,840
you. Otherwise, you might need to

9474
05:20:34,320 --> 05:20:38,160
manually extract the attachment for

9475
05:20:35,840 --> 05:20:39,840
analysis. And most email clients allow

9476
05:20:38,160 --> 05:20:42,000
you to save attachments to your local

9477
05:20:39,840 --> 05:20:43,840
system. But of course, ensure that you

9478
05:20:42,000 --> 05:20:46,240
handle the attachment with caution to

9479
05:20:43,840 --> 05:20:47,840
prevent any accidental execution. And so

9480
05:20:46,240 --> 05:20:49,760
our goal is to save the attachment to

9481
05:20:47,840 --> 05:20:52,080
our computer and of course not open or

9482
05:20:49,760 --> 05:20:53,760
execute the file inadvertently. So just

9483
05:20:52,080 --> 05:20:55,680
as a quick example, let's go to the

9484
05:20:53,760 --> 05:20:57,760
fishing analysis section and go under

9485
05:20:55,680 --> 05:21:00,638
the attachment analysis directory. Let's

9486
05:20:57,760 --> 05:21:02,718
open up sample one. And we can see we

9487
05:21:00,638 --> 05:21:04,798
have a suspicious email here requesting

9488
05:21:02,718 --> 05:21:06,480
a wire transfer. And specifically, if we

9489
05:21:04,798 --> 05:21:08,958
scroll down, you can see there is an

9490
05:21:06,480 --> 05:21:10,798
attachment associated with this email.

9491
05:21:08,958 --> 05:21:12,560
And so what we can do specifically in

9492
05:21:10,798 --> 05:21:14,638
Thunderbird is rightclick on the

9493
05:21:12,560 --> 05:21:17,120
attachment itself and we can hit save

9494
05:21:14,638 --> 05:21:18,718
as. And so we just need to select where

9495
05:21:17,120 --> 05:21:20,320
we want to save this. I'm just going to

9496
05:21:18,718 --> 05:21:22,878
put it right in the attachment analysis

9497
05:21:20,320 --> 05:21:24,400
folder. And I'm going to hit save. So

9498
05:21:22,878 --> 05:21:26,240
you can see here that we successfully

9499
05:21:24,400 --> 05:21:29,120
extracted the attachment from the email

9500
05:21:26,240 --> 05:21:31,120
and saved it into our directory. In a

9501
05:21:29,120 --> 05:21:33,360
Microsoft environment, specifically

9502
05:21:31,120 --> 05:21:35,440
through using Outlook on the web, we can

9503
05:21:33,360 --> 05:21:38,240
simply click on the action icon next to

9504
05:21:35,440 --> 05:21:39,680
an attachment and click on download. And

9505
05:21:38,240 --> 05:21:42,080
of course, this will download the file

9506
05:21:39,680 --> 05:21:44,000
to our disk.

9507
05:21:42,080 --> 05:21:45,520
And within a Googlebased environment,

9508
05:21:44,000 --> 05:21:47,120
it's quite honestly as simple as

9509
05:21:45,520 --> 05:21:49,520
hovering over the attachment and

9510
05:21:47,120 --> 05:21:51,718
clicking on download. And this is going

9511
05:21:49,520 --> 05:21:54,240
to download the file to our

9512
05:21:51,718 --> 05:21:55,920
disk. Next, I'll showcase an additional

9513
05:21:54,240 --> 05:21:57,600
script that will allow us to extract the

9514
05:21:55,920 --> 05:21:59,280
attachments from emails all from the

9515
05:21:57,600 --> 05:22:01,280
command line or the terminal. And this

9516
05:21:59,280 --> 05:22:02,798
is the email dump.py script, which I'll

9517
05:22:01,280 --> 05:22:04,400
have linked down below. And this is

9518
05:22:02,798 --> 05:22:05,760
actually part of the Dier Stevens suite

9519
05:22:04,400 --> 05:22:08,160
of tools, which we're going to cover

9520
05:22:05,760 --> 05:22:09,680
some more of these tools later on. And

9521
05:22:08,160 --> 05:22:11,440
so to get this script, well, we can just

9522
05:22:09,680 --> 05:22:14,080
click on the raw view here. And we can

9523
05:22:11,440 --> 05:22:15,360
simply w get this URL. However, you

9524
05:22:14,080 --> 05:22:17,040
should already find it in the tools

9525
05:22:15,360 --> 05:22:19,280
folder. And so to run it, I'm just going

9526
05:22:17,040 --> 05:22:22,080
to call Python 3 and back out into the

9527
05:22:19,280 --> 05:22:23,840
tools folder and find that email dump.py

9528
05:22:22,080 --> 05:22:25,200
script. And to get some usage

9529
05:22:23,840 --> 05:22:27,280
information, I'm just going to append

9530
05:22:25,200 --> 05:22:28,798
the tag for the help page. And if we

9531
05:22:27,280 --> 05:22:31,040
scroll up, we can see basically the

9532
05:22:28,798 --> 05:22:32,320
options of how to use this tool. So

9533
05:22:31,040 --> 05:22:34,080
essentially, we just need to provide it

9534
05:22:32,320 --> 05:22:36,240
the mime file along with any options

9535
05:22:34,080 --> 05:22:38,320
that we want to include. So to start

9536
05:22:36,240 --> 05:22:40,040
off, I'm just going to provide it our

9537
05:22:38,320 --> 05:22:42,480
sample email and hit

9538
05:22:40,040 --> 05:22:45,120
run. And so you can see it extracted

9539
05:22:42,480 --> 05:22:47,200
multiple parts of this MIME file. And it

9540
05:22:45,120 --> 05:22:48,718
breaks it down in different indexes. For

9541
05:22:47,200 --> 05:22:50,798
example, we have the header information

9542
05:22:48,718 --> 05:22:53,120
here, but then we have the HTML content

9543
05:22:50,798 --> 05:22:55,360
of the file. And lastly, in this fourth

9544
05:22:53,120 --> 05:22:57,920
header, well, we have the quotation.iso

9545
05:22:55,360 --> 05:22:59,600
file that we want to extract. And so to

9546
05:22:57,920 --> 05:23:01,920
extract this, well, we just need to

9547
05:22:59,600 --> 05:23:04,000
modify our command and specify the

9548
05:23:01,920 --> 05:23:05,520
stream that we want to collect. In this

9549
05:23:04,000 --> 05:23:07,160
case, it's four because this fourth

9550
05:23:05,520 --> 05:23:09,840
index here is the stream of the

9551
05:23:07,160 --> 05:23:11,760
quotation.iso file. We also want to

9552
05:23:09,840 --> 05:23:14,160
provide the tac d argument to actually

9553
05:23:11,760 --> 05:23:15,840
do the dump itself. And if we just run

9554
05:23:14,160 --> 05:23:17,520
this as is, well, it's going to print

9555
05:23:15,840 --> 05:23:19,520
everything to standard output or to our

9556
05:23:17,520 --> 05:23:21,878
terminal, which we don't want. So, I'm

9557
05:23:19,520 --> 05:23:24,600
just going to direct the output into a

9558
05:23:21,878 --> 05:23:26,760
quotation.iso file. And if we just run

9559
05:23:24,600 --> 05:23:29,440
that, you can see there we have the

9560
05:23:26,760 --> 05:23:30,878
quotation.iso file. So again, that's

9561
05:23:29,440 --> 05:23:32,638
another way to extract attachments

9562
05:23:30,878 --> 05:23:34,360
without having to use the GUI of your

9563
05:23:32,638 --> 05:23:36,400
email

9564
05:23:34,360 --> 05:23:38,480
client. So now that we have our

9565
05:23:36,400 --> 05:23:40,400
attachment extracted, I'll demonstrate

9566
05:23:38,480 --> 05:23:42,400
how we can collect its file hashes on

9567
05:23:40,400 --> 05:23:45,120
any Unix based operating system like

9568
05:23:42,400 --> 05:23:46,798
Linux or Mac OS. And so there are three

9569
05:23:45,120 --> 05:23:48,638
commands that we need to remember

9570
05:23:46,798 --> 05:23:50,878
depending on what hashing algorithm we

9571
05:23:48,638 --> 05:23:53,798
want to collect. So the first one here

9572
05:23:50,878 --> 05:23:56,240
is Shaw 256

9573
05:23:53,798 --> 05:23:58,920
sum and then we just need to provide the

9574
05:23:56,240 --> 05:24:00,798
name of the file. So if we run

9575
05:23:58,920 --> 05:24:03,000
quotation.iso, well there we go. We're

9576
05:24:00,798 --> 05:24:06,400
getting the Shaw 256 sum of the

9577
05:24:03,000 --> 05:24:08,638
quotation.iso file. Similarly, we can

9578
05:24:06,400 --> 05:24:10,400
also change this to get other hashes as

9579
05:24:08,638 --> 05:24:12,958
well. So if we were to change this to

9580
05:24:10,400 --> 05:24:15,840
Shaw 1 sum, well, we're getting the Shaw

9581
05:24:12,958 --> 05:24:18,160
1 hash of the file. And lastly, we can

9582
05:24:15,840 --> 05:24:19,878
just change this to MD5 sum to get the

9583
05:24:18,160 --> 05:24:22,160
MD5 hash as

9584
05:24:19,878 --> 05:24:23,680
well. Alternatively, we can run all

9585
05:24:22,160 --> 05:24:25,520
three commands at the same time and

9586
05:24:23,680 --> 05:24:27,680
separate them with two amperands to run

9587
05:24:25,520 --> 05:24:29,360
them consecutively. And you can see here

9588
05:24:27,680 --> 05:24:31,840
we're getting all three hashes, which is

9589
05:24:29,360 --> 05:24:33,600
very useful for our documentation. And

9590
05:24:31,840 --> 05:24:35,280
so now that we have these three hashes,

9591
05:24:33,600 --> 05:24:36,958
we definitely want to document them and

9592
05:24:35,280 --> 05:24:39,840
note them in our reporting or ticketing

9593
05:24:36,958 --> 05:24:41,760
system. And unlike IP addresses or URLs,

9594
05:24:39,840 --> 05:24:43,440
we typically don't need to defang hashes

9595
05:24:41,760 --> 05:24:45,840
in any way since they're just fixed

9596
05:24:43,440 --> 05:24:47,840
length strings of data. I also want to

9597
05:24:45,840 --> 05:24:50,000
demonstrate the email IOC extractor tool

9598
05:24:47,840 --> 05:24:51,200
that I showed in the previous lesson. So

9599
05:24:50,000 --> 05:24:54,120
I'm going to go back into the tools

9600
05:24:51,200 --> 05:24:56,160
directory where I have my eioc.py pi

9601
05:24:54,120 --> 05:24:57,760
script and I'm going to call it with

9602
05:24:56,160 --> 05:25:00,320
Python 3 and then I'm just going to

9603
05:24:57,760 --> 05:25:02,320
provide the name of the email. And if we

9604
05:25:00,320 --> 05:25:03,798
run it on sample one, well, we can go

9605
05:25:02,320 --> 05:25:05,840
all the way down to the extracted

9606
05:25:03,798 --> 05:25:08,160
attachments. And you can see here we

9607
05:25:05,840 --> 05:25:11,040
have the file name of quotation.iso as

9608
05:25:08,160 --> 05:25:14,480
we expected. And we also have the MD5,

9609
05:25:11,040 --> 05:25:16,000
the SHA 1, and the SHA 256 hash. So

9610
05:25:14,480 --> 05:25:17,520
using this tool, it was technically

9611
05:25:16,000 --> 05:25:19,680
safer because we didn't even need to

9612
05:25:17,520 --> 05:25:21,280
extract the attachment manually. And we

9613
05:25:19,680 --> 05:25:22,760
also have a nice output that we can then

9614
05:25:21,280 --> 05:25:24,878
copy for our

9615
05:25:22,760 --> 05:25:26,320
documentation. So next I'll show you how

9616
05:25:24,878 --> 05:25:29,360
to do this similar thing on a

9617
05:25:26,320 --> 05:25:31,920
Windowsbased machine. Now luckily we're

9618
05:25:29,360 --> 05:25:33,520
not just limited to Unix based systems

9619
05:25:31,920 --> 05:25:35,200
because it's just as likely that you'll

9620
05:25:33,520 --> 05:25:36,958
be using a Windows machine over

9621
05:25:35,200 --> 05:25:39,200
something like Mac or Linux at some

9622
05:25:36,958 --> 05:25:41,520
point in your career. And luckily we can

9623
05:25:39,200 --> 05:25:43,360
also extract the same hashes using the

9624
05:25:41,520 --> 05:25:46,400
ever useful PowerShell scripting

9625
05:25:43,360 --> 05:25:48,718
language. So, I've switched over to our

9626
05:25:46,400 --> 05:25:51,280
Windows lab here, and we can navigate to

9627
05:25:48,718 --> 05:25:53,440
the same extracted attachment located in

9628
05:25:51,280 --> 05:25:55,240
the fishing analysis folder,

9629
05:25:53,440 --> 05:25:57,840
specifically in the attachment analysis

9630
05:25:55,240 --> 05:26:00,000
folder. And if I run a dur to list out

9631
05:25:57,840 --> 05:26:02,958
the files, well, we can see we have the

9632
05:26:00,000 --> 05:26:05,520
same quotation.iso file. And so, all we

9633
05:26:02,958 --> 05:26:07,600
need to do now is run the get file hash

9634
05:26:05,520 --> 05:26:12,638
command and provide the name of the

9635
05:26:07,600 --> 05:26:14,240
file. So if I type in get-file hash and

9636
05:26:12,638 --> 05:26:15,560
then provide the name of the file with

9637
05:26:14,240 --> 05:26:17,680
that dot

9638
05:26:15,560 --> 05:26:19,600
/sourcing I can just hit tab to

9639
05:26:17,680 --> 05:26:20,440
autocomplete and then I'm just going to

9640
05:26:19,600 --> 05:26:23,280
hit

9641
05:26:20,440 --> 05:26:26,878
enter and you can see by default we got

9642
05:26:23,280 --> 05:26:28,878
the Shaw 256 hash and so if we don't

9643
05:26:26,878 --> 05:26:32,480
provide any parameters well we will get

9644
05:26:28,878 --> 05:26:34,080
the Shaw 256 hash by default but of

9645
05:26:32,480 --> 05:26:36,958
course we can also get different hashing

9646
05:26:34,080 --> 05:26:39,520
algorithms as well. For example, if we

9647
05:26:36,958 --> 05:26:42,440
wanted to get the MD5 hash, well, we can

9648
05:26:39,520 --> 05:26:46,560
simply add the TAC algorithm

9649
05:26:42,440 --> 05:26:48,560
flag and then provide MD5. And if we run

9650
05:26:46,560 --> 05:26:50,600
this, well, you can see that we're now

9651
05:26:48,560 --> 05:26:53,280
getting the MD5

9652
05:26:50,600 --> 05:26:57,040
hash. And of course, if we go back and

9653
05:26:53,280 --> 05:26:59,840
change this to Shaw 1 and hit run, well,

9654
05:26:57,040 --> 05:27:01,440
we're getting the Shaw 1 hash.

9655
05:26:59,840 --> 05:27:03,920
Now bear with me because I had to zoom

9656
05:27:01,440 --> 05:27:05,760
out a little bit, but we can combine all

9657
05:27:03,920 --> 05:27:08,120
three commands together using the

9658
05:27:05,760 --> 05:27:11,120
semicolon character separating each

9659
05:27:08,120 --> 05:27:12,400
command. In this case, if we hit run,

9660
05:27:11,120 --> 05:27:14,638
we're going to get an easyto- read

9661
05:27:12,400 --> 05:27:16,440
output of all three file hashes that we

9662
05:27:14,638 --> 05:27:19,120
can then copy for our

9663
05:27:16,440 --> 05:27:21,360
report. So now that we have the hashes

9664
05:27:19,120 --> 05:27:22,958
associated with our suspected file, we

9665
05:27:21,360 --> 05:27:24,958
can now use some file reputation

9666
05:27:22,958 --> 05:27:27,200
services to gather more information

9667
05:27:24,958 --> 05:27:29,360
about them. And these file reputation

9668
05:27:27,200 --> 05:27:31,200
services are like online databases that

9669
05:27:29,360 --> 05:27:33,440
store information about files including

9670
05:27:31,200 --> 05:27:35,280
their hashes and metadata and historical

9671
05:27:33,440 --> 05:27:37,120
behavior. And these services will

9672
05:27:35,280 --> 05:27:38,718
collect data from various sources like

9673
05:27:37,120 --> 05:27:40,440
antivirus vendors or security

9674
05:27:38,718 --> 05:27:42,878
researchers and user

9675
05:27:40,440 --> 05:27:44,878
submissions. And one commonly used file

9676
05:27:42,878 --> 05:27:46,080
reputation service is called virus total

9677
05:27:44,878 --> 05:27:48,638
which we looked at in the previous

9678
05:27:46,080 --> 05:27:50,240
lesson. And as you remember, Virus Total

9679
05:27:48,638 --> 05:27:52,400
can aggregate data from multiple

9680
05:27:50,240 --> 05:27:54,958
antivirus engines and other sources to

9681
05:27:52,400 --> 05:27:57,600
provide a comprehensive analysis of URLs

9682
05:27:54,958 --> 05:27:59,920
and files. We used it previously to

9683
05:27:57,600 --> 05:28:01,840
analyze suspected URLs, but we can

9684
05:27:59,920 --> 05:28:02,680
perform file reputation checks with it

9685
05:28:01,840 --> 05:28:04,718
as

9686
05:28:02,680 --> 05:28:07,040
well. And you can see that we can

9687
05:28:04,718 --> 05:28:10,120
directly upload a file itself or under

9688
05:28:07,040 --> 05:28:12,718
the search tab, we can input a Shaw 256

9689
05:28:10,120 --> 05:28:14,798
hash. And so the decision to upload

9690
05:28:12,718 --> 05:28:16,718
either a file's hash or the file itself

9691
05:28:14,798 --> 05:28:18,878
to Virus Total depends on a number of

9692
05:28:16,718 --> 05:28:20,958
factors, specifically our organizational

9693
05:28:18,878 --> 05:28:23,040
policies, as well as the nature of the

9694
05:28:20,958 --> 05:28:25,040
suspected file and also what our

9695
05:28:23,040 --> 05:28:26,958
objectives are. My personal

9696
05:28:25,040 --> 05:28:29,280
recommendation is to only ever upload a

9697
05:28:26,958 --> 05:28:32,000
hash to Virus Total. Imagine if you had

9698
05:28:29,280 --> 05:28:33,840
a suspected file like an invoice, but it

9699
05:28:32,000 --> 05:28:35,760
turns out it was actually clean. Well,

9700
05:28:33,840 --> 05:28:37,360
if you submitted it to Virus Total,

9701
05:28:35,760 --> 05:28:39,760
anyone with the enterprise subscription

9702
05:28:37,360 --> 05:28:41,680
will be able to download it. And so by

9703
05:28:39,760 --> 05:28:43,440
uploading a file hash, well, it's

9704
05:28:41,680 --> 05:28:45,280
considered generally safer from a

9705
05:28:43,440 --> 05:28:47,200
confidentiality perspective because it

9706
05:28:45,280 --> 05:28:49,840
does not expose the actual contents of

9707
05:28:47,200 --> 05:28:51,760
the file to any third party. In many

9708
05:28:49,840 --> 05:28:53,520
cases, SOCK analysts might initially opt

9709
05:28:51,760 --> 05:28:54,920
to submit the file hash to Virus Total

9710
05:28:53,520 --> 05:28:57,040
for a quick assessment of its

9711
05:28:54,920 --> 05:28:59,040
reputation. And if the hash lookup

9712
05:28:57,040 --> 05:29:00,798
yields any inconclusive results, or if

9713
05:28:59,040 --> 05:29:02,558
further analysis is needed, we might

9714
05:29:00,798 --> 05:29:04,480
then choose to upload the file itself

9715
05:29:02,558 --> 05:29:05,840
after some more thorough examination.

9716
05:29:04,480 --> 05:29:07,520
but typically we'll have more private

9717
05:29:05,840 --> 05:29:09,718
means for dynamic analysis like Joe

9718
05:29:07,520 --> 05:29:12,160
Sandbox assuming we have a company

9719
05:29:09,718 --> 05:29:14,320
subscription. So in this case let's copy

9720
05:29:12,160 --> 05:29:16,798
the file hash. Specifically I'll use the

9721
05:29:14,320 --> 05:29:19,040
Shaw 256 hash and head over to virus

9722
05:29:16,798 --> 05:29:22,200
total under the search tab. I'll paste

9723
05:29:19,040 --> 05:29:24,558
in the hash here and hit enter to

9724
05:29:22,200 --> 05:29:26,958
run. And you can see almost immediately

9725
05:29:24,558 --> 05:29:29,200
we got our results returned with 43 out

9726
05:29:26,958 --> 05:29:31,360
of 61 security vendors flagging this

9727
05:29:29,200 --> 05:29:33,040
file as malicious. And if we start to

9728
05:29:31,360 --> 05:29:34,400
look at some of the analysis here, we

9729
05:29:33,040 --> 05:29:36,798
can see that many of these vendors

9730
05:29:34,400 --> 05:29:38,558
indicate it as a Trojan backdoor. Some

9731
05:29:36,798 --> 05:29:39,718
vendors are even associating it with a

9732
05:29:38,558 --> 05:29:41,760
specific type of

9733
05:29:39,718 --> 05:29:44,400
malware. And if we look under the

9734
05:29:41,760 --> 05:29:46,320
details tab, well, we can get some more

9735
05:29:44,400 --> 05:29:49,120
information as well. We can also get the

9736
05:29:46,320 --> 05:29:51,680
MD5 hash and the SHA 256 hash from

9737
05:29:49,120 --> 05:29:53,120
previous uploads and reports. If we look

9738
05:29:51,680 --> 05:29:54,798
under history, we can see when it was

9739
05:29:53,120 --> 05:29:57,680
first submitted all the way back in

9740
05:29:54,798 --> 05:29:59,600
2020. We can also see some other names

9741
05:29:57,680 --> 05:30:01,040
of this file and these are file names

9742
05:29:59,600 --> 05:30:03,280
that would have been associated with the

9743
05:30:01,040 --> 05:30:04,878
exact same hash which is also very

9744
05:30:03,280 --> 05:30:06,600
interesting and useful for us if we want

9745
05:30:04,878 --> 05:30:08,280
to do a search for something like

9746
05:30:06,600 --> 05:30:10,958
application.bin in addition to

9747
05:30:08,280 --> 05:30:13,120
quotation.iso within our environment.

9748
05:30:10,958 --> 05:30:14,798
Under the relations tab, we'll see many

9749
05:30:13,120 --> 05:30:16,958
different things. So we can actually see

9750
05:30:14,798 --> 05:30:18,480
things like contacted URLs and domains

9751
05:30:16,958 --> 05:30:19,480
that this piece of malware contacts

9752
05:30:18,480 --> 05:30:21,760
during its

9753
05:30:19,480 --> 05:30:23,520
execution. We can also see the IP

9754
05:30:21,760 --> 05:30:25,200
addresses that were contacted.

9755
05:30:23,520 --> 05:30:27,600
Specifically, this IP address was

9756
05:30:25,200 --> 05:30:29,760
detected as malicious. Under the

9757
05:30:27,600 --> 05:30:31,120
behavior tab, we can see some

9758
05:30:29,760 --> 05:30:33,520
interesting things about the actual

9759
05:30:31,120 --> 05:30:35,360
executables behavior when it's executed.

9760
05:30:33,520 --> 05:30:37,280
So, we can see it's making an HTTP

9761
05:30:35,360 --> 05:30:39,680
request for some reason to get the root

9762
05:30:37,280 --> 05:30:41,798
certification from apple.com. But we can

9763
05:30:39,680 --> 05:30:44,160
see it's also resolving some other DNS

9764
05:30:41,798 --> 05:30:48,400
names. And we can see that it's actually

9765
05:30:44,160 --> 05:30:48,400
dropping a file. In this case, this

9766
05:30:49,000 --> 05:30:54,320
protected_68A4BO.exe file. And lastly,

9767
05:30:52,000 --> 05:30:56,320
if we go under the community tab, we can

9768
05:30:54,320 --> 05:30:58,558
see some other results. For example, we

9769
05:30:56,320 --> 05:31:00,958
have an any run scan here, which shows

9770
05:30:58,558 --> 05:31:02,240
that the verdict is malicious. We also

9771
05:31:00,958 --> 05:31:04,320
have some other checks here that we can

9772
05:31:02,240 --> 05:31:05,920
dive into should we want to. But it's

9773
05:31:04,320 --> 05:31:07,878
very safe to say that this file is

9774
05:31:05,920 --> 05:31:10,080
indeed

9775
05:31:07,878 --> 05:31:12,240
malicious. Another tool that we can use

9776
05:31:10,080 --> 05:31:14,638
to perform file reputation checks along

9777
05:31:12,240 --> 05:31:18,080
with even IP or URL or domain reputation

9778
05:31:14,638 --> 05:31:19,680
checks is Cisco Talos. And Cisco Talos

9779
05:31:18,080 --> 05:31:22,160
is a threat intelligence and research

9780
05:31:19,680 --> 05:31:24,080
organization operated by Cisco systems

9781
05:31:22,160 --> 05:31:25,760
and it specializes in providing advanced

9782
05:31:24,080 --> 05:31:27,520
threat intelligence and research and

9783
05:31:25,760 --> 05:31:29,360
analysis and other cyber security

9784
05:31:27,520 --> 05:31:31,840
services to help protect against a wide

9785
05:31:29,360 --> 05:31:33,200
range of cyber threats. And so if we

9786
05:31:31,840 --> 05:31:35,200
scroll down here to the intelligence

9787
05:31:33,200 --> 05:31:38,080
center, well, we can simply paste in the

9788
05:31:35,200 --> 05:31:39,160
SHA 256 file hash of our suspected

9789
05:31:38,080 --> 05:31:41,680
malicious

9790
05:31:39,160 --> 05:31:45,080
file. So I'll paste in that hash and

9791
05:31:41,680 --> 05:31:45,080
click on search.

9792
05:31:45,280 --> 05:31:49,040
And if we scroll down here, we can see

9793
05:31:47,120 --> 05:31:51,280
much like with Virus Total, this file

9794
05:31:49,040 --> 05:31:52,718
has been determined to be malicious. And

9795
05:31:51,280 --> 05:31:55,480
we can see very similar detection

9796
05:31:52,718 --> 05:31:57,680
aliases that we saw on Virus

9797
05:31:55,480 --> 05:31:59,600
Total. Like with all of our checks and

9798
05:31:57,680 --> 05:32:00,958
analysis thus far, we always need to

9799
05:31:59,600 --> 05:32:03,280
ensure that we're documenting our

9800
05:32:00,958 --> 05:32:05,120
findings during the process. So we can

9801
05:32:03,280 --> 05:32:07,440
take screenshots of our virus total or

9802
05:32:05,120 --> 05:32:09,200
Cisco Telos outputs or even having

9803
05:32:07,440 --> 05:32:11,840
reports downloaded are great methods to

9804
05:32:09,200 --> 05:32:13,760
ensure the information is not lost. We

9805
05:32:11,840 --> 05:32:15,600
can actually copy the links to virus

9806
05:32:13,760 --> 05:32:16,638
total scans, but we can't always assume

9807
05:32:15,600 --> 05:32:18,798
that these links are going to be

9808
05:32:16,638 --> 05:32:20,320
accessible as our only documentation.

9809
05:32:18,798 --> 05:32:21,760
So, it's always important to manually

9810
05:32:20,320 --> 05:32:24,160
collect this information and even

9811
05:32:21,760 --> 05:32:25,440
collect screenshots as much as possible

9812
05:32:24,160 --> 05:32:26,958
because of course having strong

9813
05:32:25,440 --> 05:32:28,958
documentation in our tickets ensures

9814
05:32:26,958 --> 05:32:31,360
that the organization has a clear record

9815
05:32:28,958 --> 05:32:32,878
of all of the analysis that we performed

9816
05:32:31,360 --> 05:32:34,798
including the files that were checked

9817
05:32:32,878 --> 05:32:37,360
and the hashes and of course the

9818
05:32:34,798 --> 05:32:38,798
obtained reputation verdicts. And of

9819
05:32:37,360 --> 05:32:40,558
course, this documentation is critical

9820
05:32:38,798 --> 05:32:42,878
for us when it comes to making verdicts

9821
05:32:40,558 --> 05:32:44,400
and taking appropriate actions. For

9822
05:32:42,878 --> 05:32:46,240
example, if we find a file to be

9823
05:32:44,400 --> 05:32:48,240
malicious and we take defensive actions

9824
05:32:46,240 --> 05:32:50,320
to block the sender and perform a deeper

9825
05:32:48,240 --> 05:32:52,000
investigation into the user's computer,

9826
05:32:50,320 --> 05:32:54,280
well, we need to have documentation in

9827
05:32:52,000 --> 05:32:56,400
place to justify why we took these

9828
05:32:54,280 --> 05:32:58,160
actions. So, hopefully that was a nice

9829
05:32:56,400 --> 05:33:00,160
overview of how we can investigate file

9830
05:32:58,160 --> 05:33:02,080
attachments using their reputation from

9831
05:33:00,160 --> 05:33:03,680
their hashes. In the next lesson, we'll

9832
05:33:02,080 --> 05:33:05,600
look at some more dynamic attachment

9833
05:33:03,680 --> 05:33:08,400
analysis and also some sandboxing

9834
05:33:05,600 --> 05:33:08,400
capabilities.

9835
05:33:08,558 --> 05:33:12,520
So, let's talk a little bit about

9836
05:33:10,240 --> 05:33:15,280
dynamic attachment analysis and

9837
05:33:12,520 --> 05:33:17,280
sandboxing. And sandboxing is a security

9838
05:33:15,280 --> 05:33:19,718
technique used to isolate potentially

9839
05:33:17,280 --> 05:33:21,920
harmful files from the rest of our

9840
05:33:19,718 --> 05:33:24,240
system. And when it comes to fishing

9841
05:33:21,920 --> 05:33:26,000
attachments, well, sandboxing involves

9842
05:33:24,240 --> 05:33:28,160
opening the attachment in a controlled

9843
05:33:26,000 --> 05:33:30,480
environment separate from the user's

9844
05:33:28,160 --> 05:33:32,878
actual system. And this controlled

9845
05:33:30,480 --> 05:33:35,280
environment is known as the sandbox. And

9846
05:33:32,878 --> 05:33:36,798
it mimics a typical operating system but

9847
05:33:35,280 --> 05:33:38,878
ensures that any malicious activity

9848
05:33:36,798 --> 05:33:40,878
within the attachment well is contained

9849
05:33:38,878 --> 05:33:43,360
and cannot harm our actual computer or

9850
05:33:40,878 --> 05:33:45,200
network. And so by using sandboxing and

9851
05:33:43,360 --> 05:33:47,040
dynamic analysis tools for fishing

9852
05:33:45,200 --> 05:33:49,760
attachments well we can analyze

9853
05:33:47,040 --> 05:33:52,080
suspicious files safely and determine if

9854
05:33:49,760 --> 05:33:54,000
they contain malware or other threats.

9855
05:33:52,080 --> 05:33:56,638
And we can do this by documenting things

9856
05:33:54,000 --> 05:33:58,080
like the behavior of the file. And so

9857
05:33:56,638 --> 05:34:00,400
typically when we want to perform

9858
05:33:58,080 --> 05:34:02,958
dynamic analysis we're looking for four

9859
05:34:00,400 --> 05:34:04,798
common things. So the first is the

9860
05:34:02,958 --> 05:34:06,718
process activity, right? So what

9861
05:34:04,798 --> 05:34:08,840
processes are being spawned and what is

9862
05:34:06,718 --> 05:34:11,040
the parent child relationships of these

9863
05:34:08,840 --> 05:34:13,440
processes. We also want to look at any

9864
05:34:11,040 --> 05:34:15,200
registry changes and so are there maybe

9865
05:34:13,440 --> 05:34:17,440
any persistence mechanisms being

9866
05:34:15,200 --> 05:34:18,958
executed with the file. You know, is it

9867
05:34:17,440 --> 05:34:21,360
writing or overwriting any of the

9868
05:34:18,958 --> 05:34:23,360
Windows registry entries? We also want

9869
05:34:21,360 --> 05:34:24,638
to look at network connections. So we

9870
05:34:23,360 --> 05:34:26,480
want to look at things like what

9871
05:34:24,638 --> 05:34:28,638
connections does the file make when it's

9872
05:34:26,480 --> 05:34:30,400
executed, right? Is it talking to anyone

9873
05:34:28,638 --> 05:34:32,240
on the internet? Is it communicating

9874
05:34:30,400 --> 05:34:34,638
with some sort of C2 or command and

9875
05:34:32,240 --> 05:34:36,638
control server? And lastly, we want to

9876
05:34:34,638 --> 05:34:38,798
of course look at file activity. So, is

9877
05:34:36,638 --> 05:34:40,480
it dropping any other files or is it

9878
05:34:38,798 --> 05:34:41,958
writing anything to the disk in any way

9879
05:34:40,480 --> 05:34:44,558
or modifying any

9880
05:34:41,958 --> 05:34:46,718
files? And in the field, you might use

9881
05:34:44,558 --> 05:34:48,958
some proprietary tools or dedicated

9882
05:34:46,718 --> 05:34:50,480
malware analysis VMs. But for this

9883
05:34:48,958 --> 05:34:52,080
lesson, we're going to look into free

9884
05:34:50,480 --> 05:34:54,080
online platforms to perform this

9885
05:34:52,080 --> 05:34:55,840
analysis for us.

9886
05:34:54,080 --> 05:34:57,280
And I'll say if you're interested in

9887
05:34:55,840 --> 05:34:59,040
this topic and you want to dive deeper

9888
05:34:57,280 --> 05:35:01,680
into building your own malware analysis

9889
05:34:59,040 --> 05:35:03,920
lab, well, I can definitely recommend

9890
05:35:01,680 --> 05:35:06,240
TCM's practical malware analysis and

9891
05:35:03,920 --> 05:35:08,638
triage course produced by Matt Keley or

9892
05:35:06,240 --> 05:35:10,320
Husky Hacks. And in that course, well,

9893
05:35:08,638 --> 05:35:12,240
you will go through building a malware

9894
05:35:10,320 --> 05:35:14,638
analysis lab and doing things like

9895
05:35:12,240 --> 05:35:16,558
performing static and dynamic analysis

9896
05:35:14,638 --> 05:35:18,878
along with a number of other topics like

9897
05:35:16,558 --> 05:35:21,120
decompiling and disassembling malware or

9898
05:35:18,878 --> 05:35:23,600
performing shell code analysis and more

9899
05:35:21,120 --> 05:35:25,280
advanced maloc analysis as well. And so

9900
05:35:23,600 --> 05:35:26,558
I highly recommend that course if you're

9901
05:35:25,280 --> 05:35:29,360
interested in going down the route of

9902
05:35:26,558 --> 05:35:31,040
malware analysis. And so let's locate

9903
05:35:29,360 --> 05:35:33,520
some files that we can use for our

9904
05:35:31,040 --> 05:35:35,200
dynamic analysis and sandboxing. And so

9905
05:35:33,520 --> 05:35:38,000
let's go into the fishing analysis

9906
05:35:35,200 --> 05:35:39,958
folder and head to attachment analysis

9907
05:35:38,000 --> 05:35:42,160
and then go into the malware samples

9908
05:35:39,958 --> 05:35:44,000
directory. And from here we'll see a

9909
05:35:42,160 --> 05:35:45,718
couple of samples of real genuine

9910
05:35:44,000 --> 05:35:47,920
malware that we can use for our

9911
05:35:45,718 --> 05:35:50,400
analysis. And the first tool that we'll

9912
05:35:47,920 --> 05:35:52,240
look at is called hybrid analysis. And

9913
05:35:50,400 --> 05:35:54,320
hybrid analysis is a free malware

9914
05:35:52,240 --> 05:35:56,320
analysis service that can detect and

9915
05:35:54,320 --> 05:35:58,958
analyze malware and is powered by the

9916
05:35:56,320 --> 05:36:01,120
CrowdStrike Falcon Sandbox, making it a

9917
05:35:58,958 --> 05:36:03,360
very powerful and accessible tool for

9918
05:36:01,120 --> 05:36:04,878
analysts to use in the field. And

9919
05:36:03,360 --> 05:36:06,878
optionally, you can create an account on

9920
05:36:04,878 --> 05:36:08,558
hybrid analysis to unlock some more

9921
05:36:06,878 --> 05:36:10,558
features like the Yara search and the

9922
05:36:08,558 --> 05:36:12,240
string search functions. Additionally,

9923
05:36:10,558 --> 05:36:14,878
you'll unlock some more reporting tools

9924
05:36:12,240 --> 05:36:17,040
as well. But for this example, we won't

9925
05:36:14,878 --> 05:36:18,878
even need to create an account. And with

9926
05:36:17,040 --> 05:36:20,718
the samples that we submit, hybrid

9927
05:36:18,878 --> 05:36:22,240
analysis will generate and provide us

9928
05:36:20,718 --> 05:36:24,718
with a detailed report about the

9929
05:36:22,240 --> 05:36:27,280
observed behavior and activity on the

9930
05:36:24,718 --> 05:36:29,760
simulated endpoint. So now that we're on

9931
05:36:27,280 --> 05:36:32,638
the hybrid analysis site, we can simply

9932
05:36:29,760 --> 05:36:34,480
drag and drop a file for analysis.

9933
05:36:32,638 --> 05:36:36,080
Alternatively, we can open up our file

9934
05:36:34,480 --> 05:36:38,558
explorer here and I'm just going to

9935
05:36:36,080 --> 05:36:40,320
locate this DOCX document or this Word

9936
05:36:38,558 --> 05:36:42,160
document. And so I'm going to double

9937
05:36:40,320 --> 05:36:44,718
click on that to select it. And you can

9938
05:36:42,160 --> 05:36:46,400
see we're presented with some options.

9939
05:36:44,718 --> 05:36:47,600
Now, we can enter an email address if

9940
05:36:46,400 --> 05:36:50,000
you want to be notified when the

9941
05:36:47,600 --> 05:36:51,680
analysis is complete. So, because this

9942
05:36:50,000 --> 05:36:53,680
is a free service, well, sometimes

9943
05:36:51,680 --> 05:36:55,040
you'll be behind others in the queue and

9944
05:36:53,680 --> 05:36:55,718
you'll have to wait a little bit to get

9945
05:36:55,040 --> 05:36:58,160
your

9946
05:36:55,718 --> 05:37:00,080
report. You can also provide a comment,

9947
05:36:58,160 --> 05:37:02,000
which is optional, to basically describe

9948
05:37:00,080 --> 05:37:04,160
your sample. Now, I'm just going to

9949
05:37:02,000 --> 05:37:06,718
click on this to agree to the terms and

9950
05:37:04,160 --> 05:37:08,360
make sure that I'm not a robot. And then

9951
05:37:06,718 --> 05:37:10,718
I'll hit

9952
05:37:08,360 --> 05:37:12,400
continue. And from here, we get some

9953
05:37:10,718 --> 05:37:15,280
more information as well as some options

9954
05:37:12,400 --> 05:37:17,360
for our analysis. For example, we can

9955
05:37:15,280 --> 05:37:20,480
get the mime type of the file as well as

9956
05:37:17,360 --> 05:37:22,240
the SHA 256 hash if we hadn't already.

9957
05:37:20,480 --> 05:37:24,280
And interestingly, we can choose what

9958
05:37:22,240 --> 05:37:26,240
kind of machine we want to use for our

9959
05:37:24,280 --> 05:37:29,120
sandboxing. In this case, I'll leave it

9960
05:37:26,240 --> 05:37:31,280
at the default Windows 10 64-bit, but we

9961
05:37:29,120 --> 05:37:33,600
can also choose Windows 11 or Windows 7

9962
05:37:31,280 --> 05:37:34,958
machines, even Linux, Mac, and Android.

9963
05:37:33,600 --> 05:37:37,520
However, I believe you need an account

9964
05:37:34,958 --> 05:37:39,680
to use some of these options. And if you

9965
05:37:37,520 --> 05:37:42,240
click on runtime options, you can see we

9966
05:37:39,680 --> 05:37:44,878
get some more options available to us.

9967
05:37:42,240 --> 05:37:46,360
So we can choose a runtime action script

9968
05:37:44,878 --> 05:37:48,400
where we can simulate some user

9969
05:37:46,360 --> 05:37:50,480
behavior. We can also choose the

9970
05:37:48,400 --> 05:37:52,240
duration as well as any custom command

9971
05:37:50,480 --> 05:37:53,878
line options or commands that we want to

9972
05:37:52,240 --> 05:37:56,320
run when the system

9973
05:37:53,878 --> 05:37:58,718
executes. If for example you upload a

9974
05:37:56,320 --> 05:38:00,638
file like an office document or PDF that

9975
05:37:58,718 --> 05:38:02,718
requires a password prompt, well you can

9976
05:38:00,638 --> 05:38:04,798
put that in here. Additionally, if you

9977
05:38:02,718 --> 05:38:07,040
upload a password protected zip file,

9978
05:38:04,798 --> 05:38:08,480
you can also put in the password. We

9979
05:38:07,040 --> 05:38:09,840
also have some other options here, but

9980
05:38:08,480 --> 05:38:12,000
I'm just going to go back and keep

9981
05:38:09,840 --> 05:38:13,200
everything default.

9982
05:38:12,000 --> 05:38:15,200
And I'm simply going to click on

9983
05:38:13,200 --> 05:38:17,520
generate public report. And remember,

9984
05:38:15,200 --> 05:38:19,120
this is a public report. And anyone in

9985
05:38:17,520 --> 05:38:21,160
the community would be able to access

9986
05:38:19,120 --> 05:38:23,360
the report and look at things such as

9987
05:38:21,160 --> 05:38:25,760
screenshots or even strings that were

9988
05:38:23,360 --> 05:38:27,440
extracted from the file itself. So, I'll

9989
05:38:25,760 --> 05:38:28,638
stress this again. Make sure we're not

9990
05:38:27,440 --> 05:38:30,480
submitting anything here that is

9991
05:38:28,638 --> 05:38:32,240
potentially sensitive. And if you're not

9992
05:38:30,480 --> 05:38:33,760
sure, it's better to air on the side of

9993
05:38:32,240 --> 05:38:35,440
caution and use some of the other

9994
05:38:33,760 --> 05:38:37,760
analysis methods that we've covered thus

9995
05:38:35,440 --> 05:38:39,600
far. So, I'll click on generate public

9996
05:38:37,760 --> 05:38:41,600
report. And we might need to wait for

9997
05:38:39,600 --> 05:38:43,558
the report to load, but you can see

9998
05:38:41,600 --> 05:38:45,600
already this was classified as

9999
05:38:43,558 --> 05:38:47,920
malicious, likely because it's been

10000
05:38:45,600 --> 05:38:50,320
reported before. We can also see a

10001
05:38:47,920 --> 05:38:53,120
specific CVE number that this file or

10002
05:38:50,320 --> 05:38:55,200
this malware was labeled as. And if we

10003
05:38:53,120 --> 05:38:56,600
look up the CVE number itself, we can

10004
05:38:55,200 --> 05:38:59,200
get some more

10005
05:38:56,600 --> 05:39:01,280
information. It appears this CVE affects

10006
05:38:59,200 --> 05:39:03,200
a number of Office versions and allows

10007
05:39:01,280 --> 05:39:06,480
remote attackers to execute arbitrary

10008
05:39:03,200 --> 05:39:08,160
code via a crafted document.

10009
05:39:06,480 --> 05:39:09,920
If we scroll down to the antivirus

10010
05:39:08,160 --> 05:39:12,160
reports, we can see the Meta Defender

10011
05:39:09,920 --> 05:39:13,920
report is currently running. However, we

10012
05:39:12,160 --> 05:39:16,240
have a CrowdStrike Falcon report that we

10013
05:39:13,920 --> 05:39:18,638
can also look into. And from here, we

10014
05:39:16,240 --> 05:39:19,920
can see with 100% confidence the static

10015
05:39:18,638 --> 05:39:22,520
analysis and machine learning

10016
05:39:19,920 --> 05:39:24,958
capabilities detected this file as

10017
05:39:22,520 --> 05:39:27,120
malware. If we scroll down to the Falcon

10018
05:39:24,958 --> 05:39:29,200
sandbox reports, well, this is where we

10019
05:39:27,120 --> 05:39:31,280
can actually see the dynamic analysis in

10020
05:39:29,200 --> 05:39:33,200
action. This is the one that we

10021
05:39:31,280 --> 05:39:34,638
submitted on our Windows 10 machine. But

10022
05:39:33,200 --> 05:39:37,120
we can see this file was already

10023
05:39:34,638 --> 05:39:39,280
analyzed on a Windows 7 machine. And so

10024
05:39:37,120 --> 05:39:41,680
while we wait for ours to finish, we can

10025
05:39:39,280 --> 05:39:43,200
take a look at this dynamic analysis.

10026
05:39:41,680 --> 05:39:45,840
And we can see at a high level there

10027
05:39:43,200 --> 05:39:47,760
were 19 malicious indicators. And if we

10028
05:39:45,840 --> 05:39:49,680
click on this to view more information,

10029
05:39:47,760 --> 05:39:51,160
we'll be taken to the actual report of

10030
05:39:49,680 --> 05:39:53,360
this dynamic

10031
05:39:51,160 --> 05:39:56,400
analysis. So again, we can see the

10032
05:39:53,360 --> 05:39:58,240
result of this analysis was malicious.

10033
05:39:56,400 --> 05:40:00,080
While waiting for the report to finish,

10034
05:39:58,240 --> 05:40:02,878
I was looking into the CVE number that

10035
05:40:00,080 --> 05:40:04,160
we identified. Specifically, it appears

10036
05:40:02,878 --> 05:40:06,200
that there's an attack chain that we

10037
05:40:04,160 --> 05:40:08,400
could potentially look for in our

10038
05:40:06,200 --> 05:40:10,958
report. First, an attacker is going to

10039
05:40:08,400 --> 05:40:12,558
target a user with a Word document. And

10040
05:40:10,958 --> 05:40:15,680
this Word document is going to have an

10041
05:40:12,558 --> 05:40:17,680
OLE2 embedded link object inside of it.

10042
05:40:15,680 --> 05:40:20,080
And when the user opens this document,

10043
05:40:17,680 --> 05:40:22,558
well, the Microsoft Word executable is

10044
05:40:20,080 --> 05:40:24,558
going to issue an HTTP request to the

10045
05:40:22,558 --> 05:40:27,040
attacker server to retrieve a malicious

10046
05:40:24,558 --> 05:40:29,280
hta file. The file that's returned by

10047
05:40:27,040 --> 05:40:32,240
the server is going to be a fake RTF

10048
05:40:29,280 --> 05:40:34,000
file with an embedded malicious script.

10049
05:40:32,240 --> 05:40:36,080
When Word tries to handle this script,

10050
05:40:34,000 --> 05:40:38,760
it's going to inadvertently invoke the

10051
05:40:36,080 --> 05:40:41,120
Microsoft HTA application or

10052
05:40:38,760 --> 05:40:43,200
MSHTA.exe, which will then execute and

10053
05:40:41,120 --> 05:40:44,480
run the embedded malicious script. And

10054
05:40:43,200 --> 05:40:46,160
in this medium link, which I'll have

10055
05:40:44,480 --> 05:40:48,360
linked down below, we can see a more

10056
05:40:46,160 --> 05:40:50,638
visual representation of this attack

10057
05:40:48,360 --> 05:40:52,718
chain. So, with that in mind, let's

10058
05:40:50,638 --> 05:40:55,200
return to our report and see if we can

10059
05:40:52,718 --> 05:40:56,638
identify any of those indicators. Right

10060
05:40:55,200 --> 05:40:58,638
off the bat, of course, we can see that

10061
05:40:56,638 --> 05:40:59,920
this was identified as malicious. Now,

10062
05:40:58,638 --> 05:41:01,520
we could technically write off our

10063
05:40:59,920 --> 05:41:03,680
report here and be fairly confident that

10064
05:41:01,520 --> 05:41:05,280
this was a malicious file. And if it was

10065
05:41:03,680 --> 05:41:07,040
attached to an email, well, we could be

10066
05:41:05,280 --> 05:41:09,360
very confident that that was a fish and

10067
05:41:07,040 --> 05:41:11,040
respond appropriately. However, let's

10068
05:41:09,360 --> 05:41:13,360
look into this report in more detail so

10069
05:41:11,040 --> 05:41:15,040
we can understand its components. If we

10070
05:41:13,360 --> 05:41:17,160
scroll down, we can immediately look

10071
05:41:15,040 --> 05:41:19,440
into those 19 malicious

10072
05:41:17,160 --> 05:41:21,120
indicators. Starting out, we can see we

10073
05:41:19,440 --> 05:41:24,240
identified some exploit or shell code

10074
05:41:21,120 --> 05:41:25,840
that was related to that CVE number. And

10075
05:41:24,240 --> 05:41:27,920
if we scroll down some more, well, this

10076
05:41:25,840 --> 05:41:29,600
starts making more sense. We can see

10077
05:41:27,920 --> 05:41:31,638
that the sample executed some get

10078
05:41:29,600 --> 05:41:34,160
requests to download files from a web

10079
05:41:31,638 --> 05:41:36,320
server. Specifically, we can see the

10080
05:41:34,160 --> 05:41:37,680
request itself. We can see the host,

10081
05:41:36,320 --> 05:41:39,360
which was potentially the attacker's

10082
05:41:37,680 --> 05:41:40,798
command and control server or the server

10083
05:41:39,360 --> 05:41:43,200
that they were hosting the second stage

10084
05:41:40,798 --> 05:41:44,200
of the malware on. We can also see the

10085
05:41:43,200 --> 05:41:46,558
URL

10086
05:41:44,200 --> 05:41:48,480
itself. If we scroll down to the get

10087
05:41:46,558 --> 05:41:51,280
line, we can see the actual file that

10088
05:41:48,480 --> 05:41:52,558
was downloaded, this doc file, which in

10089
05:41:51,280 --> 05:41:54,480
the case of the attack chain we

10090
05:41:52,558 --> 05:41:56,240
identified, this is most likely the fake

10091
05:41:54,480 --> 05:41:58,400
RTF file, which has the embedded

10092
05:41:56,240 --> 05:42:00,320
malicious script.

10093
05:41:58,400 --> 05:42:02,080
If we scroll down some more, we can

10094
05:42:00,320 --> 05:42:03,680
identify that the file spawned a number

10095
05:42:02,080 --> 05:42:06,080
of processes, which is definitely

10096
05:42:03,680 --> 05:42:08,240
something we want to look into. And

10097
05:42:06,080 --> 05:42:09,680
specifically, we can see that the file

10098
05:42:08,240 --> 05:42:12,638
spawned a number of PowerShell

10099
05:42:09,680 --> 05:42:14,320
processes, which is very suspicious. A

10100
05:42:12,638 --> 05:42:16,040
Microsoft Word file should not be

10101
05:42:14,320 --> 05:42:17,840
spawning

10102
05:42:16,040 --> 05:42:19,280
PowerShell.exe. We can see that the

10103
05:42:17,840 --> 05:42:21,520
malware is attempting to configure

10104
05:42:19,280 --> 05:42:23,120
Windows Defender to exclude specific

10105
05:42:21,520 --> 05:42:25,520
file paths from its scanning and

10106
05:42:23,120 --> 05:42:27,920
protection mechanisms. Likely this is an

10107
05:42:25,520 --> 05:42:30,000
attempt at AV evasion. And we can see

10108
05:42:27,920 --> 05:42:31,760
the two executables that were excluded

10109
05:42:30,000 --> 05:42:33,600
from scanning. And this is very useful

10110
05:42:31,760 --> 05:42:35,600
for our notes. And under these

10111
05:42:33,600 --> 05:42:37,040
processes, we can see another one here

10112
05:42:35,600 --> 05:42:39,760
which appears to be a potential

10113
05:42:37,040 --> 05:42:41,520
persistence mechanism. In this case, we

10114
05:42:39,760 --> 05:42:44,040
can see that a new scheduled task was

10115
05:42:41,520 --> 05:42:45,920
created using the Windows taskuler

10116
05:42:44,040 --> 05:42:47,280
executable. And specifically, we're

10117
05:42:45,920 --> 05:42:49,680
seeing the same name here that we

10118
05:42:47,280 --> 05:42:51,680
identified earlier. If we scroll down

10119
05:42:49,680 --> 05:42:54,240
some more, we can get to the screenshots

10120
05:42:51,680 --> 05:42:55,920
section. And in this section, we can see

10121
05:42:54,240 --> 05:42:58,240
some actual screenshots that were taken

10122
05:42:55,920 --> 05:43:00,320
on the sandbox machine itself as it was

10123
05:42:58,240 --> 05:43:01,440
executing the file. And if we scroll

10124
05:43:00,320 --> 05:43:03,120
through these, we might get a better

10125
05:43:01,440 --> 05:43:05,080
idea of what actions were performed on

10126
05:43:03,120 --> 05:43:07,200
the

10127
05:43:05,080 --> 05:43:09,200
sandbox. Specifically, we can see that

10128
05:43:07,200 --> 05:43:12,000
Microsoft Windows was opened, but the

10129
05:43:09,200 --> 05:43:12,000
file appears to be

10130
05:43:14,280 --> 05:43:18,798
blank. If we go under the network

10131
05:43:16,480 --> 05:43:20,878
analysis section, we can see some DNS

10132
05:43:18,798 --> 05:43:22,638
requests that were made. Specifically,

10133
05:43:20,878 --> 05:43:24,080
we have these two domains here, which

10134
05:43:22,638 --> 05:43:25,680
appear to be the attacker's command and

10135
05:43:24,080 --> 05:43:27,360
control server and potentially the

10136
05:43:25,680 --> 05:43:30,558
server that was hosting the stage two of

10137
05:43:27,360 --> 05:43:32,718
the malware. In this case, TT.VG is in

10138
05:43:30,558 --> 05:43:34,480
fact yet another URL shortening service

10139
05:43:32,718 --> 05:43:36,360
that the attacker seems to be leveraging

10140
05:43:34,480 --> 05:43:38,638
to disguise a malicious

10141
05:43:36,360 --> 05:43:40,558
URL. And we can also see the IP

10142
05:43:38,638 --> 05:43:42,240
addresses of these domains along with

10143
05:43:40,558 --> 05:43:44,558
some additional information like the

10144
05:43:42,240 --> 05:43:46,160
register and the country they belong to.

10145
05:43:44,558 --> 05:43:48,080
And in line with the attack chain we

10146
05:43:46,160 --> 05:43:50,400
identified, it appears that the Winword

10147
05:43:48,080 --> 05:43:52,638
or the Microsoft Word executable was in

10148
05:43:50,400 --> 05:43:55,600
fact making those HTTP requests over

10149
05:43:52,638 --> 05:43:58,480
port 80 and 443. And it was making these

10150
05:43:55,600 --> 05:44:00,558
requests to that TT.VG domain which we

10151
05:43:58,480 --> 05:44:03,040
identified was hosting the fake RTF file

10152
05:44:00,558 --> 05:44:05,360
that had the embedded malicious script.

10153
05:44:03,040 --> 05:44:07,440
Under HTTP traffic, we can see the

10154
05:44:05,360 --> 05:44:09,680
actual request that was made to the web

10155
05:44:07,440 --> 05:44:11,760
server. Specifically after some

10156
05:44:09,680 --> 05:44:13,760
redirects, it appears to be this request

10157
05:44:11,760 --> 05:44:15,240
here as we can identify by the same file

10158
05:44:13,760 --> 05:44:17,840
name in the

10159
05:44:15,240 --> 05:44:20,040
URL. If we go to the extracted file

10160
05:44:17,840 --> 05:44:22,798
section and scroll

10161
05:44:20,040 --> 05:44:23,878
down, we can in fact identify that fake

10162
05:44:22,798 --> 05:44:27,200
RTF

10163
05:44:23,878 --> 05:44:29,000
file. We can even take that SHA 256 hash

10164
05:44:27,200 --> 05:44:31,200
and head over to Virus Total for more

10165
05:44:29,000 --> 05:44:33,600
analysis. If we paste in the hash and

10166
05:44:31,200 --> 05:44:35,040
run the scan, well, we can immediately

10167
05:44:33,600 --> 05:44:39,480
see that over half of these security

10168
05:44:35,040 --> 05:44:39,480
vendors flagged this file as malicious.

10169
05:44:40,240 --> 05:44:43,120
Now, that was quite a bit of

10170
05:44:41,440 --> 05:44:44,878
information, but the main thing that we

10171
05:44:43,120 --> 05:44:46,798
can take from this is just the large

10172
05:44:44,878 --> 05:44:48,480
amount of malicious indicators that we

10173
05:44:46,798 --> 05:44:50,558
found. And so, it's no question that

10174
05:44:48,480 --> 05:44:52,160
this file is malicious. And if it was

10175
05:44:50,558 --> 05:44:53,520
attached to an email, well, we can

10176
05:44:52,160 --> 05:44:55,000
definitely write the email off as

10177
05:44:53,520 --> 05:44:57,200
fishing and respond

10178
05:44:55,000 --> 05:44:59,440
appropriately. Now, we also have Joe

10179
05:44:57,200 --> 05:45:01,360
Sandbox. And Joe Sandbox is a very

10180
05:44:59,440 --> 05:45:03,600
powerful malware analysis engine. And it

10181
05:45:01,360 --> 05:45:05,760
allows us to analyze files on Windows or

10182
05:45:03,600 --> 05:45:07,760
Mac and even Android operating systems.

10183
05:45:05,760 --> 05:45:09,600
But unfortunately, Joe Sandbox requires

10184
05:45:07,760 --> 05:45:11,440
us to register with a business email and

10185
05:45:09,600 --> 05:45:13,040
they will manually verify your account.

10186
05:45:11,440 --> 05:45:14,400
And so because of this restriction, I'll

10187
05:45:13,040 --> 05:45:16,160
quickly showcase it here, but we'll

10188
05:45:14,400 --> 05:45:18,240
stress that hybrid analysis is a much

10189
05:45:16,160 --> 05:45:19,840
more accessible option. But fortunately,

10190
05:45:18,240 --> 05:45:22,400
with a business email account, we can

10191
05:45:19,840 --> 05:45:24,160
access the Joe Sandbox cloud basic tier,

10192
05:45:22,400 --> 05:45:25,920
which limits a number of configuration

10193
05:45:24,160 --> 05:45:28,160
options such as custom commands or

10194
05:45:25,920 --> 05:45:30,280
browsers and network options, but we'll

10195
05:45:28,160 --> 05:45:32,240
still have access to some really useful

10196
05:45:30,280 --> 05:45:33,760
features. For example, I'm going to

10197
05:45:32,240 --> 05:45:36,160
upload the same file that we've been

10198
05:45:33,760 --> 05:45:38,718
using. And scrolling down, I can select

10199
05:45:36,160 --> 05:45:41,040
the analysis system. And we have access

10200
05:45:38,718 --> 05:45:43,280
to Windows 10 or Windows 7. For this

10201
05:45:41,040 --> 05:45:44,958
case, I'll just leave it on Windows 10.

10202
05:45:43,280 --> 05:45:46,958
And now we have this option for live

10203
05:45:44,958 --> 05:45:49,120
interaction. And this will allow us to

10204
05:45:46,958 --> 05:45:50,798
dynamically interact with the sandbox as

10205
05:45:49,120 --> 05:45:52,480
needed. And so I'll check this off to

10206
05:45:50,798 --> 05:45:54,638
demonstrate. And I'm also going to check

10207
05:45:52,480 --> 05:45:56,400
off generate deep analysis report after

10208
05:45:54,638 --> 05:45:58,000
execution. Now we can enter some

10209
05:45:56,400 --> 05:46:00,480
settings here like we can add a comment

10210
05:45:58,000 --> 05:46:01,798
and change the execution runtime. And we

10211
05:46:00,480 --> 05:46:03,920
can click here to show the advanced

10212
05:46:01,798 --> 05:46:05,680
settings. So, we can do things like

10213
05:46:03,920 --> 05:46:07,920
turning off internet access, which we

10214
05:46:05,680 --> 05:46:10,400
don't really want to do. And so, I'll

10215
05:46:07,920 --> 05:46:12,160
just leave everything as default. And

10216
05:46:10,400 --> 05:46:14,080
before we analyze here, remember once

10217
05:46:12,160 --> 05:46:15,760
again, anything we submit here is going

10218
05:46:14,080 --> 05:46:17,360
to be published and accessible to

10219
05:46:15,760 --> 05:46:18,958
anyone. And anyone will be able to

10220
05:46:17,360 --> 05:46:20,718
download the sample as well as look at

10221
05:46:18,958 --> 05:46:22,080
the screenshots. If we want to run

10222
05:46:20,718 --> 05:46:24,240
private scans, well, we're going to need

10223
05:46:22,080 --> 05:46:26,958
to pay. And so, with that in mind, let's

10224
05:46:24,240 --> 05:46:30,080
click on analyze with Joe Sandbox, and

10225
05:46:26,958 --> 05:46:32,240
it'll give us that warning once again.

10226
05:46:30,080 --> 05:46:34,558
And so right now our sandbox machine is

10227
05:46:32,240 --> 05:46:34,558
booting

10228
05:46:35,400 --> 05:46:39,718
up and you can see it's opened up to the

10229
05:46:37,920 --> 05:46:41,920
Microsoft Word

10230
05:46:39,718 --> 05:46:44,080
document and we can interact with this

10231
05:46:41,920 --> 05:46:46,638
sandbox, right? So I can close it and

10232
05:46:44,080 --> 05:46:49,160
reopen it. And you can see already we're

10233
05:46:46,638 --> 05:46:51,360
getting a number of signatures and IPs

10234
05:46:49,160 --> 05:46:52,958
detected. So I'll wait for the report to

10235
05:46:51,360 --> 05:46:54,718
finish to start looking at these. But

10236
05:46:52,958 --> 05:46:56,798
just note that this is an interactive

10237
05:46:54,718 --> 05:46:58,320
environment. I can type whatever I want.

10238
05:46:56,798 --> 05:47:00,080
And this is very useful if we're dealing

10239
05:46:58,320 --> 05:47:01,840
with embedded files or objects or

10240
05:47:00,080 --> 05:47:04,080
scripts within a Word document, for

10241
05:47:01,840 --> 05:47:05,760
example. And we can dynamically interact

10242
05:47:04,080 --> 05:47:07,680
with the document and click on any links

10243
05:47:05,760 --> 05:47:10,240
that we need to or download any files

10244
05:47:07,680 --> 05:47:12,160
from a Google Drive, for example. And so

10245
05:47:10,240 --> 05:47:14,000
this is why sandboxing is so useful for

10246
05:47:12,160 --> 05:47:15,240
us as a sock analyst if you're trying to

10247
05:47:14,000 --> 05:47:17,200
do more deep

10248
05:47:15,240 --> 05:47:19,120
investigation. And so I think we've let

10249
05:47:17,200 --> 05:47:22,480
this run for long enough. So I'm just

10250
05:47:19,120 --> 05:47:22,480
going to hit stop in the top right

10251
05:47:23,160 --> 05:47:27,280
here. And now Joe Sandbox is going to

10252
05:47:25,760 --> 05:47:29,360
generate that deep malware analysis

10253
05:47:27,280 --> 05:47:30,798
report for us. But we can already see

10254
05:47:29,360 --> 05:47:32,638
some interesting things here.

10255
05:47:30,798 --> 05:47:34,160
Specifically under signatures, well, we

10256
05:47:32,638 --> 05:47:36,558
can find a number of malicious

10257
05:47:34,160 --> 05:47:38,718
identified signatures. If we look in the

10258
05:47:36,558 --> 05:47:40,480
IP section, well, we can see some IP

10259
05:47:38,718 --> 05:47:41,920
addresses that were contacted.

10260
05:47:40,480 --> 05:47:43,760
Specifically, we have three down here

10261
05:47:41,920 --> 05:47:45,600
that were identified as clean. These are

10262
05:47:43,760 --> 05:47:48,400
most likely normal Microsoft IP

10263
05:47:45,600 --> 05:47:50,160
addresses. However, we have the same 172

10264
05:47:48,400 --> 05:47:52,400
address that we identified earlier as

10265
05:47:50,160 --> 05:47:54,878
malicious.

10266
05:47:52,400 --> 05:47:56,958
Under domains, we can see that TT.VG

10267
05:47:54,878 --> 05:47:59,040
domain that once again was identified as

10268
05:47:56,958 --> 05:48:01,080
malicious. And we can even see the URL

10269
05:47:59,040 --> 05:48:03,440
that was hosting the second stage of the

10270
05:48:01,080 --> 05:48:04,878
malware. So after a few minutes, the

10271
05:48:03,440 --> 05:48:07,280
report is finished and ready for us to

10272
05:48:04,878 --> 05:48:07,280
take a look

10273
05:48:08,680 --> 05:48:14,040
at. And we can see immediately the file

10274
05:48:11,520 --> 05:48:16,480
itself was identified as

10275
05:48:14,040 --> 05:48:19,040
malicious. And if we look down, we can

10276
05:48:16,480 --> 05:48:22,638
start to see some IoC's, specifically

10277
05:48:19,040 --> 05:48:25,760
the IP address and the domain.

10278
05:48:22,638 --> 05:48:27,520
If we click on full report here, as the

10279
05:48:25,760 --> 05:48:29,320
name suggests, we get a full report of

10280
05:48:27,520 --> 05:48:31,360
everything that was detected and

10281
05:48:29,320 --> 05:48:32,718
run. If we scroll down, we can

10282
05:48:31,360 --> 05:48:34,638
immediately see all of the signatures

10283
05:48:32,718 --> 05:48:37,200
that were detected. The red means that

10284
05:48:34,638 --> 05:48:38,718
it was most likely malicious. Under the

10285
05:48:37,200 --> 05:48:40,798
detection, well, we can see that there

10286
05:48:38,718 --> 05:48:43,520
was a 100% confidence rate that this was

10287
05:48:40,798 --> 05:48:44,958
a malicious file. And we get some more

10288
05:48:43,520 --> 05:48:47,040
general information like the sample

10289
05:48:44,958 --> 05:48:49,520
name, the hashes, and the screenshots

10290
05:48:47,040 --> 05:48:50,958
from the execution.

10291
05:48:49,520 --> 05:48:53,080
You can see this was everything that we

10292
05:48:50,958 --> 05:48:55,120
performed when we were in the

10293
05:48:53,080 --> 05:48:56,878
sandbox. Now, I'm not going to go into

10294
05:48:55,120 --> 05:48:58,878
this report with the same amount of

10295
05:48:56,878 --> 05:49:00,400
detail that I did with hybrid analysis

10296
05:48:58,878 --> 05:49:02,320
because we should see many similar

10297
05:49:00,400 --> 05:49:03,440
things here. So, at a high level, it's

10298
05:49:02,320 --> 05:49:05,280
just important to note that there are

10299
05:49:03,440 --> 05:49:06,040
other sandboxing tools out there like

10300
05:49:05,280 --> 05:49:08,718
Joe

10301
05:49:06,040 --> 05:49:10,558
Sandbox. Speaking of other tools, well,

10302
05:49:08,718 --> 05:49:12,878
the last one I'll quickly cover here is

10303
05:49:10,558 --> 05:49:14,638
called Any Run. And like with Joe

10304
05:49:12,878 --> 05:49:16,320
Sandbox, in order to use the free

10305
05:49:14,638 --> 05:49:18,718
version, well, you need to sign up for

10306
05:49:16,320 --> 05:49:20,400
an account. And unfortunately, you do

10307
05:49:18,718 --> 05:49:22,798
need a business email in order to sign

10308
05:49:20,400 --> 05:49:24,320
up for an account. And so, as such, you

10309
05:49:22,798 --> 05:49:25,520
don't really need to follow along here.

10310
05:49:24,320 --> 05:49:28,160
I'm just going to showcase how to

10311
05:49:25,520 --> 05:49:29,520
quickly start and run a scan. And as

10312
05:49:28,160 --> 05:49:32,120
mentioned earlier, I would definitely

10313
05:49:29,520 --> 05:49:34,240
recommend hybrid analysis due to its

10314
05:49:32,120 --> 05:49:36,480
accessibility. And any run is an

10315
05:49:34,240 --> 05:49:38,320
interactive malware analysis sandbox

10316
05:49:36,480 --> 05:49:41,920
that allows us to provide things like

10317
05:49:38,320 --> 05:49:43,840
URLs or files or even email files. And

10318
05:49:41,920 --> 05:49:45,920
it will dynamically investigate and

10319
05:49:43,840 --> 05:49:48,160
extract things like IoC's and look at

10320
05:49:45,920 --> 05:49:49,840
behavior. And because it's interactive,

10321
05:49:48,160 --> 05:49:52,638
well, we can actually interact with the

10322
05:49:49,840 --> 05:49:54,080
sandbox like we could with Joe sandbox.

10323
05:49:52,638 --> 05:49:55,840
And so our options are going to be

10324
05:49:54,080 --> 05:49:57,600
severely throttled and limited with the

10325
05:49:55,840 --> 05:49:59,760
free version. But I'll quickly showcase

10326
05:49:57,600 --> 05:50:01,120
how we can analyze a file. And it's also

10327
05:49:59,760 --> 05:50:02,958
important to note that anything we

10328
05:50:01,120 --> 05:50:05,360
upload, well, we'll be publicly

10329
05:50:02,958 --> 05:50:07,280
available. If we look at public reports

10330
05:50:05,360 --> 05:50:09,840
here, we can see all of the public

10331
05:50:07,280 --> 05:50:11,440
submissions from other users. And so

10332
05:50:09,840 --> 05:50:12,718
even if you don't have an account and

10333
05:50:11,440 --> 05:50:14,638
you're interested in seeing what the

10334
05:50:12,718 --> 05:50:16,240
report looks like, well, you can go

10335
05:50:14,638 --> 05:50:18,320
through the public submissions here and

10336
05:50:16,240 --> 05:50:20,840
you can even search based on hashes or

10337
05:50:18,320 --> 05:50:23,360
tags if you're interested in a specific

10338
05:50:20,840 --> 05:50:25,120
sample. But to start our own analysis,

10339
05:50:23,360 --> 05:50:27,200
I'm just going to click on analyze files

10340
05:50:25,120 --> 05:50:28,958
here. And as you guessed, I'm going to

10341
05:50:27,200 --> 05:50:30,200
pick the same files so we can compare

10342
05:50:28,958 --> 05:50:32,160
the different

10343
05:50:30,200 --> 05:50:33,558
services. So I'm going to select this

10344
05:50:32,160 --> 05:50:35,760
bank payment

10345
05:50:33,558 --> 05:50:38,558
document, which will open up this new

10346
05:50:35,760 --> 05:50:40,160
analysis window. And from here, I'm just

10347
05:50:38,558 --> 05:50:42,718
going to click on pro mode so we can see

10348
05:50:40,160 --> 05:50:44,878
all of the options. And now we can

10349
05:50:42,718 --> 05:50:46,718
choose a number of different things. For

10350
05:50:44,878 --> 05:50:48,958
example, we can change the start object

10351
05:50:46,718 --> 05:50:50,320
from where the sample is executed. By

10352
05:50:48,958 --> 05:50:52,000
default, it will be the temp directory,

10353
05:50:50,320 --> 05:50:53,520
which I'll leave it at, but we can also

10354
05:50:52,000 --> 05:50:55,840
choose things like the desktop or the

10355
05:50:53,520 --> 05:50:57,440
user's home directory. We can change

10356
05:50:55,840 --> 05:50:59,440
some network settings. For example, we

10357
05:50:57,440 --> 05:51:01,360
can completely disable the network from

10358
05:50:59,440 --> 05:51:02,958
the sandbox. However, since we're

10359
05:51:01,360 --> 05:51:04,558
analyzing malware and want to see those

10360
05:51:02,958 --> 05:51:06,480
network connections, well, I'm going to

10361
05:51:04,558 --> 05:51:08,240
leave it connected. And note under

10362
05:51:06,480 --> 05:51:10,878
privacy here we only have the public

10363
05:51:08,240 --> 05:51:12,878
option. If we were on a higher tier or a

10364
05:51:10,878 --> 05:51:14,798
business plan or an enterprise plan, we

10365
05:51:12,878 --> 05:51:16,798
would be able to run private scans.

10366
05:51:14,798 --> 05:51:18,958
Under operating system here on the free

10367
05:51:16,798 --> 05:51:21,360
tier, we only have access to Windows 7.

10368
05:51:18,958 --> 05:51:22,798
So I'll leave it at that. And so with

10369
05:51:21,360 --> 05:51:25,360
these selections, I'm just going to

10370
05:51:22,798 --> 05:51:26,718
click on run a public analysis. And it's

10371
05:51:25,360 --> 05:51:28,878
going to give us a warning that this is

10372
05:51:26,718 --> 05:51:30,798
of course a public task. So I'm going to

10373
05:51:28,878 --> 05:51:33,920
click I agree. And it's going to start

10374
05:51:30,798 --> 05:51:36,160
up the sandbox for us. So you can see

10375
05:51:33,920 --> 05:51:38,638
our sandbox and our dynamic analysis VM

10376
05:51:36,160 --> 05:51:40,080
is starting to boot up and we can see in

10377
05:51:38,638 --> 05:51:42,798
the preview window here it's currently

10378
05:51:40,080 --> 05:51:44,798
opening Microsoft Word and we can

10379
05:51:42,798 --> 05:51:46,798
interact with this machine. For example,

10380
05:51:44,798 --> 05:51:48,280
I can click on the start menu here and I

10381
05:51:46,798 --> 05:51:50,240
can start clicking on any of these

10382
05:51:48,280 --> 05:51:53,160
applications. But I'll just let it do

10383
05:51:50,240 --> 05:51:55,840
its thing and open up

10384
05:51:53,160 --> 05:51:58,480
Word. Similar to Joe Sandbox, we can see

10385
05:51:55,840 --> 05:52:01,040
under here some of the OC's. We can see

10386
05:51:58,480 --> 05:52:03,280
some connections that are being made. We

10387
05:52:01,040 --> 05:52:05,600
can see some DNS requests. for example,

10388
05:52:03,280 --> 05:52:07,160
this TT.VG domain, what we're quite

10389
05:52:05,600 --> 05:52:09,440
accustomed to

10390
05:52:07,160 --> 05:52:11,360
seeing. And so once our sample is

10391
05:52:09,440 --> 05:52:13,840
complete after that minute, we can look

10392
05:52:11,360 --> 05:52:15,440
at the full report. Specifically, we can

10393
05:52:13,840 --> 05:52:17,680
start with looking at some of the IoC's

10394
05:52:15,440 --> 05:52:20,080
that were detected. And so we're getting

10395
05:52:17,680 --> 05:52:22,160
the hashes of the file itself along with

10396
05:52:20,080 --> 05:52:24,638
the DNS requests. And you can see here

10397
05:52:22,160 --> 05:52:26,240
that this domain has been identified as

10398
05:52:24,638 --> 05:52:28,798
malicious, which of course we've already

10399
05:52:26,240 --> 05:52:30,718
found out. We can see the IP addresses

10400
05:52:28,798 --> 05:52:32,798
of the connections along with the URLs

10401
05:52:30,718 --> 05:52:34,798
that were contacted as well. So

10402
05:52:32,798 --> 05:52:36,718
specifically, this was the URL that we

10403
05:52:34,798 --> 05:52:38,200
identified previously was hosting the

10404
05:52:36,718 --> 05:52:40,638
second stage of the

10405
05:52:38,200 --> 05:52:42,320
malware. And so as you can tell, we're

10406
05:52:40,638 --> 05:52:44,240
getting a number of the same information

10407
05:52:42,320 --> 05:52:45,600
and the same classifications. For

10408
05:52:44,240 --> 05:52:47,680
example, this of course has been

10409
05:52:45,600 --> 05:52:49,600
identified as a malicious file. But

10410
05:52:47,680 --> 05:52:51,520
anyone can provide us some very useful

10411
05:52:49,600 --> 05:52:53,680
reports that we can download and put

10412
05:52:51,520 --> 05:52:56,320
into our documentation. If we click on

10413
05:52:53,680 --> 05:52:58,878
text report here, it's going to take us

10414
05:52:56,320 --> 05:53:01,760
to this full report of all the behavior

10415
05:52:58,878 --> 05:53:03,360
and activity that it analyzed. And if we

10416
05:53:01,760 --> 05:53:06,240
wanted to, we could click on the print

10417
05:53:03,360 --> 05:53:08,000
option here and save this as a PDF. And

10418
05:53:06,240 --> 05:53:10,480
this would be very useful to include in

10419
05:53:08,000 --> 05:53:12,638
our report or documentation. And just to

10420
05:53:10,480 --> 05:53:14,480
very quickly cover this report, but we

10421
05:53:12,638 --> 05:53:16,080
can see very quickly under the tags

10422
05:53:14,480 --> 05:53:17,840
here, we're getting that same CVE

10423
05:53:16,080 --> 05:53:20,320
number. We're also getting the file

10424
05:53:17,840 --> 05:53:21,840
hashes as well. But as we scroll down,

10425
05:53:20,320 --> 05:53:24,000
you will see a number of interesting

10426
05:53:21,840 --> 05:53:26,718
sections within this report like the

10427
05:53:24,000 --> 05:53:28,958
behavior activities or the screenshots

10428
05:53:26,718 --> 05:53:30,718
from the report itself and all of the

10429
05:53:28,958 --> 05:53:32,600
processes that were captured along with

10430
05:53:30,718 --> 05:53:35,040
this behavior

10431
05:53:32,600 --> 05:53:36,920
graph. We also of course get things like

10432
05:53:35,040 --> 05:53:39,080
registry

10433
05:53:36,920 --> 05:53:41,840
activity and file

10434
05:53:39,080 --> 05:53:43,680
activity and of course network activity

10435
05:53:41,840 --> 05:53:45,120
as well.

10436
05:53:43,680 --> 05:53:46,400
And like with all the tools and

10437
05:53:45,120 --> 05:53:48,798
solutions we've looked at in this

10438
05:53:46,400 --> 05:53:50,878
lesson, they all provided us with very

10439
05:53:48,798 --> 05:53:52,718
interesting information and also gave us

10440
05:53:50,878 --> 05:53:53,958
a verdict on the malicious activity of

10441
05:53:52,718 --> 05:53:56,480
the file we

10442
05:53:53,958 --> 05:53:58,718
submitted. And just to wrap up, like I

10443
05:53:56,480 --> 05:54:00,480
said before, sandboxing is a very useful

10444
05:53:58,718 --> 05:54:02,480
technique for us and it can really allow

10445
05:54:00,480 --> 05:54:03,920
us to do some deeper analysis on files

10446
05:54:02,480 --> 05:54:06,000
that we haven't been able to determine

10447
05:54:03,920 --> 05:54:08,240
are malicious or not. And through using

10448
05:54:06,000 --> 05:54:10,240
interactive sandboxing tools, we can do

10449
05:54:08,240 --> 05:54:13,040
interesting things like safely download

10450
05:54:10,240 --> 05:54:14,480
files or browse through malicious URLs.

10451
05:54:13,040 --> 05:54:16,958
And so I'll leave it with the sentiment

10452
05:54:14,480 --> 05:54:18,558
that dynamic analysis and sandboxing is

10453
05:54:16,958 --> 05:54:20,240
always going to be a very useful tool in

10454
05:54:18,558 --> 05:54:22,240
your arsenal, but it should never be the

10455
05:54:20,240 --> 05:54:23,760
only thing that you rely on. And so I

10456
05:54:22,240 --> 05:54:25,400
hope this was a good introduction into

10457
05:54:23,760 --> 05:54:27,600
some of the options out

10458
05:54:25,400 --> 05:54:29,760
there. Before we dive into our next

10459
05:54:27,600 --> 05:54:32,400
section, I just want to again thank our

10460
05:54:29,760 --> 05:54:34,480
sponsor for this video, Flare Academy.

10461
05:54:32,400 --> 05:54:36,480
Cyber threats are evolving fast and

10462
05:54:34,480 --> 05:54:38,400
staying ahead is not just an advantage,

10463
05:54:36,480 --> 05:54:40,480
it's a necessity and that's where Flare

10464
05:54:38,400 --> 05:54:42,638
Academy comes in. Flare Academy is an

10465
05:54:40,480 --> 05:54:44,638
educational hub designed to democratize

10466
05:54:42,638 --> 05:54:46,320
cyber security knowledge. Backed by the

10467
05:54:44,638 --> 05:54:48,400
Flair research team and leading threat

10468
05:54:46,320 --> 05:54:50,320
intelligence experts, they provide

10469
05:54:48,400 --> 05:54:53,040
accessible training, collaborative

10470
05:54:50,320 --> 05:54:54,400
discussions, and cutting edge resources.

10471
05:54:53,040 --> 05:54:56,558
With the support of Flair's

10472
05:54:54,400 --> 05:54:58,638
industry-leading research team, members

10473
05:54:56,558 --> 05:55:00,480
gain access to hands-on insights and

10474
05:54:58,638 --> 05:55:02,160
training while connecting with peers and

10475
05:55:00,480 --> 05:55:03,760
experts to tackle the toughest and

10476
05:55:02,160 --> 05:55:05,360
newest challenges together. This is

10477
05:55:03,760 --> 05:55:06,718
through practical sessions designed to

10478
05:55:05,360 --> 05:55:08,798
solve real world cyber security

10479
05:55:06,718 --> 05:55:10,878
challenges. The opportunity to engage

10480
05:55:08,798 --> 05:55:12,320
with industry leaders, researchers, and

10481
05:55:10,878 --> 05:55:14,000
fellow professionals to grow your

10482
05:55:12,320 --> 05:55:16,000
skills, community meetups to share

10483
05:55:14,000 --> 05:55:17,840
insights and experiences in both virtual

10484
05:55:16,000 --> 05:55:19,760
and in-person events, and exclusive

10485
05:55:17,840 --> 05:55:21,680
research and tools such as access to

10486
05:55:19,760 --> 05:55:23,600
cutting edge reports, tooling, and

10487
05:55:21,680 --> 05:55:25,520
intelligence from Flair's experts

10488
05:55:23,600 --> 05:55:27,040
tailored specifically for the community.

10489
05:55:25,520 --> 05:55:28,558
With Flare, you can learn and grow

10490
05:55:27,040 --> 05:55:30,480
through in-depth training sessions on

10491
05:55:28,558 --> 05:55:32,718
credential management, reconnaissance

10492
05:55:30,480 --> 05:55:34,480
techniques, OSENT, and much more.

10493
05:55:32,718 --> 05:55:36,400
Delivered by industry leaders like Jason

10494
05:55:34,480 --> 05:55:38,320
Hadex, and backed by Flair's research

10495
05:55:36,400 --> 05:55:40,718
team, you'll get exclusive access to

10496
05:55:38,320 --> 05:55:42,320
expertly crafted solutions, playbooks,

10497
05:55:40,718 --> 05:55:43,760
and session materials designed to

10498
05:55:42,320 --> 05:55:45,200
address real world cyber security

10499
05:55:43,760 --> 05:55:47,040
challenges. You'll be able to

10500
05:55:45,200 --> 05:55:49,040
participate in expert-led discussions

10501
05:55:47,040 --> 05:55:51,280
and Q&A channels and stay ahead of

10502
05:55:49,040 --> 05:55:52,878
emerging threats with exclusive reports,

10503
05:55:51,280 --> 05:55:54,798
feeds, and insights from Flair's

10504
05:55:52,878 --> 05:55:56,558
comprehensive cyber crime intelligence.

10505
05:55:54,798 --> 05:55:58,798
And verified members gain access to

10506
05:55:56,558 --> 05:56:00,480
premium resources and private insights

10507
05:55:58,798 --> 05:56:02,320
while contributing to a community that

10508
05:56:00,480 --> 05:56:04,000
thrives on shared knowledge. And so, if

10509
05:56:02,320 --> 05:56:05,600
you're ready to level up, join Flare

10510
05:56:04,000 --> 05:56:08,600
Academy today through the link in the

10511
05:56:05,600 --> 05:56:08,600
description.

10512
05:56:09,440 --> 05:56:14,480
Now let's take a very basic look into

10513
05:56:12,240 --> 05:56:17,840
performing static analysis on malicious

10514
05:56:14,480 --> 05:56:20,000
office documents or malocs. And I really

10515
05:56:17,840 --> 05:56:21,600
mean a basic analysis. I don't want to

10516
05:56:20,000 --> 05:56:23,680
turn this into a malware analysis

10517
05:56:21,600 --> 05:56:25,280
course. For that expertise, I would once

10518
05:56:23,680 --> 05:56:27,320
again suggest the practical malware

10519
05:56:25,280 --> 05:56:29,760
analysis and triage course by Husky

10520
05:56:27,320 --> 05:56:31,680
Hacks. And even performing some of this

10521
05:56:29,760 --> 05:56:33,200
analysis is a bit of an overstep and

10522
05:56:31,680 --> 05:56:35,040
most likely not something you'll have to

10523
05:56:33,200 --> 05:56:37,040
do in the field. However, I still think

10524
05:56:35,040 --> 05:56:38,878
a basic analysis of Malddocks can fit

10525
05:56:37,040 --> 05:56:41,120
nicely into this section because you

10526
05:56:38,878 --> 05:56:43,200
will definitely come across malocs or

10527
05:56:41,120 --> 05:56:45,360
macro enabled word files or Excel files

10528
05:56:43,200 --> 05:56:46,878
very often in the field. You know, if we

10529
05:56:45,360 --> 05:56:48,718
think about the ubiquity of office

10530
05:56:46,878 --> 05:56:50,878
software, we have tools like Word and

10531
05:56:48,718 --> 05:56:52,718
Excel and PowerPoint. And while this

10532
05:56:50,878 --> 05:56:54,320
ubiquity is a gold mine for attackers to

10533
05:56:52,718 --> 05:56:56,080
try to exploit due to the number of

10534
05:56:54,320 --> 05:56:59,280
organizations and businesses that use

10535
05:56:56,080 --> 05:57:01,080
them daily. And so a maloc is short for

10536
05:56:59,280 --> 05:57:03,680
a malicious document as you probably

10537
05:57:01,080 --> 05:57:05,520
suspected. And it refers to a weaponized

10538
05:57:03,680 --> 05:57:08,160
document file such as a word document or

10539
05:57:05,520 --> 05:57:10,000
an Excel spreadsheet or even a PDF that

10540
05:57:08,160 --> 05:57:11,600
has been crafted and modified to carry

10541
05:57:10,000 --> 05:57:13,520
out malicious activities when it's

10542
05:57:11,600 --> 05:57:15,120
opened. And so commonly this is done

10543
05:57:13,520 --> 05:57:17,440
through things like macros embedded in

10544
05:57:15,120 --> 05:57:19,040
the file or different embedded objects.

10545
05:57:17,440 --> 05:57:20,558
And so macros are scripts that are

10546
05:57:19,040 --> 05:57:22,400
embedded into these Office documents

10547
05:57:20,558 --> 05:57:24,480
that can be programmed to execute a

10548
05:57:22,400 --> 05:57:26,240
series of commands automatically. And so

10549
05:57:24,480 --> 05:57:27,920
when a user opens a document and enables

10550
05:57:26,240 --> 05:57:30,080
the macros, well, these scripts can run

10551
05:57:27,920 --> 05:57:32,000
without further interaction. And macros

10552
05:57:30,080 --> 05:57:33,760
are a legitimate and powerful tool that

10553
05:57:32,000 --> 05:57:35,680
can be used to automate repetitive tasks

10554
05:57:33,760 --> 05:57:37,520
in these files. However, of course, this

10555
05:57:35,680 --> 05:57:39,520
power can also be exploited to run

10556
05:57:37,520 --> 05:57:41,360
system commands. And attackers can write

10557
05:57:39,520 --> 05:57:43,200
malicious macros to perform things like

10558
05:57:41,360 --> 05:57:44,798
downloading and executing malware or

10559
05:57:43,200 --> 05:57:46,400
stealing data or altering system

10560
05:57:44,798 --> 05:57:48,558
settings or even providing remote

10561
05:57:46,400 --> 05:57:49,840
access. And since a lot of end users

10562
05:57:48,558 --> 05:57:51,840
might not fully understand the

10563
05:57:49,840 --> 05:57:53,360
implications of enabling macros, well,

10564
05:57:51,840 --> 05:57:54,638
they can quite easily be tricked into

10565
05:57:53,360 --> 05:57:57,280
enabling them and allowing this

10566
05:57:54,638 --> 05:57:59,120
malicious code to run. And VBA or Visual

10567
05:57:57,280 --> 05:58:00,638
Basic for applications is typically the

10568
05:57:59,120 --> 05:58:02,878
language used to write these embedded

10569
05:58:00,638 --> 05:58:04,718
macros. And so to effectively analyze

10570
05:58:02,878 --> 05:58:07,040
Malddox, well, we can combine various

10571
05:58:04,718 --> 05:58:08,480
static and dynamic analysis techniques.

10572
05:58:07,040 --> 05:58:10,160
And of course, in the previous lesson,

10573
05:58:08,480 --> 05:58:12,400
you learned how to dynamically analyze

10574
05:58:10,160 --> 05:58:13,760
samples in an online sandbox. And this

10575
05:58:12,400 --> 05:58:15,920
is typically as far as you're going to

10576
05:58:13,760 --> 05:58:18,160
need to go. But in this lesson, we'll

10577
05:58:15,920 --> 05:58:19,760
quickly look at a simple utility or tool

10578
05:58:18,160 --> 05:58:21,600
that can carve through these Office

10579
05:58:19,760 --> 05:58:23,760
documents and find potentially malicious

10580
05:58:21,600 --> 05:58:25,840
embedded content. And ultimately though,

10581
05:58:23,760 --> 05:58:27,520
no matter our method, well, our goal is

10582
05:58:25,840 --> 05:58:29,440
going to be to determine, of course, if

10583
05:58:27,520 --> 05:58:30,958
the document contains malware and if we

10584
05:58:29,440 --> 05:58:33,360
can extract specific indicators of

10585
05:58:30,958 --> 05:58:35,600
compromise like IPs or URLs or domain

10586
05:58:33,360 --> 05:58:37,200
names or even specific scripts that we

10587
05:58:35,600 --> 05:58:39,520
can then use to fuel our team's threat

10588
05:58:37,200 --> 05:58:40,558
intelligence and detection capabilities.

10589
05:58:39,520 --> 05:58:42,400
And because we're going to keep it

10590
05:58:40,558 --> 05:58:45,920
short, I'm going to introduce you to one

10591
05:58:42,400 --> 05:58:47,680
simple tool called OLED dump.py. And you

10592
05:58:45,920 --> 05:58:49,680
might recognize this repository because

10593
05:58:47,680 --> 05:58:51,360
it's part of the Dier Steven suite of

10594
05:58:49,680 --> 05:58:53,520
tools that are very useful for analyzing

10595
05:58:51,360 --> 05:58:55,760
these types of files. And previously we

10596
05:58:53,520 --> 05:58:57,280
used the email dump.py script to extract

10597
05:58:55,760 --> 05:58:59,120
attachments from emails through our

10598
05:58:57,280 --> 05:59:01,200
terminal. And this script will be linked

10599
05:58:59,120 --> 05:59:03,760
down below, but I have also included it

10600
05:59:01,200 --> 05:59:06,320
in the tools folder. And so what does

10601
05:59:03,760 --> 05:59:08,480
OLE mean, right? Well, OLE stands for

10602
05:59:06,320 --> 05:59:10,320
object linking and embedding. And it's a

10603
05:59:08,480 --> 05:59:11,920
technology developed by Microsoft that

10604
05:59:10,320 --> 05:59:14,558
allows embedding and linking to

10605
05:59:11,920 --> 05:59:15,680
documents and other objects. And so, OLE

10606
05:59:14,558 --> 05:59:17,920
is used in all of these different

10607
05:59:15,680 --> 05:59:20,000
Microsoft Office applications like Word

10608
05:59:17,920 --> 05:59:22,080
and Excel and PowerPoint to embed

10609
05:59:20,000 --> 05:59:24,160
objects like spreadsheets or charts or

10610
05:59:22,080 --> 05:59:26,080
images. And so, you can think about how

10611
05:59:24,160 --> 05:59:28,718
you're able to embed or link Excel

10612
05:59:26,080 --> 05:59:30,480
charts or tables and other objects into

10613
05:59:28,718 --> 05:59:32,638
Word documents or within a PowerPoint

10614
05:59:30,480 --> 05:59:34,240
presentation. Well, OLE is the

10615
05:59:32,638 --> 05:59:37,200
underlying technology that makes all of

10616
05:59:34,240 --> 05:59:39,200
that possible. And OLED dump.py will

10617
05:59:37,200 --> 05:59:40,878
allow us to dig into this embedded media

10618
05:59:39,200 --> 05:59:42,958
and look at different properties and

10619
05:59:40,878 --> 05:59:44,638
components that make up the document.

10620
05:59:42,958 --> 05:59:47,600
And so to get started, let's navigate to

10621
05:59:44,638 --> 05:59:49,638
the MALDOC analysis folder. And from

10622
05:59:47,600 --> 05:59:52,958
here, we can see an attachment with

10623
05:59:49,638 --> 05:59:54,878
axlsm file extension. And this extension

10624
05:59:52,958 --> 05:59:56,798
is typically a macro enabled Excel

10625
05:59:54,878 --> 05:59:58,480
document. And in this case, we suspect

10626
05:59:56,798 --> 06:00:00,558
that it might have a malicious VBA

10627
05:59:58,480 --> 06:00:02,400
script embedded inside of it. And so

10628
06:00:00,558 --> 06:00:04,400
it's honestly quite simple to use this

10629
06:00:02,400 --> 06:00:06,480
tool. I'm just going to call Python 3

10630
06:00:04,400 --> 06:00:09,920
and back out into our tools directory to

10631
06:00:06,480 --> 06:00:11,520
find that OLED dump.py script. And from

10632
06:00:09,920 --> 06:00:14,240
here I'm just going to provide the

10633
06:00:11,520 --> 06:00:16,000
sample name. And a lot of work has

10634
06:00:14,240 --> 06:00:18,400
already been done for us. So you can see

10635
06:00:16,000 --> 06:00:20,480
that OLE dump kind of carved into this

10636
06:00:18,400 --> 06:00:22,000
file and assigned indexes or data

10637
06:00:20,480 --> 06:00:24,798
streams that relate to different

10638
06:00:22,000 --> 06:00:26,558
portions or sections of the document.

10639
06:00:24,798 --> 06:00:28,878
And again to keep things concise, well

10640
06:00:26,558 --> 06:00:30,878
we can see this capital M here. And this

10641
06:00:28,878 --> 06:00:33,360
means that there is an embedded macro in

10642
06:00:30,878 --> 06:00:35,200
this specific index stream. And so now

10643
06:00:33,360 --> 06:00:37,280
that we know the stream is this fourth

10644
06:00:35,200 --> 06:00:39,440
index here, well, we can run this

10645
06:00:37,280 --> 06:00:41,440
command again and specify the fourth

10646
06:00:39,440 --> 06:00:42,958
stream. And that might be hard to see

10647
06:00:41,440 --> 06:00:46,000
because it's cut off, but that's just a

10648
06:00:42,958 --> 06:00:48,000
tac s with the number four. And so if I

10649
06:00:46,000 --> 06:00:50,080
run that, well, we're now getting an

10650
06:00:48,000 --> 06:00:51,080
entire hex dump of that macro. So these

10651
06:00:50,080 --> 06:00:53,120
are the raw

10652
06:00:51,080 --> 06:00:54,798
bytes. And of course, this is pretty

10653
06:00:53,120 --> 06:00:55,920
hard to read on its own, but we can

10654
06:00:54,798 --> 06:00:57,680
almost start to make out some

10655
06:00:55,920 --> 06:01:00,400
interesting things. For example, we have

10656
06:00:57,680 --> 06:01:03,840
an HTTP protocol here, apparently going

10657
06:01:00,400 --> 06:01:06,080
to some sort of IP address and some URL.

10658
06:01:03,840 --> 06:01:07,840
So, let's look at this in more detail.

10659
06:01:06,080 --> 06:01:10,160
What we can do is append to our command

10660
06:01:07,840 --> 06:01:12,200
the capital S flag. And this is like

10661
06:01:10,160 --> 06:01:14,798
running strings against the file or the

10662
06:01:12,200 --> 06:01:16,958
macro. So, if we run this, well, we've

10663
06:01:14,798 --> 06:01:18,798
started to extract some strings. And

10664
06:01:16,958 --> 06:01:20,718
again, this also isn't super interesting

10665
06:01:18,798 --> 06:01:22,558
to read, but we can see some things like

10666
06:01:20,718 --> 06:01:24,160
the invoke web request. And if you're

10667
06:01:22,558 --> 06:01:26,878
familiar with PowerShell, well, this is

10668
06:01:24,160 --> 06:01:29,440
a way to make a request to a URL. And we

10669
06:01:26,878 --> 06:01:30,958
can see the URL or the URI here. And

10670
06:01:29,440 --> 06:01:32,680
again, it looks like there is an IP

10671
06:01:30,958 --> 06:01:35,040
address with a file

10672
06:01:32,680 --> 06:01:37,440
extension. Now, the final command we'll

10673
06:01:35,040 --> 06:01:39,280
run, let's take out that capital S and

10674
06:01:37,440 --> 06:01:42,160
run something to actually attempt to

10675
06:01:39,280 --> 06:01:44,400
extract the entire VBA script. So, with

10676
06:01:42,160 --> 06:01:45,480
that, we'll do two dashes and then we'll

10677
06:01:44,400 --> 06:01:49,600
type in

10678
06:01:45,480 --> 06:01:51,440
VBA decompress corrupt. And it's an odd

10679
06:01:49,600 --> 06:01:53,600
name, but if we run this, we should

10680
06:01:51,440 --> 06:01:55,718
extract the full VBA script. And you can

10681
06:01:53,600 --> 06:01:58,000
see we've done that

10682
06:01:55,718 --> 06:01:59,080
here. And in this case, this is the

10683
06:01:58,000 --> 06:02:01,600
interesting

10684
06:01:59,080 --> 06:02:03,680
OC using the invoke web request

10685
06:02:01,600 --> 06:02:06,718
function. Well, it's making a request to

10686
06:02:03,680 --> 06:02:08,320
this URL. And this URL is simply an IP

10687
06:02:06,718 --> 06:02:10,558
address that of course we can do IP

10688
06:02:08,320 --> 06:02:13,360
lookups on. And we can actually see it's

10689
06:02:10,558 --> 06:02:14,878
downloading an executable file. And then

10690
06:02:13,360 --> 06:02:16,638
through this start process command,

10691
06:02:14,878 --> 06:02:19,360
well, it's actually executing the file

10692
06:02:16,638 --> 06:02:21,200
that it downloaded. And so in summary,

10693
06:02:19,360 --> 06:02:22,878
this macro is designed to run a hidden

10694
06:02:21,200 --> 06:02:25,840
PowerShell command that will download

10695
06:02:22,878 --> 06:02:27,600
and execute a file from this URL. And of

10696
06:02:25,840 --> 06:02:29,120
course, we can infer the overall intent

10697
06:02:27,600 --> 06:02:31,120
here is likely to run some sort of

10698
06:02:29,120 --> 06:02:32,878
malicious code and executable on the

10699
06:02:31,120 --> 06:02:34,160
user's machine without their knowledge

10700
06:02:32,878 --> 06:02:35,878
because this will run in the background

10701
06:02:34,160 --> 06:02:38,240
when the file is

10702
06:02:35,878 --> 06:02:40,080
opened. And so I'll admit this kind of

10703
06:02:38,240 --> 06:02:41,760
static analysis is a bit out of scope

10704
06:02:40,080 --> 06:02:43,280
for the course. You know, it's doubtful

10705
06:02:41,760 --> 06:02:45,040
that you'll be expected to do this kind

10706
06:02:43,280 --> 06:02:46,400
of analysis on the job. And you're

10707
06:02:45,040 --> 06:02:48,160
typically much better off simply

10708
06:02:46,400 --> 06:02:50,798
analyzing file hashes and performing

10709
06:02:48,160 --> 06:02:52,160
dynamic sandboxing as necessary. But I

10710
06:02:50,798 --> 06:02:53,760
thought it would be very interesting to

10711
06:02:52,160 --> 06:02:55,440
include a quick demo here because it's

10712
06:02:53,760 --> 06:02:56,878
such an easy script to demonstrate and

10713
06:02:55,440 --> 06:03:00,558
it's really a good foray to those who

10714
06:02:56,878 --> 06:03:00,558
are interested in more in-depth malware

10715
06:03:01,558 --> 06:03:05,760
analysis. Along with malicious office

10716
06:03:04,000 --> 06:03:07,360
documents, well, one of the most

10717
06:03:05,760 --> 06:03:09,360
prevalent attachmentbased threats that

10718
06:03:07,360 --> 06:03:12,400
you'll encounter as a sock analyst is

10719
06:03:09,360 --> 06:03:14,000
malicious PDFs. And similar to the

10720
06:03:12,400 --> 06:03:15,600
previous lesson, we're not going to do a

10721
06:03:14,000 --> 06:03:17,360
full curriculum on static malware

10722
06:03:15,600 --> 06:03:18,878
analysis. However, I think that

10723
06:03:17,360 --> 06:03:21,040
understanding the composition and

10724
06:03:18,878 --> 06:03:22,878
structure of PDFs along with some simple

10725
06:03:21,040 --> 06:03:24,798
tools that we can use to dig and carve

10726
06:03:22,878 --> 06:03:26,798
into them to find anomalies and embedded

10727
06:03:24,798 --> 06:03:29,000
content can benefit your overall

10728
06:03:26,798 --> 06:03:31,120
comprehension when it comes to analyzing

10729
06:03:29,000 --> 06:03:33,040
attachments. To be honest, in most

10730
06:03:31,120 --> 06:03:35,120
cases, attackers don't even go as far as

10731
06:03:33,040 --> 06:03:37,600
to embed malicious content within PDF

10732
06:03:35,120 --> 06:03:39,040
files themselves. I would argue that the

10733
06:03:37,600 --> 06:03:41,040
most common technique that I've seen in

10734
06:03:39,040 --> 06:03:43,200
the field involves simply containing a

10735
06:03:41,040 --> 06:03:44,958
clickable URL within a PDF file that

10736
06:03:43,200 --> 06:03:47,360
then leads to a malicious web page or

10737
06:03:44,958 --> 06:03:49,120
drive by download. And the reason why an

10738
06:03:47,360 --> 06:03:51,360
attacker would use a PDF to send a

10739
06:03:49,120 --> 06:03:53,520
simple payload like a URL is due to

10740
06:03:51,360 --> 06:03:55,360
things like user trust and familiarity

10741
06:03:53,520 --> 06:03:57,680
and potentially the ability to evade

10742
06:03:55,360 --> 06:03:59,520
email filters. For example, most

10743
06:03:57,680 --> 06:04:01,280
organizations will allow for PDF

10744
06:03:59,520 --> 06:04:03,200
attachments since it's so widely used

10745
06:04:01,280 --> 06:04:04,718
across organizations for a number of

10746
06:04:03,200 --> 06:04:07,680
different business purposes like

10747
06:04:04,718 --> 06:04:09,440
invoices or forms or policies. And as

10748
06:04:07,680 --> 06:04:11,360
such, users are very accustomed to

10749
06:04:09,440 --> 06:04:13,360
receiving PDFs and will typically trust

10750
06:04:11,360 --> 06:04:15,120
them more than any other file type since

10751
06:04:13,360 --> 06:04:16,878
they interact with them daily.

10752
06:04:15,120 --> 06:04:18,878
Additionally, email gateways and email

10753
06:04:16,878 --> 06:04:20,638
security technology may not have the

10754
06:04:18,878 --> 06:04:22,558
capacity to open up the documents

10755
06:04:20,638 --> 06:04:24,480
themselves and statically analyze or

10756
06:04:22,558 --> 06:04:26,878
extract any URLs within the content

10757
06:04:24,480 --> 06:04:28,878
itself. So it becomes an easy payload

10758
06:04:26,878 --> 06:04:30,958
delivery option leaving organizations to

10759
06:04:28,878 --> 06:04:33,360
rely on their EDR or web proxy or

10760
06:04:30,958 --> 06:04:35,040
network traffic analysis solutions. And

10761
06:04:33,360 --> 06:04:37,520
just as an example, let's go into the

10762
06:04:35,040 --> 06:04:40,240
Malddock analysis folder and then into

10763
06:04:37,520 --> 06:04:41,558
the PDF directory. And I'm just going to

10764
06:04:40,240 --> 06:04:43,600
open up

10765
06:04:41,558 --> 06:04:45,760
statement.pdf. And this for example is

10766
06:04:43,600 --> 06:04:47,120
what one of these PDFs might look like.

10767
06:04:45,760 --> 06:04:49,680
And so you can see here we have some

10768
06:04:47,120 --> 06:04:51,280
communication impersonating Amazon. And

10769
06:04:49,680 --> 06:04:52,480
with a common pretext that we've seen so

10770
06:04:51,280 --> 06:04:54,400
far, it appears there's been some

10771
06:04:52,480 --> 06:04:56,320
unusual activity on our account and our

10772
06:04:54,400 --> 06:04:58,080
account has been placed on hold. And the

10773
06:04:56,320 --> 06:05:00,160
main point of this PDF is to get the

10774
06:04:58,080 --> 06:05:02,000
user to click on this link here, which

10775
06:05:00,160 --> 06:05:04,240
most likely leads to or is led to a

10776
06:05:02,000 --> 06:05:06,080
credential capture page. And for

10777
06:05:04,240 --> 06:05:08,320
example, we can get the hash value of

10778
06:05:06,080 --> 06:05:08,320
this

10779
06:05:09,558 --> 06:05:13,440
file. And as we're used to doing

10780
06:05:11,760 --> 06:05:15,840
already, well, we can search for this on

10781
06:05:13,440 --> 06:05:17,280
something like virus total.

10782
06:05:15,840 --> 06:05:18,718
In this case, it doesn't appear that

10783
06:05:17,280 --> 06:05:21,958
there were any matches found for this

10784
06:05:18,718 --> 06:05:24,480
PDF document. And so, what should we do

10785
06:05:21,958 --> 06:05:26,480
now? Well, assuming we never opened up

10786
06:05:24,480 --> 06:05:28,480
this document, well, we can still open

10787
06:05:26,480 --> 06:05:30,480
it up and carve into the file via the

10788
06:05:28,480 --> 06:05:33,200
command line. And there are ways for us

10789
06:05:30,480 --> 06:05:35,600
to extract any embedded URLs or files or

10790
06:05:33,200 --> 06:05:36,958
scripts directly from the terminal. And

10791
06:05:35,600 --> 06:05:39,680
one of these tools that we'll start with

10792
06:05:36,958 --> 06:05:41,600
is called PDF parser.py. And it is part

10793
06:05:39,680 --> 06:05:43,280
of that Dier Steven suite. And it's

10794
06:05:41,600 --> 06:05:45,920
designed to parse and analyze the

10795
06:05:43,280 --> 06:05:48,000
structure of PDF files. It allows us to

10796
06:05:45,920 --> 06:05:50,160
inspect the contents and extract or

10797
06:05:48,000 --> 06:05:52,480
analyze embedded objects or search for

10798
06:05:50,160 --> 06:05:54,160
specific elements. And by doing this, we

10799
06:05:52,480 --> 06:05:56,558
can detect any potential malicious

10800
06:05:54,160 --> 06:05:58,878
content. And so, let's run this tool on

10801
06:05:56,558 --> 06:06:01,120
the file. And you'll find it within the

10802
06:05:58,878 --> 06:06:02,638
tools directory. And for the argument,

10803
06:06:01,120 --> 06:06:05,440
I'm just going to simply provide the

10804
06:06:02,638 --> 06:06:06,718
name of the file. And so we can get a

10805
06:06:05,440 --> 06:06:08,240
better output, I'm going to pipe this

10806
06:06:06,718 --> 06:06:10,638
over to the more command so we can

10807
06:06:08,240 --> 06:06:12,080
scroll through the results. And as we

10808
06:06:10,638 --> 06:06:13,440
run this command, well, we can

10809
06:06:12,080 --> 06:06:15,840
immediately see some interesting

10810
06:06:13,440 --> 06:06:17,680
information. And so PDF parser is going

10811
06:06:15,840 --> 06:06:19,440
to carve through the file and extract

10812
06:06:17,680 --> 06:06:21,680
any of the objects found in the makeup

10813
06:06:19,440 --> 06:06:23,520
of the PDF itself. In this case, this

10814
06:06:21,680 --> 06:06:25,680
first object here was able to extract a

10815
06:06:23,520 --> 06:06:27,200
link in the form of a URI. And

10816
06:06:25,680 --> 06:06:29,440
specifically, we were able to extract

10817
06:06:27,200 --> 06:06:31,600
the exact URI that we found when we

10818
06:06:29,440 --> 06:06:34,400
opened up the file. And so, of course,

10819
06:06:31,600 --> 06:06:36,000
this is a useful IC for us. And although

10820
06:06:34,400 --> 06:06:38,160
we didn't get a hit on virus total for

10821
06:06:36,000 --> 06:06:40,320
the files hash, well, I'm going to copy

10822
06:06:38,160 --> 06:06:42,320
this URL and see if we can find anything

10823
06:06:40,320 --> 06:06:44,160
about its reputation using this web

10824
06:06:42,320 --> 06:06:45,760
artifact.

10825
06:06:44,160 --> 06:06:48,718
And so I'm just going to paste it in

10826
06:06:45,760 --> 06:06:50,958
here and hit run. And when doing that,

10827
06:06:48,718 --> 06:06:52,878
we can see that at least one of 94

10828
06:06:50,958 --> 06:06:54,878
security vendors flagged this URL as

10829
06:06:52,878 --> 06:06:56,958
malicious. And we can see in this one

10830
06:06:54,878 --> 06:06:58,718
example, it was flagged as fishing. And

10831
06:06:56,958 --> 06:07:00,400
so I would typically expect to see more

10832
06:06:58,718 --> 06:07:02,480
here. But given the fact that it's using

10833
06:07:00,400 --> 06:07:04,400
a legitimate Google service and it was

10834
06:07:02,480 --> 06:07:06,480
probably taken down quite quickly, well,

10835
06:07:04,400 --> 06:07:08,320
we don't have many results to go off of.

10836
06:07:06,480 --> 06:07:10,558
But being able to extract and analyze

10837
06:07:08,320 --> 06:07:13,440
the URL itself instead of just the file

10838
06:07:10,558 --> 06:07:15,600
hash gave us a bit more to go off of. So

10839
06:07:13,440 --> 06:07:19,360
let's look at another example here. In

10840
06:07:15,600 --> 06:07:19,360
this case, we can look at the book04

10841
06:07:20,280 --> 06:07:24,638
PDF. And in this example, it appears the

10842
06:07:22,798 --> 06:07:26,400
attacker is using a blurred image to

10843
06:07:24,638 --> 06:07:29,040
make it look like there's a PDF on the

10844
06:07:26,400 --> 06:07:30,638
other side of this download link. And of

10845
06:07:29,040 --> 06:07:33,040
course, we can extract the URL from the

10846
06:07:30,638 --> 06:07:34,958
PDF itself. But we can also do it

10847
06:07:33,040 --> 06:07:37,240
through safer means in which we don't

10848
06:07:34,958 --> 06:07:39,600
need to actually open up a PDF

10849
06:07:37,240 --> 06:07:42,958
viewer. In this case, I'll run PDF

10850
06:07:39,600 --> 06:07:44,360
parser again and provide that book file.

10851
06:07:42,958 --> 06:07:46,320
we do end up getting a lot of

10852
06:07:44,360 --> 06:07:49,280
information. But since we're looking for

10853
06:07:46,320 --> 06:07:51,240
a URL, or rather a URI, what we can do

10854
06:07:49,280 --> 06:07:53,920
is make a slight modification to the

10855
06:07:51,240 --> 06:07:56,798
command. We can add the S flag to search

10856
06:07:53,920 --> 06:07:59,798
for a specific object. In this case, I'm

10857
06:07:56,798 --> 06:08:02,000
going to search for /

10858
06:07:59,798 --> 06:08:04,480
URI. And you can see we were able to

10859
06:08:02,000 --> 06:08:06,798
pull back this URI object specifically

10860
06:08:04,480 --> 06:08:08,878
with the URL itself.

10861
06:08:06,798 --> 06:08:10,840
And so once again, if I copy this URL

10862
06:08:08,878 --> 06:08:15,000
and take it over to Virus

10863
06:08:10,840 --> 06:08:17,360
Total, I can paste it in and do a

10864
06:08:15,000 --> 06:08:19,360
search. And in this case, we have two

10865
06:08:17,360 --> 06:08:21,360
instances of vendors flagging this URL

10866
06:08:19,360 --> 06:08:23,520
as malicious, which gives us a bit more

10867
06:08:21,360 --> 06:08:25,040
to go off of. And remember, I'm just

10868
06:08:23,520 --> 06:08:27,120
using Virus Total here for a short

10869
06:08:25,040 --> 06:08:28,798
example. But as discussed in the URL

10870
06:08:27,120 --> 06:08:30,240
analysis section, well, there are so

10871
06:08:28,798 --> 06:08:32,400
many tools that we can use at this point

10872
06:08:30,240 --> 06:08:34,638
to analyze the reputation of URLs and

10873
06:08:32,400 --> 06:08:36,400
domains.

10874
06:08:34,638 --> 06:08:38,718
And so that was just two quick examples

10875
06:08:36,400 --> 06:08:41,200
of how we can extract and identify any

10876
06:08:38,718 --> 06:08:44,160
URLs embedded inside of a PDF without

10877
06:08:41,200 --> 06:08:46,320
having to open it in any PDF viewer.

10878
06:08:44,160 --> 06:08:47,840
Now, let's talk about PDFs that can be a

10879
06:08:46,320 --> 06:08:49,840
little more sinister and actually

10880
06:08:47,840 --> 06:08:51,480
contain things like embedded malware or

10881
06:08:49,840 --> 06:08:53,680
scripts or even

10882
06:08:51,480 --> 06:08:55,760
documents. Well, in this case, we'll use

10883
06:08:53,680 --> 06:08:58,080
this example to go off of. And this is a

10884
06:08:55,760 --> 06:08:59,600
test PDF file developed by Dier Stevens

10885
06:08:58,080 --> 06:09:02,400
that we can use to test some of the

10886
06:08:59,600 --> 06:09:04,878
tools like PDF parser or PDF ID, which

10887
06:09:02,400 --> 06:09:06,638
I'll cover next. And PDF ID is a

10888
06:09:04,878 --> 06:09:08,798
lightweight tool that can scan a PDF

10889
06:09:06,638 --> 06:09:11,040
file and provide a highle overview of

10890
06:09:08,798 --> 06:09:12,638
its structure. And in doing this, we can

10891
06:09:11,040 --> 06:09:14,240
of course identify any suspicious

10892
06:09:12,638 --> 06:09:16,558
elements or objects that shouldn't be

10893
06:09:14,240 --> 06:09:19,040
there like JavaScript or embedded files

10894
06:09:16,558 --> 06:09:21,600
and other open actions. And so it's

10895
06:09:19,040 --> 06:09:24,200
quite simple to run. I'm just going to

10896
06:09:21,600 --> 06:09:27,920
call Python 3 and go back into the tools

10897
06:09:24,200 --> 06:09:29,440
directory and call PDF ID.py. And then

10898
06:09:27,920 --> 06:09:32,480
I'll simply provide the name of the file

10899
06:09:29,440 --> 06:09:34,240
as the argument.

10900
06:09:32,480 --> 06:09:36,558
And in this case, we get a very easy to

10901
06:09:34,240 --> 06:09:38,878
read output of all of the components and

10902
06:09:36,558 --> 06:09:40,320
objects that make up this PDF file. And

10903
06:09:38,878 --> 06:09:41,760
as I mentioned, there are a couple of

10904
06:09:40,320 --> 06:09:44,080
objects that we typically want to look

10905
06:09:41,760 --> 06:09:45,280
out for when analyzing a PDF. For

10906
06:09:44,080 --> 06:09:47,280
example, we want to look for any

10907
06:09:45,280 --> 06:09:49,120
JavaScript or JS objects, which would

10908
06:09:47,280 --> 06:09:50,958
indicate that the PDF contains embedded

10909
06:09:49,120 --> 06:09:53,840
JavaScript. And we can see that this

10910
06:09:50,958 --> 06:09:55,280
file has both JS and JavaScript objects.

10911
06:09:53,840 --> 06:09:57,200
And these embedded scripts can be used

10912
06:09:55,280 --> 06:09:59,120
to potentially steal data or make

10913
06:09:57,200 --> 06:10:00,958
connections to an attacker's server or

10914
06:09:59,120 --> 06:10:03,840
attempt to start and execute external

10915
06:10:00,958 --> 06:10:05,200
programs on the victim's system itself.

10916
06:10:03,840 --> 06:10:07,040
We also want to look for any open

10917
06:10:05,200 --> 06:10:09,200
actions, which we can see this file has

10918
06:10:07,040 --> 06:10:11,680
one. And open actions can potentially

10919
06:10:09,200 --> 06:10:14,000
cause the PDF reader itself to take some

10920
06:10:11,680 --> 06:10:15,440
sort of action when opening the file.

10921
06:10:14,000 --> 06:10:17,280
And we also want to look at any launch

10922
06:10:15,440 --> 06:10:18,638
objects. Again, this could be used to

10923
06:10:17,280 --> 06:10:21,440
potentially launch some external

10924
06:10:18,638 --> 06:10:23,040
software when the PDF is opened. And of

10925
06:10:21,440 --> 06:10:24,958
course, we want to look for any embedded

10926
06:10:23,040 --> 06:10:27,200
files. In this case, we can see that

10927
06:10:24,958 --> 06:10:29,120
there is an embedded file. It's possible

10928
06:10:27,200 --> 06:10:30,958
for an attacker to embed malicious files

10929
06:10:29,120 --> 06:10:33,480
like macro enabled word documents or

10930
06:10:30,958 --> 06:10:36,798
malware into the objects of the PDF

10931
06:10:33,480 --> 06:10:38,480
itself. And so, we can use PDF parser to

10932
06:10:36,798 --> 06:10:40,920
extract the embedded files contained in

10933
06:10:38,480 --> 06:10:42,958
the PDF and also look at any embedded

10934
06:10:40,920 --> 06:10:44,120
scripts. And so, I'm just going to call

10935
06:10:42,958 --> 06:10:47,160
PDF

10936
06:10:44,120 --> 06:10:49,520
parser and provide the name of the

10937
06:10:47,160 --> 06:10:51,520
file. And again, I'm going to pipe it to

10938
06:10:49,520 --> 06:10:54,080
the more command. So we can scroll

10939
06:10:51,520 --> 06:10:56,320
through the output. And so we can see

10940
06:10:54,080 --> 06:11:00,760
this first object here, this catalog

10941
06:10:56,320 --> 06:11:02,638
object is referencing a file called EIC

10942
06:11:00,760 --> 06:11:04,320
dropper. And this is probably the

10943
06:11:02,638 --> 06:11:05,760
embedded file. But we can continue

10944
06:11:04,320 --> 06:11:07,400
scrolling through this output to find

10945
06:11:05,760 --> 06:11:09,840
the actual object that contains the

10946
06:11:07,400 --> 06:11:12,558
file. As we scroll through, we can see

10947
06:11:09,840 --> 06:11:14,080
object 7 here, this filespec object is

10948
06:11:12,558 --> 06:11:16,958
making another reference to this doc

10949
06:11:14,080 --> 06:11:18,840
file. And we can see object 8 here

10950
06:11:16,958 --> 06:11:21,040
actually refers to the embedded file

10951
06:11:18,840 --> 06:11:23,520
object. And so we can see the file's

10952
06:11:21,040 --> 06:11:25,600
data stream along with its length. And

10953
06:11:23,520 --> 06:11:28,160
so we can actually extract this file.

10954
06:11:25,600 --> 06:11:29,440
But first let's take a look at object 9.

10955
06:11:28,160 --> 06:11:31,360
In this case it appears to be the

10956
06:11:29,440 --> 06:11:33,680
embedded JavaScript. And it's telling

10957
06:11:31,360 --> 06:11:36,000
the PDF viewer to execute JavaScript

10958
06:11:33,680 --> 06:11:37,520
code when the action is triggered. And

10959
06:11:36,000 --> 06:11:40,000
it appears to be attempting to launch

10960
06:11:37,520 --> 06:11:42,160
the dropper document. And so let's go

10961
06:11:40,000 --> 06:11:43,958
ahead and extract the file. And of

10962
06:11:42,160 --> 06:11:46,080
course we can do this through PDF parser

10963
06:11:43,958 --> 06:11:48,080
itself. So I'm going to rerun the same

10964
06:11:46,080 --> 06:11:49,160
command here but I'm going to provide

10965
06:11:48,080 --> 06:11:51,440
some additional

10966
06:11:49,160 --> 06:11:53,120
arguments. For example, we identified

10967
06:11:51,440 --> 06:11:55,840
that the object containing the embedded

10968
06:11:53,120 --> 06:11:57,440
file is object 8. And so let's provide

10969
06:11:55,840 --> 06:12:00,160
that using the double dash and then

10970
06:11:57,440 --> 06:12:02,958
object argument. Next we can see that

10971
06:12:00,160 --> 06:12:04,718
the file itself has been encoded. And so

10972
06:12:02,958 --> 06:12:07,200
we can provide the filter flag to decode

10973
06:12:04,718 --> 06:12:10,320
the data stream. We also want to provide

10974
06:12:07,200 --> 06:12:12,080
the raw flag to display the output in

10975
06:12:10,320 --> 06:12:13,600
raw format.

10976
06:12:12,080 --> 06:12:15,520
but we don't want to display it to our

10977
06:12:13,600 --> 06:12:17,000
terminal. So lastly, we want to provide

10978
06:12:15,520 --> 06:12:19,760
the dump

10979
06:12:17,000 --> 06:12:21,520
option and save it to a file. In this

10980
06:12:19,760 --> 06:12:23,320
case, I will call it the same name that

10981
06:12:21,520 --> 06:12:25,760
we've identified through the file

10982
06:12:23,320 --> 06:12:27,480
itself. And so with all of that set, I'm

10983
06:12:25,760 --> 06:12:29,958
just going to hit

10984
06:12:27,480 --> 06:12:33,040
run. And we can see that the file was

10985
06:12:29,958 --> 06:12:36,240
decoded. If I run an ls, we can see the

10986
06:12:33,040 --> 06:12:38,878
eicar dropper.doc. And if I run the file

10987
06:12:36,240 --> 06:12:41,120
command on this file, we can see that

10988
06:12:38,878 --> 06:12:43,600
it's a composite document file version 2

10989
06:12:41,120 --> 06:12:45,600
document. And this is an older Microsoft

10990
06:12:43,600 --> 06:12:48,000
Office document format that can contain

10991
06:12:45,600 --> 06:12:49,840
embedded macros. And so since we've

10992
06:12:48,000 --> 06:12:51,760
extracted a doc file, well, we can

10993
06:12:49,840 --> 06:12:53,280
perform similar actions that we did in

10994
06:12:51,760 --> 06:12:54,958
the previous lesson to look for any

10995
06:12:53,280 --> 06:12:56,878
embedded macros or malicious scripts

10996
06:12:54,958 --> 06:13:02,440
inside the document. And if you

10997
06:12:56,878 --> 06:13:02,440
remember, we use ole dump.py to do that.

10998
06:13:02,638 --> 06:13:06,958
And so just as a quick example, I can

10999
06:13:04,798 --> 06:13:08,958
run it against the file where we can

11000
06:13:06,958 --> 06:13:11,280
identify the module one macro on the

11001
06:13:08,958 --> 06:13:13,360
seventh index identified by the capital

11002
06:13:11,280 --> 06:13:15,120
M. And so I'll leave you to do any

11003
06:13:13,360 --> 06:13:17,200
further analysis on this macro if you'd

11004
06:13:15,120 --> 06:13:18,798
like. But at a high level, we covered

11005
06:13:17,200 --> 06:13:21,200
some various methodologies and tools

11006
06:13:18,798 --> 06:13:23,520
that we can use to either extract URLs

11007
06:13:21,200 --> 06:13:26,160
from PDFs or extract any embedded media

11008
06:13:23,520 --> 06:13:27,920
or scripts. And similar to the previous

11009
06:13:26,160 --> 06:13:29,520
lesson, checking the files hash

11010
06:13:27,920 --> 06:13:31,600
reputation and potentially performing

11011
06:13:29,520 --> 06:13:33,680
any dynamic analysis is typically the

11012
06:13:31,600 --> 06:13:35,200
quicker and easier option in the field.

11013
06:13:33,680 --> 06:13:37,600
And you'll typically not be required to

11014
06:13:35,200 --> 06:13:39,280
go in depth into static analysis or even

11015
06:13:37,600 --> 06:13:40,878
perform static analysis at all in the

11016
06:13:39,280 --> 06:13:42,160
day-to-day. But I thought it would be

11017
06:13:40,878 --> 06:13:44,000
interesting to include some basic

11018
06:13:42,160 --> 06:13:47,200
methodologies and syntax within this

11019
06:13:44,000 --> 06:13:47,200
section. And so I hope you

11020
06:13:47,718 --> 06:13:52,000
enjoyed. Now, wouldn't it be great if we

11021
06:13:50,240 --> 06:13:54,080
could expedite the fishing analysis and

11022
06:13:52,000 --> 06:13:56,798
triage process with some automated

11023
06:13:54,080 --> 06:13:58,320
extraction and enrichment and analysis?

11024
06:13:56,798 --> 06:13:59,840
Well, we've covered some tools and

11025
06:13:58,320 --> 06:14:02,000
scripts already that can simplify the

11026
06:13:59,840 --> 06:14:03,600
artifact collection process. But is

11027
06:14:02,000 --> 06:14:05,040
there some sort of magic solution out

11028
06:14:03,600 --> 06:14:07,520
there that can take all of the manual

11029
06:14:05,040 --> 06:14:09,040
effort off of our shoulders? Well, I

11030
06:14:07,520 --> 06:14:10,638
wouldn't say it's a magical solution,

11031
06:14:09,040 --> 06:14:12,798
but in this lesson, I want to introduce

11032
06:14:10,638 --> 06:14:14,958
you to fish tool, which is a web-based

11033
06:14:12,798 --> 06:14:16,958
fishing analysis solution that allows

11034
06:14:14,958 --> 06:14:18,878
analysts and researchers to quickly and

11035
06:14:16,958 --> 06:14:20,638
automatically analyze and categorize

11036
06:14:18,878 --> 06:14:22,798
emails and generate investigation

11037
06:14:20,638 --> 06:14:24,638
reports. And so, using fish tool, we can

11038
06:14:22,798 --> 06:14:27,200
gather contextual analysis of email

11039
06:14:24,638 --> 06:14:28,878
metadata and URLs and attachments and

11040
06:14:27,200 --> 06:14:30,480
quickly turn those into actionable

11041
06:14:28,878 --> 06:14:32,240
findings.

11042
06:14:30,480 --> 06:14:34,320
And now there is an enterprise edition

11043
06:14:32,240 --> 06:14:36,240
of fish tool. But fortunately we can do

11044
06:14:34,320 --> 06:14:38,160
all of the analysis we need using the

11045
06:14:36,240 --> 06:14:40,878
free tool. And so I'll have this site

11046
06:14:38,160 --> 06:14:43,840
linked down below. And so we can just

11047
06:14:40,878 --> 06:14:45,440
click on get fish tool now for free. And

11048
06:14:43,840 --> 06:14:47,840
of course this is going to require an

11049
06:14:45,440 --> 06:14:49,600
account. So we can just sign up here.

11050
06:14:47,840 --> 06:14:51,600
And fortunately we don't need a business

11051
06:14:49,600 --> 06:14:53,878
email account. So you can use any Gmail

11052
06:14:51,600 --> 06:14:56,160
or Yahoo or Hotmail account that you

11053
06:14:53,878 --> 06:14:58,558
want. And once we're signed in here you

11054
06:14:56,160 --> 06:15:00,320
can see we're taken to this dashboard.

11055
06:14:58,558 --> 06:15:02,000
And once we start uploading some emails

11056
06:15:00,320 --> 06:15:03,280
to analyze, well, this is going to start

11057
06:15:02,000 --> 06:15:05,920
getting filled up with interesting

11058
06:15:03,280 --> 06:15:08,240
charts and graphs. But we can start by

11059
06:15:05,920 --> 06:15:09,840
analyzing our first email. So we can

11060
06:15:08,240 --> 06:15:12,120
either head over to the analysis section

11061
06:15:09,840 --> 06:15:14,638
here or just click on this blue analyze

11062
06:15:12,120 --> 06:15:16,798
button. And upon doing that, you can see

11063
06:15:14,638 --> 06:15:18,718
we can drag and drop an email or we can

11064
06:15:16,798 --> 06:15:21,120
just click on choose file to select one

11065
06:15:18,718 --> 06:15:22,558
from our explorer window. And from here,

11066
06:15:21,120 --> 06:15:24,958
I'm just going to go into the fishing

11067
06:15:22,558 --> 06:15:26,878
analysis section and go to the header

11068
06:15:24,958 --> 06:15:28,558
analysis. And from here, I'm just going

11069
06:15:26,878 --> 06:15:30,920
to select sample one. And if you

11070
06:15:28,558 --> 06:15:33,440
remember that was the Chase Bank

11071
06:15:30,920 --> 06:15:35,200
Fish. And so it's going to upload. And

11072
06:15:33,440 --> 06:15:37,680
you can see we immediately have a number

11073
06:15:35,200 --> 06:15:39,360
of useful indicators. On the right hand

11074
06:15:37,680 --> 06:15:41,360
side, well, we can see a rendered

11075
06:15:39,360 --> 06:15:44,400
version of the email. If we click on

11076
06:15:41,360 --> 06:15:46,160
HTML, we can see the actual HTML markup

11077
06:15:44,400 --> 06:15:48,480
that makes up the content or the body

11078
06:15:46,160 --> 06:15:50,480
content of this email. If we click on

11079
06:15:48,480 --> 06:15:52,400
source, we can get the full source of

11080
06:15:50,480 --> 06:15:53,680
the email file, which is what we were

11081
06:15:52,400 --> 06:15:56,480
looking at when we opened it up in

11082
06:15:53,680 --> 06:15:58,240
Sublime Text. And on the left hand side

11083
06:15:56,480 --> 06:15:59,600
here we can see some interesting

11084
06:15:58,240 --> 06:16:01,680
artifacts that were automatically

11085
06:15:59,600 --> 06:16:03,920
collected from the email. For example,

11086
06:16:01,680 --> 06:16:05,840
we have the subject line at the top. We

11087
06:16:03,920 --> 06:16:08,240
have the from and the to header. We have

11088
06:16:05,840 --> 06:16:10,240
the timestamp of the email. We have the

11089
06:16:08,240 --> 06:16:12,718
reply to and the return path along with

11090
06:16:10,240 --> 06:16:15,040
the originating IP and the RDNS or the

11091
06:16:12,718 --> 06:16:16,638
reverse DNS. If you remember, this is

11092
06:16:15,040 --> 06:16:18,000
the resolve host field that we were

11093
06:16:16,638 --> 06:16:20,240
looking at when we were doing the IP

11094
06:16:18,000 --> 06:16:22,080
lookup. In this case, Fish Tool

11095
06:16:20,240 --> 06:16:24,558
conveniently did this lookup for us. And

11096
06:16:22,080 --> 06:16:26,160
we can see the proton mail address. Now

11097
06:16:24,558 --> 06:16:28,718
you'll notice some exclamation marks

11098
06:16:26,160 --> 06:16:30,638
next to reply to and return path. If we

11099
06:16:28,718 --> 06:16:32,600
click on the exclamation mark, we can

11100
06:16:30,638 --> 06:16:35,040
get some more details as to why this was

11101
06:16:32,600 --> 06:16:37,040
flagged. And of course, this immediately

11102
06:16:35,040 --> 06:16:39,040
highlighted that the reply to email

11103
06:16:37,040 --> 06:16:40,558
address is inconsistent with the from

11104
06:16:39,040 --> 06:16:43,240
header, which of course is something

11105
06:16:40,558 --> 06:16:45,600
suspicious that we should keep in

11106
06:16:43,240 --> 06:16:47,680
mind. The same deal if we look at the

11107
06:16:45,600 --> 06:16:50,400
return path, we can see that the domain

11108
06:16:47,680 --> 06:16:53,360
name proton.me is inconsistent with the

11109
06:16:50,400 --> 06:16:55,520
chase.com domain from the from address.

11110
06:16:53,360 --> 06:16:57,280
If we click on the received lines tab,

11111
06:16:55,520 --> 06:16:59,040
we can get all of the different hops or

11112
06:16:57,280 --> 06:17:00,558
the MTAs that the message traversed

11113
06:16:59,040 --> 06:17:02,240
through on its way from the source to

11114
06:17:00,558 --> 06:17:04,480
the destination. And these are all

11115
06:17:02,240 --> 06:17:06,320
extracted from the received headers. We

11116
06:17:04,480 --> 06:17:08,000
can see we get the timestamp and the

11117
06:17:06,320 --> 06:17:09,840
mail server that sent it and received

11118
06:17:08,000 --> 06:17:11,440
it. In this case, we can get the IP

11119
06:17:09,840 --> 06:17:13,080
address of the original mail server,

11120
06:17:11,440 --> 06:17:15,280
which was of course that

11121
06:17:13,080 --> 06:17:16,680
proton.ch. This tab makes it really easy

11122
06:17:15,280 --> 06:17:19,280
for us to look through each of these

11123
06:17:16,680 --> 06:17:21,120
hops. under the X headers. This is going

11124
06:17:19,280 --> 06:17:24,000
to specifically extract any of those

11125
06:17:21,120 --> 06:17:26,920
extended or custom headers. You can see

11126
06:17:24,000 --> 06:17:30,080
we get the X sender IP under here as

11127
06:17:26,920 --> 06:17:32,638
well. Under security, we also have some

11128
06:17:30,080 --> 06:17:34,920
additional flags. We can see that SPF

11129
06:17:32,638 --> 06:17:37,160
has passed because the resolved host was

11130
06:17:34,920 --> 06:17:39,520
proton.ch which matched the originating

11131
06:17:37,160 --> 06:17:41,520
IP. However, if we scroll down, we can

11132
06:17:39,520 --> 06:17:44,160
see that demark had failed because of

11133
06:17:41,520 --> 06:17:45,520
the spoofing attempt of chase.com. If

11134
06:17:44,160 --> 06:17:47,040
there were any attachments on this

11135
06:17:45,520 --> 06:17:49,600
email, well, we would see them in the

11136
06:17:47,040 --> 06:17:51,680
attachments tab. However, we can go over

11137
06:17:49,600 --> 06:17:53,240
to message URLs where we will

11138
06:17:51,680 --> 06:17:55,320
conveniently find that

11139
06:17:53,240 --> 06:17:57,760
DSGO.TO

11140
06:17:55,320 --> 06:17:59,920
address. Now, fish tool can even do

11141
06:17:57,760 --> 06:18:02,000
things like integrate virus total.

11142
06:17:59,920 --> 06:18:04,558
However, to configure this, we need to

11143
06:18:02,000 --> 06:18:05,920
generate a virus total API key. I'm not

11144
06:18:04,558 --> 06:18:07,680
going to show going through that in this

11145
06:18:05,920 --> 06:18:10,000
lesson, but that is something you can do

11146
06:18:07,680 --> 06:18:12,080
if you're interested. This will allow

11147
06:18:10,000 --> 06:18:14,878
you to get virus total insights on any

11148
06:18:12,080 --> 06:18:17,600
attachments and URLs and file hashes all

11149
06:18:14,878 --> 06:18:19,360
from the same console. Once we've

11150
06:18:17,600 --> 06:18:21,480
identified that a email is malicious or

11151
06:18:19,360 --> 06:18:23,920
clean, well, we can click on resolve

11152
06:18:21,480 --> 06:18:25,718
here. And in this case, we can edit the

11153
06:18:23,920 --> 06:18:27,760
email disposition to

11154
06:18:25,718 --> 06:18:29,840
malicious. If we click on flagged

11155
06:18:27,760 --> 06:18:31,840
artifacts, we can choose why we decided

11156
06:18:29,840 --> 06:18:33,280
that this email was malicious. Of

11157
06:18:31,840 --> 06:18:34,878
course, in this email, it was the return

11158
06:18:33,280 --> 06:18:36,878
path and reply to indicating that this

11159
06:18:34,878 --> 06:18:38,958
was likely spoofed. We also have this

11160
06:18:36,878 --> 06:18:41,360
URL which was using a URL shortener

11161
06:18:38,958 --> 06:18:43,360
service to offiscate a malicious link.

11162
06:18:41,360 --> 06:18:44,798
Under classification codes, we can

11163
06:18:43,360 --> 06:18:47,040
choose what techniques the attacker

11164
06:18:44,798 --> 06:18:49,200
used. In this case, we know there was

11165
06:18:47,040 --> 06:18:50,958
definitely spoofing going on. And if the

11166
06:18:49,200 --> 06:18:53,840
URL was still live, potentially

11167
06:18:50,958 --> 06:18:55,920
credential harvesting as well. And from

11168
06:18:53,840 --> 06:18:58,718
here, we can just click on resolve to of

11169
06:18:55,920 --> 06:18:58,718
course resolve this

11170
06:18:58,840 --> 06:19:02,480
email. And when we return to our

11171
06:19:00,958 --> 06:19:05,040
dashboard, well, we can start to see

11172
06:19:02,480 --> 06:19:07,520
some metrics are being filled in. Let's

11173
06:19:05,040 --> 06:19:09,040
quickly analyze one with an attachment.

11174
06:19:07,520 --> 06:19:11,520
So in this case, I'm going to go back to

11175
06:19:09,040 --> 06:19:14,160
our fishing analysis folder and go under

11176
06:19:11,520 --> 06:19:15,760
attachment analysis. In this case, I'll

11177
06:19:14,160 --> 06:19:18,600
choose sample one that had that

11178
06:19:15,760 --> 06:19:20,558
malicious quotation

11179
06:19:18,600 --> 06:19:22,558
attachment. In this case, we don't need

11180
06:19:20,558 --> 06:19:24,718
to go through every section, but let's

11181
06:19:22,558 --> 06:19:26,000
go under the attachments tab. In this

11182
06:19:24,718 --> 06:19:28,000
case, you can see it automatically

11183
06:19:26,000 --> 06:19:30,480
extracted the file name along with the

11184
06:19:28,000 --> 06:19:32,878
associated hashes. If we had our Virus

11185
06:19:30,480 --> 06:19:34,638
Total API key configured, well, we would

11186
06:19:32,878 --> 06:19:37,120
obviously get the result here that the

11187
06:19:34,638 --> 06:19:38,718
file is malicious. In this case, we can

11188
06:19:37,120 --> 06:19:40,958
just copy one of these hashes and

11189
06:19:38,718 --> 06:19:42,558
manually head over to Virus Total. I

11190
06:19:40,958 --> 06:19:45,160
just wanted to showcase that it's also

11191
06:19:42,558 --> 06:19:47,200
able to extract attachments along with

11192
06:19:45,160 --> 06:19:48,718
URLs. So, I hope that was a very

11193
06:19:47,200 --> 06:19:50,400
interesting look into a powerful tool

11194
06:19:48,718 --> 06:19:52,558
that we can use to automate some of the

11195
06:19:50,400 --> 06:19:53,920
manual work. And I can't say for sure

11196
06:19:52,558 --> 06:19:55,840
that you're going to be using fish tool

11197
06:19:53,920 --> 06:19:57,440
in your sock, but it is definitely a

11198
06:19:55,840 --> 06:20:00,240
useful resource to have in your arsenal

11199
06:19:57,440 --> 06:20:02,718
to save a lot of time.

11200
06:20:00,240 --> 06:20:04,440
So far, we've done a fantastic job at

11201
06:20:02,718 --> 06:20:06,878
identifying and analyzing fishing

11202
06:20:04,440 --> 06:20:09,120
incidents. However, let's think back to

11203
06:20:06,878 --> 06:20:11,040
the sock and its role and recall that

11204
06:20:09,120 --> 06:20:13,120
the last step in the key functions of

11205
06:20:11,040 --> 06:20:15,680
security operations is to respond to

11206
06:20:13,120 --> 06:20:17,680
incidents quickly and effectively. Now,

11207
06:20:15,680 --> 06:20:20,080
what would any of our in-depth analysis

11208
06:20:17,680 --> 06:20:21,840
and investigation be for if we did not

11209
06:20:20,080 --> 06:20:24,160
appropriately respond to fishing

11210
06:20:21,840 --> 06:20:26,080
incidents and take defensive actions to

11211
06:20:24,160 --> 06:20:27,600
mitigate their impact and prevent future

11212
06:20:26,080 --> 06:20:29,440
ones? And we can break down the

11213
06:20:27,600 --> 06:20:31,520
defensive measures we take into either

11214
06:20:29,440 --> 06:20:33,480
reactive, so occurring as the result of

11215
06:20:31,520 --> 06:20:36,240
us identifying and analyzing a fishing

11216
06:20:33,480 --> 06:20:37,760
incident, or proactive, so using what

11217
06:20:36,240 --> 06:20:39,680
we've learned from our analysis to

11218
06:20:37,760 --> 06:20:42,000
proactively improve our detection and

11219
06:20:39,680 --> 06:20:43,840
security operations. And so in this

11220
06:20:42,000 --> 06:20:46,000
lesson, let's focus on the reactive

11221
06:20:43,840 --> 06:20:47,840
defense measures. And specifically,

11222
06:20:46,000 --> 06:20:49,600
these are measures that we want to take

11223
06:20:47,840 --> 06:20:51,360
in order to address and resolve the

11224
06:20:49,600 --> 06:20:52,958
incident and minimize the risk of the

11225
06:20:51,360 --> 06:20:55,600
malicious email that we identified

11226
06:20:52,958 --> 06:20:57,200
arriving in employee inboxes. And

11227
06:20:55,600 --> 06:20:58,878
assuming through our analysis we've

11228
06:20:57,200 --> 06:21:01,280
already identified and classified an

11229
06:20:58,878 --> 06:21:02,958
email as a fishing attempt, we typically

11230
06:21:01,280 --> 06:21:05,600
want to take the following reactive

11231
06:21:02,958 --> 06:21:07,200
response actions. And these response

11232
06:21:05,600 --> 06:21:09,360
actions will typically follow the

11233
06:21:07,200 --> 06:21:12,080
classic incident response framework

11234
06:21:09,360 --> 06:21:13,440
after the detection and analysis phase.

11235
06:21:12,080 --> 06:21:15,280
And we'll cover these in much more

11236
06:21:13,440 --> 06:21:17,520
detail within the IR section of this

11237
06:21:15,280 --> 06:21:18,798
course. But at a high level, we want to

11238
06:21:17,520 --> 06:21:20,798
first think about containment

11239
06:21:18,798 --> 06:21:22,638
strategies. So, as mentioned, after

11240
06:21:20,798 --> 06:21:24,558
we've detected and analyzed the fishing

11241
06:21:22,638 --> 06:21:26,400
incident, well, we'll need to perform

11242
06:21:24,558 --> 06:21:28,000
some containment actions. And this

11243
06:21:26,400 --> 06:21:29,840
involves taking immediate steps to

11244
06:21:28,000 --> 06:21:31,480
isolate the fishing threat and prevent

11245
06:21:29,840 --> 06:21:33,440
it from spreading further within the

11246
06:21:31,480 --> 06:21:35,600
organization. So, the first thing here

11247
06:21:33,440 --> 06:21:37,280
is we want to determine the scope. And

11248
06:21:35,600 --> 06:21:39,200
for example, was this an email that was

11249
06:21:37,280 --> 06:21:41,440
just sent to a single user or was it

11250
06:21:39,200 --> 06:21:43,040
sent to an entire department or team?

11251
06:21:41,440 --> 06:21:44,798
And also, was this a thirdparty

11252
06:21:43,040 --> 06:21:46,480
contractor that rarely uses their email

11253
06:21:44,798 --> 06:21:48,240
account or was it a high-ranking

11254
06:21:46,480 --> 06:21:50,718
executive with access to critical

11255
06:21:48,240 --> 06:21:52,480
systems and sensitive information? And

11256
06:21:50,718 --> 06:21:54,558
so understanding these details is

11257
06:21:52,480 --> 06:21:56,240
essential as they really directly impact

11258
06:21:54,558 --> 06:21:58,320
the severity and potential consequence

11259
06:21:56,240 --> 06:22:00,160
of the fishing attempt. And we can

11260
06:21:58,320 --> 06:22:01,600
determine the scope either at the email

11261
06:22:00,160 --> 06:22:03,520
header level. So, you know, where we're

11262
06:22:01,600 --> 06:22:05,440
looking into the recipient or the carbon

11263
06:22:03,520 --> 06:22:06,958
copy headers, and through these headers

11264
06:22:05,440 --> 06:22:08,958
attempt to determine all of the users

11265
06:22:06,958 --> 06:22:11,040
who receive the email. However, it's

11266
06:22:08,958 --> 06:22:12,878
often more efficient and effective to

11267
06:22:11,040 --> 06:22:15,600
perform this kind of scope analysis at

11268
06:22:12,878 --> 06:22:17,520
the email gateway level. And so within a

11269
06:22:15,600 --> 06:22:19,680
Microsoft environment, we can typically

11270
06:22:17,520 --> 06:22:21,280
utilize the message trace functionality

11271
06:22:19,680 --> 06:22:23,520
to determine the scope of an email

11272
06:22:21,280 --> 06:22:25,360
message. And so using the artifacts we

11273
06:22:23,520 --> 06:22:26,958
collected during our analysis stage,

11274
06:22:25,360 --> 06:22:28,878
things like the sender's email address

11275
06:22:26,958 --> 06:22:31,360
or the timestamp or even the subject

11276
06:22:28,878 --> 06:22:33,280
line, well, we can easily identify all

11277
06:22:31,360 --> 06:22:36,160
the recipients and copied recipients of

11278
06:22:33,280 --> 06:22:37,520
an email. And the exact steps and

11279
06:22:36,160 --> 06:22:39,120
procedures will be different depending

11280
06:22:37,520 --> 06:22:41,520
on your organization's infrastructure

11281
06:22:39,120 --> 06:22:43,360
and tooling of course. For example, in a

11282
06:22:41,520 --> 06:22:45,360
Google or a G Suite environment, we can

11283
06:22:43,360 --> 06:22:46,360
utilize the email log search feature for

11284
06:22:45,360 --> 06:22:49,360
the same

11285
06:22:46,360 --> 06:22:51,200
purpose. But no matter the tool, the

11286
06:22:49,360 --> 06:22:53,120
methodology remains the same with the

11287
06:22:51,200 --> 06:22:55,360
same objectives of using artifacts that

11288
06:22:53,120 --> 06:22:57,600
we previously identified to narrow down

11289
06:22:55,360 --> 06:22:59,840
our search and find every recipient of

11290
06:22:57,600 --> 06:23:01,280
an email. And so now that we've

11291
06:22:59,840 --> 06:23:03,360
identified the scope of the fishing

11292
06:23:01,280 --> 06:23:04,878
incident, the next important step in the

11293
06:23:03,360 --> 06:23:06,718
containment process is to prevent

11294
06:23:04,878 --> 06:23:08,718
further spread and mitigate potential

11295
06:23:06,718 --> 06:23:11,520
damage. And one effective containment

11296
06:23:08,718 --> 06:23:13,760
strategy here is quarantining. And so to

11297
06:23:11,520 --> 06:23:15,760
quarantine involves isolating suspicious

11298
06:23:13,760 --> 06:23:17,760
or potentially malicious emails or files

11299
06:23:15,760 --> 06:23:20,558
or attachments and prevent them from

11300
06:23:17,760 --> 06:23:22,160
reaching end users inboxes or systems.

11301
06:23:20,558 --> 06:23:23,840
And in both Microsoft and Google

11302
06:23:22,160 --> 06:23:25,920
environments, we can utilize the native

11303
06:23:23,840 --> 06:23:28,718
quarantine features to isolate fishing

11304
06:23:25,920 --> 06:23:30,638
emails and associated attachments.

11305
06:23:28,718 --> 06:23:33,120
And so next we can get into blocking

11306
06:23:30,638 --> 06:23:34,798
specific artifacts. And so at this stage

11307
06:23:33,120 --> 06:23:36,638
we've likely identified a malicious

11308
06:23:34,798 --> 06:23:39,200
sender, a sender who is most likely

11309
06:23:36,638 --> 06:23:40,878
related to an ongoing fishing campaign.

11310
06:23:39,200 --> 06:23:42,638
And as such, we need to ensure that we

11311
06:23:40,878 --> 06:23:45,040
prevent future fishing attempts from

11312
06:23:42,638 --> 06:23:46,798
reaching users inboxes. And we can use

11313
06:23:45,040 --> 06:23:48,558
various strategies to block sender

11314
06:23:46,798 --> 06:23:50,558
artifacts, including things like

11315
06:23:48,558 --> 06:23:53,360
blocking specific email addresses or

11316
06:23:50,558 --> 06:23:55,520
domains or IPs or even subject lines of

11317
06:23:53,360 --> 06:23:56,958
the email itself. And all of these

11318
06:23:55,520 --> 06:23:58,480
artifacts that I just mentioned should

11319
06:23:56,958 --> 06:24:01,440
have already been collected during our

11320
06:23:58,480 --> 06:24:03,040
triage and analysis stage. And so again,

11321
06:24:01,440 --> 06:24:04,798
we can block things like the specific

11322
06:24:03,040 --> 06:24:06,160
email address, but that might be less

11323
06:24:04,798 --> 06:24:07,920
effective against sophisticated

11324
06:24:06,160 --> 06:24:10,120
attackers who can frequently change

11325
06:24:07,920 --> 06:24:12,480
their email address or use disposable

11326
06:24:10,120 --> 06:24:14,080
mailboxes. Or we can just block entire

11327
06:24:12,480 --> 06:24:15,600
domains, and that of course can be an

11328
06:24:14,080 --> 06:24:16,958
effective strategy, but we need to be

11329
06:24:15,600 --> 06:24:18,798
careful because it might lead to

11330
06:24:16,958 --> 06:24:21,360
collateral damage, especially if the

11331
06:24:18,798 --> 06:24:22,958
attacker is using a legitimate service.

11332
06:24:21,360 --> 06:24:24,558
We could block the IP address of the

11333
06:24:22,958 --> 06:24:26,638
mail server. But again, we have to be

11334
06:24:24,558 --> 06:24:28,160
very careful here. Attackers can easily

11335
06:24:26,638 --> 06:24:30,240
change their IP address or use a

11336
06:24:28,160 --> 06:24:31,680
different mail server. And of course, we

11337
06:24:30,240 --> 06:24:33,200
could block the subject line of the

11338
06:24:31,680 --> 06:24:35,680
email, but of course, that's very easy

11339
06:24:33,200 --> 06:24:38,400
to change. And I mentioned being

11340
06:24:35,680 --> 06:24:40,080
cautious around blocking entire domains.

11341
06:24:38,400 --> 06:24:41,920
And so, you can imagine identifying a

11342
06:24:40,080 --> 06:24:44,240
fishing email that used genuine Gmail or

11343
06:24:41,920 --> 06:24:46,000
Outlook as its email infrastructure.

11344
06:24:44,240 --> 06:24:48,718
Well, you can't just go ahead and block

11345
06:24:46,000 --> 06:24:50,320
gmail.com or outlook.com. Of course,

11346
06:24:48,718 --> 06:24:52,080
blocking legitimate domains like these

11347
06:24:50,320 --> 06:24:53,920
can lead to a number of false positives

11348
06:24:52,080 --> 06:24:55,360
and also disrupt business operations.

11349
06:24:53,920 --> 06:24:57,040
And quite honestly, people are not going

11350
06:24:55,360 --> 06:24:58,798
to be very happy with you, especially

11351
06:24:57,040 --> 06:25:00,480
the IT support staff when they start

11352
06:24:58,798 --> 06:25:02,718
getting thousands of requests as to why

11353
06:25:00,480 --> 06:25:04,400
their emails aren't sending. So, just to

11354
06:25:02,718 --> 06:25:06,558
give you a bit of an example on how a

11355
06:25:04,400 --> 06:25:08,958
sock analyst may go about creating rules

11356
06:25:06,558 --> 06:25:10,958
to block certain artifacts. Well, I've

11357
06:25:08,958 --> 06:25:12,878
spun up a Microsoft Exchange email

11358
06:25:10,958 --> 06:25:14,718
server in a lab environment just so we

11359
06:25:12,878 --> 06:25:15,920
can go through some of the UI and the

11360
06:25:14,718 --> 06:25:18,000
different options you might have to

11361
06:25:15,920 --> 06:25:19,920
create rules. And by all means, you do

11362
06:25:18,000 --> 06:25:21,520
not have to follow along here. It's more

11363
06:25:19,920 --> 06:25:23,600
so just a demonstration for you to

11364
06:25:21,520 --> 06:25:25,280
watch. If you are curious, you can look

11365
06:25:23,600 --> 06:25:27,280
up any tutorial out there on how to set

11366
06:25:25,280 --> 06:25:28,878
up an Exchange server, but I won't cover

11367
06:25:27,280 --> 06:25:30,480
how to do it in this course because it

11368
06:25:28,878 --> 06:25:31,920
takes a bit of time to set up and won't

11369
06:25:30,480 --> 06:25:33,680
really be relevant to other sections

11370
06:25:31,920 --> 06:25:35,200
that we'll cover here. And this will be

11371
06:25:33,680 --> 06:25:36,798
quite similar to what you see in an

11372
06:25:35,200 --> 06:25:40,000
Exchange online environment or a

11373
06:25:36,798 --> 06:25:42,000
Microsoft 365 environment as well. And

11374
06:25:40,000 --> 06:25:44,320
so, let's think about how to block an

11375
06:25:42,000 --> 06:25:46,000
email address. For example, maybe we've

11376
06:25:44,320 --> 06:25:48,600
identified a fishing attempt that has

11377
06:25:46,000 --> 06:25:50,638
clearly come from a malicious mailbox or

11378
06:25:48,600 --> 06:25:52,080
sender. Well, in an Exchange

11379
06:25:50,638 --> 06:25:55,040
environment, we can go over to the

11380
06:25:52,080 --> 06:25:57,120
mailflow tab and then into rules. And

11381
06:25:55,040 --> 06:25:59,280
mailflow rules are created to define

11382
06:25:57,120 --> 06:26:00,920
specific actions that should be taken on

11383
06:25:59,280 --> 06:26:03,120
email messages based on defined

11384
06:26:00,920 --> 06:26:04,798
conditions. And so these conditions can

11385
06:26:03,120 --> 06:26:07,040
be based on the message content or

11386
06:26:04,798 --> 06:26:09,360
sender or recipient and other attributes

11387
06:26:07,040 --> 06:26:11,200
as well. And this section is where

11388
06:26:09,360 --> 06:26:12,878
administrators and security staff can

11389
06:26:11,200 --> 06:26:15,200
create and manage and modify the

11390
06:26:12,878 --> 06:26:16,680
mailflow rules, also known as transport

11391
06:26:15,200 --> 06:26:18,958
rules that apply to these email

11392
06:26:16,680 --> 06:26:20,718
messages. And so to create a rule, we

11393
06:26:18,958 --> 06:26:23,280
can just click on this plus tab here and

11394
06:26:20,718 --> 06:26:24,958
click on create a new rule. And from

11395
06:26:23,280 --> 06:26:27,040
here, we can start defining the

11396
06:26:24,958 --> 06:26:28,160
conditions of our rule. And so for the

11397
06:26:27,040 --> 06:26:30,000
name, I'm just going to put in an

11398
06:26:28,160 --> 06:26:31,920
example name. But in my experience in

11399
06:26:30,000 --> 06:26:34,080
the sock, we would typically categorize

11400
06:26:31,920 --> 06:26:36,240
and set up more generic rules like email

11401
06:26:34,080 --> 06:26:38,160
address block or domain block or IP

11402
06:26:36,240 --> 06:26:39,760
block. And within these separate rules,

11403
06:26:38,160 --> 06:26:41,200
well, anytime we identified a malicious

11404
06:26:39,760 --> 06:26:43,120
artifact that matched one of these

11405
06:26:41,200 --> 06:26:44,798
categories, like an IP or a domain,

11406
06:26:43,120 --> 06:26:46,240
well, we would add it to this rule. We

11407
06:26:44,798 --> 06:26:47,840
would modify and add it along to the

11408
06:26:46,240 --> 06:26:50,000
rule instead of creating separate rules

11409
06:26:47,840 --> 06:26:52,320
for every, you know, identifier or

11410
06:26:50,000 --> 06:26:53,760
sender that we discover. And so it all

11411
06:26:52,320 --> 06:26:56,400
depends on the workflow and how you want

11412
06:26:53,760 --> 06:26:57,840
to categorize and keep things organized.

11413
06:26:56,400 --> 06:26:59,840
But in this case, let me zoom out a

11414
06:26:57,840 --> 06:27:01,760
little bit here. Uh we can select apply

11415
06:26:59,840 --> 06:27:02,920
this rule if and this is going to give

11416
06:27:01,760 --> 06:27:05,120
us the

11417
06:27:02,920 --> 06:27:07,280
conditions. And so in our case, we're

11418
06:27:05,120 --> 06:27:08,558
looking to match a sender, right? But

11419
06:27:07,280 --> 06:27:10,000
you can see we can also match on

11420
06:27:08,558 --> 06:27:11,680
different things like the actual

11421
06:27:10,000 --> 06:27:13,280
recipient of the email or where the

11422
06:27:11,680 --> 06:27:15,200
sender is located. So we can actually

11423
06:27:13,280 --> 06:27:16,400
take a look in the received headers and

11424
06:27:15,200 --> 06:27:18,000
figure out where the original mail

11425
06:27:16,400 --> 06:27:20,000
server is located, which is pretty

11426
06:27:18,000 --> 06:27:22,558
useful, right? But in this case, let's

11427
06:27:20,000 --> 06:27:25,280
just choose the sender is. And I keep

11428
06:27:22,558 --> 06:27:27,360
having to zoom out. And in our case, we

11429
06:27:25,280 --> 06:27:29,120
can go under this box here and just type

11430
06:27:27,360 --> 06:27:31,638
in an example email address that we want

11431
06:27:29,120 --> 06:27:33,520
to block. So I'm just going to put

11432
06:27:31,638 --> 06:27:35,680
test.com. And then we're going to click

11433
06:27:33,520 --> 06:27:37,160
on okay. And you can see here we've

11434
06:27:35,680 --> 06:27:39,280
entered test at

11435
06:27:37,160 --> 06:27:40,878
testest.com. But if we go back in here,

11436
06:27:39,280 --> 06:27:42,958
you can see we can actually add more

11437
06:27:40,878 --> 06:27:45,520
individuals as well. For example, test

11438
06:27:42,958 --> 06:27:47,120
two at test.com. So you can see how we

11439
06:27:45,520 --> 06:27:49,520
can slowly start adding to this rule

11440
06:27:47,120 --> 06:27:51,440
over time. And once we're satisfied with

11441
06:27:49,520 --> 06:27:53,760
all our conditions, well, we can move on

11442
06:27:51,440 --> 06:27:55,760
to the action section. And in this case,

11443
06:27:53,760 --> 06:27:57,360
we can go under this dropown menu. And

11444
06:27:55,760 --> 06:27:59,120
you can see we have different options

11445
06:27:57,360 --> 06:28:01,200
for what we want to do or what actions

11446
06:27:59,120 --> 06:28:02,840
we want the email server to perform once

11447
06:28:01,200 --> 06:28:04,798
it finds an email that matches our

11448
06:28:02,840 --> 06:28:06,240
condition. So you can see we can do

11449
06:28:04,798 --> 06:28:08,080
things like forwarding the message for

11450
06:28:06,240 --> 06:28:10,000
approval or we can redirect it to

11451
06:28:08,080 --> 06:28:11,280
another mailbox. But in this case, let's

11452
06:28:10,000 --> 06:28:12,878
just delete the message without

11453
06:28:11,280 --> 06:28:14,478
notifying anyone because in this case,

11454
06:28:12,878 --> 06:28:16,558
of course, it's a fishing email that we

11455
06:28:14,478 --> 06:28:18,558
don't want. And once we're satisfied

11456
06:28:16,558 --> 06:28:19,920
with our rule conditions and actions,

11457
06:28:18,558 --> 06:28:23,080
well, we can scroll down and make sure

11458
06:28:19,920 --> 06:28:25,680
it's enforced. And then we can click on

11459
06:28:23,080 --> 06:28:27,440
save. And you can see once our rule is

11460
06:28:25,680 --> 06:28:29,680
saved, we can look over to the right

11461
06:28:27,440 --> 06:28:32,160
here and start walking through what this

11462
06:28:29,680 --> 06:28:33,878
rule is going to do. So for example, if

11463
06:28:32,160 --> 06:28:35,958
we receive an email from

11464
06:28:33,878 --> 06:28:37,680
test@est.com or

11465
06:28:35,958 --> 06:28:39,440
test2@test.com, well, we're going to

11466
06:28:37,680 --> 06:28:42,080
immediately delete that message without

11467
06:28:39,440 --> 06:28:43,840
notifying the recipient or the sender.

11468
06:28:42,080 --> 06:28:45,638
And optionally, we can add rule comments

11469
06:28:43,840 --> 06:28:48,958
here. So if we go back into the

11470
06:28:45,638 --> 06:28:50,478
rule, we can click on more options. And

11471
06:28:48,958 --> 06:28:52,000
you can see once we do that, we unlock

11472
06:28:50,478 --> 06:28:53,680
some more features, right? we can start

11473
06:28:52,000 --> 06:28:55,760
adding more conditions and start

11474
06:28:53,680 --> 06:28:57,760
stacking multiple things. Right? So, if

11475
06:28:55,760 --> 06:28:59,120
we click on the recipient, we can start

11476
06:28:57,760 --> 06:29:00,878
choosing other options here like

11477
06:28:59,120 --> 06:29:02,798
specifying if the recipient is external

11478
06:29:00,878 --> 06:29:04,958
or internal or if they're a member of a

11479
06:29:02,798 --> 06:29:07,600
specific group in our organization or we

11480
06:29:04,958 --> 06:29:09,280
can start specifying domains, right? And

11481
06:29:07,600 --> 06:29:11,520
if we scroll down, you can see we can

11482
06:29:09,280 --> 06:29:13,520
actually add a comment. So, for example,

11483
06:29:11,520 --> 06:29:15,200
we can put in something like fishing and

11484
06:29:13,520 --> 06:29:17,200
maybe we want to reference a specific

11485
06:29:15,200 --> 06:29:19,840
ticket or incident ticket that we can

11486
06:29:17,200 --> 06:29:21,520
refer to later on. And so you can see

11487
06:29:19,840 --> 06:29:23,200
once we've saved that, we have this rule

11488
06:29:21,520 --> 06:29:25,280
comment now under the rule comment

11489
06:29:23,200 --> 06:29:26,878
section. Now when we think about other

11490
06:29:25,280 --> 06:29:29,360
sender artifacts, we don't have to

11491
06:29:26,878 --> 06:29:31,680
specifically choose a mailbox. For

11492
06:29:29,360 --> 06:29:33,200
example, let's create another rule here.

11493
06:29:31,680 --> 06:29:35,040
This time I'm first going to scroll down

11494
06:29:33,200 --> 06:29:37,200
to more options so we can unlock some

11495
06:29:35,040 --> 06:29:38,878
more conditions and actions. In this

11496
06:29:37,200 --> 06:29:41,200
case, I'm just going to call it example

11497
06:29:38,878 --> 06:29:43,760
domain block. I'm just going to search

11498
06:29:41,200 --> 06:29:46,080
for the sender and specifically I'm

11499
06:29:43,760 --> 06:29:47,878
going to look for the domain. And in

11500
06:29:46,080 --> 06:29:49,920
this case, we can specify an entire

11501
06:29:47,878 --> 06:29:51,160
domain. For example, if I choose

11502
06:29:49,920 --> 06:29:53,440
malicious

11503
06:29:51,160 --> 06:29:55,360
domain.net, well, we can add that to our

11504
06:29:53,440 --> 06:29:57,520
rule. And remember, we can start

11505
06:29:55,360 --> 06:30:00,000
stacking multiple domains into one rule

11506
06:29:57,520 --> 06:30:01,840
to keep things clean. So, now that we

11507
06:30:00,000 --> 06:30:04,080
have some domain set here, we can click

11508
06:30:01,840 --> 06:30:06,320
on okay. And you can see we've listed

11509
06:30:04,080 --> 06:30:08,120
them here. And in this case, we can just

11510
06:30:06,320 --> 06:30:10,558
delete the message once

11511
06:30:08,120 --> 06:30:13,360
again. And I'll put in a comment once

11512
06:30:10,558 --> 06:30:15,040
again and hit save. And you can see on

11513
06:30:13,360 --> 06:30:17,040
the right here, our new rule is created

11514
06:30:15,040 --> 06:30:19,680
to match any email with the sender's

11515
06:30:17,040 --> 06:30:21,718
address matching one of these domains.

11516
06:30:19,680 --> 06:30:23,920
Now, we can also block sender IP

11517
06:30:21,718 --> 06:30:26,760
addresses. For example, if I create

11518
06:30:23,920 --> 06:30:28,958
another rule here and go down to more

11519
06:30:26,760 --> 06:30:31,520
options, well, I can go under our

11520
06:30:28,958 --> 06:30:33,760
conditions and once again go under the

11521
06:30:31,520 --> 06:30:35,920
sender. And in this case, I want to go

11522
06:30:33,760 --> 06:30:38,798
down to IP address is in any of these

11523
06:30:35,920 --> 06:30:41,440
ranges or exactly matches. And as this

11524
06:30:38,798 --> 06:30:44,440
suggests, we can choose a valid IPv4

11525
06:30:41,440 --> 06:30:46,400
address range or just a specific IP

11526
06:30:44,440 --> 06:30:48,718
address. For example, we can start

11527
06:30:46,400 --> 06:30:51,080
putting in some IP addresses or we can

11528
06:30:48,718 --> 06:30:53,680
put in an entire

11529
06:30:51,080 --> 06:30:56,080
range. And once we hit okay, well, we

11530
06:30:53,680 --> 06:30:57,520
can once again select our action. In

11531
06:30:56,080 --> 06:31:00,160
this case, we'll just block and delete

11532
06:30:57,520 --> 06:31:02,160
the emails. And so you can see here we

11533
06:31:00,160 --> 06:31:04,638
had three different ways of blocking

11534
06:31:02,160 --> 06:31:07,600
these sender artifacts based on IPs or

11535
06:31:04,638 --> 06:31:09,280
domains or even the specific mailbox.

11536
06:31:07,600 --> 06:31:12,360
And lastly, let's look at another option

11537
06:31:09,280 --> 06:31:15,520
that we have. If we go to create a new

11538
06:31:12,360 --> 06:31:18,240
rule, instead of going under the sender,

11539
06:31:15,520 --> 06:31:19,680
we can go to the subject or body. And

11540
06:31:18,240 --> 06:31:22,320
here, of course, is where we can match

11541
06:31:19,680 --> 06:31:24,878
specific subject lines or any phrases

11542
06:31:22,320 --> 06:31:26,958
included in the body of an email. For

11543
06:31:24,878 --> 06:31:29,440
example, I'll go to subject includes any

11544
06:31:26,958 --> 06:31:32,400
of these words. And from here, we can

11545
06:31:29,440 --> 06:31:34,160
specify words or phrases to match. For

11546
06:31:32,400 --> 06:31:36,878
example, maybe we've been getting a

11547
06:31:34,160 --> 06:31:38,878
number of emails with urgent request.

11548
06:31:36,878 --> 06:31:41,280
and maybe some sort of unique identifier

11549
06:31:38,878 --> 06:31:43,840
like two exclamation marks at the end.

11550
06:31:41,280 --> 06:31:46,240
Well, we can add that to our rule here.

11551
06:31:43,840 --> 06:31:49,120
And of course, we can block the email

11552
06:31:46,240 --> 06:31:51,200
and click on save. And with this rule

11553
06:31:49,120 --> 06:31:53,360
enabled, well, we will match any email

11554
06:31:51,200 --> 06:31:55,120
that comes in that includes the phrase

11555
06:31:53,360 --> 06:31:57,798
urgent request with two exclamation

11556
06:31:55,120 --> 06:32:00,080
marks in the subject line of the

11557
06:31:57,798 --> 06:32:01,680
email. Now, in addition to blocking

11558
06:32:00,080 --> 06:32:03,280
senders, we also need to consider

11559
06:32:01,680 --> 06:32:05,360
blocking various web artifacts that

11560
06:32:03,280 --> 06:32:07,120
we've identified. things like the URLs

11561
06:32:05,360 --> 06:32:09,760
or the domains associated with fishing

11562
06:32:07,120 --> 06:32:11,520
emails in their campaigns. And this can

11563
06:32:09,760 --> 06:32:13,200
be done at the email gateway level to

11564
06:32:11,520 --> 06:32:15,280
again ensure that we block any emails

11565
06:32:13,200 --> 06:32:17,200
that arrive with these malicious URLs.

11566
06:32:15,280 --> 06:32:18,558
But importantly, we can also block URLs

11567
06:32:17,200 --> 06:32:20,958
and domains at the endpoint level

11568
06:32:18,558 --> 06:32:22,160
through our EDR tools or even at the

11569
06:32:20,958 --> 06:32:24,798
network level if we're using an

11570
06:32:22,160 --> 06:32:26,638
organizationwide web proxy. But with the

11571
06:32:24,798 --> 06:32:28,400
rise of remote and hybrid work, well,

11572
06:32:26,638 --> 06:32:30,000
the web proxy example is becoming less

11573
06:32:28,400 --> 06:32:31,600
common. But there are still ways that

11574
06:32:30,000 --> 06:32:33,200
organizations can funnel employee

11575
06:32:31,600 --> 06:32:35,040
traffic through a secure gateway, like

11576
06:32:33,200 --> 06:32:37,280
using VPNs and blocking URLs at the

11577
06:32:35,040 --> 06:32:39,040
firewall level. But ultimately, our goal

11578
06:32:37,280 --> 06:32:40,638
here is to prevent users from accessing

11579
06:32:39,040 --> 06:32:42,400
malicious links that were contained in

11580
06:32:40,638 --> 06:32:43,680
fishing emails. And by doing this, we

11581
06:32:42,400 --> 06:32:45,360
can effectively reduce the risk of

11582
06:32:43,680 --> 06:32:47,040
compromise and also reduce things like

11583
06:32:45,360 --> 06:32:49,280
employees falling victim to credential

11584
06:32:47,040 --> 06:32:51,520
capture techniques. And we can either do

11585
06:32:49,280 --> 06:32:53,440
this from a specific URL or endpoint

11586
06:32:51,520 --> 06:32:55,120
level. For example, if a credential

11587
06:32:53,440 --> 06:32:57,040
capture page is hosted in a specific

11588
06:32:55,120 --> 06:32:58,878
subdirectory, we can block that whole

11589
06:32:57,040 --> 06:33:01,360
subdirectory or we can look at more

11590
06:32:58,878 --> 06:33:03,040
generic domain and subdomain blocks. But

11591
06:33:01,360 --> 06:33:05,040
again, we need to be very cautious about

11592
06:33:03,040 --> 06:33:06,718
blocking specific domains and be sure

11593
06:33:05,040 --> 06:33:08,320
that we conduct thorough analysis and

11594
06:33:06,718 --> 06:33:10,878
due diligence on the reputation and

11595
06:33:08,320 --> 06:33:12,080
context around the domain first. Because

11596
06:33:10,878 --> 06:33:13,680
while this can be a very useful

11597
06:33:12,080 --> 06:33:15,280
technique if an attacker is using a

11598
06:33:13,680 --> 06:33:17,200
malicious domain to stage multiple

11599
06:33:15,280 --> 06:33:19,280
campaigns, for instance, well, it can

11600
06:33:17,200 --> 06:33:20,798
lead to disaster pretty quickly. For

11601
06:33:19,280 --> 06:33:23,440
example, you know, it's very easy to

11602
06:33:20,798 --> 06:33:25,120
block a domain of malicious site.net,

11603
06:33:23,440 --> 06:33:27,600
but what if you identify a URL that

11604
06:33:25,120 --> 06:33:29,600
abuses a legitimate service like Google?

11605
06:33:27,600 --> 06:33:31,080
Well, blocking google.com again is going

11606
06:33:29,600 --> 06:33:33,120
to be a very bad day for the

11607
06:33:31,080 --> 06:33:34,638
organization. And so, we always need to

11608
06:33:33,120 --> 06:33:36,798
gauge and understand the potential

11609
06:33:34,638 --> 06:33:38,558
business impact by blocking a domain.

11610
06:33:36,798 --> 06:33:40,080
And so, ask yourself questions like, are

11611
06:33:38,558 --> 06:33:42,320
employees and executives ever going to

11612
06:33:40,080 --> 06:33:44,080
need to visit this domain in the future?

11613
06:33:42,320 --> 06:33:45,920
If not, then you're most likely good to

11614
06:33:44,080 --> 06:33:48,160
block it. But a URL block is more

11615
06:33:45,920 --> 06:33:50,478
specific and typically safer from an

11616
06:33:48,160 --> 06:33:52,160
availability standpoint. For example,

11617
06:33:50,478 --> 06:33:54,478
what if we wanted to block any email

11618
06:33:52,160 --> 06:33:56,558
message that contained a specific URL in

11619
06:33:54,478 --> 06:33:58,360
the body? Well, of course, we could

11620
06:33:56,558 --> 06:34:01,440
create another rule for

11621
06:33:58,360 --> 06:34:03,680
this. And in this case, we can look for

11622
06:34:01,440 --> 06:34:06,240
the condition of specific words in the

11623
06:34:03,680 --> 06:34:08,160
body of the email. So in this case, I'll

11624
06:34:06,240 --> 06:34:10,160
select subject or body includes any of

11625
06:34:08,160 --> 06:34:13,320
these words. And from here, I can put in

11626
06:34:10,160 --> 06:34:13,320
a URL.

11627
06:34:14,240 --> 06:34:20,160
Or I could even put in a domain

11628
06:34:17,638 --> 06:34:22,240
itself. And this will match any email

11629
06:34:20,160 --> 06:34:24,360
that contains these phrases within the

11630
06:34:22,240 --> 06:34:26,798
content of the email

11631
06:34:24,360 --> 06:34:28,798
itself. A good metric that you can use

11632
06:34:26,798 --> 06:34:30,878
is the age of the domain, which we can

11633
06:34:28,798 --> 06:34:32,400
find out by doing a domain lookup. You

11634
06:34:30,878 --> 06:34:34,478
know, for example, has this domain been

11635
06:34:32,400 --> 06:34:36,160
around for years or decades? Well, if

11636
06:34:34,478 --> 06:34:38,400
so, then make sure you really do your

11637
06:34:36,160 --> 06:34:40,160
due diligence on the domain. If it was

11638
06:34:38,400 --> 06:34:42,000
registered yesterday or last week, then

11639
06:34:40,160 --> 06:34:43,440
it's most likely a fishing web page that

11640
06:34:42,000 --> 06:34:44,878
should have already been proactively

11641
06:34:43,440 --> 06:34:46,400
blocked. And when we talk about

11642
06:34:44,878 --> 06:34:48,080
proactive methods, well, we'll talk

11643
06:34:46,400 --> 06:34:50,478
about some strategies to proactively

11644
06:34:48,080 --> 06:34:52,160
block these domains as well. Just to

11645
06:34:50,478 --> 06:34:54,000
showcase how we can look up the domain

11646
06:34:52,160 --> 06:34:56,878
age. Well, I'm just going to find a

11647
06:34:54,000 --> 06:34:59,080
random URL on this page. For example,

11648
06:34:56,878 --> 06:35:01,280
let's try this one,

11649
06:34:59,080 --> 06:35:02,558
shopppeevip.shop. Well, this one sounds

11650
06:35:01,280 --> 06:35:04,240
like it might have been registered

11651
06:35:02,558 --> 06:35:05,840
recently. I believe earlier in the

11652
06:35:04,240 --> 06:35:07,920
course, we actually found a credential

11653
06:35:05,840 --> 06:35:09,920
capture page that was impersonating this

11654
06:35:07,920 --> 06:35:11,320
shoppee website. So, it seems to be a

11655
06:35:09,920 --> 06:35:13,040
popular target for

11656
06:35:11,320 --> 06:35:15,120
impersonation. I'm just going to head

11657
06:35:13,040 --> 06:35:17,280
over to the who is domain tools website

11658
06:35:15,120 --> 06:35:19,240
and I'm going to paste in that domain.

11659
06:35:17,280 --> 06:35:21,200
And I'm just going to click on

11660
06:35:19,240 --> 06:35:23,440
search. And from here, we can

11661
06:35:21,200 --> 06:35:26,718
immediately see under the dates category

11662
06:35:23,440 --> 06:35:28,840
that this domain is only 2 days old. And

11663
06:35:26,718 --> 06:35:31,040
we can also see it was registered with

11664
06:35:28,840 --> 06:35:33,200
godaddy.com. And quite honestly, because

11665
06:35:31,040 --> 06:35:34,878
of how recent this was registered, it's

11666
06:35:33,200 --> 06:35:36,638
fairly safe to say that this is a

11667
06:35:34,878 --> 06:35:38,760
malicious domain that was used to

11668
06:35:36,638 --> 06:35:40,878
impersonate the shoppee

11669
06:35:38,760 --> 06:35:43,120
website. And lastly here, we should

11670
06:35:40,878 --> 06:35:44,958
block file artifacts. And so blocking

11671
06:35:43,120 --> 06:35:46,798
file artifacts, things like the file

11672
06:35:44,958 --> 06:35:48,958
name or the hashes associated with

11673
06:35:46,798 --> 06:35:51,200
malicious files, is another important

11674
06:35:48,958 --> 06:35:53,120
aspect of fishing incident response. And

11675
06:35:51,200 --> 06:35:55,200
so by preventing users from downloading

11676
06:35:53,120 --> 06:35:57,200
or accessing or worse executing

11677
06:35:55,200 --> 06:35:59,120
malicious files, well, we can mitigate

11678
06:35:57,200 --> 06:36:01,360
the risk of malware infections and data

11679
06:35:59,120 --> 06:36:03,360
breaches. And an effective tool that we

11680
06:36:01,360 --> 06:36:05,120
can use to block file artifacts is to

11681
06:36:03,360 --> 06:36:07,360
leverage our endpoint security solutions

11682
06:36:05,120 --> 06:36:08,878
like our EDR to block files based on

11683
06:36:07,360 --> 06:36:11,200
their attributes like again their name

11684
06:36:08,878 --> 06:36:12,798
or their hash. And so this is why it's

11685
06:36:11,200 --> 06:36:15,840
so important for us to extract things

11686
06:36:12,798 --> 06:36:17,680
like the MD5 or Shaw 1 or SHA 256 hashes

11687
06:36:15,840 --> 06:36:19,120
from malicious documents so that we can

11688
06:36:17,680 --> 06:36:21,200
then block these files from appearing

11689
06:36:19,120 --> 06:36:22,478
within our organization. And so this

11690
06:36:21,200 --> 06:36:24,400
means that whenever a file with this

11691
06:36:22,478 --> 06:36:26,478
hash is downloaded or accessed on an

11692
06:36:24,400 --> 06:36:28,320
employee device, well, the EDR tool will

11693
06:36:26,478 --> 06:36:30,320
kick in and immediately flag and delete

11694
06:36:28,320 --> 06:36:32,400
it from the system and also notify the

11695
06:36:30,320 --> 06:36:33,920
sock. But of course, this is not a

11696
06:36:32,400 --> 06:36:35,920
foolproof method. Like I mentioned

11697
06:36:33,920 --> 06:36:37,840
before, hashes are so easy to change and

11698
06:36:35,920 --> 06:36:39,760
they're so susceptible to change. You

11699
06:36:37,840 --> 06:36:40,958
know, one slight alteration to a file is

11700
06:36:39,760 --> 06:36:42,798
going to result in a completely

11701
06:36:40,958 --> 06:36:44,320
different hash. And this gets kind of

11702
06:36:42,798 --> 06:36:45,600
into the pyramid of pain, which I'm

11703
06:36:44,320 --> 06:36:47,760
going to talk about later in the threat

11704
06:36:45,600 --> 06:36:49,520
intelligence section.

11705
06:36:47,760 --> 06:36:51,760
And so technically we can also block

11706
06:36:49,520 --> 06:36:53,360
file names, but often this is not the

11707
06:36:51,760 --> 06:36:55,680
best method unless the file name is

11708
06:36:53,360 --> 06:36:58,160
extremely specific or uses a unique

11709
06:36:55,680 --> 06:36:59,440
identifier for us to alert on. And often

11710
06:36:58,160 --> 06:37:02,080
there's no reason why we wouldn't just

11711
06:36:59,440 --> 06:37:03,680
use the hash instead. For example, if we

11712
06:37:02,080 --> 06:37:06,320
wanted to create a rule around file

11713
06:37:03,680 --> 06:37:08,120
attachments, well, we can do just that.

11714
06:37:06,320 --> 06:37:10,798
If we click on create new

11715
06:37:08,120 --> 06:37:12,040
rule, well, we can select the condition

11716
06:37:10,798 --> 06:37:14,240
under any

11717
06:37:12,040 --> 06:37:16,320
attachment. And from here you can see we

11718
06:37:14,240 --> 06:37:17,840
have various options. For example, we

11719
06:37:16,320 --> 06:37:20,040
can block any email that might have

11720
06:37:17,840 --> 06:37:22,240
executable content or is password

11721
06:37:20,040 --> 06:37:24,798
protected. However, you can see we can

11722
06:37:22,240 --> 06:37:26,638
also match file names. For example, we

11723
06:37:24,798 --> 06:37:28,520
can include any email that includes the

11724
06:37:26,638 --> 06:37:32,878
attachment name of

11725
06:37:28,520 --> 06:37:32,878
quotation.iso and we can add that to our

11726
06:37:35,878 --> 06:37:40,240
condition. And so this leads us to

11727
06:37:38,440 --> 06:37:42,080
eradication. And this is where we're

11728
06:37:40,240 --> 06:37:43,680
aimed at completely removing all traces

11729
06:37:42,080 --> 06:37:45,840
of the fishing attack from within our

11730
06:37:43,680 --> 06:37:47,520
organization. And so of course we want

11731
06:37:45,840 --> 06:37:49,760
to remove the malicious emails from our

11732
06:37:47,520 --> 06:37:51,478
email servers. And often we can do this

11733
06:37:49,760 --> 06:37:53,840
through things like content searches and

11734
06:37:51,478 --> 06:37:55,840
eiscocovery. And the specific ways and

11735
06:37:53,840 --> 06:37:57,600
processes to do this is organization and

11736
06:37:55,840 --> 06:37:59,360
tooling dependent. But we should in

11737
06:37:57,600 --> 06:38:01,520
theory conduct a comprehensive content

11738
06:37:59,360 --> 06:38:03,360
search and eiscocovery phase to remove

11739
06:38:01,520 --> 06:38:04,958
any additional instances of malware

11740
06:38:03,360 --> 06:38:06,240
content like the fishing emails or

11741
06:38:04,958 --> 06:38:08,558
attachments that might have been

11742
06:38:06,240 --> 06:38:10,000
overlooked during our initial detection.

11743
06:38:08,558 --> 06:38:11,840
I'll quickly demonstrate how we can

11744
06:38:10,000 --> 06:38:13,760
trace email logs within an Exchange

11745
06:38:11,840 --> 06:38:15,440
environment. However, I'll mention that

11746
06:38:13,760 --> 06:38:17,440
more modern solutions like Exchange

11747
06:38:15,440 --> 06:38:19,280
Online and Google Workspace have much

11748
06:38:17,440 --> 06:38:21,360
more robust message trace and content

11749
06:38:19,280 --> 06:38:22,878
search functionality. And so, it's not

11750
06:38:21,360 --> 06:38:24,840
as important to get hung up on any

11751
06:38:22,878 --> 06:38:27,840
specific tool that allows you to do

11752
06:38:24,840 --> 06:38:29,280
this. For example, in a Microsoft 365

11753
06:38:27,840 --> 06:38:30,878
environment, we could leverage the

11754
06:38:29,280 --> 06:38:32,878
security and compliance center or the

11755
06:38:30,878 --> 06:38:34,798
Microsoft Purview functionality to

11756
06:38:32,878 --> 06:38:36,718
perform a content search and capture all

11757
06:38:34,798 --> 06:38:38,400
instances of a malicious email and then

11758
06:38:36,718 --> 06:38:40,878
purge them using the compliance search

11759
06:38:38,400 --> 06:38:42,320
purge feature or through PowerShell. and

11760
06:38:40,878 --> 06:38:44,400
more so we should just focus on the

11761
06:38:42,320 --> 06:38:45,600
methodology and what our objectives are.

11762
06:38:44,400 --> 06:38:47,600
Right? We can always look up the

11763
06:38:45,600 --> 06:38:49,120
documentation if we need it. In this

11764
06:38:47,600 --> 06:38:51,600
case, I'll just showcase the message

11765
06:38:49,120 --> 06:38:53,840
tracking feature in Exchange. So, we can

11766
06:38:51,600 --> 06:38:56,400
first go under the mailflow section and

11767
06:38:53,840 --> 06:38:58,320
then into the delivery reports tab. And

11768
06:38:56,400 --> 06:38:59,920
this is quite a limiting feature, but it

11769
06:38:58,320 --> 06:39:02,000
allows us to search for delivery

11770
06:38:59,920 --> 06:39:04,878
information about emails sent to or from

11771
06:39:02,000 --> 06:39:06,558
a specific person. For example, I can

11772
06:39:04,878 --> 06:39:08,558
specify a mailbox here. Right now, I

11773
06:39:06,558 --> 06:39:10,320
just have the administrator user. And so

11774
06:39:08,558 --> 06:39:12,718
I can search for any messages sent to

11775
06:39:10,320 --> 06:39:14,878
that administrator user. And so I'll

11776
06:39:12,718 --> 06:39:17,440
just add that there. And then if I just

11777
06:39:14,878 --> 06:39:19,600
hit search, well, we can see we have two

11778
06:39:17,440 --> 06:39:21,120
results just from previous testing.

11779
06:39:19,600 --> 06:39:23,000
Optionally, if we wanted to, we could

11780
06:39:21,120 --> 06:39:25,360
search for messages from a specific

11781
06:39:23,000 --> 06:39:27,718
sender. So I could add the administrator

11782
06:39:25,360 --> 06:39:30,000
here or put in whatever I want,

11783
06:39:27,718 --> 06:39:31,520
right? So if I run this search, well,

11784
06:39:30,000 --> 06:39:33,120
we're not going to get anything. But in

11785
06:39:31,520 --> 06:39:35,120
theory, you could search for a specific

11786
06:39:33,120 --> 06:39:37,120
email address, right? We could also

11787
06:39:35,120 --> 06:39:40,280
search for specific subject lines,

11788
06:39:37,120 --> 06:39:42,320
right? So if I switch this back to

11789
06:39:40,280 --> 06:39:44,878
administrator, you can see we have two

11790
06:39:42,320 --> 06:39:46,680
results. But if I search for a specific

11791
06:39:44,878 --> 06:39:49,040
keyphrase in the subject line like

11792
06:39:46,680 --> 06:39:51,600
hello, well, we've limited our results

11793
06:39:49,040 --> 06:39:53,360
to one. So this is not a very in-depth

11794
06:39:51,600 --> 06:39:54,558
example here, but you can see sort of

11795
06:39:53,360 --> 06:39:57,840
how we can start narrowing down

11796
06:39:54,558 --> 06:39:59,600
mailboxes and track specific emails.

11797
06:39:57,840 --> 06:40:01,280
To gain a bit more flexibility and

11798
06:39:59,600 --> 06:40:03,360
power, we can use something like the

11799
06:40:01,280 --> 06:40:04,958
exchange management shell to search for

11800
06:40:03,360 --> 06:40:07,360
email within our email server using

11801
06:40:04,958 --> 06:40:09,040
various syntax. And the commandlet that

11802
06:40:07,360 --> 06:40:11,718
we want to use for this is called get

11803
06:40:09,040 --> 06:40:14,160
message tracking

11804
06:40:11,718 --> 06:40:16,000
log. And there are a few parameters that

11805
06:40:14,160 --> 06:40:16,920
we can use for this command lit like the

11806
06:40:16,000 --> 06:40:18,920
tax

11807
06:40:16,920 --> 06:40:21,360
sender or

11808
06:40:18,920 --> 06:40:23,840
recipients or even with the message

11809
06:40:21,360 --> 06:40:25,360
subject. So, for example, if I wanted to

11810
06:40:23,840 --> 06:40:27,520
find all the emails delivered to the

11811
06:40:25,360 --> 06:40:29,120
administrator user, well, I could simply

11812
06:40:27,520 --> 06:40:30,520
put in recipients here of that

11813
06:40:29,120 --> 06:40:33,600
administrator

11814
06:40:30,520 --> 06:40:35,040
user. And if we run this search, well,

11815
06:40:33,600 --> 06:40:37,400
you see, we can pull back all of these

11816
06:40:35,040 --> 06:40:40,160
examples of just test emails that I've

11817
06:40:37,400 --> 06:40:42,080
sent. If I wanted to find all the emails

11818
06:40:40,160 --> 06:40:44,120
sent by a particular address, even an

11819
06:40:42,080 --> 06:40:46,958
external one, well, I can run a similar

11820
06:40:44,120 --> 06:40:48,320
command, but change this to sender and

11821
06:40:46,958 --> 06:40:51,280
then put in whatever I want for the

11822
06:40:48,320 --> 06:40:52,400
email address.

11823
06:40:51,280 --> 06:40:54,200
And of course, this is not going to

11824
06:40:52,400 --> 06:40:56,878
return anything in this

11825
06:40:54,200 --> 06:40:59,600
example. Or if I wanted to search for a

11826
06:40:56,878 --> 06:41:02,478
specific subject line, I can specify a

11827
06:40:59,600 --> 06:41:04,400
sender as well as the subject argument

11828
06:41:02,478 --> 06:41:06,240
and then put in any keywords or phrases

11829
06:41:04,400 --> 06:41:08,878
that I want. In this case, we'll search

11830
06:41:06,240 --> 06:41:10,558
for hello again. And you can see we

11831
06:41:08,878 --> 06:41:12,558
limited our original search down a

11832
06:41:10,558 --> 06:41:15,040
little bit to only contain messages with

11833
06:41:12,558 --> 06:41:16,718
that hello in the subject line. And

11834
06:41:15,040 --> 06:41:18,718
there are of course many other filtering

11835
06:41:16,718 --> 06:41:20,558
and formatting options that we can apply

11836
06:41:18,718 --> 06:41:22,478
to only search between specific time

11837
06:41:20,558 --> 06:41:24,320
ranges or you know other qualifiers for

11838
06:41:22,478 --> 06:41:26,000
example. But we don't have to turn this

11839
06:41:24,320 --> 06:41:27,920
into a whole lesson on the get message

11840
06:41:26,000 --> 06:41:29,520
tracking log feature. And again I'll

11841
06:41:27,920 --> 06:41:31,760
also point out that this is not the most

11842
06:41:29,520 --> 06:41:33,680
userfriendly option. And as I mentioned

11843
06:41:31,760 --> 06:41:35,200
with modern Exchange online environments

11844
06:41:33,680 --> 06:41:36,798
well we can utilize things like the

11845
06:41:35,200 --> 06:41:38,638
message trace and content searching

11846
06:41:36,798 --> 06:41:40,400
features that make it a lot easier for

11847
06:41:38,638 --> 06:41:42,478
us to find and search for specific

11848
06:41:40,400 --> 06:41:43,920
emails. And if you're curious about how

11849
06:41:42,478 --> 06:41:45,200
those tools work, well, you can

11850
06:41:43,920 --> 06:41:46,798
definitely look up the Microsoft

11851
06:41:45,200 --> 06:41:49,200
documentation, which I'll have linked

11852
06:41:46,798 --> 06:41:51,200
down below as well. And I mentioned

11853
06:41:49,200 --> 06:41:52,240
removing malicious files. So, if there

11854
06:41:51,200 --> 06:41:53,840
were any attachments that were

11855
06:41:52,240 --> 06:41:55,840
downloaded or even still in employee

11856
06:41:53,840 --> 06:41:57,558
mailboxes, well, we need to remove them

11857
06:41:55,840 --> 06:41:59,440
from these systems and the servers and

11858
06:41:57,558 --> 06:42:01,280
endpoints. And so, we might need to

11859
06:41:59,440 --> 06:42:03,600
leverage our EDR tool to quarantine and

11860
06:42:01,280 --> 06:42:05,040
delete these files. We might need to run

11861
06:42:03,600 --> 06:42:06,478
PowerShell scripts in our Microsoft

11862
06:42:05,040 --> 06:42:07,680
Exchange environment to look through our

11863
06:42:06,478 --> 06:42:10,080
email server and delete all the

11864
06:42:07,680 --> 06:42:12,240
instances. If the fishing attack

11865
06:42:10,080 --> 06:42:14,080
involved using malicious domains or URLs

11866
06:42:12,240 --> 06:42:16,160
to host fishing websites or distribute

11867
06:42:14,080 --> 06:42:17,600
malware, well, we should always report

11868
06:42:16,160 --> 06:42:20,000
these domains to relevant authorities

11869
06:42:17,600 --> 06:42:21,520
and registrers. And by reporting

11870
06:42:20,000 --> 06:42:23,360
malicious domains, well, it will help

11871
06:42:21,520 --> 06:42:25,120
further spread an abuse, and the

11872
06:42:23,360 --> 06:42:27,680
registars themselves may be able to

11873
06:42:25,120 --> 06:42:29,680
suspend or take down the malicious site.

11874
06:42:27,680 --> 06:42:32,878
And so, let's return to the domain tools

11875
06:42:29,680 --> 06:42:34,958
website for that shoppee domain. If we

11876
06:42:32,878 --> 06:42:36,878
scroll down, you will typically find an

11877
06:42:34,958 --> 06:42:39,840
abuse contact which we can see under

11878
06:42:36,878 --> 06:42:41,520
this register abuse contact email. And

11879
06:42:39,840 --> 06:42:43,440
this specifies the email address where

11880
06:42:41,520 --> 06:42:46,160
abuse complaints or submissions can go

11881
06:42:43,440 --> 06:42:48,878
to. Alternatively, since we identified

11882
06:42:46,160 --> 06:42:50,638
that GoDaddy is the registar here, we

11883
06:42:48,878 --> 06:42:52,718
can simply do a search to see if they

11884
06:42:50,638 --> 06:42:54,120
have a public abuse form, which is quite

11885
06:42:52,718 --> 06:42:56,240
common for large

11886
06:42:54,120 --> 06:42:59,120
registars. So, I'm just going to look up

11887
06:42:56,240 --> 06:43:01,280
GoDaddy abuse. And we can see a number

11888
06:42:59,120 --> 06:43:03,080
of results here. If I just head to this

11889
06:43:01,280 --> 06:43:05,760
first

11890
06:43:03,080 --> 06:43:08,080
page, we can see the terms that GoDaddy

11891
06:43:05,760 --> 06:43:09,360
has around reporting abuse. And if we

11892
06:43:08,080 --> 06:43:11,520
scroll down, we can see the different

11893
06:43:09,360 --> 06:43:14,160
types of abuse because they all have

11894
06:43:11,520 --> 06:43:16,200
different abuse report forms. In this

11895
06:43:14,160 --> 06:43:18,240
case, we've identified this is a fishing

11896
06:43:16,200 --> 06:43:20,080
attempt. And we can see all of the

11897
06:43:18,240 --> 06:43:21,840
required information that's needed to

11898
06:43:20,080 --> 06:43:24,000
make the report. For example, we need

11899
06:43:21,840 --> 06:43:26,240
the full domain path, which we found on

11900
06:43:24,000 --> 06:43:27,680
the fish tank website. And note that in

11901
06:43:26,240 --> 06:43:29,440
the case of a fishing report, the

11902
06:43:27,680 --> 06:43:31,798
website must be live and it must contain

11903
06:43:29,440 --> 06:43:35,000
a login area or a credential capture

11904
06:43:31,798 --> 06:43:39,440
page. And if we head back over to this

11905
06:43:35,000 --> 06:43:39,440
URL and paste it into URL

11906
06:43:41,000 --> 06:43:45,360
scan, we can see that it is in fact

11907
06:43:43,520 --> 06:43:47,200
hosting some sort of credential capture

11908
06:43:45,360 --> 06:43:48,920
page which was just cut off in the

11909
06:43:47,200 --> 06:43:51,440
bottom of this

11910
06:43:48,920 --> 06:43:53,360
screenshot. And as such, we have all the

11911
06:43:51,440 --> 06:43:56,478
required information needed to make our

11912
06:43:53,360 --> 06:43:58,798
report. And if we click on abuse report

11913
06:43:56,478 --> 06:44:01,040
form here, we'll be taken to the report

11914
06:43:58,798 --> 06:44:02,958
fishing wizard. And from here, we just

11915
06:44:01,040 --> 06:44:05,958
need to input our email address as well

11916
06:44:02,958 --> 06:44:08,080
as paste in the URL entry that we

11917
06:44:05,958 --> 06:44:10,080
identified. And now we'll be asked for

11918
06:44:08,080 --> 06:44:11,600
some more information. For example, if

11919
06:44:10,080 --> 06:44:14,478
we know the brand or company that is

11920
06:44:11,600 --> 06:44:16,400
being impersonated, we can click yes.

11921
06:44:14,478 --> 06:44:18,280
And we know that the URL in question is

11922
06:44:16,400 --> 06:44:20,638
impersonating the legitimate shopppee

11923
06:44:18,280 --> 06:44:23,760
website. And so I can just paste in the

11924
06:44:20,638 --> 06:44:25,200
name as well as the legitimate domain.

11925
06:44:23,760 --> 06:44:26,958
We can also enter some additional

11926
06:44:25,200 --> 06:44:28,958
information if anything else is required

11927
06:44:26,958 --> 06:44:30,040
to view the page. In this case, we can

11928
06:44:28,958 --> 06:44:32,320
just hit

11929
06:44:30,040 --> 06:44:34,400
next. And in this case, we can provide

11930
06:44:32,320 --> 06:44:36,320
some more additional information. For

11931
06:44:34,400 --> 06:44:38,400
example, if we identified this URL in a

11932
06:44:36,320 --> 06:44:39,760
fishing campaign or any other additional

11933
06:44:38,400 --> 06:44:41,958
information that might be relevant for

11934
06:44:39,760 --> 06:44:44,160
GoDaddy to complete their

11935
06:44:41,958 --> 06:44:46,638
investigation. And once we confirm and

11936
06:44:44,160 --> 06:44:46,638
submit our

11937
06:44:47,160 --> 06:44:52,000
report, we can see that our request has

11938
06:44:49,520 --> 06:44:54,160
been submitted for the following URL.

11939
06:44:52,000 --> 06:44:56,160
and should any action be taken will most

11940
06:44:54,160 --> 06:44:57,878
likely get an email at the email address

11941
06:44:56,160 --> 06:45:00,240
that we

11942
06:44:57,878 --> 06:45:02,160
specified. And next, as a precautionary

11943
06:45:00,240 --> 06:45:03,680
measure, it's typically advisable to

11944
06:45:02,160 --> 06:45:04,958
implement credential changes for any

11945
06:45:03,680 --> 06:45:07,040
users who might have been affected by

11946
06:45:04,958 --> 06:45:08,478
the fishing attack. So, we would need to

11947
06:45:07,040 --> 06:45:10,718
do things like reset passwords and

11948
06:45:08,478 --> 06:45:12,320
reroll access tokens. And this is

11949
06:45:10,718 --> 06:45:13,760
especially important if we can confirm

11950
06:45:12,320 --> 06:45:15,840
that the employee has visited a

11951
06:45:13,760 --> 06:45:17,360
credential capture page or worse made

11952
06:45:15,840 --> 06:45:19,280
any kind of post request to one, which

11953
06:45:17,360 --> 06:45:21,520
we can typically find out through EDR

11954
06:45:19,280 --> 06:45:23,360
and proxy logs if we have them. Because

11955
06:45:21,520 --> 06:45:24,718
oftent times we can't just trust an

11956
06:45:23,360 --> 06:45:26,878
employee to admit that they fell victim

11957
06:45:24,718 --> 06:45:28,160
to a fish. And no fault of their own, no

11958
06:45:26,878 --> 06:45:30,240
one really wants to admit that they've

11959
06:45:28,160 --> 06:45:31,680
fallen victim. And in cases where the

11960
06:45:30,240 --> 06:45:33,280
endpoints or these systems themselves

11961
06:45:31,680 --> 06:45:34,798
have been compromised by malware or

11962
06:45:33,280 --> 06:45:36,638
other malicious activity that we've

11963
06:45:34,798 --> 06:45:38,240
identified, well, reimaging is most

11964
06:45:36,638 --> 06:45:40,638
likely necessary to ensure that all

11965
06:45:38,240 --> 06:45:41,680
traces of the attack are eradicated. And

11966
06:45:40,638 --> 06:45:43,440
so we're going to need to use things

11967
06:45:41,680 --> 06:45:46,160
like backup images to restore the system

11968
06:45:43,440 --> 06:45:48,320
to a known good state, which obviously

11969
06:45:46,160 --> 06:45:50,280
leads us into recovery where we need to

11970
06:45:48,320 --> 06:45:52,320
restore the affected systems to normal

11971
06:45:50,280 --> 06:45:54,000
operations. So again, we might need to

11972
06:45:52,320 --> 06:45:55,520
restore from backups or reinstall

11973
06:45:54,000 --> 06:45:57,120
software and implement additional

11974
06:45:55,520 --> 06:45:59,520
security measures to prevent similar

11975
06:45:57,120 --> 06:46:01,440
incidents in the future. And so through

11976
06:45:59,520 --> 06:46:02,320
all stages of our response, well, we

11977
06:46:01,440 --> 06:46:04,718
need to make sure that we're

11978
06:46:02,320 --> 06:46:06,400
communicating properly to end users and

11979
06:46:04,718 --> 06:46:08,638
stakeholders to make sure everyone's

11980
06:46:06,400 --> 06:46:11,200
informed and to mitigate any potential

11981
06:46:08,638 --> 06:46:12,558
confusion or misinformation. And so we

11982
06:46:11,200 --> 06:46:14,000
need to do things like notify the

11983
06:46:12,558 --> 06:46:15,920
effective users about the fishing

11984
06:46:14,000 --> 06:46:17,520
incident. So this might involve sending

11985
06:46:15,920 --> 06:46:19,120
the users an email letting them know

11986
06:46:17,520 --> 06:46:21,120
that they received a fishing email and

11987
06:46:19,120 --> 06:46:22,478
provide them a timestamp and description

11988
06:46:21,120 --> 06:46:24,478
and also let them know what actions

11989
06:46:22,478 --> 06:46:26,080
we've taken and what we need to take.

11990
06:46:24,478 --> 06:46:27,440
And so having this clear and concise

11991
06:46:26,080 --> 06:46:29,160
communication is going to help ensure

11992
06:46:27,440 --> 06:46:31,520
that all of these users are aware of the

11993
06:46:29,160 --> 06:46:33,200
situation. And this might also extend to

11994
06:46:31,520 --> 06:46:34,558
stakeholders like senior management or

11995
06:46:33,200 --> 06:46:35,920
IT teams. We need to make sure that

11996
06:46:34,558 --> 06:46:37,840
everyone that might be involved is

11997
06:46:35,920 --> 06:46:40,000
informed if we need to take specific

11998
06:46:37,840 --> 06:46:42,000
response actions or schedule certain

11999
06:46:40,000 --> 06:46:44,400
procedures, but we need to make sure the

12000
06:46:42,000 --> 06:46:47,280
relevant people are aware. We can also

12001
06:46:44,400 --> 06:46:49,440
talk about user education because if an

12002
06:46:47,280 --> 06:46:50,798
employee falls victim to a fish, well,

12003
06:46:49,440 --> 06:46:52,320
that's kind of on us to make sure that

12004
06:46:50,798 --> 06:46:53,920
they're properly trained to identify

12005
06:46:52,320 --> 06:46:55,600
suspicious emails and report them

12006
06:46:53,920 --> 06:46:57,280
effectively. So, oftent times,

12007
06:46:55,600 --> 06:46:59,040
organizations will budget for solutions

12008
06:46:57,280 --> 06:47:00,958
that allow us to enroll employees into

12009
06:46:59,040 --> 06:47:02,320
security awareness training. And through

12010
06:47:00,958 --> 06:47:03,680
this training, the goal is to teach

12011
06:47:02,320 --> 06:47:04,958
employees how to recognize fishing

12012
06:47:03,680 --> 06:47:07,360
attempts and what to do if they

12013
06:47:04,958 --> 06:47:09,120
encounter suspicious emails or links and

12014
06:47:07,360 --> 06:47:11,760
also how to report fishing incidents to

12015
06:47:09,120 --> 06:47:13,520
the IT or security team. And so while

12016
06:47:11,760 --> 06:47:15,680
user education is an ongoing and

12017
06:47:13,520 --> 06:47:17,440
proactive thing, we also have the option

12018
06:47:15,680 --> 06:47:20,000
of assigning employees remedial training

12019
06:47:17,440 --> 06:47:21,600
if they were to fall victim to a fish.

12020
06:47:20,000 --> 06:47:25,000
And speaking of proactive measures,

12021
06:47:21,600 --> 06:47:27,600
well, let's get into that in the next

12022
06:47:25,000 --> 06:47:29,680
lesson. Along with our reactive defense

12023
06:47:27,600 --> 06:47:31,600
actions, well, there are of course more

12024
06:47:29,680 --> 06:47:33,760
proactive actions that we can also take

12025
06:47:31,600 --> 06:47:35,120
to help mitigate the risks and impacts

12026
06:47:33,760 --> 06:47:36,878
of fishing attacks within our

12027
06:47:35,120 --> 06:47:38,400
organization. And not all these

12028
06:47:36,878 --> 06:47:39,920
strategies we talk about here will be

12029
06:47:38,400 --> 06:47:41,840
feasible or available within your

12030
06:47:39,920 --> 06:47:43,520
organization due to tooling or budget

12031
06:47:41,840 --> 06:47:45,520
restrictions, but these are just some of

12032
06:47:43,520 --> 06:47:47,400
the general ideas to keep in mind that

12033
06:47:45,520 --> 06:47:49,600
can supplement our reactive

12034
06:47:47,400 --> 06:47:51,120
functions. And so to kick us off here,

12035
06:47:49,600 --> 06:47:52,958
we have email filtering, which we've

12036
06:47:51,120 --> 06:47:54,958
talked about quite a bit already. And

12037
06:47:52,958 --> 06:47:56,478
email filtering is also a foundational

12038
06:47:54,958 --> 06:47:58,558
proactive defense measure against

12039
06:47:56,478 --> 06:48:00,400
fishing attacks. And we can do things

12040
06:47:58,558 --> 06:48:02,320
like automatically detect or block

12041
06:48:00,400 --> 06:48:04,400
suspicious emails before they reach our

12042
06:48:02,320 --> 06:48:06,320
end users inboxes. And we can do this

12043
06:48:04,400 --> 06:48:08,320
either through predefined conditions or

12044
06:48:06,320 --> 06:48:09,840
rules or by using more advanced threat

12045
06:48:08,320 --> 06:48:12,160
detection techniques like heruristic

12046
06:48:09,840 --> 06:48:13,760
analysis or pattern matching, behavioral

12047
06:48:12,160 --> 06:48:16,320
analysis and even machine learning

12048
06:48:13,760 --> 06:48:18,478
depending on the solutions that we have.

12049
06:48:16,320 --> 06:48:19,920
And we covered creating some reactive

12050
06:48:18,478 --> 06:48:21,760
email filter rules in the previous

12051
06:48:19,920 --> 06:48:23,440
lesson. But there are tools and

12052
06:48:21,760 --> 06:48:26,558
solutions that we can leverage to focus

12053
06:48:23,440 --> 06:48:28,160
on filtering proactively as well. And so

12054
06:48:26,558 --> 06:48:30,160
we can do this through email security

12055
06:48:28,160 --> 06:48:32,320
appliances. And so we can think about

12056
06:48:30,160 --> 06:48:34,718
deploying security applications or tools

12057
06:48:32,320 --> 06:48:36,478
and various email gateway solutions to

12058
06:48:34,718 --> 06:48:38,718
proactively prevent fishing emails and

12059
06:48:36,478 --> 06:48:40,400
malware from entering the organization.

12060
06:48:38,718 --> 06:48:42,240
And so some of these commercial tools

12061
06:48:40,400 --> 06:48:43,920
can utilize detection capabilities like

12062
06:48:42,240 --> 06:48:45,760
the ones we've talked about earlier. So

12063
06:48:43,920 --> 06:48:47,360
heristic analysis and pattern matching,

12064
06:48:45,760 --> 06:48:49,120
machine learning, and even threat

12065
06:48:47,360 --> 06:48:51,440
intelligence to detect and block fishing

12066
06:48:49,120 --> 06:48:53,200
emails. And these solutions can also do

12067
06:48:51,440 --> 06:48:55,920
things like scan email attachments and

12068
06:48:53,200 --> 06:48:58,400
any URLs or links and use signaturebased

12069
06:48:55,920 --> 06:49:00,000
detection and sandboxing techniques. And

12070
06:48:58,400 --> 06:49:01,840
some examples of these appliances

12071
06:49:00,000 --> 06:49:04,320
include things like Barracuda or Proof

12072
06:49:01,840 --> 06:49:05,920
Point or Mimecast and Semantic. All of

12073
06:49:04,320 --> 06:49:08,440
these solutions can help provide that

12074
06:49:05,920 --> 06:49:10,558
multiple layer of fishing detection and

12075
06:49:08,440 --> 06:49:12,240
mitigation. But we can also consider

12076
06:49:10,558 --> 06:49:14,320
implementing some proactive efforts to

12077
06:49:12,240 --> 06:49:15,920
keep employees alert and remind them

12078
06:49:14,320 --> 06:49:18,320
about the risk of certain senders and

12079
06:49:15,920 --> 06:49:20,558
emails. And so a very popular way to do

12080
06:49:18,320 --> 06:49:22,638
this in many organizations is to mark

12081
06:49:20,558 --> 06:49:24,000
external emails by prepending them with

12082
06:49:22,638 --> 06:49:25,520
warning messages that can prompt

12083
06:49:24,000 --> 06:49:27,040
employees to be more aware and more

12084
06:49:25,520 --> 06:49:29,360
focused when they receive an email from

12085
06:49:27,040 --> 06:49:31,280
a potentially unknown sender. And so

12086
06:49:29,360 --> 06:49:32,878
marking external emails can allow users

12087
06:49:31,280 --> 06:49:34,958
to quickly distinguish between an

12088
06:49:32,878 --> 06:49:36,558
internal or an external communication.

12089
06:49:34,958 --> 06:49:38,160
And it can raise that awareness about

12090
06:49:36,558 --> 06:49:40,558
potential risks associated with emails

12091
06:49:38,160 --> 06:49:42,160
from unknown senders. And most email

12092
06:49:40,558 --> 06:49:44,638
server technologies like Microsoft

12093
06:49:42,160 --> 06:49:45,840
Exchange or 365 and even G Suite

12094
06:49:44,638 --> 06:49:47,840
environments will have their own

12095
06:49:45,840 --> 06:49:49,440
specific way to do this. And typically

12096
06:49:47,840 --> 06:49:51,360
it's just a quick Google search away to

12097
06:49:49,440 --> 06:49:52,798
find the correct documentation. But

12098
06:49:51,360 --> 06:49:54,120
let's walk through setting up a simple

12099
06:49:52,798 --> 06:49:56,718
rule like this in

12100
06:49:54,120 --> 06:49:58,798
Exchange. So in a Microsoft Exchange

12101
06:49:56,718 --> 06:50:01,440
environment, we can create a simple

12102
06:49:58,798 --> 06:50:03,200
mailflow rule to mark external email in

12103
06:50:01,440 --> 06:50:04,798
the subject line as well as in the body

12104
06:50:03,200 --> 06:50:07,440
content.

12105
06:50:04,798 --> 06:50:09,840
So, if we go over to mail flow under our

12106
06:50:07,440 --> 06:50:11,478
rules tab here, well, we can create a

12107
06:50:09,840 --> 06:50:13,760
new

12108
06:50:11,478 --> 06:50:14,920
rule. In this case, I'm going to click

12109
06:50:13,760 --> 06:50:16,958
on more

12110
06:50:14,920 --> 06:50:20,478
options. And I'm simply going to call

12111
06:50:16,958 --> 06:50:22,320
this rule mark external email. And under

12112
06:50:20,478 --> 06:50:26,200
our condition here, we're going to apply

12113
06:50:22,320 --> 06:50:28,478
the rule if the sender is

12114
06:50:26,200 --> 06:50:31,360
external. And so, in this case, we can

12115
06:50:28,478 --> 06:50:33,280
change this to outside the organization.

12116
06:50:31,360 --> 06:50:35,558
So currently we're matching any emails

12117
06:50:33,280 --> 06:50:37,760
that reside from outside of the

12118
06:50:35,558 --> 06:50:40,320
organization. To be more specific here,

12119
06:50:37,760 --> 06:50:42,798
we can add a second condition this time

12120
06:50:40,320 --> 06:50:44,558
under the recipient. And we can make

12121
06:50:42,798 --> 06:50:45,718
sure that the recipient is internal to

12122
06:50:44,558 --> 06:50:47,760
the

12123
06:50:45,718 --> 06:50:50,040
organization. And with these conditions

12124
06:50:47,760 --> 06:50:52,638
in place, we can create our

12125
06:50:50,040 --> 06:50:54,840
action. In this case, we're going to

12126
06:50:52,638 --> 06:50:57,360
prepen the subject of the

12127
06:50:54,840 --> 06:50:59,920
message simply with the following text

12128
06:50:57,360 --> 06:51:02,000
to mark it as external. And I'm just

12129
06:50:59,920 --> 06:51:04,958
going to hit okay there. And I'm going

12130
06:51:02,000 --> 06:51:07,680
to add a second action now. This time to

12131
06:51:04,958 --> 06:51:09,440
add a disclaimer to the message. And I

12132
06:51:07,680 --> 06:51:11,240
want to prepend a disclaimer because I

12133
06:51:09,440 --> 06:51:13,440
want this to be at the beginning of the

12134
06:51:11,240 --> 06:51:15,840
email. In this case, I can click on

12135
06:51:13,440 --> 06:51:18,160
enter text here. And I'm going to paste

12136
06:51:15,840 --> 06:51:20,638
in this HTML code that is essentially

12137
06:51:18,160 --> 06:51:22,400
going to create a colored box for us.

12138
06:51:20,638 --> 06:51:23,920
And inside the box, I'm basically just

12139
06:51:22,400 --> 06:51:25,840
going to say that this email is from an

12140
06:51:23,920 --> 06:51:27,440
external sender, prompting employees to

12141
06:51:25,840 --> 06:51:29,200
be vigilant and not open things like

12142
06:51:27,440 --> 06:51:31,440
links or attachments without verifying

12143
06:51:29,200 --> 06:51:33,840
them first. And so I'm just going to

12144
06:51:31,440 --> 06:51:35,760
click okay there. And then we need to

12145
06:51:33,840 --> 06:51:38,160
select a fallback action in case the

12146
06:51:35,760 --> 06:51:40,878
disclaimer can't be inserted. In this

12147
06:51:38,160 --> 06:51:43,520
case, I'll just set it to ignore. And so

12148
06:51:40,878 --> 06:51:46,478
I'll save our rule here. And we can now

12149
06:51:43,520 --> 06:51:48,080
test it out with an external email. And

12150
06:51:46,478 --> 06:51:50,160
now I'm going to move over to my inbox

12151
06:51:48,080 --> 06:51:52,360
on Outlook on the web and just wait for

12152
06:51:50,160 --> 06:51:55,040
an external email to come

12153
06:51:52,360 --> 06:51:57,040
in. And now that an email's come in,

12154
06:51:55,040 --> 06:51:58,798
well, we can see the external tag has

12155
06:51:57,040 --> 06:52:00,878
been automatically prepended to the

12156
06:51:58,798 --> 06:52:03,200
subject line. And if we were to click on

12157
06:52:00,878 --> 06:52:05,200
this email to open it, well, we can

12158
06:52:03,200 --> 06:52:07,040
immediately see this giant red box that

12159
06:52:05,200 --> 06:52:09,040
we inputed by prepending it to the

12160
06:52:07,040 --> 06:52:10,160
beginning of our email message. And

12161
06:52:09,040 --> 06:52:11,440
maybe I could have picked a better

12162
06:52:10,160 --> 06:52:13,840
styling for this as it's kind of

12163
06:52:11,440 --> 06:52:15,280
obtrusive and large. Um, but you can

12164
06:52:13,840 --> 06:52:17,600
sort of see the idea here and how this

12165
06:52:15,280 --> 06:52:19,680
can be implemented in the real world.

12166
06:52:17,600 --> 06:52:21,360
And so an employee opening this email,

12167
06:52:19,680 --> 06:52:23,200
well, we'll immediately be greeted with

12168
06:52:21,360 --> 06:52:25,200
this warning that, you know, Bob Jones

12169
06:52:23,200 --> 06:52:28,200
is an external sender and we should be

12170
06:52:25,200 --> 06:52:30,558
careful about clicking on any

12171
06:52:28,200 --> 06:52:32,718
links. And so, while we can create our

12172
06:52:30,558 --> 06:52:34,160
own rule to apply external warnings,

12173
06:52:32,718 --> 06:52:35,680
more and more email systems and

12174
06:52:34,160 --> 06:52:37,520
providers are starting to integrate

12175
06:52:35,680 --> 06:52:38,878
native functionality into their email

12176
06:52:37,520 --> 06:52:41,040
clients, which we should definitely take

12177
06:52:38,878 --> 06:52:43,280
advantage of wherever possible. Which

12178
06:52:41,040 --> 06:52:45,920
brings us to URL scanning and blocking.

12179
06:52:43,280 --> 06:52:47,440
And as we talked about before, well, URL

12180
06:52:45,920 --> 06:52:49,200
scanning and blocking mechanisms are

12181
06:52:47,440 --> 06:52:50,958
very effective in preventing users from

12182
06:52:49,200 --> 06:52:53,280
accessing malicious websites, linked in

12183
06:52:50,958 --> 06:52:54,878
fishing emails. And in previous lessons,

12184
06:52:53,280 --> 06:52:57,040
we discussed reactive methods for

12185
06:52:54,878 --> 06:52:59,040
blocking URLs and domains after a threat

12186
06:52:57,040 --> 06:53:00,958
has been identified. But we can also

12187
06:52:59,040 --> 06:53:02,958
implement proactive strategies as well

12188
06:53:00,958 --> 06:53:05,280
to prevent users from accessing harmful

12189
06:53:02,958 --> 06:53:06,400
sites before they cause any damage. And

12190
06:53:05,280 --> 06:53:08,958
we can do this through things like

12191
06:53:06,400 --> 06:53:10,400
real-time URL inspection. So through

12192
06:53:08,958 --> 06:53:12,320
some of our tooling, we might be able to

12193
06:53:10,400 --> 06:53:13,760
dynamically analyze website links that

12194
06:53:12,320 --> 06:53:15,920
are embedded in the emails and determine

12195
06:53:13,760 --> 06:53:17,520
if they're safe or not. Or we can also

12196
06:53:15,920 --> 06:53:18,958
implement email and endpoint security

12197
06:53:17,520 --> 06:53:21,680
solutions that can perform things like

12198
06:53:18,958 --> 06:53:23,360
URL rewriting or redirection. Or we can

12199
06:53:21,680 --> 06:53:25,200
route any links through a proxy server

12200
06:53:23,360 --> 06:53:27,760
for inspection before allowing users to

12201
06:53:25,200 --> 06:53:29,440
access them. And one effective proactive

12202
06:53:27,760 --> 06:53:31,760
measure is to block access to any

12203
06:53:29,440 --> 06:53:33,520
recently registered domains. And we

12204
06:53:31,760 --> 06:53:35,440
demonstrated in the previous lesson on

12205
06:53:33,520 --> 06:53:37,360
how we can perform lookups on specific

12206
06:53:35,440 --> 06:53:40,160
domains to find out when they were

12207
06:53:37,360 --> 06:53:41,840
registered and determine their age. And

12208
06:53:40,160 --> 06:53:43,680
obviously attackers are typically going

12209
06:53:41,840 --> 06:53:45,600
to use newly registered domains for

12210
06:53:43,680 --> 06:53:48,080
their fishing attacks because setting up

12211
06:53:45,600 --> 06:53:49,760
credible domains and reputation well

12212
06:53:48,080 --> 06:53:52,000
requires a lot more effort especially

12213
06:53:49,760 --> 06:53:54,000
when you're constantly being taken down.

12214
06:53:52,000 --> 06:53:56,638
And so by blocking any domain registered

12215
06:53:54,000 --> 06:53:58,478
in say the past 30 days, organizations

12216
06:53:56,638 --> 06:54:00,718
can reduce a huge amount of risk in

12217
06:53:58,478 --> 06:54:02,280
users accessing malicious sites and also

12218
06:54:00,718 --> 06:54:04,320
cut down on fishing attacks

12219
06:54:02,280 --> 06:54:05,600
significantly. And it's pretty rare that

12220
06:54:04,320 --> 06:54:07,440
there will be a legitimate business

12221
06:54:05,600 --> 06:54:08,878
purpose to interact with a mailbox

12222
06:54:07,440 --> 06:54:10,718
attached to a domain that was only

12223
06:54:08,878 --> 06:54:12,558
registered in the past month. But for

12224
06:54:10,718 --> 06:54:14,160
these rare cases, well, exclusions and

12225
06:54:12,558 --> 06:54:15,920
exceptions can easily be made and

12226
06:54:14,160 --> 06:54:17,680
documented. And like with most

12227
06:54:15,920 --> 06:54:19,360
strategies we've mentioned so far,

12228
06:54:17,680 --> 06:54:20,958
various email security appliances and

12229
06:54:19,360 --> 06:54:22,878
tools are available to implement this

12230
06:54:20,958 --> 06:54:24,798
kind of enrichment capability that can

12231
06:54:22,878 --> 06:54:26,718
perform these domain reputation and age

12232
06:54:24,798 --> 06:54:27,478
checks for us to dynamically filter out

12233
06:54:26,718 --> 06:54:29,840
the

12234
06:54:27,478 --> 06:54:31,760
noise. And so we also have things like

12235
06:54:29,840 --> 06:54:33,520
attachment filtering and attachment

12236
06:54:31,760 --> 06:54:35,280
filtering plays a crucial role in

12237
06:54:33,520 --> 06:54:36,638
mitigating fishing attacks that leverage

12238
06:54:35,280 --> 06:54:38,798
of course malware or malicious

12239
06:54:36,638 --> 06:54:40,080
attachments. And so in the previous

12240
06:54:38,798 --> 06:54:41,840
lesson, we talked about some of the

12241
06:54:40,080 --> 06:54:43,840
methods that we have available to us,

12242
06:54:41,840 --> 06:54:47,120
such as reactively blocking hashes of

12243
06:54:43,840 --> 06:54:48,320
known malware or file names. However, we

12244
06:54:47,120 --> 06:54:50,160
should also think about how we can

12245
06:54:48,320 --> 06:54:52,718
proactively block malicious attachments

12246
06:54:50,160 --> 06:54:54,718
from a wider context. For example, what

12247
06:54:52,718 --> 06:54:56,240
types of files or file extensions will

12248
06:54:54,718 --> 06:54:58,798
our employees typically need to send

12249
06:54:56,240 --> 06:55:00,558
over email? Well, most likely it'll be

12250
06:54:58,798 --> 06:55:03,120
things like PDF documents or Word

12251
06:55:00,558 --> 06:55:05,280
documents, so doc or doc X or Excel

12252
06:55:03,120 --> 06:55:07,360
spreadsheets or sometimes image files

12253
06:55:05,280 --> 06:55:09,200
and maybe zip files. And of course the

12254
06:55:07,360 --> 06:55:11,360
list can go on. But on the other hand,

12255
06:55:09,200 --> 06:55:13,200
what types of files or file extensions

12256
06:55:11,360 --> 06:55:14,958
will they most definitely not need to

12257
06:55:13,200 --> 06:55:17,520
send? And so we can think about things

12258
06:55:14,958 --> 06:55:19,440
like executables or VBS, so Visual Basic

12259
06:55:17,520 --> 06:55:22,958
scripts or any PowerShell scripts like

12260
06:55:19,440 --> 06:55:24,718
PS1s or ISO files or batch files or ISO

12261
06:55:22,958 --> 06:55:26,958
files. You know, the list of course goes

12262
06:55:24,718 --> 06:55:29,040
on. Attackers can also trick people into

12263
06:55:26,958 --> 06:55:30,638
opening things like HTML or HTM

12264
06:55:29,040 --> 06:55:33,120
documents or even running JavaScript

12265
06:55:30,638 --> 06:55:34,638
with.js documents. And to be honest,

12266
06:55:33,120 --> 06:55:36,638
it's typically better to implement an

12267
06:55:34,638 --> 06:55:38,638
allow list strategy for specific file

12268
06:55:36,638 --> 06:55:40,878
types rather than a deny list because

12269
06:55:38,638 --> 06:55:42,160
the allow list will be much shorter. And

12270
06:55:40,878 --> 06:55:43,840
so there's going to be many different

12271
06:55:42,160 --> 06:55:45,600
strategies and opinions on the matter.

12272
06:55:43,840 --> 06:55:47,240
So it's best you do your own research if

12273
06:55:45,600 --> 06:55:49,920
you're implementing this kind of

12274
06:55:47,240 --> 06:55:51,840
thing. So just as a quick example at

12275
06:55:49,920 --> 06:55:55,080
attachment filtering, well, we can go to

12276
06:55:51,840 --> 06:55:57,280
our mailflow section and create a new

12277
06:55:55,080 --> 06:55:59,120
rule. And from here, I'm going to go to

12278
06:55:57,280 --> 06:56:01,840
more options. And I'm simply going to

12279
06:55:59,120 --> 06:56:03,680
title this file extension filter. And

12280
06:56:01,840 --> 06:56:06,400
for our condition, I'm just going to go

12281
06:56:03,680 --> 06:56:09,040
under any attachment and choose file

12282
06:56:06,400 --> 06:56:10,400
extension includes these words. And with

12283
06:56:09,040 --> 06:56:12,638
this window here, we can start to

12284
06:56:10,400 --> 06:56:13,878
specify specific file extensions that we

12285
06:56:12,638 --> 06:56:17,600
want to

12286
06:56:13,878 --> 06:56:19,798
exclude. For example, any executables or

12287
06:56:17,600 --> 06:56:24,320
Visual Basic scripts or PowerShell

12288
06:56:19,798 --> 06:56:25,760
scripts, any ISO files or batch files.

12289
06:56:24,320 --> 06:56:27,280
And so you can see how we can start

12290
06:56:25,760 --> 06:56:29,680
filling up this rule with either

12291
06:56:27,280 --> 06:56:31,520
suspicious or non-used file extensions

12292
06:56:29,680 --> 06:56:33,280
to lower our attack surface and

12293
06:56:31,520 --> 06:56:35,240
proactively prevent malware from making

12294
06:56:33,280 --> 06:56:37,200
its way into our users

12295
06:56:35,240 --> 06:56:38,200
inboxes. And then of course we can

12296
06:56:37,200 --> 06:56:41,400
select the

12297
06:56:38,200 --> 06:56:44,280
action. In this case I'll just block the

12298
06:56:41,400 --> 06:56:46,638
message. We can hit

12299
06:56:44,280 --> 06:56:49,040
save. And we also have attachment

12300
06:56:46,638 --> 06:56:50,638
sandboxing. So, some of our security

12301
06:56:49,040 --> 06:56:52,320
solutions might be able to actually

12302
06:56:50,638 --> 06:56:54,080
execute suspicious emails in a

12303
06:56:52,320 --> 06:56:55,360
controlled environment automatically.

12304
06:56:54,080 --> 06:56:57,680
You know, we talked about how to do this

12305
06:56:55,360 --> 06:56:59,600
ourselves using some various tools, but

12306
06:56:57,680 --> 06:57:01,440
in some cases, we can deploy sandboxing

12307
06:56:59,600 --> 06:57:03,120
solutions that can automatically analyze

12308
06:57:01,440 --> 06:57:05,200
attachments in a secure environment for

12309
06:57:03,120 --> 06:57:07,120
us. And let's not forget about email

12310
06:57:05,200 --> 06:57:09,760
authentication methods. And so,

12311
06:57:07,120 --> 06:57:12,240
enforcing things like SPF or DKIM or

12312
06:57:09,760 --> 06:57:14,400
Demar, well, these can all help verify

12313
06:57:12,240 --> 06:57:16,878
the legitimacy of incoming emails and

12314
06:57:14,400 --> 06:57:17,920
detect spoofed or forged messages. And

12315
06:57:16,878 --> 06:57:19,520
so, of course, in the email

12316
06:57:17,920 --> 06:57:21,440
authentication lesson, we talked about

12317
06:57:19,520 --> 06:57:22,878
why these technologies are important and

12318
06:57:21,440 --> 06:57:25,040
how they can be useful in catching

12319
06:57:22,878 --> 06:57:27,200
spoofing attempts. And so, wherever it's

12320
06:57:25,040 --> 06:57:28,718
possible and feasible, organizations

12321
06:57:27,200 --> 06:57:30,558
should configure these authentication

12322
06:57:28,718 --> 06:57:32,320
protocols to reject emails that fail

12323
06:57:30,558 --> 06:57:34,240
authentication checks, which of course

12324
06:57:32,320 --> 06:57:36,400
will reduce the likelihood of successful

12325
06:57:34,240 --> 06:57:37,680
fishing attacks. And of course, there

12326
06:57:36,400 --> 06:57:39,280
will always be push back on this

12327
06:57:37,680 --> 06:57:41,040
strategy because it can result in false

12328
06:57:39,280 --> 06:57:42,958
positives. But there are also ways and

12329
06:57:41,040 --> 06:57:45,040
best practices around this. For example,

12330
06:57:42,958 --> 06:57:46,638
when implementing demark for instance,

12331
06:57:45,040 --> 06:57:48,478
it's often recommended to start with

12332
06:57:46,638 --> 06:57:50,958
just a monitor policy, right? So, if we

12333
06:57:48,478 --> 06:57:52,798
think of the P equals none and we begin

12334
06:57:50,958 --> 06:57:54,798
monitoring before we start quarantining

12335
06:57:52,798 --> 06:57:56,798
or rejecting email. And so, this allows

12336
06:57:54,798 --> 06:57:58,558
the organization to gather data on email

12337
06:57:56,798 --> 06:58:00,478
sources and authentication issues

12338
06:57:58,558 --> 06:58:03,200
without immediately going into affecting

12339
06:58:00,478 --> 06:58:04,958
email delivery. And so, lastly here we

12340
06:58:03,200 --> 06:58:06,478
can talk about user awareness training.

12341
06:58:04,958 --> 06:58:08,000
And of course, we talked about user

12342
06:58:06,478 --> 06:58:09,840
education and awareness training in the

12343
06:58:08,000 --> 06:58:11,520
previous lesson with the strategy of

12344
06:58:09,840 --> 06:58:12,958
assigning remedial awareness training to

12345
06:58:11,520 --> 06:58:14,958
employees who have fallen victim to a

12346
06:58:12,958 --> 06:58:16,718
fish. However, we can also look at

12347
06:58:14,958 --> 06:58:18,638
awareness training from a proactive side

12348
06:58:16,718 --> 06:58:20,558
as well. For example, it's pretty common

12349
06:58:18,638 --> 06:58:22,718
for organizations to invest in a fishing

12350
06:58:20,558 --> 06:58:24,400
awareness tool like Novaore or Boson

12351
06:58:22,718 --> 06:58:26,478
Security or Huntress Sat and many

12352
06:58:24,400 --> 06:58:28,240
others. And these solutions are often

12353
06:58:26,478 --> 06:58:30,160
configured to automatically assign and

12354
06:58:28,240 --> 06:58:32,320
deploy security awareness training to

12355
06:58:30,160 --> 06:58:34,160
employees or specific departments. And

12356
06:58:32,320 --> 06:58:35,920
it can be done annually or maybe every 6

12357
06:58:34,160 --> 06:58:37,600
months to help build that consistent

12358
06:58:35,920 --> 06:58:39,120
culture of awareness and reduce the

12359
06:58:37,600 --> 06:58:40,958
likelihood of social engineering and

12360
06:58:39,120 --> 06:58:42,638
fishing attacks. And this training is

12361
06:58:40,958 --> 06:58:44,240
often in the form of short videos or

12362
06:58:42,638 --> 06:58:45,680
presentations. And it can be paired with

12363
06:58:44,240 --> 06:58:47,680
things like quizzes or activities to

12364
06:58:45,680 --> 06:58:49,040
track employee progress and completion

12365
06:58:47,680 --> 06:58:51,120
which can also help for compliance

12366
06:58:49,040 --> 06:58:53,040
purposes as well. Additionally, these

12367
06:58:51,120 --> 06:58:54,718
solutions can also provide the option of

12368
06:58:53,040 --> 06:58:56,638
simulating fishing attacks within the

12369
06:58:54,718 --> 06:58:58,878
organization to gauge how susceptible

12370
06:58:56,638 --> 06:59:00,478
their organization is to these attacks.

12371
06:58:58,878 --> 06:59:02,080
And so these simulations can help

12372
06:59:00,478 --> 06:59:03,920
identify which employees are more prone

12373
06:59:02,080 --> 06:59:05,120
to falling for fishing attempts and also

12374
06:59:03,920 --> 06:59:06,958
highlight areas where additional

12375
06:59:05,120 --> 06:59:08,878
training might be necessary. And these

12376
06:59:06,958 --> 06:59:10,958
simulated attacks are designed to mimic

12377
06:59:08,878 --> 06:59:12,400
real world scenarios. And so it often

12378
06:59:10,958 --> 06:59:14,320
includes things like of course email

12379
06:59:12,400 --> 06:59:16,638
fishing but also fishing and smishing

12380
06:59:14,320 --> 06:59:18,638
techniques as well. And so by conducting

12381
06:59:16,638 --> 06:59:20,240
regular fishing simulations while us as

12382
06:59:18,638 --> 06:59:22,080
a security team can assess the

12383
06:59:20,240 --> 06:59:23,600
effectiveness of our training program.

12384
06:59:22,080 --> 06:59:25,040
We can also measure how well employees

12385
06:59:23,600 --> 06:59:27,040
can recognize and respond to fishing

12386
06:59:25,040 --> 06:59:29,080
attempts. And we can also provide

12387
06:59:27,040 --> 06:59:31,440
targeted training to those who need it

12388
06:59:29,080 --> 06:59:33,040
most. And lastly, it's important to

12389
06:59:31,440 --> 06:59:35,040
implement methods for employees to

12390
06:59:33,040 --> 06:59:36,958
easily report suspicious activities to

12391
06:59:35,040 --> 06:59:38,478
the security team. And of course, this

12392
06:59:36,958 --> 06:59:40,160
can be done through various means or

12393
06:59:38,478 --> 06:59:41,920
technical controls to ensure that there

12394
06:59:40,160 --> 06:59:44,000
is a streamlined and efficient reporting

12395
06:59:41,920 --> 06:59:45,600
process. For example, it's common to

12396
06:59:44,000 --> 06:59:47,600
integrate a report fishing button

12397
06:59:45,600 --> 06:59:49,440
directly into email clients that allows

12398
06:59:47,600 --> 06:59:51,520
employees to quickly flag suspicious

12399
06:59:49,440 --> 06:59:53,440
emails with minimal effort. And like

12400
06:59:51,520 --> 06:59:55,280
with marking external email, well, more

12401
06:59:53,440 --> 06:59:57,200
and more email clients and email service

12402
06:59:55,280 --> 06:59:59,040
providers are integrating more native

12403
06:59:57,200 --> 07:00:01,040
functionality to offer this feature as

12404
06:59:59,040 --> 07:00:02,878
well. And these fishing reports can

12405
07:00:01,040 --> 07:00:04,478
often be sent directly to the sock for

12406
07:00:02,878 --> 07:00:05,840
analysts to be alerted and then

12407
07:00:04,478 --> 07:00:08,000
investigate the emails to determine

12408
07:00:05,840 --> 07:00:09,440
their legitimacy. However, I'll mention

12409
07:00:08,000 --> 07:00:11,600
that reporting should not just be

12410
07:00:09,440 --> 07:00:13,200
limited to email-based threats. And so

12411
07:00:11,600 --> 07:00:14,798
organizations need to extend these

12412
07:00:13,200 --> 07:00:16,798
reporting mechanisms to cover other

12413
07:00:14,798 --> 07:00:18,798
types of social engineering attacks like

12414
07:00:16,798 --> 07:00:20,400
smishing or vishing or just essentially

12415
07:00:18,798 --> 07:00:22,718
any kind of security incident that might

12416
07:00:20,400 --> 07:00:24,240
be going on. And so there needs to be a

12417
07:00:22,718 --> 07:00:26,240
clear and defined process for employees

12418
07:00:24,240 --> 07:00:27,760
to report any suspicious activity that

12419
07:00:26,240 --> 07:00:29,600
they encounter in their job regardless

12420
07:00:27,760 --> 07:00:30,878
of the medium. And these reporting

12421
07:00:29,600 --> 07:00:33,520
methods need to be clear and

12422
07:00:30,878 --> 07:00:35,600
userfriendly and accessible or else they

12423
07:00:33,520 --> 07:00:37,120
won't be used. And so this is not an

12424
07:00:35,600 --> 07:00:38,878
exhaustive list, but hopefully it gives

12425
07:00:37,120 --> 07:00:40,240
you some ideas on some of the proactive

12426
07:00:38,878 --> 07:00:43,600
fishing defense measures that

12427
07:00:40,240 --> 07:00:43,600
organizations implement in the

12428
07:00:43,638 --> 07:00:47,920
field. As I've mentioned all throughout

12429
07:00:45,920 --> 07:00:49,760
this section, accurate and thorough

12430
07:00:47,920 --> 07:00:51,760
documentation is going to be the most

12431
07:00:49,760 --> 07:00:54,478
important part in your investigation and

12432
07:00:51,760 --> 07:00:56,400
response to fishing emails. And so

12433
07:00:54,478 --> 07:00:58,400
strong documentation of course ensures

12434
07:00:56,400 --> 07:01:00,240
that all actions are tracked and

12435
07:00:58,400 --> 07:01:02,080
justifies any response actions you've

12436
07:01:00,240 --> 07:01:04,558
taken. It provides a reference for

12437
07:01:02,080 --> 07:01:06,000
future incidents and ultimately it aids

12438
07:01:04,558 --> 07:01:08,478
in the continuous improvement of the

12439
07:01:06,000 --> 07:01:09,600
sock processes. However, we want to make

12440
07:01:08,478 --> 07:01:11,840
sure that when we're writing our

12441
07:01:09,600 --> 07:01:13,760
documentation and updating our tickets,

12442
07:01:11,840 --> 07:01:16,320
well, we're keeping our notes clear and

12443
07:01:13,760 --> 07:01:17,840
relevant and concise. And many

12444
07:01:16,320 --> 07:01:19,360
organizations will have their own

12445
07:01:17,840 --> 07:01:21,440
templates and possibly even some

12446
07:01:19,360 --> 07:01:23,040
automated functions to assist in having

12447
07:01:21,440 --> 07:01:25,600
you write concise and consistent

12448
07:01:23,040 --> 07:01:27,280
documentation within tickets. So, the

12449
07:01:25,600 --> 07:01:28,798
exact method you go about this will

12450
07:01:27,280 --> 07:01:31,280
definitely be something you pick up on

12451
07:01:28,798 --> 07:01:33,120
the job. However, to prepare you, we can

12452
07:01:31,280 --> 07:01:35,120
keep things at a high level and keep it

12453
07:01:33,120 --> 07:01:37,440
more general to make sure you know what

12454
07:01:35,120 --> 07:01:39,120
is important to include. So, just know

12455
07:01:37,440 --> 07:01:41,040
that what we'll cover here is just a

12456
07:01:39,120 --> 07:01:43,600
starting point. You can definitely grow

12457
07:01:41,040 --> 07:01:44,958
and expand on this as you'd like. And

12458
07:01:43,600 --> 07:01:46,798
essentially, we can return to the

12459
07:01:44,958 --> 07:01:48,600
methodology that we outlined earlier in

12460
07:01:46,798 --> 07:01:50,958
the section to guide us through our

12461
07:01:48,600 --> 07:01:52,638
documentation. And so as we investigate

12462
07:01:50,958 --> 07:01:54,958
an email message either through its

12463
07:01:52,638 --> 07:01:58,000
headers or body content or URLs we

12464
07:01:54,958 --> 07:01:59,680
identify or attachments well we will of

12465
07:01:58,000 --> 07:02:01,878
course collect a number of artifacts in

12466
07:01:59,680 --> 07:02:03,680
the forms of IoC's or indicators of

12467
07:02:01,878 --> 07:02:05,840
compromise. And we can think of

12468
07:02:03,680 --> 07:02:07,520
indicators of compromise as any artifact

12469
07:02:05,840 --> 07:02:09,280
that we observe that will most likely

12470
07:02:07,520 --> 07:02:11,080
help us with attributing and linking an

12471
07:02:09,280 --> 07:02:13,360
attack in this case from a fishing

12472
07:02:11,080 --> 07:02:15,360
email. And so we're definitely going to

12473
07:02:13,360 --> 07:02:18,160
want to document these IoC's as we find

12474
07:02:15,360 --> 07:02:19,760
them to fill out a report. And after

12475
07:02:18,160 --> 07:02:21,360
identifying all these artifacts, we of

12476
07:02:19,760 --> 07:02:23,120
course want to analyze them and obtain

12477
07:02:21,360 --> 07:02:25,760
evidence that will support our eventual

12478
07:02:23,120 --> 07:02:27,440
verdict and conclusion. And after our

12479
07:02:25,760 --> 07:02:29,120
analysis has been completed, we need to

12480
07:02:27,440 --> 07:02:31,120
of course give that verdict and document

12481
07:02:29,120 --> 07:02:33,600
any defensive actions that we've taken

12482
07:02:31,120 --> 07:02:36,000
or need to take in order to resolve the

12483
07:02:33,600 --> 07:02:38,478
incident. So to start off, let's head to

12484
07:02:36,000 --> 07:02:40,638
the fishing analysis folder and then go

12485
07:02:38,478 --> 07:02:43,920
into tools and finally the report

12486
07:02:40,638 --> 07:02:45,840
directory. And let's open up sample 1.l.

12487
07:02:43,920 --> 07:02:47,520
And we'll use this email as our example

12488
07:02:45,840 --> 07:02:49,920
as we walk through the documentation

12489
07:02:47,520 --> 07:02:52,360
process. And while we open the email,

12490
07:02:49,920 --> 07:02:55,440
I'm going to open up the report

12491
07:02:52,360 --> 07:02:57,360
template.txt file in Sublime Text. This

12492
07:02:55,440 --> 07:02:59,360
is a sample generic document that I put

12493
07:02:57,360 --> 07:03:00,958
together that we can use to guide us

12494
07:02:59,360 --> 07:03:02,558
through the analysis and make sure that

12495
07:03:00,958 --> 07:03:05,200
we document everything typically

12496
07:03:02,558 --> 07:03:06,958
required as we work through an alert.

12497
07:03:05,200 --> 07:03:08,878
And feel free to save this template for

12498
07:03:06,958 --> 07:03:10,878
your own use. It'll also be included for

12499
07:03:08,878 --> 07:03:12,478
you under this video as well and it will

12500
07:03:10,878 --> 07:03:13,600
come in handy during the challenges that

12501
07:03:12,478 --> 07:03:15,760
are coming up at the end of this

12502
07:03:13,600 --> 07:03:17,520
section. And so you can see that this

12503
07:03:15,760 --> 07:03:19,200
template is divided into several

12504
07:03:17,520 --> 07:03:21,520
sections that will help us

12505
07:03:19,200 --> 07:03:23,920
systematically analyze the email and any

12506
07:03:21,520 --> 07:03:25,920
associated artifacts. And so starting

12507
07:03:23,920 --> 07:03:27,440
off we have this header section where of

12508
07:03:25,920 --> 07:03:29,280
course we want to document some of the

12509
07:03:27,440 --> 07:03:31,280
most important headers that will be used

12510
07:03:29,280 --> 07:03:32,878
in our analysis later on like the

12511
07:03:31,280 --> 07:03:35,600
timestamp or subject and different

12512
07:03:32,878 --> 07:03:37,680
things like sender IP. We also of course

12513
07:03:35,600 --> 07:03:39,478
have a section for URLs and attachments

12514
07:03:37,680 --> 07:03:42,000
that are involved in the

12515
07:03:39,478 --> 07:03:43,600
email. Next, we have a section for a

12516
07:03:42,000 --> 07:03:45,760
description and this is where we can put

12517
07:03:43,600 --> 07:03:47,760
in a short description of what we find

12518
07:03:45,760 --> 07:03:49,600
in the body content of the email. For

12519
07:03:47,760 --> 07:03:51,520
example, what social engineering tactics

12520
07:03:49,600 --> 07:03:54,320
have we identified or what is the email

12521
07:03:51,520 --> 07:03:56,080
actually asking us to do. We also want

12522
07:03:54,320 --> 07:03:58,000
to ensure that we provide detailed notes

12523
07:03:56,080 --> 07:04:00,638
on all of the analysis actions that we

12524
07:03:58,000 --> 07:04:02,718
performed such as the sender or URL and

12525
07:04:00,638 --> 07:04:04,558
attachment reputation checks. This will

12526
07:04:02,718 --> 07:04:06,798
be the section that supports our verdict

12527
07:04:04,558 --> 07:04:08,478
from a technical and evidence level and

12528
07:04:06,798 --> 07:04:10,958
should include screenshots and tool

12529
07:04:08,478 --> 07:04:12,478
outputs as needed. Under the verdict

12530
07:04:10,958 --> 07:04:14,400
section, well, this is where we

12531
07:04:12,478 --> 07:04:16,400
summarize our analysis and determine if

12532
07:04:14,400 --> 07:04:19,440
the email was in fact malicious or safe

12533
07:04:16,400 --> 07:04:21,280
to action. And speaking of actions, we

12534
07:04:19,440 --> 07:04:23,440
have the defense action section where we

12535
07:04:21,280 --> 07:04:25,920
need to outline what response actions we

12536
07:04:23,440 --> 07:04:28,240
or the sock need to take both from a

12537
07:04:25,920 --> 07:04:30,240
reactive and proactive angle. For

12538
07:04:28,240 --> 07:04:32,878
example, do we need to reactively block

12539
07:04:30,240 --> 07:04:34,718
a specific sender or URL? Do we need to

12540
07:04:32,878 --> 07:04:37,280
perform a deeper incident response on

12541
07:04:34,718 --> 07:04:38,638
any affected users or hosts? Of course,

12542
07:04:37,280 --> 07:04:40,080
there are so many variables here and

12543
07:04:38,638 --> 07:04:41,920
they should all be documented in the

12544
07:04:40,080 --> 07:04:44,000
report. And keep in mind that as I

12545
07:04:41,920 --> 07:04:45,200
mentioned before, using screenshots is

12546
07:04:44,000 --> 07:04:47,120
best practice when it comes to

12547
07:04:45,200 --> 07:04:49,840
documenting tool outputs and findings

12548
07:04:47,120 --> 07:04:51,760
from our various analyses such as who is

12549
07:04:49,840 --> 07:04:53,360
lookup results or email authentication

12550
07:04:51,760 --> 07:04:55,760
checks or virus total and hybrid

12551
07:04:53,360 --> 07:04:57,440
analysis reports. However, in this case,

12552
07:04:55,760 --> 07:04:59,120
since I'm just using Sublime Text to

12553
07:04:57,440 --> 07:05:00,798
demonstrate, well, I'll skip embedding

12554
07:04:59,120 --> 07:05:02,638
screenshots. But your ticketing system

12555
07:05:00,798 --> 07:05:04,760
will always have the capacity to accept

12556
07:05:02,638 --> 07:05:07,120
and upload screenshots to the ticket

12557
07:05:04,760 --> 07:05:08,958
itself. So, to keep the focus on

12558
07:05:07,120 --> 07:05:10,718
reporting and documentation rather than

12559
07:05:08,958 --> 07:05:12,240
analysis, which we've already covered,

12560
07:05:10,718 --> 07:05:14,000
I'll quickly go through this email and

12561
07:05:12,240 --> 07:05:16,240
note what I would document as I analyze

12562
07:05:14,000 --> 07:05:17,840
it. So, first, let's start off with the

12563
07:05:16,240 --> 07:05:19,840
description, which we can gather by

12564
07:05:17,840 --> 07:05:22,160
taking a look at the email itself in our

12565
07:05:19,840 --> 07:05:24,478
client. We can see that it's claiming to

12566
07:05:22,160 --> 07:05:26,400
be from Amazon Prime support and is

12567
07:05:24,478 --> 07:05:28,080
asking us to verify our account which

12568
07:05:26,400 --> 07:05:30,160
has been placed on hold due to a

12569
07:05:28,080 --> 07:05:32,240
suspicious login. It looks like there

12570
07:05:30,160 --> 07:05:34,478
are some hints of urgency as our account

12571
07:05:32,240 --> 07:05:36,558
will be suspended by a specific date if

12572
07:05:34,478 --> 07:05:38,000
we don't verify our account before then.

12573
07:05:36,558 --> 07:05:39,920
And obviously this email is a little

12574
07:05:38,000 --> 07:05:42,240
outdated. It's just an example for this

12575
07:05:39,920 --> 07:05:44,000
practice section. Well, let's document

12576
07:05:42,240 --> 07:05:45,520
this information in our report

12577
07:05:44,000 --> 07:05:48,478
specifically under the description

12578
07:05:45,520 --> 07:05:50,320
field. And so in this description field

12579
07:05:48,478 --> 07:05:52,080
here, again, I just want to provide a

12580
07:05:50,320 --> 07:05:53,760
brief description about what we just

12581
07:05:52,080 --> 07:05:55,680
talked about. So what is the email

12582
07:05:53,760 --> 07:05:57,680
asking us to do? What is the context

12583
07:05:55,680 --> 07:06:00,000
around the email? Are there any specific

12584
07:05:57,680 --> 07:06:02,000
call to actions that we can identify? Or

12585
07:06:00,000 --> 07:06:03,680
are there any specific indicators of any

12586
07:06:02,000 --> 07:06:05,760
social engineering techniques that we've

12587
07:06:03,680 --> 07:06:06,920
talked about earlier, like urgency or

12588
07:06:05,760 --> 07:06:09,040
trust or

12589
07:06:06,920 --> 07:06:10,798
intimidation? Well, we should note these

12590
07:06:09,040 --> 07:06:12,558
here so we can better understand the

12591
07:06:10,798 --> 07:06:14,878
content and the context of the email

12592
07:06:12,558 --> 07:06:16,718
message itself.

12593
07:06:14,878 --> 07:06:18,478
And so with that out of the way, let's

12594
07:06:16,718 --> 07:06:20,320
start filling in useful headers that we

12595
07:06:18,478 --> 07:06:22,878
want to be sure to document.

12596
07:06:20,320 --> 07:06:24,878
Fortunately, the eioc.py script that I

12597
07:06:22,878 --> 07:06:28,280
showcased earlier can gather a lot of

12598
07:06:24,878 --> 07:06:31,040
this information quite quickly for

12599
07:06:28,280 --> 07:06:34,160
us. And so I'll just run the script here

12600
07:06:31,040 --> 07:06:35,760
and provide the sample email file. And

12601
07:06:34,160 --> 07:06:37,840
you can immediately see we've extracted

12602
07:06:35,760 --> 07:06:39,520
a number of useful headers which matches

12603
07:06:37,840 --> 07:06:42,320
up quite nicely with our template

12604
07:06:39,520 --> 07:06:44,200
document. And so I'll just start copying

12605
07:06:42,320 --> 07:06:46,638
these headers over to our template

12606
07:06:44,200 --> 07:06:48,478
document. And since there's no reply to

12607
07:06:46,638 --> 07:06:51,320
header in the original email, well, I'll

12608
07:06:48,478 --> 07:06:53,600
just take that out from our template for

12609
07:06:51,320 --> 07:06:55,920
now. We also need to figure out the

12610
07:06:53,600 --> 07:06:57,840
resolve host. And if you recall, we can

12611
07:06:55,920 --> 07:06:59,760
do that using the domain tools website

12612
07:06:57,840 --> 07:07:01,240
or any website that allows us to do a

12613
07:06:59,760 --> 07:07:03,440
reverse IP

12614
07:07:01,240 --> 07:07:05,760
lookup. And so I'm just going to paste

12615
07:07:03,440 --> 07:07:08,958
in the IP address we identified here and

12616
07:07:05,760 --> 07:07:10,558
click search.

12617
07:07:08,958 --> 07:07:12,798
And you can see that we've extracted the

12618
07:07:10,558 --> 07:07:14,958
resolve host or the reverse DNS lookup

12619
07:07:12,798 --> 07:07:17,920
of that IP address which points to a

12620
07:07:14,958 --> 07:07:21,160
google.com domain. And so I'll just

12621
07:07:17,920 --> 07:07:23,840
paste that in here to fill out our

12622
07:07:21,160 --> 07:07:25,600
headers. And next, in terms of any email

12623
07:07:23,840 --> 07:07:28,080
authentication checks, it looks like

12624
07:07:25,600 --> 07:07:30,240
this email was lacking any SPF or DKIM

12625
07:07:28,080 --> 07:07:32,320
information. However, we did note that

12626
07:07:30,240 --> 07:07:34,320
the resolved host or the reverse DNS for

12627
07:07:32,320 --> 07:07:36,718
the original setting email server was a

12628
07:07:34,320 --> 07:07:38,558
Google address, which is a bit odd from

12629
07:07:36,718 --> 07:07:39,840
an email claiming to be from Amazon

12630
07:07:38,558 --> 07:07:42,478
since they typically have their own

12631
07:07:39,840 --> 07:07:44,878
email infrastructure. Additionally, the

12632
07:07:42,478 --> 07:07:47,600
return path domain that SPF would object

12633
07:07:44,878 --> 07:07:49,040
ends in OVH, which is an odd top level

12634
07:07:47,600 --> 07:07:51,120
domain because that means it's

12635
07:07:49,040 --> 07:07:52,558
affiliated with OVH cloud, which is a

12636
07:07:51,120 --> 07:07:54,520
cloud company that offers virtual

12637
07:07:52,558 --> 07:07:56,400
private servers and other dedicated web

12638
07:07:54,520 --> 07:07:58,240
services. And so, I'll just make a

12639
07:07:56,400 --> 07:07:59,840
mental note of that for now. And we

12640
07:07:58,240 --> 07:08:02,360
don't have any attachments to go off of

12641
07:07:59,840 --> 07:08:04,798
on this email. So, let's get into URL

12642
07:08:02,360 --> 07:08:07,120
analysis. And you can see we have quite

12643
07:08:04,798 --> 07:08:08,878
a number of URLs in this email file.

12644
07:08:07,120 --> 07:08:10,638
Mostly, it looks like it's linking a lot

12645
07:08:08,878 --> 07:08:12,718
of external resources like fonts and

12646
07:08:10,638 --> 07:08:14,558
images. However, what I'm really looking

12647
07:08:12,718 --> 07:08:17,360
for is the link that we can identify

12648
07:08:14,558 --> 07:08:19,200
when we hover over the button here. And

12649
07:08:17,360 --> 07:08:21,520
I can see the domain in the URL begins

12650
07:08:19,200 --> 07:08:21,520
with

12651
07:08:21,638 --> 07:08:27,120
cabinet. And so, I can return to our

12652
07:08:24,080 --> 07:08:29,120
output from eioc.py pi and simply pipe

12653
07:08:27,120 --> 07:08:31,600
it to the grip command where I can do a

12654
07:08:29,120 --> 07:08:33,360
search for the word cabinet. And once I

12655
07:08:31,600 --> 07:08:35,200
do that, we can identify the domain in

12656
07:08:33,360 --> 07:08:37,840
question, which I'll just copy so we can

12657
07:08:35,200 --> 07:08:39,718
do a lookup. So, I'm just going to take

12658
07:08:37,840 --> 07:08:42,160
this domain and paste it into

12659
07:08:39,718 --> 07:08:44,760
urlcan.io. And I just need to refang it

12660
07:08:42,160 --> 07:08:47,200
here so URL scan can analyze it

12661
07:08:44,760 --> 07:08:48,958
correctly. And once our scan finishes,

12662
07:08:47,200 --> 07:08:51,600
we can see it has been identified with

12663
07:08:48,958 --> 07:08:53,280
potentially malicious activity.

12664
07:08:51,600 --> 07:08:55,200
And so I just want to make sure I note

12665
07:08:53,280 --> 07:08:57,840
this URL and paste it into our template

12666
07:08:55,200 --> 07:09:00,840
or our report into defang format because

12667
07:08:57,840 --> 07:09:03,360
it's definitely something useful to

12668
07:09:00,840 --> 07:09:05,520
us. And I also want to make sure that I

12669
07:09:03,360 --> 07:09:06,798
take a screenshot of the URL scan output

12670
07:09:05,520 --> 07:09:08,240
because this is going to become very

12671
07:09:06,798 --> 07:09:09,080
useful for us when it comes to making

12672
07:09:08,240 --> 07:09:11,280
our

12673
07:09:09,080 --> 07:09:13,360
verdict. When we view the screenshot

12674
07:09:11,280 --> 07:09:14,798
from URL scan, well, it definitely looks

12675
07:09:13,360 --> 07:09:18,478
like some sort of credential capture

12676
07:09:14,798 --> 07:09:20,320
page which is impersonating Swiss Pass.

12677
07:09:18,478 --> 07:09:22,400
It also appears to have redirected us

12678
07:09:20,320 --> 07:09:24,400
from our original URL to this host

12679
07:09:22,400 --> 07:09:26,920
domain as identified from the submitted

12680
07:09:24,400 --> 07:09:28,958
URL versus the effective

12681
07:09:26,920 --> 07:09:30,320
URL. To make sure we get a second

12682
07:09:28,958 --> 07:09:34,040
opinion here, I'm going to go over to

12683
07:09:30,320 --> 07:09:36,478
Virus Total and also paste in the same

12684
07:09:34,040 --> 07:09:38,400
URL. And once our scan is complete,

12685
07:09:36,478 --> 07:09:40,718
well, we can identify that seven out of

12686
07:09:38,400 --> 07:09:43,360
94 security vendors flag this URL as

12687
07:09:40,718 --> 07:09:44,718
malicious due to fishing.

12688
07:09:43,360 --> 07:09:46,478
And so I of course want to get a

12689
07:09:44,718 --> 07:09:48,400
screenshot of the virus total output as

12690
07:09:46,478 --> 07:09:50,160
well because this is once again more

12691
07:09:48,400 --> 07:09:51,718
supporting evidence that this URL is

12692
07:09:50,160 --> 07:09:53,920
indeed

12693
07:09:51,718 --> 07:09:56,558
malicious. And so let's start to fill

12694
07:09:53,920 --> 07:09:59,440
out the analysis section of our report.

12695
07:09:56,558 --> 07:10:01,360
So let's start with sender analysis. And

12696
07:09:59,440 --> 07:10:03,520
as we identified, although claiming to

12697
07:10:01,360 --> 07:10:05,120
be from Amazon Prime, the from address

12698
07:10:03,520 --> 07:10:07,040
in the header clearly indicates a

12699
07:10:05,120 --> 07:10:08,400
mailbox originating from an unrelated

12700
07:10:07,040 --> 07:10:10,000
domain.

12701
07:10:08,400 --> 07:10:11,680
Additionally, the return path and

12702
07:10:10,000 --> 07:10:13,920
received headers indicate that this

12703
07:10:11,680 --> 07:10:16,160
email originated from a google.com mail

12704
07:10:13,920 --> 07:10:18,160
server and it also utilized OVH cloud

12705
07:10:16,160 --> 07:10:20,200
hosting, neither of which are typically

12706
07:10:18,160 --> 07:10:23,280
affiliated with

12707
07:10:20,200 --> 07:10:25,120
Amazon. And so on to URL analysis. Well,

12708
07:10:23,280 --> 07:10:27,360
after performing our URL reputation

12709
07:10:25,120 --> 07:10:29,120
checks using URL scan and virus total,

12710
07:10:27,360 --> 07:10:30,638
well, the URL within the call to action

12711
07:10:29,120 --> 07:10:32,478
button of the email was found to be

12712
07:10:30,638 --> 07:10:34,478
malicious as it redirects to a fishing

12713
07:10:32,478 --> 07:10:36,000
website. Additionally, it appears to be

12714
07:10:34,478 --> 07:10:38,638
hosting a credential capture page which

12715
07:10:36,000 --> 07:10:40,240
we identified through a URL scan. And

12716
07:10:38,638 --> 07:10:42,160
due to the nature of these pages, we can

12717
07:10:40,240 --> 07:10:43,718
infer that when submitted, it will log

12718
07:10:42,160 --> 07:10:45,920
and steal the credentials of any

12719
07:10:43,718 --> 07:10:47,520
victims. And so with all of this in

12720
07:10:45,920 --> 07:10:49,120
mind, when it comes to our verdict,

12721
07:10:47,520 --> 07:10:50,958
well, due to the original sender being

12722
07:10:49,120 --> 07:10:52,558
unaffiliated with Amazon, well, this

12723
07:10:50,958 --> 07:10:55,440
email is a clear impersonation and

12724
07:10:52,558 --> 07:10:57,280
spoofing attempt. And secondly, after

12725
07:10:55,440 --> 07:10:59,040
analyzing the URL contained in the call

12726
07:10:57,280 --> 07:11:01,680
to action, well, it was flagged by

12727
07:10:59,040 --> 07:11:03,040
multiple vendors as malicious. And of

12728
07:11:01,680 --> 07:11:04,478
course, we want to be sure that we

12729
07:11:03,040 --> 07:11:06,558
include any screenshots here that we

12730
07:11:04,478 --> 07:11:08,080
took previously. In this case, since I'm

12731
07:11:06,558 --> 07:11:10,520
just doing a short example here through

12732
07:11:08,080 --> 07:11:12,718
Sublime Text, I can't actually insert

12733
07:11:10,520 --> 07:11:14,400
screenshots. And so to wrap up our

12734
07:11:12,718 --> 07:11:16,638
report, well, let's think about defense

12735
07:11:14,400 --> 07:11:18,680
actions. So, what actions do we need to

12736
07:11:16,638 --> 07:11:20,798
take in order to respond to this fishing

12737
07:11:18,680 --> 07:11:22,798
incident? Well, first of all, let's say

12738
07:11:20,798 --> 07:11:24,798
we've done our scope analysis already.

12739
07:11:22,798 --> 07:11:26,718
And so after performing a message trace,

12740
07:11:24,798 --> 07:11:28,638
we identified that no other users within

12741
07:11:26,718 --> 07:11:30,840
the organization received an email from

12742
07:11:28,638 --> 07:11:33,040
this sender or with a similar subject

12743
07:11:30,840 --> 07:11:35,200
line. And so because of that, we can

12744
07:11:33,040 --> 07:11:37,200
move on to reactively blocking the email

12745
07:11:35,200 --> 07:11:38,878
sender. And so to prevent the malicious

12746
07:11:37,200 --> 07:11:40,958
sender from sending any other emails to

12747
07:11:38,878 --> 07:11:43,600
the organization, well, we can identify

12748
07:11:40,958 --> 07:11:45,440
the email address in the from header.

12749
07:11:43,600 --> 07:11:47,040
And so we can be sure to and document

12750
07:11:45,440 --> 07:11:49,840
that we blocked that email address at

12751
07:11:47,040 --> 07:11:51,760
the email gateway level.

12752
07:11:49,840 --> 07:11:53,320
And let's also think about the URL that

12753
07:11:51,760 --> 07:11:55,280
we

12754
07:11:53,320 --> 07:11:57,040
identified. Well, we want to be sure

12755
07:11:55,280 --> 07:11:58,958
that we block and also document that

12756
07:11:57,040 --> 07:12:00,920
we've blocked any incoming emails that

12757
07:11:58,958 --> 07:12:03,360
contain that

12758
07:12:00,920 --> 07:12:05,360
URL. Well, we also need to ensure that

12759
07:12:03,360 --> 07:12:07,920
no employees or users can access that

12760
07:12:05,360 --> 07:12:09,680
malicious URL either. So, we want to

12761
07:12:07,920 --> 07:12:11,760
document that we block the domain at the

12762
07:12:09,680 --> 07:12:12,520
EDR level as well as the web proxy level

12763
07:12:11,760 --> 07:12:14,798
if

12764
07:12:12,520 --> 07:12:16,400
applicable. And so, this was just a

12765
07:12:14,798 --> 07:12:18,240
quick run through to show how we can

12766
07:12:16,400 --> 07:12:19,760
start filling out this template. And

12767
07:12:18,240 --> 07:12:21,920
again, just use this as a starting

12768
07:12:19,760 --> 07:12:23,760
point. When we move on to the challenges

12769
07:12:21,920 --> 07:12:25,360
in the following lessons, well, you can

12770
07:12:23,760 --> 07:12:27,600
use this template to guide you during

12771
07:12:25,360 --> 07:12:29,520
your analysis. And speaking of those

12772
07:12:27,600 --> 07:12:31,520
challenges, well, I think now is time

12773
07:12:29,520 --> 07:12:33,040
that we finally get into them. So, join

12774
07:12:31,520 --> 07:12:35,400
me in the next lesson where we take a

12775
07:12:33,040 --> 07:12:37,760
look at the first

12776
07:12:35,400 --> 07:12:39,360
challenge. Now, I definitely encourage

12777
07:12:37,760 --> 07:12:41,360
you to continue practicing your fishing

12778
07:12:39,360 --> 07:12:43,120
analysis skills. And so to cap this

12779
07:12:41,360 --> 07:12:44,878
section off, I wanted to give you three

12780
07:12:43,120 --> 07:12:47,200
resources that you can use to find

12781
07:12:44,878 --> 07:12:49,600
additional email samples and URLs and

12782
07:12:47,200 --> 07:12:51,798
malicious files to investigate. And I'll

12783
07:12:49,600 --> 07:12:54,240
have links to all these resources down

12784
07:12:51,798 --> 07:12:56,040
below. And so the first one here is

12785
07:12:54,240 --> 07:12:58,160
going to be this GitHub

12786
07:12:56,040 --> 07:13:00,080
repository. And this fishing pot

12787
07:12:58,160 --> 07:13:02,000
repository here, well, is a collection

12788
07:13:00,080 --> 07:13:04,320
of real fishing samples that were

12789
07:13:02,000 --> 07:13:06,160
collected with Honeypot email accounts.

12790
07:13:04,320 --> 07:13:08,080
And so the purpose of this repository is

12791
07:13:06,160 --> 07:13:09,920
to provide a reliable database for

12792
07:13:08,080 --> 07:13:11,920
researchers and students and developers

12793
07:13:09,920 --> 07:13:14,160
to practice their analysis or to develop

12794
07:13:11,920 --> 07:13:15,840
detection solutions. And so you can use

12795
07:13:14,160 --> 07:13:18,080
this resource to look through and

12796
07:13:15,840 --> 07:13:19,760
download real fishing emails and perform

12797
07:13:18,080 --> 07:13:22,000
things like header and content analysis

12798
07:13:19,760 --> 07:13:23,760
to test your skills. So if we just open

12799
07:13:22,000 --> 07:13:25,840
up the email directory here, well, we

12800
07:13:23,760 --> 07:13:27,840
can see thousands of sample emails for

12801
07:13:25,840 --> 07:13:29,200
us to look through. And if you want to

12802
07:13:27,840 --> 07:13:31,520
download one, well, you can just click

12803
07:13:29,200 --> 07:13:33,920
on it. And once you have it open, click

12804
07:13:31,520 --> 07:13:36,638
on the raw view here. And we can just w

12805
07:13:33,920 --> 07:13:39,680
get this URL. So I'll just open up a

12806
07:13:36,638 --> 07:13:41,280
terminal and w get that URL. And now we

12807
07:13:39,680 --> 07:13:43,120
have that sample email for us to look

12808
07:13:41,280 --> 07:13:44,558
through. So we can open this in Sublime

12809
07:13:43,120 --> 07:13:46,360
Text, for example, and start going

12810
07:13:44,558 --> 07:13:48,400
through this email and looking at the

12811
07:13:46,360 --> 07:13:49,760
headers. And if you really wanted to,

12812
07:13:48,400 --> 07:13:51,600
well, you could clone the entire

12813
07:13:49,760 --> 07:13:54,400
repository and get access to every

12814
07:13:51,600 --> 07:13:55,760
single sample email. And next in the

12815
07:13:54,400 --> 07:13:57,680
list, what we've of course looked at

12816
07:13:55,760 --> 07:14:00,040
fish tank before, which is a collection

12817
07:13:57,680 --> 07:14:02,080
and database of live suspected fishing

12818
07:14:00,040 --> 07:14:03,600
URLs. And as you've seen me do

12819
07:14:02,080 --> 07:14:05,760
throughout the course, well, we can use

12820
07:14:03,600 --> 07:14:08,000
fish tank to perform URL inspection and

12821
07:14:05,760 --> 07:14:10,558
analysis and test out our tools like URL

12822
07:14:08,000 --> 07:14:13,280
scan and URL to PNG as well as other web

12823
07:14:10,558 --> 07:14:15,040
artifact investigation methods. So we

12824
07:14:13,280 --> 07:14:17,080
can go through any of these URLs here

12825
07:14:15,040 --> 07:14:19,360
and just click on its

12826
07:14:17,080 --> 07:14:21,120
ID. And once we have the submission

12827
07:14:19,360 --> 07:14:22,798
open, well, we can see the full URL

12828
07:14:21,120 --> 07:14:24,558
here. And in this case, it looks like

12829
07:14:22,798 --> 07:14:26,240
it's using some sort of URL shortening

12830
07:14:24,558 --> 07:14:27,760
service. So this is a perfect

12831
07:14:26,240 --> 07:14:30,280
opportunity for you to use your skills

12832
07:14:27,760 --> 07:14:32,798
to unshorten this URL and investigate it

12833
07:14:30,280 --> 07:14:35,718
properly. So fishtank is a fantastic

12834
07:14:32,798 --> 07:14:37,760
resource if we want to look at URL

12835
07:14:35,718 --> 07:14:39,840
analysis. And lastly here we have

12836
07:14:37,760 --> 07:14:41,360
malware bazaar which is a database of

12837
07:14:39,840 --> 07:14:43,440
malware provided by the threat

12838
07:14:41,360 --> 07:14:44,840
intelligence community. So if we click

12839
07:14:43,440 --> 07:14:47,040
on the database

12840
07:14:44,840 --> 07:14:48,718
here, well we can start to browse

12841
07:14:47,040 --> 07:14:50,958
through and see some of the malware that

12842
07:14:48,718 --> 07:14:53,440
has been submitted. In this case, we can

12843
07:14:50,958 --> 07:14:55,200
see various signatures and tags along

12844
07:14:53,440 --> 07:14:57,760
with the file type telling us more about

12845
07:14:55,200 --> 07:14:58,958
what the actual malware is doing. In

12846
07:14:57,760 --> 07:15:01,680
this case, it looks like we have some

12847
07:14:58,958 --> 07:15:03,400
macro enabled Excel documents. We also

12848
07:15:01,680 --> 07:15:05,200
have doc files and

12849
07:15:03,400 --> 07:15:07,280
executables. And there's actually a

12850
07:15:05,200 --> 07:15:09,200
search syntax that we can use. So, if we

12851
07:15:07,280 --> 07:15:11,120
click on search syntax here, well, we

12852
07:15:09,200 --> 07:15:12,958
can look for specific things. For

12853
07:15:11,120 --> 07:15:15,520
example, if we were looking for PDFs to

12854
07:15:12,958 --> 07:15:17,280
analyze, well, we can type in file type

12855
07:15:15,520 --> 07:15:19,600
with a colon here and then just put in

12856
07:15:17,280 --> 07:15:21,120
PDF.

12857
07:15:19,600 --> 07:15:22,718
And once that searches, well, you can

12858
07:15:21,120 --> 07:15:23,958
see now we're just pulling back PDF

12859
07:15:22,718 --> 07:15:26,000
files for us to

12860
07:15:23,958 --> 07:15:27,760
investigate. And if we find a file that

12861
07:15:26,000 --> 07:15:30,120
we want to analyze, we can click on this

12862
07:15:27,760 --> 07:15:32,160
link here of the SHA 256

12863
07:15:30,120 --> 07:15:34,718
hash. And this will bring us to the

12864
07:15:32,160 --> 07:15:36,000
specific entry for that malware. And you

12865
07:15:34,718 --> 07:15:37,840
can see we get a number of different

12866
07:15:36,000 --> 07:15:39,760
information here. For example, the

12867
07:15:37,840 --> 07:15:42,000
original file name along with all of the

12868
07:15:39,760 --> 07:15:44,160
hashes. And if we wanted to download the

12869
07:15:42,000 --> 07:15:45,440
sample, we can click download sample

12870
07:15:44,160 --> 07:15:47,120
here.

12871
07:15:45,440 --> 07:15:49,000
It's going to download in a password

12872
07:15:47,120 --> 07:15:51,200
protected zip file which is quite

12873
07:15:49,000 --> 07:15:52,920
standard and also what is quite standard

12874
07:15:51,200 --> 07:15:55,520
is the password will be

12875
07:15:52,920 --> 07:15:58,958
infected. So if we click download here

12876
07:15:55,520 --> 07:15:58,958
well we're going to download that zip

12877
07:15:59,000 --> 07:16:03,680
file and we can just extract this file

12878
07:16:01,440 --> 07:16:05,240
by clicking extract here and put in the

12879
07:16:03,680 --> 07:16:07,200
password

12880
07:16:05,240 --> 07:16:09,120
infected. And you can see that was

12881
07:16:07,200 --> 07:16:10,878
successfully extracted into the PDF

12882
07:16:09,120 --> 07:16:12,400
file.

12883
07:16:10,878 --> 07:16:14,638
And from here we can start following our

12884
07:16:12,400 --> 07:16:16,080
file attachment analysis methodology and

12885
07:16:14,638 --> 07:16:18,958
do things like submitting the hash to

12886
07:16:16,080 --> 07:16:20,718
virus total or doing dynamic analysis or

12887
07:16:18,958 --> 07:16:22,558
in the case of a macro enabled word file

12888
07:16:20,718 --> 07:16:24,360
or excel file. Well, we can start doing

12889
07:16:22,558 --> 07:16:26,718
some more static analysis if we wanted

12890
07:16:24,360 --> 07:16:28,478
to. And so I hope you find these three

12891
07:16:26,718 --> 07:16:31,200
resources useful if you want to get some

12892
07:16:28,478 --> 07:16:31,200
additional practice

12893
07:16:31,400 --> 07:16:35,840
in. All righty everyone. Well, I

12894
07:16:34,160 --> 07:16:38,478
certainly hope you enjoyed that deep

12895
07:16:35,840 --> 07:16:40,080
dive into well fishing analysis and all

12896
07:16:38,478 --> 07:16:42,240
the different uh investigative

12897
07:16:40,080 --> 07:16:44,478
methodologies and tools and procedures

12898
07:16:42,240 --> 07:16:46,320
and techniques that we have as analysts

12899
07:16:44,478 --> 07:16:48,958
to diagnose potentially suspicious

12900
07:16:46,320 --> 07:16:50,638
emails, right? Um, and I will say we did

12901
07:16:48,958 --> 07:16:52,160
have to cut a few lessons here and there

12902
07:16:50,638 --> 07:16:53,840
just so we could fit that in along with

12903
07:16:52,160 --> 07:16:56,320
some of the other domains that we want

12904
07:16:53,840 --> 07:16:58,478
to cover in this long video. But again,

12905
07:16:56,320 --> 07:17:00,478
this is my calling here to encourage you

12906
07:16:58,478 --> 07:17:02,240
uh to check out the full sock 101 course

12907
07:17:00,478 --> 07:17:04,080
if you are enjoying this content so far.

12908
07:17:02,240 --> 07:17:05,920
Again, this whole fishing analysis

12909
07:17:04,080 --> 07:17:08,160
section is just one domain out of I

12910
07:17:05,920 --> 07:17:10,240
think eight or perhaps nine. And we're

12911
07:17:08,160 --> 07:17:12,558
always adding uh to the course as well.

12912
07:17:10,240 --> 07:17:14,400
And so um I would encourage you to check

12913
07:17:12,558 --> 07:17:16,080
uh check out the TCM Academy. We will

12914
07:17:14,400 --> 07:17:18,080
have the link down in the description so

12915
07:17:16,080 --> 07:17:20,080
you can get started in the full sock 101

12916
07:17:18,080 --> 07:17:22,400
course. Uh but for now, let's uh sort of

12917
07:17:20,080 --> 07:17:24,558
move our way over into network security

12918
07:17:22,400 --> 07:17:26,478
and network traffic analysis. uh which

12919
07:17:24,558 --> 07:17:29,040
is another extremely important

12920
07:17:26,478 --> 07:17:31,600
foundational aspect for um not just sock

12921
07:17:29,040 --> 07:17:33,440
analysts but um sort of anyone in IT or

12922
07:17:31,600 --> 07:17:35,680
cyber security alike but we're going to

12923
07:17:33,440 --> 07:17:38,558
learn how we can use tools like TCP dump

12924
07:17:35,680 --> 07:17:40,878
and wireark uh to capture and analyze uh

12925
07:17:38,558 --> 07:17:43,200
network traffic in order to find evil or

12926
07:17:40,878 --> 07:17:45,280
find anomalies or malware going over

12927
07:17:43,200 --> 07:17:47,280
that sort of network layer uh and also

12928
07:17:45,280 --> 07:17:49,760
how we can set up rules and detect using

12929
07:17:47,280 --> 07:17:52,160
things like snort uh or siraata or

12930
07:17:49,760 --> 07:17:53,840
different IDs and IPS systems. So uh the

12931
07:17:52,160 --> 07:17:55,600
network security or network traffic

12932
07:17:53,840 --> 07:17:57,440
analysis section is another big one,

12933
07:17:55,600 --> 07:17:58,958
another very important one uh and one

12934
07:17:57,440 --> 07:18:01,080
that I'm really excited for you to jump

12935
07:17:58,958 --> 07:18:03,520
into. So I will see you over

12936
07:18:01,080 --> 07:18:05,760
there. Welcome to the network security

12937
07:18:03,520 --> 07:18:07,840
and network traffic analysis section of

12938
07:18:05,760 --> 07:18:10,000
this course. And I'm really excited to

12939
07:18:07,840 --> 07:18:12,000
cover this topic because these concepts

12940
07:18:10,000 --> 07:18:14,000
are so important and foundational to

12941
07:18:12,000 --> 07:18:16,240
understanding how interconnected systems

12942
07:18:14,000 --> 07:18:18,080
operate and how so much of business

12943
07:18:16,240 --> 07:18:20,638
operations these days relies on being

12944
07:18:18,080 --> 07:18:22,878
interconnected and networking securely.

12945
07:18:20,638 --> 07:18:25,200
And so as a sock analyst or even someone

12946
07:18:22,878 --> 07:18:27,120
just getting into security, well, you'll

12947
07:18:25,200 --> 07:18:29,040
quickly discover that networking is an

12948
07:18:27,120 --> 07:18:31,520
essential skill used throughout the sock

12949
07:18:29,040 --> 07:18:33,040
and within organizations as a whole. And

12950
07:18:31,520 --> 07:18:35,040
it's going to keep coming up time and

12951
07:18:33,040 --> 07:18:37,200
time again because so much of IT and

12952
07:18:35,040 --> 07:18:39,440
security operations are built from it

12953
07:18:37,200 --> 07:18:41,600
because at its core, networking is the

12954
07:18:39,440 --> 07:18:43,600
backbone that allows for devices and

12955
07:18:41,600 --> 07:18:46,000
systems and users to all communicate

12956
07:18:43,600 --> 07:18:48,160
with each other. And so virtually every

12957
07:18:46,000 --> 07:18:50,360
asset that we aim to protect, you know,

12958
07:18:48,160 --> 07:18:52,718
whether it's data or applications or

12959
07:18:50,360 --> 07:18:55,040
infrastructure, well, it all operates on

12960
07:18:52,718 --> 07:18:56,558
a network in some capacity. Like unless

12961
07:18:55,040 --> 07:18:58,240
we're talking about a nuclear power

12962
07:18:56,558 --> 07:18:59,760
plant's control system or a root

12963
07:18:58,240 --> 07:19:02,558
certificate authority that's completely

12964
07:18:59,760 --> 07:19:04,320
airgapped, well, essentially every asset

12965
07:19:02,558 --> 07:19:06,080
will most likely be connected to a

12966
07:19:04,320 --> 07:19:07,920
network in some form, whether it be

12967
07:19:06,080 --> 07:19:10,240
through an internal network or with the

12968
07:19:07,920 --> 07:19:11,760
wider internet. And so consequently, all

12969
07:19:10,240 --> 07:19:13,600
of the controls that we implement to

12970
07:19:11,760 --> 07:19:14,798
secure these assets, well, they will

12971
07:19:13,600 --> 07:19:17,600
also interact with the network

12972
07:19:14,798 --> 07:19:19,040
environment as well. And as such, this

12973
07:19:17,600 --> 07:19:20,920
is also where we're going to find and

12974
07:19:19,040 --> 07:19:23,360
come across many of our organization's

12975
07:19:20,920 --> 07:19:24,958
threats. For instance, a sock analyst

12976
07:19:23,360 --> 07:19:26,878
might need to occasionally investigate

12977
07:19:24,958 --> 07:19:29,360
in network related alerts that come from

12978
07:19:26,878 --> 07:19:30,958
things like our IDs or IPS. And these

12979
07:19:29,360 --> 07:19:32,638
alerts can indicate a wide variety of

12980
07:19:30,958 --> 07:19:34,718
things, right? Like unauthorized access

12981
07:19:32,638 --> 07:19:36,878
attempts or unusual traffic patterns or

12982
07:19:34,718 --> 07:19:38,160
recognized malware communication. And

12983
07:19:36,878 --> 07:19:39,520
back in the intro section of this

12984
07:19:38,160 --> 07:19:41,200
course, well, we looked at a sample

12985
07:19:39,520 --> 07:19:43,600
snort alert and we're going to get more

12986
07:19:41,200 --> 07:19:45,520
into snort. Of course, in this section,

12987
07:19:43,600 --> 07:19:47,280
in some cases, a sock analyst might need

12988
07:19:45,520 --> 07:19:49,520
to actually capture or analyze traffic

12989
07:19:47,280 --> 07:19:51,200
on a live endpoint to analyze it further

12990
07:19:49,520 --> 07:19:52,878
and look for malicious activity like

12991
07:19:51,200 --> 07:19:54,718
command and control communication or

12992
07:19:52,878 --> 07:19:56,718
drop malware or sensitive information

12993
07:19:54,718 --> 07:19:58,718
being extracted ultimately with the goal

12994
07:19:56,718 --> 07:20:01,440
of mitigating potential security threats

12995
07:19:58,718 --> 07:20:03,600
and analyzing IoC's like IP addresses or

12996
07:20:01,440 --> 07:20:05,200
domain names or other network and host

12997
07:20:03,600 --> 07:20:06,958
artifacts.

12998
07:20:05,200 --> 07:20:08,120
And so let's talk about our objectives

12999
07:20:06,958 --> 07:20:10,558
for this

13000
07:20:08,120 --> 07:20:12,520
domain. Well, first we of course want to

13001
07:20:10,558 --> 07:20:14,240
understand fundamental network security

13002
07:20:12,520 --> 07:20:15,600
principles. So we're going to look at

13003
07:20:14,240 --> 07:20:16,958
things like packets and frames and

13004
07:20:15,600 --> 07:20:18,320
various concepts that make up our

13005
07:20:16,958 --> 07:20:20,400
network stack and communication

13006
07:20:18,320 --> 07:20:23,120
channels. So we'll look at common ports

13007
07:20:20,400 --> 07:20:24,878
and protocols and services as well. And

13008
07:20:23,120 --> 07:20:26,798
so we want to explore network packets

13009
07:20:24,878 --> 07:20:28,320
and flows and security controls. And so

13010
07:20:26,798 --> 07:20:30,478
we'll deep dive into how data is

13011
07:20:28,320 --> 07:20:31,760
transmitted across networks and various

13012
07:20:30,478 --> 07:20:33,360
security controls that we can put in

13013
07:20:31,760 --> 07:20:35,200
place to protect it. And so we'll look

13014
07:20:33,360 --> 07:20:36,638
at protocols and headers and payloads

13015
07:20:35,200 --> 07:20:38,718
and different methods for analyzing

13016
07:20:36,638 --> 07:20:40,160
network statistics. And we also want to

13017
07:20:38,718 --> 07:20:41,920
develop some hands-on skills in

13018
07:20:40,160 --> 07:20:43,760
performing live packet captures using

13019
07:20:41,920 --> 07:20:45,040
various tools. And so we're going to

13020
07:20:43,760 --> 07:20:46,958
learn how to capture network traffic

13021
07:20:45,040 --> 07:20:48,320
using tools like wire sharkark and TCP

13022
07:20:46,958 --> 07:20:49,840
dump. And we'll understand the

13023
07:20:48,320 --> 07:20:51,760
importance of packet captures and how

13024
07:20:49,840 --> 07:20:53,520
things like pcaps will assist in our

13025
07:20:51,760 --> 07:20:55,760
identification and analysis of network

13026
07:20:53,520 --> 07:20:57,200
related security incidents. And of

13027
07:20:55,760 --> 07:20:58,798
course once we capture these packets

13028
07:20:57,200 --> 07:21:00,240
well we want to learn how to investigate

13029
07:20:58,798 --> 07:21:02,478
them and perform network traffic

13030
07:21:00,240 --> 07:21:03,760
analysis. And so we'll learn to

13031
07:21:02,478 --> 07:21:05,360
understand what's going on at the

13032
07:21:03,760 --> 07:21:07,200
communication level. We'll learn to

13033
07:21:05,360 --> 07:21:09,200
identify anomalies and intrusions and

13034
07:21:07,200 --> 07:21:10,558
other potential threats. Right? So we're

13035
07:21:09,200 --> 07:21:12,160
going to learn to examine the packet

13036
07:21:10,558 --> 07:21:14,160
content and identify patterns and

13037
07:21:12,160 --> 07:21:16,878
correlate data to understand the scope

13038
07:21:14,160 --> 07:21:18,240
of the captured traffic. And so a lot of

13039
07:21:16,878 --> 07:21:19,718
what we just talked about is focused

13040
07:21:18,240 --> 07:21:21,760
around network traffic

13041
07:21:19,718 --> 07:21:23,440
analysis. But we're also going to touch

13042
07:21:21,760 --> 07:21:25,840
on some network security monitoring

13043
07:21:23,440 --> 07:21:27,760
concepts as well. And so we're going to

13044
07:21:25,840 --> 07:21:30,080
learn to configure and manage intrusion

13045
07:21:27,760 --> 07:21:32,400
detection and prevention systems. Right?

13046
07:21:30,080 --> 07:21:34,240
We've mentioned IDS and IPS solutions so

13047
07:21:32,400 --> 07:21:36,240
much already and so it would be a crime

13048
07:21:34,240 --> 07:21:37,760
not to cover them in detail here and so

13049
07:21:36,240 --> 07:21:39,920
we'll look at tools like Snort and

13050
07:21:37,760 --> 07:21:41,760
Siraata and how we can actually deploy

13051
07:21:39,920 --> 07:21:44,000
these solutions to detect and mitigate

13052
07:21:41,760 --> 07:21:45,840
network threats in real time. And

13053
07:21:44,000 --> 07:21:47,600
similarly we'll learn to actually write

13054
07:21:45,840 --> 07:21:49,440
and implement network prevention and

13055
07:21:47,600 --> 07:21:51,040
detection rules. And so we'll look at

13056
07:21:49,440 --> 07:21:52,798
how we can configure the abovementioned

13057
07:21:51,040 --> 07:21:54,798
solutions to write things like custom

13058
07:21:52,798 --> 07:21:57,120
detection rules. So we'll look at rule

13059
07:21:54,798 --> 07:21:59,920
syntax and logic and best practices for

13060
07:21:57,120 --> 07:22:01,200
writing network monitoring rules. And so

13061
07:21:59,920 --> 07:22:03,360
that's going to be quite a bit of

13062
07:22:01,200 --> 07:22:04,958
exciting stuff to cover. And so with

13063
07:22:03,360 --> 07:22:07,878
that, I will see you in the next lesson

13064
07:22:04,958 --> 07:22:10,080
where we'll jump right into the fun

13065
07:22:07,878 --> 07:22:12,000
stuff. If we're going to be analyzing

13066
07:22:10,080 --> 07:22:13,680
how computers talk to each other, well,

13067
07:22:12,000 --> 07:22:15,600
we need to make sure we understand how

13068
07:22:13,680 --> 07:22:17,280
computers talk to each other and how

13069
07:22:15,600 --> 07:22:19,920
actual data and what we refer to as

13070
07:22:17,280 --> 07:22:21,520
packets traverse across networks. And

13071
07:22:19,920 --> 07:22:24,080
this is not going to be a network

13072
07:22:21,520 --> 07:22:26,080
fundamentals course, as this stuff can

13073
07:22:24,080 --> 07:22:28,320
easily turn into a 10-hour course alone

13074
07:22:26,080 --> 07:22:30,320
on networking, which I don't want to do.

13075
07:22:28,320 --> 07:22:32,478
We'll refresh on some basic networking

13076
07:22:30,320 --> 07:22:34,080
concepts, particularly as they relate to

13077
07:22:32,478 --> 07:22:35,760
the sock and incident response

13078
07:22:34,080 --> 07:22:37,280
activities, but I trust you to

13079
07:22:35,760 --> 07:22:39,280
understand the most foundational

13080
07:22:37,280 --> 07:22:40,878
concepts like how IP addresses work, how

13081
07:22:39,280 --> 07:22:44,240
they're assigned, and things like the

13082
07:22:40,878 --> 07:22:46,160
OSI or TCP IP model. But ironically,

13083
07:22:44,240 --> 07:22:48,400
speaking of the TCP IP model, well,

13084
07:22:46,160 --> 07:22:50,160
let's kind of start with that. Um, let's

13085
07:22:48,400 --> 07:22:51,600
talk about how different network layer

13086
07:22:50,160 --> 07:22:53,680
protocols work and how they work

13087
07:22:51,600 --> 07:22:55,920
together to encapsulate and transmit

13088
07:22:53,680 --> 07:22:57,680
data across networks. because later on

13089
07:22:55,920 --> 07:22:59,600
we're going to be looking at packets and

13090
07:22:57,680 --> 07:23:01,360
doing actual packet capture or pcap

13091
07:22:59,600 --> 07:23:02,958
analysis. And so I don't want to bore

13092
07:23:01,360 --> 07:23:04,478
you too much with the highle stuff, but

13093
07:23:02,958 --> 07:23:06,160
I do think it will be important and

13094
07:23:04,478 --> 07:23:08,080
beneficial to walk through a quick catch

13095
07:23:06,160 --> 07:23:09,760
up here before we dive in. And so let's

13096
07:23:08,080 --> 07:23:11,840
start with a protocol you're most likely

13097
07:23:09,760 --> 07:23:14,400
familiar with, the internet protocol or

13098
07:23:11,840 --> 07:23:16,558
IP. And the internet protocol is the

13099
07:23:14,400 --> 07:23:18,320
fundamental communication protocol that

13100
07:23:16,558 --> 07:23:20,240
facilitates the transmission of data

13101
07:23:18,320 --> 07:23:21,760
packets across networks. And so it's

13102
07:23:20,240 --> 07:23:23,600
kind of that backbone of the internet

13103
07:23:21,760 --> 07:23:25,400
and it's responsible for addressing and

13104
07:23:23,600 --> 07:23:27,360
routing packets from its source to

13105
07:23:25,400 --> 07:23:29,680
destination. And if we are thinking

13106
07:23:27,360 --> 07:23:31,600
about that OSI model or the open systems

13107
07:23:29,680 --> 07:23:34,000
interconnection model, well the internet

13108
07:23:31,600 --> 07:23:35,440
protocol falls into the network layer.

13109
07:23:34,000 --> 07:23:38,160
And at the heart of the internet

13110
07:23:35,440 --> 07:23:39,680
protocol is the concept of IP addresses.

13111
07:23:38,160 --> 07:23:41,440
And you're most likely pretty used to

13112
07:23:39,680 --> 07:23:42,718
seeing IP addresses now. In fact, we

13113
07:23:41,440 --> 07:23:45,120
looked at a number of them in the

13114
07:23:42,718 --> 07:23:47,120
previous section. But an IP address is a

13115
07:23:45,120 --> 07:23:49,280
unique numerical label assigned to each

13116
07:23:47,120 --> 07:23:50,680
device connected to a network that uses

13117
07:23:49,280 --> 07:23:52,478
the internet protocol for its

13118
07:23:50,680 --> 07:23:54,400
communication. And if we want to get

13119
07:23:52,478 --> 07:23:56,718
super technical, well, it's a 32-bit

13120
07:23:54,400 --> 07:23:58,320
binary number uh which is represented in

13121
07:23:56,718 --> 07:24:00,478
that human readable form, right? So we

13122
07:23:58,320 --> 07:24:03,080
have a series of four numbers separated

13123
07:24:00,478 --> 07:24:05,600
by periods. So like

13124
07:24:03,080 --> 07:24:07,360
192.168.0.1, right? And IP addresses

13125
07:24:05,600 --> 07:24:11,040
themselves can be categorized into the

13126
07:24:07,360 --> 07:24:13,440
two types, right? We have IPv4 and IPv6.

13127
07:24:11,040 --> 07:24:15,040
And IPv4 addresses are the traditional

13128
07:24:13,440 --> 07:24:17,280
format that you're used to seeing and

13129
07:24:15,040 --> 07:24:19,760
are still widely used today. But due to

13130
07:24:17,280 --> 07:24:21,280
the limited number of IPv4 addresses,

13131
07:24:19,760 --> 07:24:23,200
remember we think about that 32-bit

13132
07:24:21,280 --> 07:24:26,240
binary number, we sort of started to

13133
07:24:23,200 --> 07:24:28,558
make a transition to IPv6 to address the

13134
07:24:26,240 --> 07:24:30,160
exhaustion of IPv4 addresses and to sort

13135
07:24:28,558 --> 07:24:31,600
of futureproof the everexpanding

13136
07:24:30,160 --> 07:24:33,520
internet. But honestly, for the most

13137
07:24:31,600 --> 07:24:35,600
part, as it stands now, uh you're

13138
07:24:33,520 --> 07:24:37,760
primarily going to be dealing with IPv4

13139
07:24:35,600 --> 07:24:39,760
in the day-to-day still. And we can also

13140
07:24:37,760 --> 07:24:41,520
think about the concept of IP routing.

13141
07:24:39,760 --> 07:24:43,040
And this is the process of how data

13142
07:24:41,520 --> 07:24:45,280
packets are directed from their source

13143
07:24:43,040 --> 07:24:46,638
to destination across a network. And

13144
07:24:45,280 --> 07:24:48,400
routing is going to do things like

13145
07:24:46,638 --> 07:24:49,760
determining the most efficient path for

13146
07:24:48,400 --> 07:24:52,000
the packets to traverse through the

13147
07:24:49,760 --> 07:24:53,840
network. And so when a device sends a

13148
07:24:52,000 --> 07:24:55,360
packet to a destination outside of its

13149
07:24:53,840 --> 07:24:57,120
local network, well, it's going to be

13150
07:24:55,360 --> 07:24:59,040
forwarded to a router which is going to

13151
07:24:57,120 --> 07:25:00,798
examine the packet's destination IP

13152
07:24:59,040 --> 07:25:02,558
address and basically look into its

13153
07:25:00,798 --> 07:25:04,638
routing table to determine the next hop

13154
07:25:02,558 --> 07:25:06,240
along the path to the destination. And

13155
07:25:04,638 --> 07:25:07,760
that process is going to repeat and

13156
07:25:06,240 --> 07:25:09,680
continue until the packet finally

13157
07:25:07,760 --> 07:25:11,840
reaches its destination.

13158
07:25:09,680 --> 07:25:14,160
And so this kind of brings us to TCP or

13159
07:25:11,840 --> 07:25:15,680
the transmission control protocol. And

13160
07:25:14,160 --> 07:25:18,080
this is the other core communication

13161
07:25:15,680 --> 07:25:19,718
protocol within the TC IP suite. And it

13162
07:25:18,080 --> 07:25:21,680
kind of provides that reliable

13163
07:25:19,718 --> 07:25:23,840
connectionoriented communication between

13164
07:25:21,680 --> 07:25:26,000
devices over a network. And it operates

13165
07:25:23,840 --> 07:25:27,760
at the transport layer of that OSI model

13166
07:25:26,000 --> 07:25:29,840
and kind of sits on top of the internet

13167
07:25:27,760 --> 07:25:31,920
protocol layer. And so when we think

13168
07:25:29,840 --> 07:25:34,320
about the TCP protocol, well, the word I

13169
07:25:31,920 --> 07:25:37,120
want you to remember is reliable. And so

13170
07:25:34,320 --> 07:25:39,040
TCP establishes a reliable communication

13171
07:25:37,120 --> 07:25:40,718
channel between devices by using various

13172
07:25:39,040 --> 07:25:43,280
mechanisms like acknowledgement flags

13173
07:25:40,718 --> 07:25:45,920
and sequence numbers. And so when a

13174
07:25:43,280 --> 07:25:47,760
device sends data over a TCP connection,

13175
07:25:45,920 --> 07:25:49,760
well, the receiving device is going to

13176
07:25:47,760 --> 07:25:51,200
acknowledge the receipt of each packet

13177
07:25:49,760 --> 07:25:53,360
by sending back an acknowledgement

13178
07:25:51,200 --> 07:25:54,718
packet themselves. And if the sender

13179
07:25:53,360 --> 07:25:56,558
does not receive that acknowledgement

13180
07:25:54,718 --> 07:25:58,320
within a specified time frame, well,

13181
07:25:56,558 --> 07:26:00,320
it's going to retransmit the data packet

13182
07:25:58,320 --> 07:26:01,760
to ensure that it's delivered. And it

13183
07:26:00,320 --> 07:26:03,520
can do this because it assigns things

13184
07:26:01,760 --> 07:26:05,280
like sequence numbers to each packet and

13185
07:26:03,520 --> 07:26:07,040
allows the receiving device to reorder

13186
07:26:05,280 --> 07:26:09,280
and reassemble packets to the correct

13187
07:26:07,040 --> 07:26:10,798
sequence as needed. And we also think

13188
07:26:09,280 --> 07:26:12,958
about how it's described as this

13189
07:26:10,798 --> 07:26:14,400
connectionoriented protocol. And so it

13190
07:26:12,958 --> 07:26:15,920
employs this magic thing that we call

13191
07:26:14,400 --> 07:26:17,920
the three-way handshake that we'll cover

13192
07:26:15,920 --> 07:26:20,240
later to basically establish a

13193
07:26:17,920 --> 07:26:21,920
connection between devices. And it can

13194
07:26:20,240 --> 07:26:23,920
also implement things like flow control

13195
07:26:21,920 --> 07:26:25,520
and congestion avoidance mechanisms to

13196
07:26:23,920 --> 07:26:27,920
regulate the flow of data and prevent

13197
07:26:25,520 --> 07:26:29,280
network congestion. And we also have the

13198
07:26:27,920 --> 07:26:31,280
concept of multipplexing and

13199
07:26:29,280 --> 07:26:33,280
demultiplexing of data streams which

13200
07:26:31,280 --> 07:26:34,718
sounds pretty high level and complex but

13201
07:26:33,280 --> 07:26:36,398
basically you know we can think about

13202
07:26:34,718 --> 07:26:38,000
using port numbers to identify different

13203
07:26:36,398 --> 07:26:41,520
communication channels within a single

13204
07:26:38,000 --> 07:26:43,440
TCP connection right so each TCP segment

13205
07:26:41,520 --> 07:26:45,600
contains port numbers to both the source

13206
07:26:43,440 --> 07:26:47,360
and the destination devices which allows

13207
07:26:45,600 --> 07:26:49,840
for multiple concurrent connections to

13208
07:26:47,360 --> 07:26:52,080
coexist on the same network interface

13209
07:26:49,840 --> 07:26:54,320
and we'll touch on this a bit more later

13210
07:26:52,080 --> 07:26:56,718
and so lastly this brings us to UDP or

13211
07:26:54,320 --> 07:26:58,240
the user datagramgram protocol

13212
07:26:56,718 --> 07:27:00,398
And this is a connectionless

13213
07:26:58,240 --> 07:27:03,200
communication protocol, right? So unlike

13214
07:27:00,398 --> 07:27:05,160
with TCP, well, UDP does not provide any

13215
07:27:03,200 --> 07:27:07,200
reliability or sequencing of data

13216
07:27:05,160 --> 07:27:08,798
transmission. Instead, it can offer

13217
07:27:07,200 --> 07:27:10,398
things like a lightweight and best

13218
07:27:08,798 --> 07:27:12,080
effort delivery mechanism that's more

13219
07:27:10,398 --> 07:27:13,958
suitable for applications where speed

13220
07:27:12,080 --> 07:27:16,160
and simplicity are prioritized over

13221
07:27:13,958 --> 07:27:17,680
reliability. And so when we call it an

13222
07:27:16,160 --> 07:27:19,360
unreliable protocol, well, it kind of

13223
07:27:17,680 --> 07:27:20,958
carries a negative connotation. But

13224
07:27:19,360 --> 07:27:22,718
really, all it means is that there's no

13225
07:27:20,958 --> 07:27:24,718
guaranteed delivery or sequencing of the

13226
07:27:22,718 --> 07:27:26,160
datagramgrams themselves, right? So

13227
07:27:24,718 --> 07:27:28,320
there's no acknowledgement or sequence

13228
07:27:26,160 --> 07:27:30,320
numbers and so it's more susceptible to

13229
07:27:28,320 --> 07:27:32,160
packet loss or duplication or out of

13230
07:27:30,320 --> 07:27:33,920
order delivery. And while it kind of

13231
07:27:32,160 --> 07:27:35,440
seems like a drawback, well it it makes

13232
07:27:33,920 --> 07:27:37,920
up for itself with higher performance

13233
07:27:35,440 --> 07:27:39,600
and lower overhead compared to TCP. And

13234
07:27:37,920 --> 07:27:41,440
so we can think of very common use

13235
07:27:39,600 --> 07:27:43,120
cases, right? So voice over IP or

13236
07:27:41,440 --> 07:27:45,440
anything when we're streaming, right? So

13237
07:27:43,120 --> 07:27:47,600
streaming media like videos or audio or

13238
07:27:45,440 --> 07:27:48,958
online gaming, you know, any of these

13239
07:27:47,600 --> 07:27:50,798
scenarios where the real-time

13240
07:27:48,958 --> 07:27:52,000
communication and low latency is more

13241
07:27:50,798 --> 07:27:54,000
important than, you know, the

13242
07:27:52,000 --> 07:27:55,440
reliability of the connection. And so,

13243
07:27:54,000 --> 07:27:57,440
as we've covered at a high level what

13244
07:27:55,440 --> 07:27:59,040
each of these protocols do, well, let's

13245
07:27:57,440 --> 07:28:00,638
look at the logical makeup and the

13246
07:27:59,040 --> 07:28:02,398
standards behind these protocols

13247
07:28:00,638 --> 07:28:04,000
specifically through their headers. And

13248
07:28:02,398 --> 07:28:05,600
a protocol header is a structured

13249
07:28:04,000 --> 07:28:08,080
section at the beginning of each data

13250
07:28:05,600 --> 07:28:10,320
packet that contains various metadata

13251
07:28:08,080 --> 07:28:12,080
and control information that's necessary

13252
07:28:10,320 --> 07:28:14,478
for the transmission and interpretation

13253
07:28:12,080 --> 07:28:16,080
of the data being sent. And so, let's

13254
07:28:14,478 --> 07:28:19,120
start off by taking a look at the

13255
07:28:16,080 --> 07:28:20,558
typical IPv4 header. And as we start

13256
07:28:19,120 --> 07:28:22,240
going through this, well, you might be

13257
07:28:20,558 --> 07:28:24,240
thinking like, whoa, there's a lot of

13258
07:28:22,240 --> 07:28:27,280
sections here. Why is networking so

13259
07:28:24,240 --> 07:28:29,120
unnecessarily complicated? Well, let's

13260
07:28:27,280 --> 07:28:31,120
quickly go through some of these uh

13261
07:28:29,120 --> 07:28:33,360
sections to get a general idea of what

13262
07:28:31,120 --> 07:28:35,600
makes up this header. And so, we have

13263
07:28:33,360 --> 07:28:37,360
things like the version of the IP. We

13264
07:28:35,600 --> 07:28:39,280
have the header length and the type of

13265
07:28:37,360 --> 07:28:41,280
service, which is sometimes used for

13266
07:28:39,280 --> 07:28:43,360
quality of service parameters, but in in

13267
07:28:41,280 --> 07:28:45,360
most cases now, it's kind of just for

13268
07:28:43,360 --> 07:28:46,878
packet priority and handling. We also

13269
07:28:45,360 --> 07:28:48,478
have the total length, right? So,

13270
07:28:46,878 --> 07:28:50,320
including both the header and the data

13271
07:28:48,478 --> 07:28:51,760
that's appended to it. We have different

13272
07:28:50,320 --> 07:28:54,000
flags that can be used for controlling

13273
07:28:51,760 --> 07:28:55,520
or identifying fragments. We have the

13274
07:28:54,000 --> 07:28:57,360
time to live which kind of represents

13275
07:28:55,520 --> 07:28:59,040
the maximum number of hops or routers

13276
07:28:57,360 --> 07:29:00,878
that a packet can traverse before being

13277
07:28:59,040 --> 07:29:02,320
discarded. Right? And so there's a lot

13278
07:29:00,878 --> 07:29:04,478
here and I went through it kind of

13279
07:29:02,320 --> 07:29:05,920
quickly on purpose because yeah, this is

13280
07:29:04,478 --> 07:29:07,680
great and all right, but how does a

13281
07:29:05,920 --> 07:29:09,360
system actually know where to send a

13282
07:29:07,680 --> 07:29:11,000
packet or data? And how does the

13283
07:29:09,360 --> 07:29:13,440
receiver know where to send the replies

13284
07:29:11,000 --> 07:29:15,200
to? Well, there are two main pieces to

13285
07:29:13,440 --> 07:29:17,680
this header that we really only need to

13286
07:29:15,200 --> 07:29:19,200
focus on from a practicality standpoint.

13287
07:29:17,680 --> 07:29:20,878
Like to be honest, we can pretty much

13288
07:29:19,200 --> 07:29:22,160
abstract the majority of this graphic.

13289
07:29:20,878 --> 07:29:24,080
So you don't need to memorize this at

13290
07:29:22,160 --> 07:29:26,240
all. It's rarely going to come into play

13291
07:29:24,080 --> 07:29:28,478
in your day-to-day. So we can tune our

13292
07:29:26,240 --> 07:29:30,240
focus to these middle two headers.

13293
07:29:28,478 --> 07:29:32,000
Right? So we have the source address

13294
07:29:30,240 --> 07:29:34,080
which specifies the IP address of the

13295
07:29:32,000 --> 07:29:36,080
packet sender and of course the

13296
07:29:34,080 --> 07:29:37,680
destination address which specifies the

13297
07:29:36,080 --> 07:29:39,200
IP address on the packet's intended

13298
07:29:37,680 --> 07:29:41,120
recipient. Right? So we can think of

13299
07:29:39,200 --> 07:29:43,200
mailing an actual letter if if that's

13300
07:29:41,120 --> 07:29:45,440
even relevant anymore. So, you would jot

13301
07:29:43,200 --> 07:29:48,320
down the recipient or the destination of

13302
07:29:45,440 --> 07:29:49,840
your mail on the front of the envelope.

13303
07:29:48,320 --> 07:29:52,600
And you would also put a return address

13304
07:29:49,840 --> 07:29:55,200
or the source address to say who it's

13305
07:29:52,600 --> 07:29:56,798
from. And so with these two headers, the

13306
07:29:55,200 --> 07:29:59,440
sender and receiver are identified

13307
07:29:56,798 --> 07:30:01,360
within the packet itself. And our

13308
07:29:59,440 --> 07:30:03,440
appliances like routers will perform the

13309
07:30:01,360 --> 07:30:05,120
magic of examining these addresses to

13310
07:30:03,440 --> 07:30:07,760
determine the best path for the packet

13311
07:30:05,120 --> 07:30:09,600
to reach its destination. And this is

13312
07:30:07,760 --> 07:30:11,120
how the internet works, right? It it

13313
07:30:09,600 --> 07:30:12,878
doesn't work through domain names. We

13314
07:30:11,120 --> 07:30:14,478
use DNS to translate domain names that

13315
07:30:12,878 --> 07:30:17,120
are more friendly and things that we can

13316
07:30:14,478 --> 07:30:18,440
remember like google.com into an actual

13317
07:30:17,120 --> 07:30:20,558
internet protocol

13318
07:30:18,440 --> 07:30:22,320
address. So we can demonstrate this

13319
07:30:20,558 --> 07:30:24,840
really quickly, right? So let's say we

13320
07:30:22,320 --> 07:30:26,878
wanted to check the availability of

13321
07:30:24,840 --> 07:30:29,320
tcmssec.com. Well, we can use the ping

13322
07:30:26,878 --> 07:30:31,440
command and simply type in

13323
07:30:29,320 --> 07:30:33,600
tcmssec.com. And so if I run that and

13324
07:30:31,440 --> 07:30:36,798
immediately stop, well, we can see right

13325
07:30:33,600 --> 07:30:39,120
away that the tcms domain was resolved

13326
07:30:36,798 --> 07:30:41,440
into this number or this IP address,

13327
07:30:39,120 --> 07:30:44,478
right? So through DNS, this friendly

13328
07:30:41,440 --> 07:30:45,680
domain name was transformed into this IP

13329
07:30:44,478 --> 07:30:47,680
address that can then be used for

13330
07:30:45,680 --> 07:30:50,638
routing over the network layer using the

13331
07:30:47,680 --> 07:30:53,280
IP protocol. And if we just do an NS

13332
07:30:50,638 --> 07:30:55,280
lookup with the type of A, which is the

13333
07:30:53,280 --> 07:30:57,440
address record, and it's the type of DNS

13334
07:30:55,280 --> 07:31:00,160
record that is used to map a domain to

13335
07:30:57,440 --> 07:31:02,360
the corresponding IPv4 address, right?

13336
07:31:00,160 --> 07:31:04,798
And if we just put in TCM

13337
07:31:02,360 --> 07:31:06,638
sec.com, well, we can get the same IP

13338
07:31:04,798 --> 07:31:08,558
address here, right? So in simpler

13339
07:31:06,638 --> 07:31:11,040
terms, it translated the human readable

13340
07:31:08,558 --> 07:31:13,320
domain into a machine readable IP

13341
07:31:11,040 --> 07:31:15,680
address like

13342
07:31:13,320 --> 07:31:17,520
190.92.188.190. And yes, that's how DNS

13343
07:31:15,680 --> 07:31:19,440
works. And I'm sure I'm sure this isn't

13344
07:31:17,520 --> 07:31:21,600
the first time you're seeing this. And

13345
07:31:19,440 --> 07:31:23,520
so it's great that we know where to send

13346
07:31:21,600 --> 07:31:25,360
packets to and where we'll be receiving

13347
07:31:23,520 --> 07:31:27,200
packets from, but we didn't touch on

13348
07:31:25,360 --> 07:31:29,680
anything related to ports and protocols

13349
07:31:27,200 --> 07:31:31,680
with IP, right? And so let's return to

13350
07:31:29,680 --> 07:31:33,680
the TCP protocol again and take a look

13351
07:31:31,680 --> 07:31:35,760
at its header. And remember we have the

13352
07:31:33,680 --> 07:31:38,398
IP protocol and what can sit on top of

13353
07:31:35,760 --> 07:31:40,320
that is TCP and the IP header gives us

13354
07:31:38,398 --> 07:31:42,478
that highle indication of the direction

13355
07:31:40,320 --> 07:31:44,878
of travel right so it basically says go

13356
07:31:42,478 --> 07:31:47,200
to this destination IP address or this

13357
07:31:44,878 --> 07:31:48,958
packet came from this source IP address

13358
07:31:47,200 --> 07:31:51,120
and so when we get into a more session

13359
07:31:48,958 --> 07:31:52,240
layer protocol like TCP well we're

13360
07:31:51,120 --> 07:31:54,240
talking about things like making

13361
07:31:52,240 --> 07:31:55,520
reliable connections between parties and

13362
07:31:54,240 --> 07:31:57,120
doing things like network address

13363
07:31:55,520 --> 07:31:59,200
translation or having multiple

13364
07:31:57,120 --> 07:32:02,398
connections made on one system and so

13365
07:31:59,200 --> 07:32:04,638
obviously a big thing with TCP are ports

13366
07:32:02,398 --> 07:32:06,558
And you can see we have 16 bits

13367
07:32:04,638 --> 07:32:08,718
separated for the source port and 16

13368
07:32:06,558 --> 07:32:10,080
bits for the destination port. And

13369
07:32:08,718 --> 07:32:11,478
because of that, that's why we end up

13370
07:32:10,080 --> 07:32:14,240
with

13371
07:32:11,478 --> 07:32:15,920
65,535 available ports out there. And

13372
07:32:14,240 --> 07:32:18,558
that kind of brings us to the topic of

13373
07:32:15,920 --> 07:32:20,240
ephemeral or highle ports. Right? And so

13374
07:32:18,558 --> 07:32:21,920
on the server side, we typically have

13375
07:32:20,240 --> 07:32:23,600
some well-known and established or

13376
07:32:21,920 --> 07:32:26,160
standardized recommendations through

13377
07:32:23,600 --> 07:32:28,080
various RFC's that dictate which port

13378
07:32:26,160 --> 07:32:30,558
numbers should relate to which service,

13379
07:32:28,080 --> 07:32:34,160
right? So we can think of FTP on port 21

13380
07:32:30,558 --> 07:32:36,638
or HTTPS on port 443. Well, we also have

13381
07:32:34,160 --> 07:32:38,878
this concept of dynamic highle ports

13382
07:32:36,638 --> 07:32:40,878
that get assigned by operating systems

13383
07:32:38,878 --> 07:32:42,958
to facilitate the communication between

13384
07:32:40,878 --> 07:32:44,558
client and server. And so when a client

13385
07:32:42,958 --> 07:32:46,878
application initiates a connection

13386
07:32:44,558 --> 07:32:49,200
request to a server, it will typically

13387
07:32:46,878 --> 07:32:51,680
select a random highle port from a range

13388
07:32:49,200 --> 07:32:53,440
specified by the operating system. And

13389
07:32:51,680 --> 07:32:55,760
this is the port that will serve as the

13390
07:32:53,440 --> 07:32:57,760
source port for the connection. And so

13391
07:32:55,760 --> 07:32:59,360
when the server receives this packet,

13392
07:32:57,760 --> 07:33:01,040
well, the server has already allocated

13393
07:32:59,360 --> 07:33:02,958
its own well-known port known as the

13394
07:33:01,040 --> 07:33:04,478
destination port that corresponds to the

13395
07:33:02,958 --> 07:33:06,638
service that the server is providing

13396
07:33:04,478 --> 07:33:08,000
like port 80 for HTTP for example. And

13397
07:33:06,638 --> 07:33:10,080
the server will select the client's

13398
07:33:08,000 --> 07:33:12,558
highle port or the ephemeral port to be

13399
07:33:10,080 --> 07:33:14,638
the destination port in the response.

13400
07:33:12,558 --> 07:33:16,478
And so by using these ephemeral ports,

13401
07:33:14,638 --> 07:33:18,320
well, it's essential basically for

13402
07:33:16,478 --> 07:33:20,398
enabling multi-client server connections

13403
07:33:18,320 --> 07:33:22,958
simultaneously and ensuring that each

13404
07:33:20,398 --> 07:33:24,160
connection is distinct and identifiable,

13405
07:33:22,958 --> 07:33:26,878
right? So you can think about having

13406
07:33:24,160 --> 07:33:28,638
multiple browser tabs open. So each

13407
07:33:26,878 --> 07:33:31,280
connection to a different website is

13408
07:33:28,638 --> 07:33:32,798
using port 443 in most cases, but they

13409
07:33:31,280 --> 07:33:34,558
use different highle ports to

13410
07:33:32,798 --> 07:33:36,840
differentiate the communication. For

13411
07:33:34,558 --> 07:33:40,200
example, google.com might be using port

13412
07:33:36,840 --> 07:33:42,240
54321 and amazon.com might be using port

13413
07:33:40,200 --> 07:33:44,478
45535, right? It doesn't really matter.

13414
07:33:42,240 --> 07:33:46,080
They're highle random ports. And so

13415
07:33:44,478 --> 07:33:47,520
within the TCP header, right, we have

13416
07:33:46,080 --> 07:33:49,440
the source port and the destination

13417
07:33:47,520 --> 07:33:50,958
port. We also have something called the

13418
07:33:49,440 --> 07:33:52,878
sequence number. And this is a field

13419
07:33:50,958 --> 07:33:54,638
that's used to specify the sequence

13420
07:33:52,878 --> 07:33:56,878
number of the first datab in the

13421
07:33:54,638 --> 07:33:58,320
segments data. And it helps in ordering

13422
07:33:56,878 --> 07:34:00,638
and reassembling segments at the

13423
07:33:58,320 --> 07:34:02,080
receivers's end. And so it really comes

13424
07:34:00,638 --> 07:34:03,600
into play with this whole idea of

13425
07:34:02,080 --> 07:34:05,840
reliable and connectionoriented

13426
07:34:03,600 --> 07:34:07,920
delivery. And so when a TCP connection

13427
07:34:05,840 --> 07:34:09,280
is established, well, each bite of data

13428
07:34:07,920 --> 07:34:11,520
that's sent over the connection is

13429
07:34:09,280 --> 07:34:13,680
assigned a sequence number. And because

13430
07:34:11,520 --> 07:34:15,840
TCP guarantees the ordered delivery of

13431
07:34:13,680 --> 07:34:17,840
data, well, these sequence numbers allow

13432
07:34:15,840 --> 07:34:20,160
a receiver to reassemble the received

13433
07:34:17,840 --> 07:34:21,840
data in the correct order, right? So if

13434
07:34:20,160 --> 07:34:24,080
any segments arrive out of order, well,

13435
07:34:21,840 --> 07:34:26,160
TCP can use these sequence numbers to

13436
07:34:24,080 --> 07:34:28,558
rebuild and reorder them before

13437
07:34:26,160 --> 07:34:30,320
delivering the data to the application.

13438
07:34:28,558 --> 07:34:32,160
And we also have an acknowledgement

13439
07:34:30,320 --> 07:34:34,080
number. And so if the acknowledgement

13440
07:34:32,160 --> 07:34:35,920
flag is set, which we'll get into, well,

13441
07:34:34,080 --> 07:34:37,920
this field will contain the value of the

13442
07:34:35,920 --> 07:34:40,160
next sequence number that the sender of

13443
07:34:37,920 --> 07:34:42,000
the segment is expecting to receive. So

13444
07:34:40,160 --> 07:34:44,000
this is kind of how we can get in sync

13445
07:34:42,000 --> 07:34:46,240
between client and server. We also have

13446
07:34:44,000 --> 07:34:48,798
things like a data offset. We have some

13447
07:34:46,240 --> 07:34:51,360
reserved bits for future use. Um as well

13448
07:34:48,798 --> 07:34:53,120
as many different flags. And so there

13449
07:34:51,360 --> 07:34:54,680
are a number of flags, but the main ones

13450
07:34:53,120 --> 07:34:56,718
that we can focus on are like the

13451
07:34:54,680 --> 07:34:58,240
acknowledgement. And so when the

13452
07:34:56,718 --> 07:35:00,160
acknowledgement flag is set, well, it's

13453
07:34:58,240 --> 07:35:02,240
used to acknowledge the receipt of data.

13454
07:35:00,160 --> 07:35:03,680
And so every TCP segment after the

13455
07:35:02,240 --> 07:35:05,360
initial three-way handshake, which we'll

13456
07:35:03,680 --> 07:35:07,360
talk about soon, is going to have this

13457
07:35:05,360 --> 07:35:09,520
flag set. We also have things like the

13458
07:35:07,360 --> 07:35:11,840
reset flag. So if anything like I said

13459
07:35:09,520 --> 07:35:14,000
gets out of sync or out of order or if a

13460
07:35:11,840 --> 07:35:15,760
packet arrives unexpectedly well it's

13461
07:35:14,000 --> 07:35:17,600
able to sort of reset the process and

13462
07:35:15,760 --> 07:35:19,280
the communication. And then as I

13463
07:35:17,600 --> 07:35:21,040
mentioned we have that sin flag which is

13464
07:35:19,280 --> 07:35:23,600
used during the initial steps of

13465
07:35:21,040 --> 07:35:25,600
establishing that TCP connection. And we

13466
07:35:23,600 --> 07:35:27,120
also have a fin flag which is used to

13467
07:35:25,600 --> 07:35:29,280
indicate that the sender has finished

13468
07:35:27,120 --> 07:35:32,000
sending data and so it's part of the

13469
07:35:29,280 --> 07:35:33,760
termination process of a connection. And

13470
07:35:32,000 --> 07:35:35,680
again there are some more uh bits here

13471
07:35:33,760 --> 07:35:37,440
like the window size. So this kind of

13472
07:35:35,680 --> 07:35:39,040
specifies the receive window which is

13473
07:35:37,440 --> 07:35:40,478
the number of bytes that the sender of

13474
07:35:39,040 --> 07:35:42,398
the segment is currently willing to

13475
07:35:40,478 --> 07:35:44,000
receive and different operating systems

13476
07:35:42,398 --> 07:35:46,240
have different window sizes which you

13477
07:35:44,000 --> 07:35:48,398
can look up but ultimately it helps with

13478
07:35:46,240 --> 07:35:49,920
that sort of flow control right and

13479
07:35:48,398 --> 07:35:51,440
along with flow control we have error

13480
07:35:49,920 --> 07:35:54,080
checking which we can do through a check

13481
07:35:51,440 --> 07:35:56,160
sum and if these check sums don't match

13482
07:35:54,080 --> 07:35:58,000
well we can tell something went wrong we

13483
07:35:56,160 --> 07:35:59,760
have an urgent pointer which is kind of

13484
07:35:58,000 --> 07:36:01,120
only set if the urgent flag is set which

13485
07:35:59,760 --> 07:36:03,120
we don't really need to get into at this

13486
07:36:01,120 --> 07:36:04,240
point um and then we also have options

13487
07:36:03,120 --> 07:36:06,080
and padding which is kind of more

13488
07:36:04,240 --> 07:36:07,280
variable able and optional. And again,

13489
07:36:06,080 --> 07:36:09,040
these aren't super important to

13490
07:36:07,280 --> 07:36:10,478
understanding the entire concept. And

13491
07:36:09,040 --> 07:36:12,160
so, the main things we want to focus on

13492
07:36:10,478 --> 07:36:13,600
in this header, well, are the ports,

13493
07:36:12,160 --> 07:36:15,520
right? The source port, the destination

13494
07:36:13,600 --> 07:36:17,280
port along with the sequence and

13495
07:36:15,520 --> 07:36:18,958
acknowledgement numbers as well, and

13496
07:36:17,280 --> 07:36:21,600
also any flags that are set, which we

13497
07:36:18,958 --> 07:36:24,240
can talk about in a little bit as well.

13498
07:36:21,600 --> 07:36:25,840
And so with a UDP header, it's very

13499
07:36:24,240 --> 07:36:27,680
different and it's much shorter as you

13500
07:36:25,840 --> 07:36:30,160
can tell, right? So, we have the source

13501
07:36:27,680 --> 07:36:32,160
port, we have the destination port, we

13502
07:36:30,160 --> 07:36:34,080
have a length, and at the end we have a

13503
07:36:32,160 --> 07:36:36,080
check sum. And so you can see we don't

13504
07:36:34,080 --> 07:36:37,600
have any indications of reliability or

13505
07:36:36,080 --> 07:36:39,040
state here, right? There are no

13506
07:36:37,600 --> 07:36:40,958
acknowledgements. There are no sequence

13507
07:36:39,040 --> 07:36:42,718
numbers. There are no flags. And

13508
07:36:40,958 --> 07:36:44,478
ultimately there's no handshake, right?

13509
07:36:42,718 --> 07:36:45,840
It's just basically throwing packets and

13510
07:36:44,478 --> 07:36:47,120
hoping that they're delivered. It

13511
07:36:45,840 --> 07:36:49,120
doesn't care if they made it. There's no

13512
07:36:47,120 --> 07:36:51,040
retries. There's no reyncs. It just

13513
07:36:49,120 --> 07:36:52,718
throws stuff over the network. And

13514
07:36:51,040 --> 07:36:54,558
again, this works great for video and

13515
07:36:52,718 --> 07:36:56,398
audio, right? If you drop or miss some

13516
07:36:54,558 --> 07:36:58,478
packets, it's not going to be a huge

13517
07:36:56,398 --> 07:37:00,320
deal. The reliability and integrity

13518
07:36:58,478 --> 07:37:01,840
doesn't need to be onetoone. you know,

13519
07:37:00,320 --> 07:37:04,280
we can have a slight glitch or hiccup

13520
07:37:01,840 --> 07:37:06,320
without affecting the overall user

13521
07:37:04,280 --> 07:37:08,320
experience. And so, let's talk a bit

13522
07:37:06,320 --> 07:37:10,638
about TCP. Again, I mentioned this

13523
07:37:08,320 --> 07:37:12,638
concept of the three-way handshake. And

13524
07:37:10,638 --> 07:37:14,240
so, remember how we said TCP is a

13525
07:37:12,638 --> 07:37:17,120
connectionoriented protocol and that

13526
07:37:14,240 --> 07:37:19,200
it's reliable? Well, the TCP 3-way

13527
07:37:17,120 --> 07:37:21,120
handshake is the underlying process that

13528
07:37:19,200 --> 07:37:23,520
establishes a reliable connection

13529
07:37:21,120 --> 07:37:25,200
between two devices over a network. And

13530
07:37:23,520 --> 07:37:27,360
it's that sort of fundamental part of

13531
07:37:25,200 --> 07:37:29,200
how data is exchanged through the TCP

13532
07:37:27,360 --> 07:37:31,440
protocol. As the name suggests, there

13533
07:37:29,200 --> 07:37:32,958
are three steps to this. And so we can

13534
07:37:31,440 --> 07:37:35,200
start with the first step, which is the

13535
07:37:32,958 --> 07:37:37,120
SIN or the synchronization. And so

13536
07:37:35,200 --> 07:37:39,200
client A in this case is going to

13537
07:37:37,120 --> 07:37:41,760
initiate the connection by sending a SIN

13538
07:37:39,200 --> 07:37:43,440
segment over to server B. And this

13539
07:37:41,760 --> 07:37:45,200
segment contains the initial sequence

13540
07:37:43,440 --> 07:37:47,600
number, which is a random value that

13541
07:37:45,200 --> 07:37:49,440
client A chooses, right? And so this is

13542
07:37:47,600 --> 07:37:51,360
used to start the sequence for data

13543
07:37:49,440 --> 07:37:53,920
transmission. But after receiving the

13544
07:37:51,360 --> 07:37:56,160
sin segment from client A, well, server

13545
07:37:53,920 --> 07:37:58,160
B is going to acknowledge the request by

13546
07:37:56,160 --> 07:38:00,798
sending its own sin segment back to

13547
07:37:58,160 --> 07:38:02,558
client A. Right? So in addition to the

13548
07:38:00,798 --> 07:38:04,878
sin flag that's checked, well, this

13549
07:38:02,558 --> 07:38:06,718
segment is also going to contain an act

13550
07:38:04,878 --> 07:38:08,320
or an acknowledgement flag to

13551
07:38:06,718 --> 07:38:10,798
acknowledge the receipt of the initial

13552
07:38:08,320 --> 07:38:12,558
SIN segment. And so the acknowledgement

13553
07:38:10,798 --> 07:38:14,718
number that server B sends back in the

13554
07:38:12,558 --> 07:38:16,558
segment is going to be set to the

13555
07:38:14,718 --> 07:38:19,200
original sequence number that client A

13556
07:38:16,558 --> 07:38:21,360
sent incremented by one. And lastly

13557
07:38:19,200 --> 07:38:23,200
here, again this is only three steps.

13558
07:38:21,360 --> 07:38:25,840
And so client A is going to acknowledge

13559
07:38:23,200 --> 07:38:29,040
the SIN act from server B by sending

13560
07:38:25,840 --> 07:38:30,718
just an act back to server B. And so

13561
07:38:29,040 --> 07:38:32,798
this is once again going to confirm the

13562
07:38:30,718 --> 07:38:34,718
receipt of server B's sin segment and

13563
07:38:32,798 --> 07:38:36,160
complete the handshake. And the

13564
07:38:34,718 --> 07:38:37,680
acknowledgement number in this case is

13565
07:38:36,160 --> 07:38:40,000
going to be set to the sequence number

13566
07:38:37,680 --> 07:38:42,478
received by server B. And at this point

13567
07:38:40,000 --> 07:38:44,638
you can guess incremented by one. And so

13568
07:38:42,478 --> 07:38:46,160
now both client A and server B have

13569
07:38:44,638 --> 07:38:48,360
synchronized their sequence numbers and

13570
07:38:46,160 --> 07:38:50,958
can start exchanging data

13571
07:38:48,360 --> 07:38:53,120
reliably. And so enough PowerPoint for a

13572
07:38:50,958 --> 07:38:55,120
second. Let's try to demonstrate this at

13573
07:38:53,120 --> 07:38:57,280
a very basic level. And if you want you

13574
07:38:55,120 --> 07:39:00,320
can follow along. And so I'm just going

13575
07:38:57,280 --> 07:39:02,398
to open up the terminal. And what I'm

13576
07:39:00,320 --> 07:39:05,040
going to do is just hit control shift

13577
07:39:02,398 --> 07:39:06,478
and t twice so I can open up two more

13578
07:39:05,040 --> 07:39:09,040
tabs of terminals. Right? So we have

13579
07:39:06,478 --> 07:39:11,280
three here. And in this case, I'm going

13580
07:39:09,040 --> 07:39:13,120
to use the netcat utility, which is a

13581
07:39:11,280 --> 07:39:14,798
computer networking utility that can

13582
07:39:13,120 --> 07:39:17,840
read and write from network connections

13583
07:39:14,798 --> 07:39:20,000
using both TCP and UDP. And I'm going to

13584
07:39:17,840 --> 07:39:21,840
set up a listening server just on my

13585
07:39:20,000 --> 07:39:24,478
local host. And so I can do that with

13586
07:39:21,840 --> 07:39:27,680
the simple NC command. And I can provide

13587
07:39:24,478 --> 07:39:29,520
various options like L here to listen. I

13588
07:39:27,680 --> 07:39:31,000
can do tac V here to make it more

13589
07:39:29,520 --> 07:39:33,520
verbose. So we can actually get some

13590
07:39:31,000 --> 07:39:35,040
output. And with the TAC P, I can

13591
07:39:33,520 --> 07:39:37,280
specify the port that I want to listen

13592
07:39:35,040 --> 07:39:39,040
on. In this case, I'll just choose 1 2 3

13593
07:39:37,280 --> 07:39:40,558
4. And I know there are some people out

13594
07:39:39,040 --> 07:39:42,718
there that have used netcap before and

13595
07:39:40,558 --> 07:39:44,638
are probably internally yelling at me uh

13596
07:39:42,718 --> 07:39:46,240
for not uh combining these arguments

13597
07:39:44,638 --> 07:39:48,638
into a single one. Right? So what we can

13598
07:39:46,240 --> 07:39:50,878
do is just do attack LVP and that's

13599
07:39:48,638 --> 07:39:52,878
going to both listen as well as set the

13600
07:39:50,878 --> 07:39:55,280
verbose option and also specify the

13601
07:39:52,878 --> 07:39:56,478
port. Right? So we can just run this.

13602
07:39:55,280 --> 07:39:57,638
And you can see there that we're

13603
07:39:56,478 --> 07:40:00,000
listening on

13604
07:39:57,638 --> 07:40:03,280
0.0.0.0 which is our internal local host

13605
07:40:00,000 --> 07:40:05,360
address on port 1234. And so on this

13606
07:40:03,280 --> 07:40:07,200
second tab here, well, I'm going to act

13607
07:40:05,360 --> 07:40:09,120
as if the client in this model, right?

13608
07:40:07,200 --> 07:40:10,798
So if we think of this as the server

13609
07:40:09,120 --> 07:40:12,958
that's listening for the connection,

13610
07:40:10,798 --> 07:40:14,478
well, this will be our client. And in

13611
07:40:12,958 --> 07:40:17,120
this case, I'm going to run netcat

13612
07:40:14,478 --> 07:40:18,958
again, and I'm going to specify my local

13613
07:40:17,120 --> 07:40:20,718
host. And so if we think about DNS

13614
07:40:18,958 --> 07:40:23,520
quickly, well, I can just type local

13615
07:40:20,718 --> 07:40:26,718
host, right? And that's going to resolve

13616
07:40:23,520 --> 07:40:28,958
to this specific local host IP address.

13617
07:40:26,718 --> 07:40:30,638
And how does our system know to do that,

13618
07:40:28,958 --> 07:40:32,558
right? Well, we can take a look at

13619
07:40:30,638 --> 07:40:34,478
what's called the Etsy host file. And

13620
07:40:32,558 --> 07:40:36,240
this is a file on Linux. There's also a

13621
07:40:34,478 --> 07:40:38,558
version on Windows as well, which kind

13622
07:40:36,240 --> 07:40:40,798
of provides a local list of DNS names to

13623
07:40:38,558 --> 07:40:43,760
resolve, right? So, if I just do cat

13624
07:40:40,798 --> 07:40:45,680
Etsy host, well, we can see that local

13625
07:40:43,760 --> 07:40:48,680
host here, we can think of this as a

13626
07:40:45,680 --> 07:40:50,718
domain name. This resolves to

13627
07:40:48,680 --> 07:40:52,638
127.0.0.1. So, we can use either, right?

13628
07:40:50,718 --> 07:40:54,240
We can use local host or the IP address.

13629
07:40:52,638 --> 07:40:55,440
It doesn't really matter. And then, if

13630
07:40:54,240 --> 07:40:58,080
you remember, the port that we're

13631
07:40:55,440 --> 07:40:59,920
listening on is 1 2 3 4. And I'm just

13632
07:40:58,080 --> 07:41:01,360
going to provide tac v there to make it

13633
07:40:59,920 --> 07:41:02,120
verbose. So we can see the connection

13634
07:41:01,360 --> 07:41:04,398
being

13635
07:41:02,120 --> 07:41:06,398
made. Right? So you can see immediately

13636
07:41:04,398 --> 07:41:08,080
we have a connection over that port. We

13637
07:41:06,398 --> 07:41:09,760
can see it was successful. If we hop

13638
07:41:08,080 --> 07:41:11,920
back over to our server, well, we can

13639
07:41:09,760 --> 07:41:13,920
see that the connection was received.

13640
07:41:11,920 --> 07:41:16,718
And look at this. What does that look

13641
07:41:13,920 --> 07:41:18,878
like to you? Well, that is an ephemeral

13642
07:41:16,718 --> 07:41:20,638
port. It is that highle port that the

13643
07:41:18,878 --> 07:41:22,798
operating system randomly chose and

13644
07:41:20,638 --> 07:41:25,280
assigns it to that basically ephemeral

13645
07:41:22,798 --> 07:41:27,600
high port. And now I can start doing

13646
07:41:25,280 --> 07:41:29,760
things like saying hello, right? So I

13647
07:41:27,600 --> 07:41:31,200
just sent over a hello message. If I go

13648
07:41:29,760 --> 07:41:32,440
back to the client, well, we can see

13649
07:41:31,200 --> 07:41:35,840
that right

13650
07:41:32,440 --> 07:41:38,718
there. I can reply and we can see that

13651
07:41:35,840 --> 07:41:41,040
it's being sent over this connection. So

13652
07:41:38,718 --> 07:41:43,160
that's cool and all. Um, let's do this

13653
07:41:41,040 --> 07:41:46,000
again. So I'm going to set up my

13654
07:41:43,160 --> 07:41:48,240
listener. I'm going to have my

13655
07:41:46,000 --> 07:41:50,320
connection or my client ready. But in

13656
07:41:48,240 --> 07:41:52,040
this case, I'm going to first set up

13657
07:41:50,320 --> 07:41:54,718
what is called TCP

13658
07:41:52,040 --> 07:41:56,398
dump. And TCP dump, which we're actually

13659
07:41:54,718 --> 07:41:58,240
going to cover pretty shortly, is a

13660
07:41:56,398 --> 07:42:00,160
command line network packet analyzer

13661
07:41:58,240 --> 07:42:02,000
tool that we can use basically to

13662
07:42:00,160 --> 07:42:03,440
analyze the packets that are traversing

13663
07:42:02,000 --> 07:42:05,360
through our little network that we're

13664
07:42:03,440 --> 07:42:07,680
making up, right? And we can do this by

13665
07:42:05,360 --> 07:42:09,520
specifying TAC I here to indicate the

13666
07:42:07,680 --> 07:42:11,360
interface we want to use. And I'm just

13667
07:42:09,520 --> 07:42:12,878
going to type L for our loop back

13668
07:42:11,360 --> 07:42:15,360
address because remember we're all doing

13669
07:42:12,878 --> 07:42:17,080
this on our local host. And so if I hit

13670
07:42:15,360 --> 07:42:19,440
run here, well, got to type in my

13671
07:42:17,080 --> 07:42:21,760
password. You can see we're listening on

13672
07:42:19,440 --> 07:42:22,760
this interface now. And so now when I

13673
07:42:21,760 --> 07:42:26,000
make the

13674
07:42:22,760 --> 07:42:27,600
connection, well, let's hop back over.

13675
07:42:26,000 --> 07:42:29,760
We can see some interesting things that

13676
07:42:27,600 --> 07:42:31,840
were logged, right? So we can see

13677
07:42:29,760 --> 07:42:33,440
another highle port that was specified

13678
07:42:31,840 --> 07:42:35,520
on the verbose output here on the

13679
07:42:33,440 --> 07:42:37,360
server. Well, if we go over to our TCP

13680
07:42:35,520 --> 07:42:39,280
dump output, well, let's take a look at

13681
07:42:37,360 --> 07:42:41,360
this first line here. We can see local

13682
07:42:39,280 --> 07:42:43,840
host, which matches up. This is our

13683
07:42:41,360 --> 07:42:45,200
highle or our ephemeral port that is

13684
07:42:43,840 --> 07:42:47,680
making the connection. We can see where

13685
07:42:45,200 --> 07:42:50,798
this little arrow is pointing to our

13686
07:42:47,680 --> 07:42:52,958
server on port 1 2 3 4. And when we look

13687
07:42:50,798 --> 07:42:55,680
at what flags were set, well, we can see

13688
07:42:52,958 --> 07:42:57,520
this S here for the SIN. And we can also

13689
07:42:55,680 --> 07:42:59,120
see the sequence number, right? So this

13690
07:42:57,520 --> 07:43:01,040
is that built-in state within the

13691
07:42:59,120 --> 07:43:02,798
connection. And so when we look at the

13692
07:43:01,040 --> 07:43:05,280
second line here, well, we can see it's

13693
07:43:02,798 --> 07:43:07,558
coming from the server on 1 2 3 4 going

13694
07:43:05,280 --> 07:43:10,000
back to localhost on

13695
07:43:07,558 --> 07:43:12,638
36838. And we can see in this case in

13696
07:43:10,000 --> 07:43:14,718
terms of flags, we had sin and then this

13697
07:43:12,638 --> 07:43:16,798
dot here which refers to act. So we have

13698
07:43:14,718 --> 07:43:18,558
sin act. This is that second stage in

13699
07:43:16,798 --> 07:43:20,558
the handshake. And we have our own

13700
07:43:18,558 --> 07:43:22,798
sequence number here. And if we look at

13701
07:43:20,558 --> 07:43:25,920
the acknowledgement number, well, does

13702
07:43:22,798 --> 07:43:28,558
this look familiar? Kind of. It's the

13703
07:43:25,920 --> 07:43:29,920
original sequence number incremented by

13704
07:43:28,558 --> 07:43:31,120
one. Right? That's what we covered.

13705
07:43:29,920 --> 07:43:33,680
That's what we talked about. That's

13706
07:43:31,120 --> 07:43:36,718
expected to happen. And lastly, here we

13707
07:43:33,680 --> 07:43:39,200
can see the final act based on the flag

13708
07:43:36,718 --> 07:43:41,440
sent from the client to the server. And

13709
07:43:39,200 --> 07:43:42,718
if we start sending a bunch more uh

13710
07:43:41,440 --> 07:43:44,798
let's go to the client here. If we start

13711
07:43:42,718 --> 07:43:48,080
sending a bunch more messages. Whoops.

13712
07:43:44,798 --> 07:43:49,920
Hi. Hi. Hi. Hi. Hi. and head back over.

13713
07:43:48,080 --> 07:43:51,200
Well, we can see a number of acts,

13714
07:43:49,920 --> 07:43:52,798
right? So, we talked about how after

13715
07:43:51,200 --> 07:43:54,320
that handshake is established, well,

13716
07:43:52,798 --> 07:43:56,160
we're basically just getting axe until

13717
07:43:54,320 --> 07:43:58,000
the connection is terminated. And so, we

13718
07:43:56,160 --> 07:43:59,520
can see all of these different acts and

13719
07:43:58,000 --> 07:44:01,680
we're getting some push flags here as

13720
07:43:59,520 --> 07:44:03,440
you can see by the capital P. That's

13721
07:44:01,680 --> 07:44:05,120
basically just netcat saying don't fill

13722
07:44:03,440 --> 07:44:07,360
up the TCP buffer with these packets,

13723
07:44:05,120 --> 07:44:09,200
just send them through. And so, finally,

13724
07:44:07,360 --> 07:44:11,440
let's terminate our connection. So, this

13725
07:44:09,200 --> 07:44:13,920
is our client here. I'm just going to c

13726
07:44:11,440 --> 07:44:16,638
to cancel out or close our connection.

13727
07:44:13,920 --> 07:44:18,398
And if we head back over, well, we can

13728
07:44:16,638 --> 07:44:21,040
see the connection was closed with these

13729
07:44:18,398 --> 07:44:22,558
capital F or the FIN flag. So, it's

13730
07:44:21,040 --> 07:44:23,398
pretty interesting how we can see all of

13731
07:44:22,558 --> 07:44:26,040
this

13732
07:44:23,398 --> 07:44:28,320
happen. I'm just going to set this up

13733
07:44:26,040 --> 07:44:30,160
again. And let's think about the ping

13734
07:44:28,320 --> 07:44:32,638
command again. And if I just ping myself

13735
07:44:30,160 --> 07:44:32,638
on

13736
07:44:33,638 --> 07:44:37,760
127.0.0.1. All right. So, I'll send some

13737
07:44:35,520 --> 07:44:39,760
pings over and head back over. Well, we

13738
07:44:37,760 --> 07:44:41,440
can see that this output looks totally

13739
07:44:39,760 --> 07:44:43,120
different. Well, that's because we're

13740
07:44:41,440 --> 07:44:45,600
using a completely different protocol

13741
07:44:43,120 --> 07:44:47,520
here, right? So, ping uses ICMP or the

13742
07:44:45,600 --> 07:44:50,000
internet control message protocol. And

13743
07:44:47,520 --> 07:44:51,680
so, in ICMP packets, well, unlike TCP

13744
07:44:50,000 --> 07:44:54,080
packets, we don't have flags or options

13745
07:44:51,680 --> 07:44:56,320
like we did with TCP. And so, if someone

13746
07:44:54,080 --> 07:44:57,680
ever asks you what port ping uses, well,

13747
07:44:56,320 --> 07:44:58,878
they just think they're cool and they're

13748
07:44:57,680 --> 07:45:00,718
trying to trick you with a trick

13749
07:44:58,878 --> 07:45:03,280
question. So, the fact is ping doesn't

13750
07:45:00,718 --> 07:45:05,840
use ports at all. ICMP basically sits on

13751
07:45:03,280 --> 07:45:08,398
top of the IP address. Speaking of

13752
07:45:05,840 --> 07:45:10,160
ports, um, as sock analysts, we're going

13753
07:45:08,398 --> 07:45:11,920
to often investigate network captures

13754
07:45:10,160 --> 07:45:14,320
that include evidence of interactions

13755
07:45:11,920 --> 07:45:16,878
with various ports across the network.

13756
07:45:14,320 --> 07:45:18,320
And so understanding the common ports

13757
07:45:16,878 --> 07:45:19,920
and protocols is going to be really

13758
07:45:18,320 --> 07:45:22,000
useful for us for recognizing and

13759
07:45:19,920 --> 07:45:23,440
analyzing network traffic, right? So we

13760
07:45:22,000 --> 07:45:27,000
have the concept of well-known ports

13761
07:45:23,440 --> 07:45:29,360
like HTTP on port 80 or HTTPS on port

13762
07:45:27,000 --> 07:45:31,200
443. Well, the other thing here is that

13763
07:45:29,360 --> 07:45:32,878
services can technically run on any

13764
07:45:31,200 --> 07:45:34,558
port. So, we can't always make

13765
07:45:32,878 --> 07:45:36,798
assumptions based solely on the port

13766
07:45:34,558 --> 07:45:38,398
number. And so, you're not expected to

13767
07:45:36,798 --> 07:45:40,478
immediately memorize all of the common

13768
07:45:38,398 --> 07:45:42,160
ports out there, but over time, it will

13769
07:45:40,478 --> 07:45:43,760
become more natural for you to associate

13770
07:45:42,160 --> 07:45:45,600
certain port numbers with their typical

13771
07:45:43,760 --> 07:45:47,360
protocol. And if you ever come across

13772
07:45:45,600 --> 07:45:48,798
something you're unsure of, well, the

13773
07:45:47,360 --> 07:45:50,558
answer can be found a quick Google

13774
07:45:48,798 --> 07:45:52,160
search away. And so, I'm going to cover

13775
07:45:50,558 --> 07:45:53,440
what I think will be the most useful

13776
07:45:52,160 --> 07:45:55,600
ports that you'll see come up in the

13777
07:45:53,440 --> 07:45:57,440
field. But this, of course, is not going

13778
07:45:55,600 --> 07:45:58,600
to be an exhaustive list. As as we

13779
07:45:57,440 --> 07:46:01,200
mentioned, there are

13780
07:45:58,600 --> 07:46:02,958
65,535 ports out there. And we're

13781
07:46:01,200 --> 07:46:04,638
obviously not going to cover each one.

13782
07:46:02,958 --> 07:46:06,240
And we also don't have to go into, you

13783
07:46:04,638 --> 07:46:07,920
know, great detail on each port and

13784
07:46:06,240 --> 07:46:09,680
protocol here. It's more so going to be

13785
07:46:07,920 --> 07:46:11,680
a general list because we're going to

13786
07:46:09,680 --> 07:46:13,280
get into some specific protocols in more

13787
07:46:11,680 --> 07:46:15,200
detail as we actually frame network

13788
07:46:13,280 --> 07:46:17,600
traffic analysis within the lens of

13789
07:46:15,200 --> 07:46:19,360
incident response. And so to compile our

13790
07:46:17,600 --> 07:46:21,360
list here, I'm just referencing the top

13791
07:46:19,360 --> 07:46:23,680
ports that NAPAP, which is a popular

13792
07:46:21,360 --> 07:46:25,520
network port scanning tool, uses to

13793
07:46:23,680 --> 07:46:27,360
prioritize based on how common these

13794
07:46:25,520 --> 07:46:29,520
ports are in the wild with some slight

13795
07:46:27,360 --> 07:46:31,680
modifications. And so we can start with

13796
07:46:29,520 --> 07:46:34,160
port 21 which is FTP or the file

13797
07:46:31,680 --> 07:46:35,760
transfer protocol. And FTP is used for

13798
07:46:34,160 --> 07:46:37,680
transferring files between a client and

13799
07:46:35,760 --> 07:46:39,520
server over the network. And so it works

13800
07:46:37,680 --> 07:46:41,360
by establishing a connection between two

13801
07:46:39,520 --> 07:46:43,040
devices. And from that established

13802
07:46:41,360 --> 07:46:45,440
connection, files can be downloaded and

13803
07:46:43,040 --> 07:46:49,280
uploaded as needed. So next we have port

13804
07:46:45,440 --> 07:46:51,120
22 or SSH or secure shell. And SSH

13805
07:46:49,280 --> 07:46:52,878
provides secure remote access and

13806
07:46:51,120 --> 07:46:55,280
management capabilities to servers and

13807
07:46:52,878 --> 07:46:57,520
clients and allows users to securely log

13808
07:46:55,280 --> 07:46:59,280
into a remote system over the network.

13809
07:46:57,520 --> 07:47:00,638
And because it's encrypted, well, it's

13810
07:46:59,280 --> 07:47:02,718
very useful and secure from a

13811
07:47:00,638 --> 07:47:04,638
confidentiality and integrity point. And

13812
07:47:02,718 --> 07:47:06,638
so the protocol itself is often used for

13813
07:47:04,638 --> 07:47:08,240
various purposes like most commonly with

13814
07:47:06,638 --> 07:47:10,160
shell sessions. But we can also

13815
07:47:08,240 --> 07:47:11,840
integrate it within FTP itself, right?

13816
07:47:10,160 --> 07:47:14,160
So we can have a secure file transfer

13817
07:47:11,840 --> 07:47:16,718
protocol. On port 23, we have TNET,

13818
07:47:14,160 --> 07:47:18,878
which you can think of similar to SSH

13819
07:47:16,718 --> 07:47:20,798
except it's not secure is I guess the

13820
07:47:18,878 --> 07:47:22,798
highle way to put it. And so it's used

13821
07:47:20,798 --> 07:47:24,558
typically for remote terminal access and

13822
07:47:22,798 --> 07:47:26,878
management of network devices similar to

13823
07:47:24,558 --> 07:47:28,798
SSH. But it's considered insecure

13824
07:47:26,878 --> 07:47:30,958
because it transmits data like things

13825
07:47:28,798 --> 07:47:32,478
like login credentials in plain text. So

13826
07:47:30,958 --> 07:47:34,160
if someone's eavesdropping or listening

13827
07:47:32,478 --> 07:47:36,240
to the network traffic, well they can

13828
07:47:34,160 --> 07:47:38,320
sniff out credentials quite trivially.

13829
07:47:36,240 --> 07:47:40,680
On port 25, well we covered this. This

13830
07:47:38,320 --> 07:47:43,040
is the simple mail transfer protocol or

13831
07:47:40,680 --> 07:47:44,878
SMTP. And it of course handles the

13832
07:47:43,040 --> 07:47:47,680
transmission of outgoing mail from email

13833
07:47:44,878 --> 07:47:49,760
clients to other email servers. On port

13834
07:47:47,680 --> 07:47:52,320
53, well, we talked about DNS or the

13835
07:47:49,760 --> 07:47:54,320
domain name system, right? And so DNS

13836
07:47:52,320 --> 07:47:56,638
resolves domain names to IP addresses or

13837
07:47:54,320 --> 07:47:58,798
in the case of a reverse DNS vice versa.

13838
07:47:56,638 --> 07:48:00,478
And it enables users to access resources

13839
07:47:58,798 --> 07:48:03,600
on the internet using human readable

13840
07:48:00,478 --> 07:48:06,320
names. On port 80 that is HTTP or the

13841
07:48:03,600 --> 07:48:08,240
hypertext transfer protocol. And HTTP is

13842
07:48:06,320 --> 07:48:11,040
the default protocol for unencrypted

13843
07:48:08,240 --> 07:48:12,638
HTTP connections. So web browsers can

13844
07:48:11,040 --> 07:48:14,798
communicate with web servers and request

13845
07:48:12,638 --> 07:48:17,680
web pages and receive HTML content and

13846
07:48:14,798 --> 07:48:19,920
images all without any encryption. And

13847
07:48:17,680 --> 07:48:22,478
this was the standard up until about uh

13848
07:48:19,920 --> 07:48:25,520
I don't know the mid2010s maybe until

13849
07:48:22,478 --> 07:48:27,600
HTTPS really dominated and took over. On

13850
07:48:25,520 --> 07:48:29,440
port 110 we have POP 3 or the post

13851
07:48:27,600 --> 07:48:31,040
office protocol 3 which again we

13852
07:48:29,440 --> 07:48:32,958
covered. And so this is used for

13853
07:48:31,040 --> 07:48:35,760
retrieving emails from a mail server to

13854
07:48:32,958 --> 07:48:39,120
a client device. On port 135 we have

13855
07:48:35,760 --> 07:48:41,040
Microsoft remote procedure call or RPC.

13856
07:48:39,120 --> 07:48:43,360
And this is a protocol, as you can tell,

13857
07:48:41,040 --> 07:48:45,280
used by Microsoft Windows um for

13858
07:48:43,360 --> 07:48:47,520
communication between processes or

13859
07:48:45,280 --> 07:48:49,840
interprocess communication. And so it

13860
07:48:47,520 --> 07:48:51,840
uses things like the RPC endpoint mapper

13861
07:48:49,840 --> 07:48:54,478
service, which dynamically assigns ports

13862
07:48:51,840 --> 07:48:55,680
for other RPC services. And so again, it

13863
07:48:54,478 --> 07:48:57,520
can do things like interprocess

13864
07:48:55,680 --> 07:48:59,120
communication, but also allow for things

13865
07:48:57,520 --> 07:49:02,160
like remote administration tasks in

13866
07:48:59,120 --> 07:49:05,120
Windows environments. On port 139, we

13867
07:49:02,160 --> 07:49:07,520
have net bios session service. And so

13868
07:49:05,120 --> 07:49:10,080
net bios or networkbasic input output

13869
07:49:07,520 --> 07:49:12,080
system provides services related to the

13870
07:49:10,080 --> 07:49:14,080
sharing of resources and communications

13871
07:49:12,080 --> 07:49:17,200
between devices on a local area network

13872
07:49:14,080 --> 07:49:19,280
or a LAN. And so port 139 is used by net

13873
07:49:17,200 --> 07:49:21,200
bios to establish sessions between

13874
07:49:19,280 --> 07:49:22,878
devices. And it can enable things like

13875
07:49:21,200 --> 07:49:25,280
file and printer sharing and name

13876
07:49:22,878 --> 07:49:27,600
resolution within Windowsbased networks.

13877
07:49:25,280 --> 07:49:29,520
On port 143, another one we covered

13878
07:49:27,600 --> 07:49:32,160
already, IMAP or the internet message

13879
07:49:29,520 --> 07:49:33,920
access protocol. And it's used again for

13880
07:49:32,160 --> 07:49:35,840
accessing and managing email services

13881
07:49:33,920 --> 07:49:37,520
stored on a remote mail server. And if

13882
07:49:35,840 --> 07:49:39,840
you remember, IMAP has a little bit more

13883
07:49:37,520 --> 07:49:41,760
features than uh something like POP 3 or

13884
07:49:39,840 --> 07:49:44,320
the post office protocol 3 and is more

13885
07:49:41,760 --> 07:49:46,160
commonly used nowadays. On port 389, we

13886
07:49:44,320 --> 07:49:48,798
have LDAP or the lightweight directory

13887
07:49:46,160 --> 07:49:50,638
access protocol. And LDAP is a protocol

13888
07:49:48,798 --> 07:49:52,638
used for accessing and managing

13889
07:49:50,638 --> 07:49:54,398
directory information services such as

13890
07:49:52,638 --> 07:49:56,320
user authentication or doing things like

13891
07:49:54,398 --> 07:49:57,920
directory lookups. And so often we

13892
07:49:56,320 --> 07:50:00,160
associate it with Microsoft's active

13893
07:49:57,920 --> 07:50:02,558
directory and is commonly used within AD

13894
07:50:00,160 --> 07:50:05,200
environments, but it's also a more just

13895
07:50:02,558 --> 07:50:07,680
in general directory service as well. So

13896
07:50:05,200 --> 07:50:09,680
on port 443, well that is what you are

13897
07:50:07,680 --> 07:50:11,680
on right now to watch this video. And

13898
07:50:09,680 --> 07:50:14,718
that is the hypertext transfer protocol

13899
07:50:11,680 --> 07:50:17,040
secure. And so it's just like HTTP on

13900
07:50:14,718 --> 07:50:18,558
port 80 except it includes TLS

13901
07:50:17,040 --> 07:50:20,398
encryption within the connection to

13902
07:50:18,558 --> 07:50:21,920
secure data transmission and ensure

13903
07:50:20,398 --> 07:50:23,360
things like the confidentiality of

13904
07:50:21,920 --> 07:50:25,600
things like user credentials or

13905
07:50:23,360 --> 07:50:28,558
financial transactions over the web. On

13906
07:50:25,600 --> 07:50:30,718
port 445 we have SMB or server message

13907
07:50:28,558 --> 07:50:32,718
block. And it's a network protocol used

13908
07:50:30,718 --> 07:50:34,080
for file sharing and printer sharing as

13909
07:50:32,718 --> 07:50:36,160
well as other communication between

13910
07:50:34,080 --> 07:50:37,600
devices on a network. And again it's

13911
07:50:36,160 --> 07:50:39,840
commonly associated with Windows

13912
07:50:37,600 --> 07:50:41,840
systems. And it can enable devices on

13913
07:50:39,840 --> 07:50:44,000
the network to access shared resources

13914
07:50:41,840 --> 07:50:45,520
again like files or printers and perform

13915
07:50:44,000 --> 07:50:47,040
various network related tasks like

13916
07:50:45,520 --> 07:50:49,120
authentication and also remote

13917
07:50:47,040 --> 07:50:52,000
administration as well. Okay, we're

13918
07:50:49,120 --> 07:50:55,120
almost there. Port 3389 is the remote

13919
07:50:52,000 --> 07:50:57,280
desktop protocol or RDP. And RDP allows

13920
07:50:55,120 --> 07:51:00,160
users to remotely access and control a

13921
07:50:57,280 --> 07:51:01,680
computer or a server over a network.

13922
07:51:00,160 --> 07:51:03,520
Right? So it can actually transmit

13923
07:51:01,680 --> 07:51:05,440
desktop graphics and keyboard and mouse

13924
07:51:03,520 --> 07:51:07,760
inputs between the client and remote

13925
07:51:05,440 --> 07:51:09,600
host all over the network. And so if

13926
07:51:07,760 --> 07:51:11,360
you've ever remoted into a system and

13927
07:51:09,600 --> 07:51:13,040
had access to a guey or graphical

13928
07:51:11,360 --> 07:51:14,638
environment, well, chances are if it was

13929
07:51:13,040 --> 07:51:16,520
a Windows system, especially you were

13930
07:51:14,638 --> 07:51:19,440
using remote desktop protocol on port

13931
07:51:16,520 --> 07:51:22,080
3389. And lastly here we have port 8080,

13932
07:51:19,440 --> 07:51:24,080
which again refers to in most cases

13933
07:51:22,080 --> 07:51:25,920
hypertext transfer protocol. Again, none

13934
07:51:24,080 --> 07:51:27,600
of these ports have to match up with

13935
07:51:25,920 --> 07:51:30,320
these protocols, right? We're just going

13936
07:51:27,600 --> 07:51:32,718
based off the standards and RFC's. This

13937
07:51:30,320 --> 07:51:34,080
is a common alternative to port 80, and

13938
07:51:32,718 --> 07:51:35,520
you'll commonly see it used in

13939
07:51:34,080 --> 07:51:36,878
development servers, right? So if a

13940
07:51:35,520 --> 07:51:39,280
developer is standing up a quick server

13941
07:51:36,878 --> 07:51:40,558
to test something or run something or in

13942
07:51:39,280 --> 07:51:41,840
the case of proxies where you're

13943
07:51:40,558 --> 07:51:44,240
actually proxying traffic without

13944
07:51:41,840 --> 07:51:46,478
conflicting with any other services. And

13945
07:51:44,240 --> 07:51:48,080
so that was this is a big list, right?

13946
07:51:46,478 --> 07:51:49,920
And you don't need to memorize all of

13947
07:51:48,080 --> 07:51:51,440
these numbers. But over time as you

13948
07:51:49,920 --> 07:51:52,878
start doing more analysis and you start

13949
07:51:51,440 --> 07:51:54,558
looking at more evidence and doing your

13950
07:51:52,878 --> 07:51:56,798
own research, well you're going to start

13951
07:51:54,558 --> 07:51:59,120
slowly associating protocols with their

13952
07:51:56,798 --> 07:52:01,360
ports. And we also covered quite a bit

13953
07:51:59,120 --> 07:52:03,040
in this lesson as well. And so take a

13954
07:52:01,360 --> 07:52:05,320
breath, take a breather, and I'll see

13955
07:52:03,040 --> 07:52:07,360
you in the next video where we will

13956
07:52:05,320 --> 07:52:09,120
continue. When it comes to network

13957
07:52:07,360 --> 07:52:11,040
traffic analysis, there are countless

13958
07:52:09,120 --> 07:52:13,040
different approaches and strategies to

13959
07:52:11,040 --> 07:52:15,760
determine the best way to collect and

13960
07:52:13,040 --> 07:52:17,200
detect and analyze network data. And so

13961
07:52:15,760 --> 07:52:19,120
in this lesson, we'll talk about two

13962
07:52:17,200 --> 07:52:20,878
highle approaches to capturing and

13963
07:52:19,120 --> 07:52:22,638
storing network data and how they're

13964
07:52:20,878 --> 07:52:24,160
often opposed to each other, but in

13965
07:52:22,638 --> 07:52:26,000
reality, they kind of complement each

13966
07:52:24,160 --> 07:52:27,600
other very well and serve their own

13967
07:52:26,000 --> 07:52:29,920
purpose in the grand scheme of network

13968
07:52:27,600 --> 07:52:31,760
traffic analysis. And these two

13969
07:52:29,920 --> 07:52:34,798
approaches are packet- based analysis

13970
07:52:31,760 --> 07:52:37,600
and flow-based analysis. So first let's

13971
07:52:34,798 --> 07:52:40,000
talk about what is a packet right? So a

13972
07:52:37,600 --> 07:52:41,920
network packet is a unit of data that is

13973
07:52:40,000 --> 07:52:44,080
transmitted between devices over a

13974
07:52:41,920 --> 07:52:45,760
network. And so it contains both the

13975
07:52:44,080 --> 07:52:48,160
actual data being transmitted in the

13976
07:52:45,760 --> 07:52:50,160
form of a payload and also the control

13977
07:52:48,160 --> 07:52:51,920
information or the metadata that's used

13978
07:52:50,160 --> 07:52:54,000
for routing and managing the packet as

13979
07:52:51,920 --> 07:52:55,840
it traverses the network. Specifically

13980
07:52:54,000 --> 07:52:57,920
though, we can think of packets as a

13981
07:52:55,840 --> 07:52:59,920
single piece of an entire puzzle that we

13982
07:52:57,920 --> 07:53:01,840
want to send over a network. For

13983
07:52:59,920 --> 07:53:03,920
example, when retrieving a web page over

13984
07:53:01,840 --> 07:53:06,080
the internet, well, the entire web page

13985
07:53:03,920 --> 07:53:08,080
can't be sent over in a single piece.

13986
07:53:06,080 --> 07:53:10,240
Instead, it's broken down into packets

13987
07:53:08,080 --> 07:53:11,920
of data and sent over the network to be

13988
07:53:10,240 --> 07:53:14,080
reassembled on the client's end to make

13989
07:53:11,920 --> 07:53:16,320
up the full web page. So to put it

13990
07:53:14,080 --> 07:53:18,638
another way, packets allow systems to

13991
07:53:16,320 --> 07:53:20,638
transmit data efficiently over the wire

13992
07:53:18,638 --> 07:53:22,718
by breaking it down into smaller chunks

13993
07:53:20,638 --> 07:53:25,200
that can be routed independently and

13994
07:53:22,718 --> 07:53:27,120
reassembled at the destination. And

13995
07:53:25,200 --> 07:53:29,920
typically a packet is made up of three

13996
07:53:27,120 --> 07:53:31,760
main parts. First we have the header.

13997
07:53:29,920 --> 07:53:33,600
And if you recall in the last lesson, we

13998
07:53:31,760 --> 07:53:35,920
talked about various packet headers in

13999
07:53:33,600 --> 07:53:37,440
great detail. And so packet headers are

14000
07:53:35,920 --> 07:53:39,280
the important part of network packets

14001
07:53:37,440 --> 07:53:41,520
that contain all of the information and

14002
07:53:39,280 --> 07:53:43,680
metadata required to direct the packet

14003
07:53:41,520 --> 07:53:45,760
during its transmission and its handling

14004
07:53:43,680 --> 07:53:47,840
across the network. And if you recall,

14005
07:53:45,760 --> 07:53:49,600
we talked about the IP header and how it

14006
07:53:47,840 --> 07:53:51,520
will contain a source and destination

14007
07:53:49,600 --> 07:53:54,000
address to ensure that the packet can

14008
07:53:51,520 --> 07:53:56,558
route between sender and receiver. We

14009
07:53:54,000 --> 07:53:58,398
also looked at TCP and UDP headers.

14010
07:53:56,558 --> 07:53:59,760
Specifically, the TCP header, we looked

14011
07:53:58,398 --> 07:54:01,920
at things like the source and the

14012
07:53:59,760 --> 07:54:05,120
destination port along with the sequence

14013
07:54:01,920 --> 07:54:07,520
and acknowledgement numbers. So as a TCP

14014
07:54:05,120 --> 07:54:09,398
IP packet traverses across the network,

14015
07:54:07,520 --> 07:54:11,840
well, it goes under a process of

14016
07:54:09,398 --> 07:54:14,718
encapsulation with the TCP header

14017
07:54:11,840 --> 07:54:16,798
encapsulated within the IP packet. The

14018
07:54:14,718 --> 07:54:19,760
IP header is then added to the front of

14019
07:54:16,798 --> 07:54:22,478
the TCP segment. And so upon reaching

14020
07:54:19,760 --> 07:54:25,280
the destination device, the IP packet is

14021
07:54:22,478 --> 07:54:27,440
received and processed. The destination

14022
07:54:25,280 --> 07:54:29,200
device determines the IP header to

14023
07:54:27,440 --> 07:54:32,080
determine if the packet is destined for

14024
07:54:29,200 --> 07:54:34,478
itself. If so, the IP header is removed

14025
07:54:32,080 --> 07:54:36,360
and the encapsulated TCP segment will be

14026
07:54:34,478 --> 07:54:38,558
extracted through a process of

14027
07:54:36,360 --> 07:54:40,798
de-incapsulation. And this encapsulation

14028
07:54:38,558 --> 07:54:42,638
and de-incapsulation will continue as

14029
07:54:40,798 --> 07:54:45,360
the data traverses through the different

14030
07:54:42,638 --> 07:54:47,680
layers within the TCP IP model. And so

14031
07:54:45,360 --> 07:54:49,360
beyond the headers lies the payload and

14032
07:54:47,680 --> 07:54:51,600
this is the core content of the network

14033
07:54:49,360 --> 07:54:53,120
packet itself. And so the payload

14034
07:54:51,600 --> 07:54:54,478
contains the actual data being

14035
07:54:53,120 --> 07:54:56,638
transmitted from the source to

14036
07:54:54,478 --> 07:54:58,398
destination. And this data can vary

14037
07:54:56,638 --> 07:55:00,638
widely depending on the application or

14038
07:54:58,398 --> 07:55:02,240
the protocol that generated the packet.

14039
07:55:00,638 --> 07:55:04,398
Right? So in the case of web browsing,

14040
07:55:02,240 --> 07:55:06,478
well the payload might contain the HTML,

14041
07:55:04,398 --> 07:55:08,320
the CSS and the JavaScript or other

14042
07:55:06,478 --> 07:55:09,920
content that makes up the web page. If

14043
07:55:08,320 --> 07:55:11,360
it's an email communication, well maybe

14044
07:55:09,920 --> 07:55:13,840
the payload would include the body of

14045
07:55:11,360 --> 07:55:15,600
the email message. In the case of FTP or

14046
07:55:13,840 --> 07:55:17,360
the file transfer protocol, well the

14047
07:55:15,600 --> 07:55:19,840
payload might encompass the content of

14048
07:55:17,360 --> 07:55:21,760
the actual file being transferred. And

14049
07:55:19,840 --> 07:55:23,600
also depending on the application and

14050
07:55:21,760 --> 07:55:25,680
source of the packet, the data within

14051
07:55:23,600 --> 07:55:27,520
the payload could be encrypted, which of

14052
07:55:25,680 --> 07:55:28,798
course is a good security practice,

14053
07:55:27,520 --> 07:55:30,878
meaning that if the packet is

14054
07:55:28,798 --> 07:55:32,478
intercepted by any unauthorized parties,

14055
07:55:30,878 --> 07:55:34,878
well, the data within it will remain

14056
07:55:32,478 --> 07:55:36,878
secure and confidential. However, for us

14057
07:55:34,878 --> 07:55:38,558
as sock analysts, well, this encryption

14058
07:55:36,878 --> 07:55:40,000
can also add a bit of overhead and

14059
07:55:38,558 --> 07:55:41,760
complexity when it comes to actually

14060
07:55:40,000 --> 07:55:44,718
monitoring and analyzing the data within

14061
07:55:41,760 --> 07:55:46,718
the payload. And lastly here, following

14062
07:55:44,718 --> 07:55:48,718
the payload, some network protocols will

14063
07:55:46,718 --> 07:55:51,120
include a trailer or a footer section at

14064
07:55:48,718 --> 07:55:53,280
the end of the packet. And while not all

14065
07:55:51,120 --> 07:55:54,958
protocols incorporate a trailer, those

14066
07:55:53,280 --> 07:55:56,878
that do will typically use it for a

14067
07:55:54,958 --> 07:55:59,040
specific purpose like a check sum or

14068
07:55:56,878 --> 07:56:00,638
error detection or data integrity. In

14069
07:55:59,040 --> 07:56:02,080
some cases, the trailer or footer might

14070
07:56:00,638 --> 07:56:03,680
be used for padding purposes where it

14071
07:56:02,080 --> 07:56:05,440
will add extra bits of data to the end

14072
07:56:03,680 --> 07:56:07,040
of the packet to ensure that it meets a

14073
07:56:05,440 --> 07:56:09,600
minimum size requirement specified by

14074
07:56:07,040 --> 07:56:12,080
the protocol. An IP packet, for example,

14075
07:56:09,600 --> 07:56:14,600
does not contain a trailer, but Ethernet

14076
07:56:12,080 --> 07:56:17,120
frames, for example,

14077
07:56:14,600 --> 07:56:19,280
do. And so when we think about the

14078
07:56:17,120 --> 07:56:21,280
process of performing packet captures,

14079
07:56:19,280 --> 07:56:23,478
this is going to involve intercepting

14080
07:56:21,280 --> 07:56:25,680
data packets as they traverse across the

14081
07:56:23,478 --> 07:56:27,360
network. And once these packets are

14082
07:56:25,680 --> 07:56:29,600
captured, well, they can be stored for

14083
07:56:27,360 --> 07:56:31,120
further processing and analysis. And

14084
07:56:29,600 --> 07:56:33,440
this can become very useful in an

14085
07:56:31,120 --> 07:56:34,958
incident response scenario. And there

14086
07:56:33,440 --> 07:56:36,798
are many methods and strategies for

14087
07:56:34,958 --> 07:56:38,600
capturing network packets. And each of

14088
07:56:36,798 --> 07:56:40,718
them have their own advantages and use

14089
07:56:38,600 --> 07:56:42,718
cases. So for example, we have the

14090
07:56:40,718 --> 07:56:44,718
concept of port mirroring or using span

14091
07:56:42,718 --> 07:56:46,718
ports. And this involves configuring a

14092
07:56:44,718 --> 07:56:48,878
network switch to copy traffic from one

14093
07:56:46,718 --> 07:56:51,760
or more ports or VLANs and send it to

14094
07:56:48,878 --> 07:56:53,520
another designated port for analysis.

14095
07:56:51,760 --> 07:56:55,040
And so by doing this we can monitor the

14096
07:56:53,520 --> 07:56:57,040
network traffic without interrupting the

14097
07:56:55,040 --> 07:56:58,718
normal network flow.

14098
07:56:57,040 --> 07:57:01,520
We also have solutions in the form of

14099
07:56:58,718 --> 07:57:03,680
inline network devices such as IDS or

14100
07:57:01,520 --> 07:57:06,080
IPS systems which can capture and

14101
07:57:03,680 --> 07:57:07,600
analyze packets as they pass through. So

14102
07:57:06,080 --> 07:57:09,440
these devices would be placed directly

14103
07:57:07,600 --> 07:57:11,398
within the network path and can take

14104
07:57:09,440 --> 07:57:14,240
action on packets based on predefined

14105
07:57:11,398 --> 07:57:15,680
rules. And we also have network taps and

14106
07:57:14,240 --> 07:57:17,360
these are physical devices that are

14107
07:57:15,680 --> 07:57:19,440
connected to network cables that can

14108
07:57:17,360 --> 07:57:21,280
passively capture the traffic. And so

14109
07:57:19,440 --> 07:57:24,240
these provide more of a non-intrusive

14110
07:57:21,280 --> 07:57:25,600
way to monitor the network traffic. And

14111
07:57:24,240 --> 07:57:27,440
each of these methods have their own

14112
07:57:25,600 --> 07:57:30,240
considerations in terms of cost and

14113
07:57:27,440 --> 07:57:31,760
complexity and also scalability. And so

14114
07:57:30,240 --> 07:57:33,760
the choice of method will depend on

14115
07:57:31,760 --> 07:57:35,798
specific requirements of the network and

14116
07:57:33,760 --> 07:57:38,000
the goals of the

14117
07:57:35,798 --> 07:57:40,240
organization. We talked about logging

14118
07:57:38,000 --> 07:57:41,680
and storing packet captures. Well,

14119
07:57:40,240 --> 07:57:43,440
typically this is going to be done

14120
07:57:41,680 --> 07:57:46,160
through the use of packet capture or

14121
07:57:43,440 --> 07:57:49,120
pcap files that store these packets for

14122
07:57:46,160 --> 07:57:51,680
detailed inspection. And so a pcap file

14123
07:57:49,120 --> 07:57:53,760
is a binary file format that's used to

14124
07:57:51,680 --> 07:57:55,558
store network packet data that's been

14125
07:57:53,760 --> 07:57:58,320
captured during network traffic

14126
07:57:55,558 --> 07:58:00,558
analysis. Each packet in a pcap file

14127
07:57:58,320 --> 07:58:02,638
typically includes the raw binary data

14128
07:58:00,558 --> 07:58:04,718
of the packet itself along with any

14129
07:58:02,638 --> 07:58:06,638
metadata such as timestamps or packet

14130
07:58:04,718 --> 07:58:08,520
lengths and possibly other information

14131
07:58:06,638 --> 07:58:10,718
depending on the capture tool that was

14132
07:58:08,520 --> 07:58:12,478
used. And when we're going through the

14133
07:58:10,718 --> 07:58:14,398
process to collect pcaps that contain

14134
07:58:12,478 --> 07:58:16,160
all of this network data, so including

14135
07:58:14,398 --> 07:58:18,320
both the packet headers and payloads or

14136
07:58:16,160 --> 07:58:20,440
all of the ones and zeros, we typically

14137
07:58:18,320 --> 07:58:22,718
refer to this as a full packet

14138
07:58:20,440 --> 07:58:24,878
capture. And once we've collected the

14139
07:58:22,718 --> 07:58:26,798
pcap files, we can leverage tools like

14140
07:58:24,878 --> 07:58:29,360
wireark, which can provide a graphical

14141
07:58:26,798 --> 07:58:31,360
interface to analyze the pcap files and

14142
07:58:29,360 --> 07:58:33,520
allow us to dissect and filter packets

14143
07:58:31,360 --> 07:58:35,840
in more detail to identify anomalies and

14144
07:58:33,520 --> 07:58:37,840
malicious activity. We can also use

14145
07:58:35,840 --> 07:58:40,160
command line tools like TCP dump to

14146
07:58:37,840 --> 07:58:41,840
analyze pcaps much more quickly and at a

14147
07:58:40,160 --> 07:58:43,398
larger scale. And we're going to cover

14148
07:58:41,840 --> 07:58:45,840
both of these methods in the following

14149
07:58:43,398 --> 07:58:47,600
lessons. And so, as mentioned, a full

14150
07:58:45,840 --> 07:58:49,920
packet capture is going to be the most

14151
07:58:47,600 --> 07:58:51,920
useful method for us as analysts when it

14152
07:58:49,920 --> 07:58:54,080
comes to incident response since it

14153
07:58:51,920 --> 07:58:55,760
captures every single bit of data and

14154
07:58:54,080 --> 07:58:58,478
provides the most detailed record of

14155
07:58:55,760 --> 07:59:00,398
network activity. And with this detail,

14156
07:58:58,478 --> 07:59:02,160
we can inspect the packet payloads to

14157
07:59:00,398 --> 07:59:04,080
understand the specific protocols and

14158
07:59:02,160 --> 07:59:05,680
applications being used. We can

14159
07:59:04,080 --> 07:59:07,600
potentially look at things like files

14160
07:59:05,680 --> 07:59:09,920
being accessed or requests that were

14161
07:59:07,600 --> 07:59:12,398
made or authentication attempts and much

14162
07:59:09,920 --> 07:59:14,638
more. However, this level of detail is

14163
07:59:12,398 --> 07:59:16,320
also part of its drawback. And so this

14164
07:59:14,638 --> 07:59:18,478
type of capture is going to be quite

14165
07:59:16,320 --> 07:59:20,638
resource inensive in terms of both

14166
07:59:18,478 --> 07:59:22,320
network bandwidth and storage space. So

14167
07:59:20,638 --> 07:59:24,398
capturing every packet that traverses

14168
07:59:22,320 --> 07:59:26,240
the network can quickly generate a large

14169
07:59:24,398 --> 07:59:28,000
amount of data requiring a lot of

14170
07:59:26,240 --> 07:59:29,798
storage capacity and network bandwidth

14171
07:59:28,000 --> 07:59:32,398
for both capturing and analyzing the

14172
07:59:29,798 --> 07:59:34,160
traffic. And also this kind of thing can

14173
07:59:32,398 --> 07:59:36,080
potentially raise privacy and legal

14174
07:59:34,160 --> 07:59:37,680
concerns as it might capture sensitive

14175
07:59:36,080 --> 07:59:38,958
information like user credentials or

14176
07:59:37,680 --> 07:59:40,878
personal communications and other

14177
07:59:38,958 --> 07:59:42,160
proprietary data. So there are often

14178
07:59:40,878 --> 07:59:44,080
considerations and potential

14179
07:59:42,160 --> 07:59:45,680
restrictions on what can be captured and

14180
07:59:44,080 --> 07:59:47,280
how long it can be stored. So it's

14181
07:59:45,680 --> 07:59:48,958
important for organizations at a high

14182
07:59:47,280 --> 07:59:51,120
level to consider these factors and

14183
07:59:48,958 --> 07:59:53,360
ensure that they're compliant. On the

14184
07:59:51,120 --> 07:59:55,360
other hand, there is a more macroscopic

14185
07:59:53,360 --> 07:59:58,478
or zoomed out approach to capturing

14186
07:59:55,360 --> 08:00:00,558
network data using flow records and

14187
07:59:58,478 --> 08:00:02,558
specifically we can talk about net flow.

14188
08:00:00,558 --> 08:00:04,718
And so net flow is a type of network

14189
08:00:02,558 --> 08:00:06,718
protocol developed by Cisco for

14190
08:00:04,718 --> 08:00:08,958
collecting IP traffic information and

14191
08:00:06,718 --> 08:00:11,200
monitoring network traffic. And it works

14192
08:00:08,958 --> 08:00:13,520
by collecting and aggregating metadata

14193
08:00:11,200 --> 08:00:15,600
about the network traffic flows such as

14194
08:00:13,520 --> 08:00:17,200
the source and destination IP addresses

14195
08:00:15,600 --> 08:00:19,280
or the ports and the protocols and

14196
08:00:17,200 --> 08:00:22,320
timestamps without capturing the full

14197
08:00:19,280 --> 08:00:24,320
packet contents and specifically a flow

14198
08:00:22,320 --> 08:00:26,478
record can be identified by the standard

14199
08:00:24,320 --> 08:00:28,718
five tpple. So that would contain the

14200
08:00:26,478 --> 08:00:30,798
source IP address, the source port, the

14201
08:00:28,718 --> 08:00:33,760
destination IP address, the destination

14202
08:00:30,798 --> 08:00:35,440
port along with the transport protocol.

14203
08:00:33,760 --> 08:00:37,680
For example, net flow specifically

14204
08:00:35,440 --> 08:00:39,040
defines a flow that shares seven values.

14205
08:00:37,680 --> 08:00:40,240
So it includes a few more than we

14206
08:00:39,040 --> 08:00:42,638
mentioned here which we don't really

14207
08:00:40,240 --> 08:00:44,320
need to get into at this stage. We can

14208
08:00:42,638 --> 08:00:46,160
think of the comparison here almost like

14209
08:00:44,320 --> 08:00:48,718
reviewing the transaction logs on a cell

14210
08:00:46,160 --> 08:00:50,718
phone bill. Right? So flow records or

14211
08:00:48,718 --> 08:00:52,718
net flow will act like a summary on the

14212
08:00:50,718 --> 08:00:54,638
phone bill and provide an overview of

14213
08:00:52,718 --> 08:00:56,558
you know who called whom, when the call

14214
08:00:54,638 --> 08:00:58,320
occurred, what was the timestamp of the

14215
08:00:56,558 --> 08:01:00,878
calls and for how long did they last so

14216
08:00:58,320 --> 08:01:02,798
the duration and this will give us a

14217
08:01:00,878 --> 08:01:04,920
bird's eye view and allow us to grasp

14218
08:01:02,798 --> 08:01:07,360
the broad patterns and trends in the

14219
08:01:04,920 --> 08:01:09,520
communication. On the other hand, pcaps

14220
08:01:07,360 --> 08:01:11,280
or packet captures go much deeper and

14221
08:01:09,520 --> 08:01:13,120
capture every packet exchanged during

14222
08:01:11,280 --> 08:01:14,798
the conversation. So this would be

14223
08:01:13,120 --> 08:01:16,718
similar to not only having a phone bill

14224
08:01:14,798 --> 08:01:18,798
with the summary of call transactions,

14225
08:01:16,718 --> 08:01:21,360
but also having a full voice recording

14226
08:01:18,798 --> 08:01:23,840
of what was said over the phone. Is this

14227
08:01:21,360 --> 08:01:25,520
the Krusty Krab? And so flow data is

14228
08:01:23,840 --> 08:01:27,840
typically generated by network devices

14229
08:01:25,520 --> 08:01:29,600
like routers and switches and firewalls

14230
08:01:27,840 --> 08:01:31,840
which can export flow records to a net

14231
08:01:29,600 --> 08:01:33,360
flow collector for analysis. And these

14232
08:01:31,840 --> 08:01:35,440
flow records can provide us insights

14233
08:01:33,360 --> 08:01:37,440
into network traffic patterns and allow

14234
08:01:35,440 --> 08:01:40,320
us to identify trends and detect

14235
08:01:37,440 --> 08:01:42,398
anomalous behavior. So one of the key

14236
08:01:40,320 --> 08:01:44,160
advantages to net flow or flow records

14237
08:01:42,398 --> 08:01:46,798
is its efficiency in terms of network

14238
08:01:44,160 --> 08:01:48,798
bandwidth and storage requirements.

14239
08:01:46,798 --> 08:01:50,958
So unlike full packet captures which can

14240
08:01:48,798 --> 08:01:52,798
generate large volumes of data, well net

14241
08:01:50,958 --> 08:01:54,398
flow data consists of a compact flow

14242
08:01:52,798 --> 08:01:56,638
record that can summarize network

14243
08:01:54,398 --> 08:01:58,878
activity and it's much smaller and much

14244
08:01:56,638 --> 08:02:00,878
more efficient and much more scalable.

14245
08:01:58,878 --> 08:02:03,040
And so it makes it much more suited for

14246
08:02:00,878 --> 08:02:05,240
continuous monitoring purposes without

14247
08:02:03,040 --> 08:02:07,360
placing a significant burden on network

14248
08:02:05,240 --> 08:02:08,958
resources. And because the records are

14249
08:02:07,360 --> 08:02:11,600
much smaller, well they can be stored

14250
08:02:08,958 --> 08:02:13,040
for much longer as well. I mentioned

14251
08:02:11,600 --> 08:02:15,760
earlier that there are other standards

14252
08:02:13,040 --> 08:02:17,360
or protocols than just net flow. There

14253
08:02:15,760 --> 08:02:20,240
are a number of similar network flow

14254
08:02:17,360 --> 08:02:22,320
protocols like JFlow, Sflow, Appflow, IP

14255
08:02:20,240 --> 08:02:24,718
fix, and various others that initially

14256
08:02:22,320 --> 08:02:26,718
stem from Cisco's efforts. But because

14257
08:02:24,718 --> 08:02:29,040
of the desire of other vendors to avoid

14258
08:02:26,718 --> 08:02:30,320
relying solely on Cisco technologies,

14259
08:02:29,040 --> 08:02:32,398
well, this is why a number of

14260
08:02:30,320 --> 08:02:34,160
alternative standards have emerged. And

14261
08:02:32,398 --> 08:02:35,840
so we can use a comprehensive tool set

14262
08:02:34,160 --> 08:02:37,920
like SILK, which stands for the system

14263
08:02:35,840 --> 08:02:39,680
for internet level knowledge, to collect

14264
08:02:37,920 --> 08:02:42,320
and process net flow and other types of

14265
08:02:39,680 --> 08:02:44,160
flow data. And we can use the silk suite

14266
08:02:42,320 --> 08:02:46,160
to filter and aggregate and analyze the

14267
08:02:44,160 --> 08:02:48,638
data no matter what proprietary means it

14268
08:02:46,160 --> 08:02:50,878
came from or was generated from. But

14269
08:02:48,638 --> 08:02:52,798
again on the other hand because net flow

14270
08:02:50,878 --> 08:02:54,320
data lacks that payload detail it

14271
08:02:52,798 --> 08:02:57,040
doesn't really give you the full picture

14272
08:02:54,320 --> 08:02:58,798
compared to pcaps. And so while a lot of

14273
08:02:57,040 --> 08:03:00,398
people will frame the conversation as if

14274
08:02:58,798 --> 08:03:02,080
you can only have one or the other

14275
08:03:00,398 --> 08:03:04,160
within a sock environment. Both

14276
08:03:02,080 --> 08:03:05,520
packet-based and flow-based analyses

14277
08:03:04,160 --> 08:03:07,200
support each other and play

14278
08:03:05,520 --> 08:03:09,520
complimentary roles in maintaining

14279
08:03:07,200 --> 08:03:11,520
network security. And so analysts can

14280
08:03:09,520 --> 08:03:13,200
typically use flow-based analysis to

14281
08:03:11,520 --> 08:03:14,798
monitor highle traffic patterns and

14282
08:03:13,200 --> 08:03:17,040
detect anomalies or suspicious

14283
08:03:14,798 --> 08:03:18,958
behaviors. And once an anomaly is

14284
08:03:17,040 --> 08:03:20,478
identified or detected, well, they can

14285
08:03:18,958 --> 08:03:22,798
then capture and examine the full

14286
08:03:20,478 --> 08:03:25,440
packets to correspond to the suspicious

14287
08:03:22,798 --> 08:03:27,360
activity for a more detailed inspection.

14288
08:03:25,440 --> 08:03:29,360
Right? So pcaps might be more suitable

14289
08:03:27,360 --> 08:03:31,360
when investigating a known bad system or

14290
08:03:29,360 --> 08:03:32,878
a network segment where the depth of the

14291
08:03:31,360 --> 08:03:34,398
detail provided by the full packet

14292
08:03:32,878 --> 08:03:36,398
capture is necessary for thorough

14293
08:03:34,398 --> 08:03:38,240
analysis. On the other hand, flow

14294
08:03:36,398 --> 08:03:39,920
records are better suited for continuous

14295
08:03:38,240 --> 08:03:41,520
monitoring and should ideally be

14296
08:03:39,920 --> 08:03:43,600
deployed more near the edge of the

14297
08:03:41,520 --> 08:03:44,920
network to watch for specific activity

14298
08:03:43,600 --> 08:03:47,520
on a day-to-day

14299
08:03:44,920 --> 08:03:48,878
basis. And so with all of that, we're

14300
08:03:47,520 --> 08:03:50,718
now going to jump right into some

14301
08:03:48,878 --> 08:03:52,958
hands-on with performing full packet

14302
08:03:50,718 --> 08:03:55,000
capture and analysis using various tools

14303
08:03:52,958 --> 08:03:57,120
in the following

14304
08:03:55,000 --> 08:03:59,200
lessons. Let's take a look at one of the

14305
08:03:57,120 --> 08:04:00,958
most widely used and efficient ways to

14306
08:03:59,200 --> 08:04:04,558
capture and analyze packets from the

14307
08:04:00,958 --> 08:04:06,398
command line, the TCP dump utility. TCP

14308
08:04:04,558 --> 08:04:08,478
dump is a powerful command line packet

14309
08:04:06,398 --> 08:04:10,398
analyzer that allows us to intercept and

14310
08:04:08,478 --> 08:04:13,200
display packets being transmitted over a

14311
08:04:10,398 --> 08:04:14,878
network and with TCP dump we can perform

14312
08:04:13,200 --> 08:04:16,478
many of the powerful functions that we

14313
08:04:14,878 --> 08:04:18,160
can get in a graphical user interface

14314
08:04:16,478 --> 08:04:19,840
like wireark but with greater

14315
08:04:18,160 --> 08:04:22,398
versatility and advantage of being

14316
08:04:19,840 --> 08:04:23,840
easily scriptable. However, both TCP

14317
08:04:22,398 --> 08:04:25,280
dump and wireark have their own

14318
08:04:23,840 --> 08:04:26,718
strengths and weaknesses which we'll

14319
08:04:25,280 --> 08:04:29,200
talk about when we get to the wireark

14320
08:04:26,718 --> 08:04:30,798
section. And so while command line tools

14321
08:04:29,200 --> 08:04:33,120
can be less userfriendly compared to

14322
08:04:30,798 --> 08:04:34,958
GUIs or graphical user interfaces, they

14323
08:04:33,120 --> 08:04:37,200
offer more advantages in terms of speed

14324
08:04:34,958 --> 08:04:39,120
and scriptability and scalability and

14325
08:04:37,200 --> 08:04:41,680
also the ability to run it in a headless

14326
08:04:39,120 --> 08:04:43,200
format without needing a GUI. And

14327
08:04:41,680 --> 08:04:44,798
there's a similar program on Windows

14328
08:04:43,200 --> 08:04:46,478
called Windump, which offers much of the

14329
08:04:44,798 --> 08:04:48,398
same functionality, but in this lesson,

14330
08:04:46,478 --> 08:04:50,240
we'll focus on the more ubiquitous TCP

14331
08:04:48,398 --> 08:04:52,240
dump. And ubiquity is an important part

14332
08:04:50,240 --> 08:04:54,320
here because TCP dump is available on

14333
08:04:52,240 --> 08:04:56,000
almost all Unix like operating systems

14334
08:04:54,320 --> 08:04:57,840
making it a useful tool in our sock

14335
08:04:56,000 --> 08:05:00,160
analyst toolkit particularly during

14336
08:04:57,840 --> 08:05:01,920
instant response scenarios. And so like

14337
08:05:00,160 --> 08:05:03,760
I said it's typically already installed

14338
08:05:01,920 --> 08:05:05,120
on your distribution. But for the chance

14339
08:05:03,760 --> 08:05:08,718
you need to install it well we can just

14340
08:05:05,120 --> 08:05:10,878
run pseudoappget install TCP dump and

14341
08:05:08,718 --> 08:05:12,398
just type in your password there. But

14342
08:05:10,878 --> 08:05:15,040
you can see we already have it installed

14343
08:05:12,398 --> 08:05:16,718
on the lab machine. And so with TCP

14344
08:05:15,040 --> 08:05:18,478
dump, which we'll get into, well, we can

14345
08:05:16,718 --> 08:05:20,798
capture packets traversing any of the

14346
08:05:18,478 --> 08:05:22,638
network interfaces on our system. We can

14347
08:05:20,798 --> 08:05:24,958
also apply complex filters to capture

14348
08:05:22,638 --> 08:05:27,200
only specified packets based on their

14349
08:05:24,958 --> 08:05:30,240
protocols or IP addresses or even ports

14350
08:05:27,200 --> 08:05:31,680
and TCP flags. And we can decode packets

14351
08:05:30,240 --> 08:05:34,000
and display their content in a more

14352
08:05:31,680 --> 08:05:35,440
human readable format as well. And with

14353
08:05:34,000 --> 08:05:37,680
this, we can also do what's called

14354
08:05:35,440 --> 08:05:39,760
offline analysis as well because we can

14355
08:05:37,680 --> 08:05:42,000
save captured packets to a pcap file for

14356
08:05:39,760 --> 08:05:44,080
later examination. The pcap files that

14357
08:05:42,000 --> 08:05:45,600
we save through TCP dump can also be

14358
08:05:44,080 --> 08:05:47,600
analyzed through any other tool that

14359
08:05:45,600 --> 08:05:49,280
supports the format like wireark which

14360
08:05:47,600 --> 08:05:50,718
provides us again more flexibility in

14361
08:05:49,280 --> 08:05:53,200
how we want to approach our packet

14362
08:05:50,718 --> 08:05:55,120
analysis and response. And so common use

14363
08:05:53,200 --> 08:05:56,958
cases you'll see with TCP dump are

14364
08:05:55,120 --> 08:05:58,718
things like spanport monitoring, right?

14365
08:05:56,958 --> 08:06:00,398
So we can set up TCB dump to capture

14366
08:05:58,718 --> 08:06:02,798
traffic from a span or a switchport

14367
08:06:00,398 --> 08:06:04,320
analyzer on a network switch. And this

14368
08:06:02,798 --> 08:06:05,920
will allow us to monitor all of the

14369
08:06:04,320 --> 08:06:07,200
traffic that passes through the switch

14370
08:06:05,920 --> 08:06:09,440
and give us more comprehensive

14371
08:06:07,200 --> 08:06:10,798
visibility into our network activity. Or

14372
08:06:09,440 --> 08:06:12,558
we can do things like remote packet

14373
08:06:10,798 --> 08:06:14,398
captures, right? So we can remote into a

14374
08:06:12,558 --> 08:06:16,558
server or workstation. And we can use

14375
08:06:14,398 --> 08:06:18,080
the TCP dump utility to capture packets

14376
08:06:16,558 --> 08:06:19,680
directly on the server or the

14377
08:06:18,080 --> 08:06:22,160
workstation without even needing access

14378
08:06:19,680 --> 08:06:23,600
to the GUI. And we can also do things

14379
08:06:22,160 --> 08:06:25,200
with scripts, right? So we can easily

14380
08:06:23,600 --> 08:06:27,360
integrate scripts to automate packet

14381
08:06:25,200 --> 08:06:29,040
capture and analysis. So we might want

14382
08:06:27,360 --> 08:06:30,798
to set up some automated captures during

14383
08:06:29,040 --> 08:06:33,200
specific times or triggers based on

14384
08:06:30,798 --> 08:06:34,958
certain network events. And so let's get

14385
08:06:33,200 --> 08:06:36,958
into it here. The first thing I'll

14386
08:06:34,958 --> 08:06:38,718
mention here is that TCP dump interacts

14387
08:06:36,958 --> 08:06:40,878
directly with network interfaces to

14388
08:06:38,718 --> 08:06:42,718
capture its packets. And it does this by

14389
08:06:40,878 --> 08:06:44,718
accessing low-level network resources

14390
08:06:42,718 --> 08:06:46,160
within the operating system. And so

14391
08:06:44,718 --> 08:06:47,760
because of this, these actions are going

14392
08:06:46,160 --> 08:06:49,360
to require elevated permissions to

14393
08:06:47,760 --> 08:06:51,200
ensure that only authorized users can

14394
08:06:49,360 --> 08:06:53,360
interact with the OS at this level and

14395
08:06:51,200 --> 08:06:54,958
intercept and analyze network traffic.

14396
08:06:53,360 --> 08:06:56,398
And so because of this, TCP dump

14397
08:06:54,958 --> 08:06:57,840
typically needs to be run with root

14398
08:06:56,398 --> 08:07:00,000
permissions if we're doing things like

14399
08:06:57,840 --> 08:07:01,760
capturing packets. And that can be done

14400
08:07:00,000 --> 08:07:03,920
quite simply by prepending the pseudo

14401
08:07:01,760 --> 08:07:06,000
command or the super user do before the

14402
08:07:03,920 --> 08:07:08,798
TCP dump command to execute it as a

14403
08:07:06,000 --> 08:07:10,320
super user or root. Right? So if I just

14404
08:07:08,798 --> 08:07:13,200
type who am I? Well, I am not the root

14405
08:07:10,320 --> 08:07:14,638
user. And so if I just type TCP dump and

14406
08:07:13,200 --> 08:07:16,240
try to monitor on my loop back

14407
08:07:14,638 --> 08:07:18,320
interface, well you can see we don't

14408
08:07:16,240 --> 08:07:20,398
have permission to perform that action.

14409
08:07:18,320 --> 08:07:22,000
However, if I run the same command but

14410
08:07:20,398 --> 08:07:24,478
prepend the pseudo command in front of

14411
08:07:22,000 --> 08:07:25,680
it, well I can run this as pseudo. And

14412
08:07:24,478 --> 08:07:27,120
if you haven't typed in your password

14413
08:07:25,680 --> 08:07:29,280
already, you'll need to at this point.

14414
08:07:27,120 --> 08:07:32,160
But I already have. In fact, I can

14415
08:07:29,280 --> 08:07:32,160
demonstrate that in a new

14416
08:07:33,240 --> 08:07:37,558
tab. So, you can see it's requiring our

14417
08:07:35,440 --> 08:07:39,680
password, but now we're

14418
08:07:37,558 --> 08:07:41,040
listening. And so, all of the commands

14419
08:07:39,680 --> 08:07:43,600
that we're going to use are going to

14420
08:07:41,040 --> 08:07:45,840
involve quite a simple command syntax.

14421
08:07:43,600 --> 08:07:47,680
And that's going to be pseudo TCP dump.

14422
08:07:45,840 --> 08:07:50,080
And then we can provide any options that

14423
08:07:47,680 --> 08:07:52,320
we want. For example, we could specify a

14424
08:07:50,080 --> 08:07:54,398
specific interface with TAC I and then

14425
08:07:52,320 --> 08:07:56,000
provide the name of the interface. Or we

14426
08:07:54,398 --> 08:07:57,840
can specify specific capture filters,

14427
08:07:56,000 --> 08:07:59,440
which we're going to get into shortly.

14428
08:07:57,840 --> 08:08:01,360
And each option we provide will of

14429
08:07:59,440 --> 08:08:02,718
course require an expression or a value

14430
08:08:01,360 --> 08:08:04,320
such as the actual interface we're

14431
08:08:02,718 --> 08:08:05,920
listening on or an IP address that we're

14432
08:08:04,320 --> 08:08:08,160
filtering on. But again, we'll get more

14433
08:08:05,920 --> 08:08:09,680
into this shortly. So speaking of

14434
08:08:08,160 --> 08:08:11,600
network interfaces, well, let's talk

14435
08:08:09,680 --> 08:08:13,200
about them for a second. And so network

14436
08:08:11,600 --> 08:08:14,958
interfaces are the points of connection

14437
08:08:13,200 --> 08:08:16,798
between your computer and the network.

14438
08:08:14,958 --> 08:08:18,000
And they can be physical interfaces,

14439
08:08:16,798 --> 08:08:20,320
right? So you might have an Ethernet

14440
08:08:18,000 --> 08:08:22,080
port or a Wi-Fi adapter or they can be

14441
08:08:20,320 --> 08:08:23,600
virtual like a loop back interface or in

14442
08:08:22,080 --> 08:08:26,080
the case of a VM, it's all technically

14443
08:08:23,600 --> 08:08:28,080
virtualized. And each of these

14444
08:08:26,080 --> 08:08:30,478
interfaces allows us to send or receive

14445
08:08:28,080 --> 08:08:32,478
data over a network. And we can view all

14446
08:08:30,478 --> 08:08:34,280
of the network interfaces on our system

14447
08:08:32,478 --> 08:08:36,718
by running iplink

14448
08:08:34,280 --> 08:08:39,680
show. In this case, note that we have a

14449
08:08:36,718 --> 08:08:41,440
loop back interface with this hello here

14450
08:08:39,680 --> 08:08:44,000
that is used for internal communication

14451
08:08:41,440 --> 08:08:47,320
within our system itself. And we also

14452
08:08:44,000 --> 08:08:49,760
have an interface here. In my case, it's

14453
08:08:47,320 --> 08:08:51,200
P0S3 that we're using to connect to the

14454
08:08:49,760 --> 08:08:52,558
internet. And yours might be named

14455
08:08:51,200 --> 08:08:54,320
differently, but for now, let's just

14456
08:08:52,558 --> 08:08:56,478
make note of them. And so when we're

14457
08:08:54,320 --> 08:08:58,080
using TCP dump, we need to specify which

14458
08:08:56,478 --> 08:09:00,478
interface we want to capture packets

14459
08:08:58,080 --> 08:09:02,240
from. And this is the highest level of

14460
08:09:00,478 --> 08:09:03,920
capture filtering that we have because

14461
08:09:02,240 --> 08:09:05,280
the network interface determines the

14462
08:09:03,920 --> 08:09:07,120
scope of the traffic that we'll be

14463
08:09:05,280 --> 08:09:08,958
monitoring and collecting. And if we

14464
08:09:07,120 --> 08:09:10,320
don't specify an interface, well, TCP

14465
08:09:08,958 --> 08:09:11,920
dump will search through our systems

14466
08:09:10,320 --> 08:09:13,520
interface list for the lowest numbered

14467
08:09:11,920 --> 08:09:15,440
one that's configured up, and we'll

14468
08:09:13,520 --> 08:09:17,360
choose that one for the capture. And so

14469
08:09:15,440 --> 08:09:19,440
to list the available network interfaces

14470
08:09:17,360 --> 08:09:21,520
for capture within TCP dump, well, we

14471
08:09:19,440 --> 08:09:23,600
can just provide the TACD option with no

14472
08:09:21,520 --> 08:09:24,878
value. And because we're not monitoring

14473
08:09:23,600 --> 08:09:26,398
anything yet, well, we actually don't

14474
08:09:24,878 --> 08:09:27,398
need to prepen the pseudo command at

14475
08:09:26,398 --> 08:09:30,240
this

14476
08:09:27,398 --> 08:09:31,440
time. So if I hit run here, well, we can

14477
08:09:30,240 --> 08:09:34,080
see we have all these available

14478
08:09:31,440 --> 08:09:35,160
interfaces to choose, right? So we have

14479
08:09:34,080 --> 08:09:38,000
that

14480
08:09:35,160 --> 08:09:40,320
ENTP031. We have any here which will

14481
08:09:38,000 --> 08:09:42,398
capture traffic on all interfaces. We

14482
08:09:40,320 --> 08:09:43,680
have our loop back address. And then we

14483
08:09:42,398 --> 08:09:45,680
have some additional ones here that we

14484
08:09:43,680 --> 08:09:47,200
don't need to worry about. And so in

14485
08:09:45,680 --> 08:09:49,040
some cases, you might want to monitor

14486
08:09:47,200 --> 08:09:51,200
multiple network interfaces at the same

14487
08:09:49,040 --> 08:09:53,040
time. TCP dump does not support

14488
08:09:51,200 --> 08:09:55,120
capturing from multiple interfaces in a

14489
08:09:53,040 --> 08:09:57,360
single command directly. But you can run

14490
08:09:55,120 --> 08:09:59,600
multiple instances of TCP dump each

14491
08:09:57,360 --> 08:10:01,040
capturing from a different interface.

14492
08:09:59,600 --> 08:10:03,120
And if we do that, well, we can use

14493
08:10:01,040 --> 08:10:04,958
tools like Wireshark or Mergecap, which

14494
08:10:03,120 --> 08:10:07,520
can merge multiple capture files into

14495
08:10:04,958 --> 08:10:09,360
one file for analysis. And assuming your

14496
08:10:07,520 --> 08:10:11,760
kernel supports it, in this case we of

14497
08:10:09,360 --> 08:10:13,680
course do, well, we can run TCP dump

14498
08:10:11,760 --> 08:10:15,200
with the any option for the interface,

14499
08:10:13,680 --> 08:10:17,760
which will capture traffic on all

14500
08:10:15,200 --> 08:10:18,958
interfaces. But if we do select the any

14501
08:10:17,760 --> 08:10:21,280
option, well, we won't be able to

14502
08:10:18,958 --> 08:10:23,040
capture traffic in promiscuous mode. And

14503
08:10:21,280 --> 08:10:24,638
that's a type of network interface mode

14504
08:10:23,040 --> 08:10:26,718
that allows a network device like our

14505
08:10:24,638 --> 08:10:28,240
network interface card to intercept and

14506
08:10:26,718 --> 08:10:29,840
read all network traffic that passes

14507
08:10:28,240 --> 08:10:31,360
through it regardless of whether our

14508
08:10:29,840 --> 08:10:33,040
traffic is addressed to that device or

14509
08:10:31,360 --> 08:10:34,798
not. And again, that's why it's best

14510
08:10:33,040 --> 08:10:37,360
practice to set an interface when we're

14511
08:10:34,798 --> 08:10:38,958
configuring TCP dump. And so, we've

14512
08:10:37,360 --> 08:10:41,440
listed our interfaces, but how do we

14513
08:10:38,958 --> 08:10:43,920
actually specify one? Well, we can run

14514
08:10:41,440 --> 08:10:46,080
TCP dump here and provide the TAC I flag

14515
08:10:43,920 --> 08:10:48,558
or the I argument followed by the

14516
08:10:46,080 --> 08:10:49,680
interface name or the index number,

14517
08:10:48,558 --> 08:10:53,240
right? So, you can see these are

14518
08:10:49,680 --> 08:10:55,920
numbered. This index one here refers to

14519
08:10:53,240 --> 08:10:57,360
entpex 2 here refers to any. So, in the

14520
08:10:55,920 --> 08:10:59,360
case that we want to monitor our loop

14521
08:10:57,360 --> 08:11:01,840
back address, well, I can either type

14522
08:10:59,360 --> 08:11:03,840
hello or I can provide the number three.

14523
08:11:01,840 --> 08:11:05,840
In this case, I'll just type hello. And

14524
08:11:03,840 --> 08:11:07,440
if I just hit enter, well, we're going

14525
08:11:05,840 --> 08:11:10,000
to start monitoring the traffic on our

14526
08:11:07,440 --> 08:11:11,200
local loop back interface. And so now

14527
08:11:10,000 --> 08:11:13,040
that we're listening for network

14528
08:11:11,200 --> 08:11:14,478
connections on our loop back interface,

14529
08:11:13,040 --> 08:11:16,240
well, let's start simulating some

14530
08:11:14,478 --> 08:11:17,920
traffic. And this will be very similar

14531
08:11:16,240 --> 08:11:19,600
to what we did in the network security

14532
08:11:17,920 --> 08:11:22,478
theory lesson where we looked at the

14533
08:11:19,600 --> 08:11:24,160
individual TCP handshake packets. And so

14534
08:11:22,478 --> 08:11:26,120
what I'm going to do is press control,

14535
08:11:24,160 --> 08:11:28,000
shift, and t to open up another

14536
08:11:26,120 --> 08:11:30,160
terminal. And I'm just going to zoom

14537
08:11:28,000 --> 08:11:32,240
this in. And I'm going to open a third

14538
08:11:30,160 --> 08:11:33,760
one by again pressing control shift and

14539
08:11:32,240 --> 08:11:35,520
t.

14540
08:11:33,760 --> 08:11:37,120
And if you recall what we did last time,

14541
08:11:35,520 --> 08:11:38,958
well, I'm going to use the netcat

14542
08:11:37,120 --> 08:11:41,040
utility, which is a utility that can

14543
08:11:38,958 --> 08:11:42,558
read and write to network connections.

14544
08:11:41,040 --> 08:11:44,080
And so I'm going to set up a listening

14545
08:11:42,558 --> 08:11:46,398
server here. And I'm just going to run

14546
08:11:44,080 --> 08:11:49,200
NC for netcat. I'm going to provide the

14547
08:11:46,398 --> 08:11:51,040
L flag or the L argument here to listen.

14548
08:11:49,200 --> 08:11:52,320
I'm going to provide the V argument to

14549
08:11:51,040 --> 08:11:53,798
make it verbose. So we're actually going

14550
08:11:52,320 --> 08:11:56,478
to see some output when we get a

14551
08:11:53,798 --> 08:11:58,000
connection. And the TAC P flag to

14552
08:11:56,478 --> 08:12:01,200
specify the port that we want to listen

14553
08:11:58,000 --> 08:12:03,120
on. In this case, I will do 4 3 2 1 for

14554
08:12:01,200 --> 08:12:04,638
the port. And again, if you recall from

14555
08:12:03,120 --> 08:12:05,638
last time, we can actually combine these

14556
08:12:04,638 --> 08:12:07,680
arguments

14557
08:12:05,638 --> 08:12:09,200
together. And so I'll just remove the

14558
08:12:07,680 --> 08:12:12,240
dashes there and just keep one set of

14559
08:12:09,200 --> 08:12:13,558
dashes to provide - LVP to include all

14560
08:12:12,240 --> 08:12:15,440
of those

14561
08:12:13,558 --> 08:12:17,320
arguments. And so you can see we're

14562
08:12:15,440 --> 08:12:19,280
listening on port

14563
08:12:17,320 --> 08:12:21,680
4321. I'm going to head over to our

14564
08:12:19,280 --> 08:12:23,920
third tab here. And if we think of this

14565
08:12:21,680 --> 08:12:26,320
one as the server, well, this third tab

14566
08:12:23,920 --> 08:12:28,080
here is going to be our client. And so

14567
08:12:26,320 --> 08:12:29,840
now I'm going to type the netcat utility

14568
08:12:28,080 --> 08:12:31,680
again. And in this time, I'm not

14569
08:12:29,840 --> 08:12:33,638
listening, but I'm connecting to our

14570
08:12:31,680 --> 08:12:35,760
local host on

14571
08:12:33,638 --> 08:12:38,320
127.0.0.1. Remember, we could also type

14572
08:12:35,760 --> 08:12:40,478
local host as well instead, but I'll

14573
08:12:38,320 --> 08:12:42,240
just keep the IP address. I'm going to

14574
08:12:40,478 --> 08:12:44,320
provide the TAC V flag once again to

14575
08:12:42,240 --> 08:12:46,200
make it verbose. And then I just need to

14576
08:12:44,320 --> 08:12:48,718
provide the port number

14577
08:12:46,200 --> 08:12:50,320
4321. And if I hit run here, well, you

14578
08:12:48,718 --> 08:12:52,200
can see we have succeeded and made a

14579
08:12:50,320 --> 08:12:54,398
connection to our local host on that

14580
08:12:52,200 --> 08:12:56,000
port. If we head back over to our

14581
08:12:54,398 --> 08:12:58,718
server, well, we can see the connection

14582
08:12:56,000 --> 08:13:00,558
was received. And again, we have our

14583
08:12:58,718 --> 08:13:02,320
highle port here or our ephemeral port

14584
08:13:00,558 --> 08:13:03,240
that our operating system chose for the

14585
08:13:02,320 --> 08:13:05,840
client's

14586
08:13:03,240 --> 08:13:07,680
connection. If we head back over to TCP

14587
08:13:05,840 --> 08:13:09,600
dump, well, you can see we caught the

14588
08:13:07,680 --> 08:13:11,440
entire 3-way handshake. So, if we think

14589
08:13:09,600 --> 08:13:14,000
of this as a single line, well, this is

14590
08:13:11,440 --> 08:13:17,360
our sin based on the TCP flag with the

14591
08:13:14,000 --> 08:13:20,080
capital S. This next line here is going

14592
08:13:17,360 --> 08:13:21,878
to be the sin act. And lastly, this

14593
08:13:20,080 --> 08:13:24,478
third line here is going to be the final

14594
08:13:21,878 --> 08:13:26,240
act. And so this can kind of be a little

14595
08:13:24,478 --> 08:13:28,320
difficult to read at first, especially

14596
08:13:26,240 --> 08:13:29,920
on this screen when I have it zoomed in.

14597
08:13:28,320 --> 08:13:31,360
So let's look at the first line once

14598
08:13:29,920 --> 08:13:32,878
again and let's see if we can make out

14599
08:13:31,360 --> 08:13:35,360
the different fields that are being

14600
08:13:32,878 --> 08:13:37,040
logged in this connection. Right? So at

14601
08:13:35,360 --> 08:13:39,200
first here we have what looks like a

14602
08:13:37,040 --> 08:13:41,360
timestamp and this indicates the time at

14603
08:13:39,200 --> 08:13:43,440
which the packet was captured and this

14604
08:13:41,360 --> 08:13:44,958
is the default format of the timestamp

14605
08:13:43,440 --> 08:13:47,040
and we'll get into this later but we can

14606
08:13:44,958 --> 08:13:48,558
tell TCP dump to display this in a

14607
08:13:47,040 --> 08:13:50,718
different format like Unix time if we'd

14608
08:13:48,558 --> 08:13:52,000
like. Next here we have the protocol

14609
08:13:50,718 --> 08:13:54,638
which we can see is the internet

14610
08:13:52,000 --> 08:13:56,320
protocol or IP. And if you remember the

14611
08:13:54,638 --> 08:13:58,000
concept of encapsulation well inside

14612
08:13:56,320 --> 08:14:00,360
this protocol we would have the TCP

14613
08:13:58,000 --> 08:14:01,958
header. This third field here we can see

14614
08:14:00,360 --> 08:14:04,478
localhost

14615
08:14:01,958 --> 08:14:06,958
54388. So this specifies the source

14616
08:14:04,478 --> 08:14:09,718
address and port. So if you recall

14617
08:14:06,958 --> 08:14:11,920
localhost refers to that

14618
08:14:09,718 --> 08:14:13,440
127.0.0.1 and this is the source port

14619
08:14:11,920 --> 08:14:15,520
number making the initial SIN

14620
08:14:13,440 --> 08:14:18,080
connection. This arrow here indicates

14621
08:14:15,520 --> 08:14:20,558
the direction of the packet from source

14622
08:14:18,080 --> 08:14:21,920
to destination. And so obviously

14623
08:14:20,558 --> 08:14:23,360
everything on the right of this arrow

14624
08:14:21,920 --> 08:14:25,120
here is going to be the destination

14625
08:14:23,360 --> 08:14:27,440
address and the destination port

14626
08:14:25,120 --> 08:14:28,958
separated by this period. So next we

14627
08:14:27,440 --> 08:14:30,320
have the flag section. And we've covered

14628
08:14:28,958 --> 08:14:32,320
this quite a bit, right? So this

14629
08:14:30,320 --> 08:14:34,798
indicates the TCP flags that were set on

14630
08:14:32,320 --> 08:14:36,958
the packet. And of course in this case

14631
08:14:34,798 --> 08:14:39,760
the capital S here stands for SIN which

14632
08:14:36,958 --> 08:14:42,080
is used to initiate the TCP connection.

14633
08:14:39,760 --> 08:14:43,600
Next we have our sequence number. And so

14634
08:14:42,080 --> 08:14:45,600
this is the initial sequence number for

14635
08:14:43,600 --> 08:14:48,478
the TCP connection which is that

14636
08:14:45,600 --> 08:14:50,320
randomly chosen 32-bit number. Next here

14637
08:14:48,478 --> 08:14:52,240
we have window size. If you remember

14638
08:14:50,320 --> 08:14:54,320
when we broke down a TCP packet, well,

14639
08:14:52,240 --> 08:14:56,398
we had a field for window size and this

14640
08:14:54,320 --> 08:14:58,160
is the size of the TCP receive window

14641
08:14:56,398 --> 08:14:59,920
which indicates the amount of data in

14642
08:14:58,160 --> 08:15:01,680
bytes that the sender is willing to

14643
08:14:59,920 --> 08:15:04,240
receive. We don't really need to worry

14644
08:15:01,680 --> 08:15:06,080
about this at this stage. We also have a

14645
08:15:04,240 --> 08:15:07,680
section here listing all of the TCP

14646
08:15:06,080 --> 08:15:10,320
header options, which we don't really

14647
08:15:07,680 --> 08:15:12,638
need to worry about. And lastly, we have

14648
08:15:10,320 --> 08:15:14,240
the length of the actual payload data.

14649
08:15:12,638 --> 08:15:15,840
In this case, we were just initiating a

14650
08:15:14,240 --> 08:15:18,160
connection. So, we don't actually have a

14651
08:15:15,840 --> 08:15:19,840
length specified here because this is a

14652
08:15:18,160 --> 08:15:22,000
SIN packet. Well, it doesn't carry any

14653
08:15:19,840 --> 08:15:23,680
payload data. So, hopefully that makes

14654
08:15:22,000 --> 08:15:25,080
it a bit easier to start going through

14655
08:15:23,680 --> 08:15:27,520
these TCP

14656
08:15:25,080 --> 08:15:28,440
packets. And so, if I return to our

14657
08:15:27,520 --> 08:15:32,080
client

14658
08:15:28,440 --> 08:15:33,840
here and just send a hello message,

14659
08:15:32,080 --> 08:15:35,760
well, we can see the specific packet of

14660
08:15:33,840 --> 08:15:37,760
that message. We can see by the length

14661
08:15:35,760 --> 08:15:39,760
of six here. So there was actual payload

14662
08:15:37,760 --> 08:15:41,440
data within this packet. And you can see

14663
08:15:39,760 --> 08:15:43,120
to send over the message, we had a push

14664
08:15:41,440 --> 08:15:45,040
flag set and an acknowledgement flag

14665
08:15:43,120 --> 08:15:46,478
set. And when the listening server

14666
08:15:45,040 --> 08:15:49,120
received the message, well, they sent

14667
08:15:46,478 --> 08:15:50,558
back an act. And so all of the data that

14668
08:15:49,120 --> 08:15:52,798
we're sending back and forth here over

14669
08:15:50,558 --> 08:15:55,600
netcat is unencrypted, meaning that it's

14670
08:15:52,798 --> 08:15:57,558
in plain text format. So let's see if we

14671
08:15:55,600 --> 08:16:00,240
can view this payload within our packet

14672
08:15:57,558 --> 08:16:02,398
capture. And so let's cancel out our TCB

14673
08:16:00,240 --> 08:16:04,240
dump instance by pressing Ctrl and C.

14674
08:16:02,398 --> 08:16:05,600
And then let's start up a new one. So

14675
08:16:04,240 --> 08:16:07,520
I'm just going to clear the screen and

14676
08:16:05,600 --> 08:16:10,320
start it up again. This time let's add

14677
08:16:07,520 --> 08:16:12,398
the capital X flag. And so this capital

14678
08:16:10,320 --> 08:16:14,240
X argument here is going to tell TCP

14679
08:16:12,398 --> 08:16:16,798
dump to print each packet in both

14680
08:16:14,240 --> 08:16:18,240
hexadimal and ASKI format. And so

14681
08:16:16,798 --> 08:16:20,240
essentially it's going to show the raw

14682
08:16:18,240 --> 08:16:22,398
packets in hexadeimal allowing you to

14683
08:16:20,240 --> 08:16:24,080
see the individual bytes of the data and

14684
08:16:22,398 --> 08:16:26,080
then provides the corresponding ASKI

14685
08:16:24,080 --> 08:16:27,760
characters making it easier to interpret

14686
08:16:26,080 --> 08:16:29,440
the content of the packet. Right? Right.

14687
08:16:27,760 --> 08:16:32,440
So, I'm just going to listen here and

14688
08:16:29,440 --> 08:16:34,680
let's send another client hello

14689
08:16:32,440 --> 08:16:37,520
message. And so, I'm going to head back

14690
08:16:34,680 --> 08:16:39,040
over and this time we get a lot more

14691
08:16:37,520 --> 08:16:40,958
information. We can actually see some of

14692
08:16:39,040 --> 08:16:42,478
the payload data. So, this looks very

14693
08:16:40,958 --> 08:16:44,478
similar. We have our length of six here

14694
08:16:42,478 --> 08:16:46,798
from our hello message. We have the push

14695
08:16:44,478 --> 08:16:49,920
and the act set, but we have all of this

14696
08:16:46,798 --> 08:16:52,160
hexodimal data here. And if we look over

14697
08:16:49,920 --> 08:16:54,878
to the ASI of that data, well, we can

14698
08:16:52,160 --> 08:16:56,638
make out our hello message right here.

14699
08:16:54,878 --> 08:16:58,440
So in this case, we can actually decode

14700
08:16:56,638 --> 08:17:00,920
the unencrypted message that we sent

14701
08:16:58,440 --> 08:17:03,600
over. And so I'm going to cancel this

14702
08:17:00,920 --> 08:17:06,398
again. And instead of the X flag, this

14703
08:17:03,600 --> 08:17:08,000
time I'm going to select the capital A.

14704
08:17:06,398 --> 08:17:09,760
And this is another common flag or

14705
08:17:08,000 --> 08:17:12,398
argument that you'll see. And the

14706
08:17:09,760 --> 08:17:15,120
capital A argument tells TCP dump to

14707
08:17:12,398 --> 08:17:16,240
just print out the ASKY data. And so in

14708
08:17:15,120 --> 08:17:18,240
this case, we're not going to get any

14709
08:17:16,240 --> 08:17:20,080
hex output, which is really useful when

14710
08:17:18,240 --> 08:17:21,840
it comes to things like looking at HTTP

14711
08:17:20,080 --> 08:17:24,398
requests or responses. It makes the

14712
08:17:21,840 --> 08:17:26,240
output a lot cleaner for us.

14713
08:17:24,398 --> 08:17:29,120
So to demonstrate this, let's start a

14714
08:17:26,240 --> 08:17:31,120
listening HTTP server on port 80 on our

14715
08:17:29,120 --> 08:17:33,680
local system. So I'm going to close out

14716
08:17:31,120 --> 08:17:36,000
our server here with C and our client

14717
08:17:33,680 --> 08:17:37,840
with control C. And in this case, I'm

14718
08:17:36,000 --> 08:17:41,600
going to go back to our server tab and

14719
08:17:37,840 --> 08:17:43,718
I'm going to run the pseudo python 3 tac

14720
08:17:41,600 --> 08:17:46,160
m

14721
08:17:43,718 --> 08:17:48,958
http.server 80. And this is going to

14722
08:17:46,160 --> 08:17:50,200
start a listening HTTP server on port 80

14723
08:17:48,958 --> 08:17:52,798
on our local

14724
08:17:50,200 --> 08:17:54,000
system. Right? So, you'll need your

14725
08:17:52,798 --> 08:17:56,080
password here because it's going to be

14726
08:17:54,000 --> 08:17:58,000
using port 80, which is a low-level

14727
08:17:56,080 --> 08:18:00,638
port. And so, you can see here that

14728
08:17:58,000 --> 08:18:01,760
we're serving HTTP on port 80. And so,

14729
08:18:00,638 --> 08:18:03,440
I'm going to head back over to our

14730
08:18:01,760 --> 08:18:05,920
client tab. And in this case, we can use

14731
08:18:03,440 --> 08:18:08,398
the curl utility to make a get request

14732
08:18:05,920 --> 08:18:10,478
on our listening HTTP server for a file

14733
08:18:08,398 --> 08:18:13,080
that doesn't exist. So, in this case,

14734
08:18:10,478 --> 08:18:16,120
I'm going to put in

14735
08:18:13,080 --> 08:18:18,320
http/ localhost or remember

14736
08:18:16,120 --> 08:18:21,798
127.0.0.1. And I'm going to ask for the

14737
08:18:18,320 --> 08:18:24,080
file. Well, this file doesn't

14738
08:18:21,798 --> 08:18:25,680
exist.php. And so, let's run that. And

14739
08:18:24,080 --> 08:18:28,760
you can see, as expected, we got an

14740
08:18:25,680 --> 08:18:32,398
error code of 404 or the file was not

14741
08:18:28,760 --> 08:18:33,840
found. If we return to our TCP dump tab,

14742
08:18:32,398 --> 08:18:36,478
well, we get a lot more information

14743
08:18:33,840 --> 08:18:38,878
here, right? Let me scroll up a bit and

14744
08:18:36,478 --> 08:18:40,638
you can see we get the full ASKI output

14745
08:18:38,878 --> 08:18:42,958
or the full payload of the received

14746
08:18:40,638 --> 08:18:44,558
packets, allowing us to see the HTML

14747
08:18:42,958 --> 08:18:47,280
response that we return from the web

14748
08:18:44,558 --> 08:18:49,840
server. If we scroll up a bit more, we

14749
08:18:47,280 --> 08:18:51,360
can also see the HTTP response headers.

14750
08:18:49,840 --> 08:18:54,080
So, we can see headers like the server

14751
08:18:51,360 --> 08:18:56,160
name, so simple HTTP. We can see the

14752
08:18:54,080 --> 08:18:58,320
date of the connection or we can see

14753
08:18:56,160 --> 08:18:59,878
things like the content length. If we

14754
08:18:58,320 --> 08:19:02,080
scroll up even more to the original

14755
08:18:59,878 --> 08:19:04,080
request, well, we can see the original

14756
08:19:02,080 --> 08:19:05,160
get request to the server on this

14757
08:19:04,080 --> 08:19:07,440
specified

14758
08:19:05,160 --> 08:19:09,638
URL. We can even see things like the

14759
08:19:07,440 --> 08:19:12,320
user agent. In this case, we were using

14760
08:19:09,638 --> 08:19:14,080
curl. And so, these examples were fairly

14761
08:19:12,320 --> 08:19:16,080
straightforward. And I just wanted to

14762
08:19:14,080 --> 08:19:18,240
give a quick introduction to the TCB

14763
08:19:16,080 --> 08:19:19,920
dump tool. And so our focus is now going

14764
08:19:18,240 --> 08:19:21,600
to shift towards capturing and filtering

14765
08:19:19,920 --> 08:19:23,200
network data, which is where the bulk of

14766
08:19:21,600 --> 08:19:25,600
this tool's features and arguments come

14767
08:19:23,200 --> 08:19:27,120
into play. And so with that, thank you

14768
08:19:25,600 --> 08:19:28,920
for sticking along and I will see you in

14769
08:19:27,120 --> 08:19:31,280
the next

14770
08:19:28,920 --> 08:19:33,760
lesson. In the previous lesson, we

14771
08:19:31,280 --> 08:19:35,680
looked at the basics of TCP dump and how

14772
08:19:33,760 --> 08:19:37,280
we can select our interfaces and view

14773
08:19:35,680 --> 08:19:39,440
captured payload data in a variety of

14774
08:19:37,280 --> 08:19:41,520
formats. And a big part of capturing

14775
08:19:39,440 --> 08:19:43,680
live traffic is the actual capture

14776
08:19:41,520 --> 08:19:45,440
filters we put in place before we begin

14777
08:19:43,680 --> 08:19:46,718
monitoring. And so it's important to

14778
08:19:45,440 --> 08:19:48,478
understand that typically in network

14779
08:19:46,718 --> 08:19:50,638
traffic analysis, we'll have both

14780
08:19:48,478 --> 08:19:52,798
capture and display filter capabilities

14781
08:19:50,638 --> 08:19:54,320
within our tooling. And so capture

14782
08:19:52,798 --> 08:19:56,718
filters are the initial parameters that

14783
08:19:54,320 --> 08:19:58,320
we establish before we begin monitoring.

14784
08:19:56,718 --> 08:20:00,240
And these allow us to specify the type

14785
08:19:58,320 --> 08:20:02,000
of traffic we want to capture, right?

14786
08:20:00,240 --> 08:20:03,840
Like the specific protocols or the

14787
08:20:02,000 --> 08:20:06,558
source and destination IP addresses or

14788
08:20:03,840 --> 08:20:08,398
port numbers. On the other hand, display

14789
08:20:06,558 --> 08:20:10,240
filters are applied after capturing the

14790
08:20:08,398 --> 08:20:12,320
traffic and are used to selectively

14791
08:20:10,240 --> 08:20:14,798
display or analyze specific packets

14792
08:20:12,320 --> 08:20:16,240
within the captured data set. And so in

14793
08:20:14,798 --> 08:20:18,160
the last lesson, we looked at our loop

14794
08:20:16,240 --> 08:20:20,320
back interface. In this case, I'm going

14795
08:20:18,160 --> 08:20:22,958
to run TCP dump again with the capital D

14796
08:20:20,320 --> 08:20:24,958
option. And notice that in my case on my

14797
08:20:22,958 --> 08:20:26,718
machine, this is the interface I have

14798
08:20:24,958 --> 08:20:28,320
that's connected to the internet. And

14799
08:20:26,718 --> 08:20:30,240
yours might be named differently. You

14800
08:20:28,320 --> 08:20:31,680
might need to run an if config or an IP

14801
08:20:30,240 --> 08:20:34,160
command to figure out which network

14802
08:20:31,680 --> 08:20:36,718
interface you have up and running. I'm

14803
08:20:34,160 --> 08:20:39,798
going to run pseudo TCP dump with the

14804
08:20:36,718 --> 08:20:43,200
TAC I for the interface flag and specify

14805
08:20:39,798 --> 08:20:44,958
ENTP03 as my interface. And if we just

14806
08:20:43,200 --> 08:20:46,798
let this run with no filters on a real

14807
08:20:44,958 --> 08:20:48,878
network, well, we would very quickly be

14808
08:20:46,798 --> 08:20:50,958
flooded with traffic. And so if I open

14809
08:20:48,878 --> 08:20:53,320
up a new tab here and if I just curl the

14810
08:20:50,958 --> 08:20:55,760
TCM

14811
08:20:53,320 --> 08:20:57,440
website, well, you can see all of the

14812
08:20:55,760 --> 08:21:00,398
packets that were involved in that one

14813
08:20:57,440 --> 08:21:03,440
connection. So, first you'll notice that

14814
08:21:00,398 --> 08:21:06,000
TCP dump is converting or resolving IP

14815
08:21:03,440 --> 08:21:07,680
addresses into host names. Well, this

14816
08:21:06,000 --> 08:21:09,440
isn't so much of a capture filter as

14817
08:21:07,680 --> 08:21:11,200
much as a display filter, but just to

14818
08:21:09,440 --> 08:21:12,878
make our lives easier and is also good

14819
08:21:11,200 --> 08:21:15,600
practice when we want to look at just IP

14820
08:21:12,878 --> 08:21:17,360
addresses. Well, we can run this again,

14821
08:21:15,600 --> 08:21:19,600
but use the N argument with all our

14822
08:21:17,360 --> 08:21:21,760
commands to prevent TCP dump from

14823
08:21:19,600 --> 08:21:25,600
converting addresses like the host

14824
08:21:21,760 --> 08:21:27,760
addresses or the ports into names.

14825
08:21:25,600 --> 08:21:28,600
So if I listen again and we make another

14826
08:21:27,760 --> 08:21:30,878
curl

14827
08:21:28,600 --> 08:21:33,920
request, well you can see this time

14828
08:21:30,878 --> 08:21:36,398
instead of https what we got 443 for the

14829
08:21:33,920 --> 08:21:38,680
port. Instead of the DNS name, what

14830
08:21:36,398 --> 08:21:41,520
we're just getting the IP address

14831
08:21:38,680 --> 08:21:44,878
here and so let's start now with actual

14832
08:21:41,520 --> 08:21:46,798
filters or capture filters. And the

14833
08:21:44,878 --> 08:21:48,240
first one we have here is called host.

14834
08:21:46,798 --> 08:21:50,798
And so we don't need a dash in front of

14835
08:21:48,240 --> 08:21:52,878
this. It's just host on its own. And as

14836
08:21:50,798 --> 08:21:54,558
the name suggests, the host filter will

14837
08:21:52,878 --> 08:21:56,878
only capture packets involving a

14838
08:21:54,558 --> 08:21:59,200
specific host within the connection.

14839
08:21:56,878 --> 08:22:01,760
Right? So if I put example.com here, and

14840
08:21:59,200 --> 08:22:03,520
it can be a host name or an IP address.

14841
08:22:01,760 --> 08:22:05,798
In this case, I'll just use example.com

14842
08:22:03,520 --> 08:22:07,680
for the domain name. Well, let's start

14843
08:22:05,798 --> 08:22:09,440
listening. And in this case, I'm going

14844
08:22:07,680 --> 08:22:11,398
to open up Firefox and start opening

14845
08:22:09,440 --> 08:22:14,320
some random

14846
08:22:11,398 --> 08:22:15,240
websites. If I go to google.com, well,

14847
08:22:14,320 --> 08:22:18,000
we get

14848
08:22:15,240 --> 08:22:21,000
nothing. If I go to Wikipedia, we also

14849
08:22:18,000 --> 08:22:22,878
get nothing. However, if I go to

14850
08:22:21,000 --> 08:22:25,520
example.com, well, do you think we're

14851
08:22:22,878 --> 08:22:28,000
going to log some TCB connections here?

14852
08:22:25,520 --> 08:22:29,360
Well, in fact, we are. And so, you can

14853
08:22:28,000 --> 08:22:30,958
see that we weren't capturing any

14854
08:22:29,360 --> 08:22:33,040
traffic when we navigated to any other

14855
08:22:30,958 --> 08:22:34,878
website or domain. But when we navigated

14856
08:22:33,040 --> 08:22:37,040
to example.com, we should be able to see

14857
08:22:34,878 --> 08:22:39,440
the original three-way handshake and any

14858
08:22:37,040 --> 08:22:41,280
subsequent acts that were being made.

14859
08:22:39,440 --> 08:22:42,798
And so, this filter can obviously become

14860
08:22:41,280 --> 08:22:44,718
very useful when we want to monitor

14861
08:22:42,798 --> 08:22:46,958
traffic from a known malicious domain or

14862
08:22:44,718 --> 08:22:48,160
a suspicious site, right? because the

14863
08:22:46,958 --> 08:22:49,638
host command is going to look at both

14864
08:22:48,160 --> 08:22:51,760
the source or the

14865
08:22:49,638 --> 08:22:53,440
destination. And so while the host

14866
08:22:51,760 --> 08:22:55,520
filter can filter out traffic that

14867
08:22:53,440 --> 08:22:57,200
involves a particular host or IP address

14868
08:22:55,520 --> 08:23:00,320
regardless of whether the IP is the

14869
08:22:57,200 --> 08:23:02,958
sender or receiver, well, we also have

14870
08:23:00,320 --> 08:23:06,558
the source filter or the destination

14871
08:23:02,958 --> 08:23:09,280
filter. So that's SRC for source or DST

14872
08:23:06,558 --> 08:23:11,120
for destination. And these allow us to

14873
08:23:09,280 --> 08:23:13,600
filter specific senders and recipients

14874
08:23:11,120 --> 08:23:15,200
of traffic. Right? So the source here is

14875
08:23:13,600 --> 08:23:18,000
going to capture packets originating

14876
08:23:15,200 --> 08:23:19,680
from a specific source or IP address.

14877
08:23:18,000 --> 08:23:20,878
And the destination on the other hand is

14878
08:23:19,680 --> 08:23:23,558
going to capture packets that are

14879
08:23:20,878 --> 08:23:25,680
destined for a specific host or IP

14880
08:23:23,558 --> 08:23:28,398
address. Just for example, if I run the

14881
08:23:25,680 --> 08:23:31,320
IP command and look up the address, well

14882
08:23:28,398 --> 08:23:34,080
I can see that my IP address is

14883
08:23:31,320 --> 08:23:37,398
10.0.2.15. So if I run TCP dump again

14884
08:23:34,080 --> 08:23:39,600
and this time I can specify a source of

14885
08:23:37,398 --> 08:23:41,760
10.0.2.15. And so this is only going to

14886
08:23:39,600 --> 08:23:44,840
capture packets that originated from my

14887
08:23:41,760 --> 08:23:47,718
own IP address. Right? So if I start

14888
08:23:44,840 --> 08:23:49,600
listening and then just

14889
08:23:47,718 --> 08:23:51,760
curlgoole.com, well, we can see we

14890
08:23:49,600 --> 08:23:53,280
captured all of those packets. And now

14891
08:23:51,760 --> 08:23:54,718
we can't really demonstrate what isn't

14892
08:23:53,280 --> 08:23:57,360
being logged since we're just in a lab

14893
08:23:54,718 --> 08:23:59,040
environment with one machine. But more

14894
08:23:57,360 --> 08:24:01,680
interestingly, we can set a specific

14895
08:23:59,040 --> 08:24:04,240
destination address, right? So if I run

14896
08:24:01,680 --> 08:24:06,080
the dig command on google.com, well, I

14897
08:24:04,240 --> 08:24:08,478
can see in my case, I'm getting this IP

14898
08:24:06,080 --> 08:24:11,680
address resolved. So if I copy this IP

14899
08:24:08,478 --> 08:24:13,600
address and run TCP dump again, this

14900
08:24:11,680 --> 08:24:16,240
time I will specify a destination of

14901
08:24:13,600 --> 08:24:18,320
that IP address. And now I can use the

14902
08:24:16,240 --> 08:24:20,398
IP address here. But again I could just

14903
08:24:18,320 --> 08:24:24,040
put google.com. But just to demonstrate

14904
08:24:20,398 --> 08:24:26,798
more use cases here, I will put the IP

14905
08:24:24,040 --> 08:24:29,360
address. And so if I curl Google.com

14906
08:24:26,798 --> 08:24:30,760
again, well you can see we of course did

14907
08:24:29,360 --> 08:24:33,360
capture those

14908
08:24:30,760 --> 08:24:35,680
packets. And now along with individual

14909
08:24:33,360 --> 08:24:38,080
hosts or IP addresses, we can also

14910
08:24:35,680 --> 08:24:40,718
filter TCP dump to only capture traffic

14911
08:24:38,080 --> 08:24:43,440
to and from a specific subnet or range

14912
08:24:40,718 --> 08:24:45,200
using cider notation. And so we can do

14913
08:24:43,440 --> 08:24:47,040
this with the net filter here. And this

14914
08:24:45,200 --> 08:24:49,440
is going to capture traffic to and from

14915
08:24:47,040 --> 08:24:51,478
a specific network, right? So I could

14916
08:24:49,440 --> 08:24:53,840
put

14917
08:24:51,478 --> 08:24:56,000
10.0.0.0/8 to capture the entire subnet

14918
08:24:53,840 --> 08:24:58,240
there. But we also have the ability to

14919
08:24:56,000 --> 08:24:59,200
modify this to be the source net. Right?

14920
08:24:58,240 --> 08:25:01,320
Okay, so this is going to capture

14921
08:24:59,200 --> 08:25:04,398
packets originating from a specific

14922
08:25:01,320 --> 08:25:07,040
network, right? Or I could modify this

14923
08:25:04,398 --> 08:25:08,398
once more to destination net. And as

14924
08:25:07,040 --> 08:25:10,000
suspected, this is going to capture

14925
08:25:08,398 --> 08:25:11,840
packets that are destined for a specific

14926
08:25:10,000 --> 08:25:13,600
destination network. And this could be

14927
08:25:11,840 --> 08:25:15,200
useful in the case of a C2 server or a

14928
08:25:13,600 --> 08:25:16,878
command and control server that might be

14929
08:25:15,200 --> 08:25:18,558
talking to different IP addresses within

14930
08:25:16,878 --> 08:25:20,718
the same network, right? So we can start

14931
08:25:18,558 --> 08:25:24,920
to narrow down the traffic using the net

14932
08:25:20,718 --> 08:25:28,878
filter. And so another common filter we

14933
08:25:24,920 --> 08:25:30,240
have is port, right? And so port is

14934
08:25:28,878 --> 08:25:32,320
going to capture packets based on

14935
08:25:30,240 --> 08:25:34,000
specific port numbers. And so we could

14936
08:25:32,320 --> 08:25:36,240
capture everything happening on a single

14937
08:25:34,000 --> 08:25:39,280
port, right? I can put 3389 here if we

14938
08:25:36,240 --> 08:25:40,558
want to just log RDP traffic or port 21

14939
08:25:39,280 --> 08:25:42,878
if we want to capture anything related

14940
08:25:40,558 --> 08:25:45,520
to FTP. And we can further break this

14941
08:25:42,878 --> 08:25:47,520
down once again with source port and

14942
08:25:45,520 --> 08:25:49,280
destination port. And so you can see the

14943
08:25:47,520 --> 08:25:51,360
syntax here is pretty consistent and

14944
08:25:49,280 --> 08:25:52,798
easy to remember. And before we

14945
08:25:51,360 --> 08:25:54,558
demonstrate some more specific filters

14946
08:25:52,798 --> 08:25:56,398
like ports, well, we should first talk

14947
08:25:54,558 --> 08:25:59,520
about the concept of logical operators

14948
08:25:56,398 --> 08:26:01,600
within TCP dump. Right? So TCP dump

14949
08:25:59,520 --> 08:26:05,440
provides logical operators using words

14950
08:26:01,600 --> 08:26:07,318
like and or or not to combine multiple

14951
08:26:05,440 --> 08:26:09,600
filter expressions into a more refined

14952
08:26:07,318 --> 08:26:11,280
capture. Right? So being able to capture

14953
08:26:09,600 --> 08:26:13,600
various things on their own is really

14954
08:26:11,280 --> 08:26:15,120
powerful. But the real power of TCP dump

14955
08:26:13,600 --> 08:26:17,200
comes from the ability to combine

14956
08:26:15,120 --> 08:26:19,280
different options in order to isolate

14957
08:26:17,200 --> 08:26:20,558
exactly what we're looking for. Right?

14958
08:26:19,280 --> 08:26:22,160
So we can think about some examples

14959
08:26:20,558 --> 08:26:24,318
where these logical operators might come

14960
08:26:22,160 --> 08:26:26,478
in handy. So let's say we're looking for

14961
08:26:24,318 --> 08:26:29,600
any RDP traffic that's originating from

14962
08:26:26,478 --> 08:26:31,280
a specific system or IP address, right?

14963
08:26:29,600 --> 08:26:33,000
So we could simply put in the source

14964
08:26:31,280 --> 08:26:35,920
here for

14965
08:26:33,000 --> 08:26:41,520
10.0.2.10, but we could also include and

14966
08:26:35,920 --> 08:26:41,520
here to look for the destination port of

14967
08:26:42,280 --> 08:26:45,760
3389.

14968
08:26:43,798 --> 08:26:47,600
Alternatively, let's say we wanted to

14969
08:26:45,760 --> 08:26:50,878
capture traffic on a remote device that

14970
08:26:47,600 --> 08:26:53,280
we remoted into using SSH. Well, if we

14971
08:26:50,878 --> 08:26:54,878
were to do that and fire off TCP dump,

14972
08:26:53,280 --> 08:26:57,360
well, we're going to capture a lot of

14973
08:26:54,878 --> 08:26:59,600
packets related to our own SSH session,

14974
08:26:57,360 --> 08:27:01,120
which we might not want. And so, we

14975
08:26:59,600 --> 08:27:04,240
could modify this to be something like

14976
08:27:01,120 --> 08:27:06,240
and not port 22. And so, as we start

14977
08:27:04,240 --> 08:27:07,600
building more complex queries, well,

14978
08:27:06,240 --> 08:27:09,200
it's going to be best practice that we

14979
08:27:07,600 --> 08:27:11,440
start wrapping our filters within

14980
08:27:09,200 --> 08:27:13,120
quotes, right? And so this will allow us

14981
08:27:11,440 --> 08:27:15,360
to use more complex operators like

14982
08:27:13,120 --> 08:27:17,200
brackets without having to manually

14983
08:27:15,360 --> 08:27:18,718
escape them and allows us to group

14984
08:27:17,200 --> 08:27:20,878
various expressions and have them

14985
08:27:18,718 --> 08:27:23,760
evaluate correctly. Right? So let's

14986
08:27:20,878 --> 08:27:24,958
think of a complex scenario here. And

14987
08:27:23,760 --> 08:27:27,440
I'm going to wrap everything in these

14988
08:27:24,958 --> 08:27:29,798
single quotes. And so let's say we were

14989
08:27:27,440 --> 08:27:32,398
looking for the source of

14990
08:27:29,798 --> 08:27:35,398
10.0.2.15 and the destination of

14991
08:27:32,398 --> 08:27:35,398
40.123.123.123.

14992
08:27:35,840 --> 08:27:43,160
And we don't want the ports to be

14993
08:27:39,718 --> 08:27:45,440
443 or port

14994
08:27:43,160 --> 08:27:47,680
22. Right? So assuming I type that

14995
08:27:45,440 --> 08:27:50,240
correctly, the brackets in the not

14996
08:27:47,680 --> 08:27:52,318
expression as we can see here serve to

14997
08:27:50,240 --> 08:27:54,360
group the logical operations together.

14998
08:27:52,318 --> 08:27:58,520
Right? So this ensures that the logical

14999
08:27:54,360 --> 08:28:01,200
negation applies to both ports 443 and

15000
08:27:58,520 --> 08:28:03,680
22. Without brackets, the not operator

15001
08:28:01,200 --> 08:28:05,440
would only apply to the first port here.

15002
08:28:03,680 --> 08:28:07,638
So altogether this command is going to

15003
08:28:05,440 --> 08:28:10,878
capture network traffic on our interface

15004
08:28:07,638 --> 08:28:13,920
here originating from this IP address

15005
08:28:10,878 --> 08:28:17,558
and destined for this IP address while

15006
08:28:13,920 --> 08:28:20,398
excluding traffic on ports 443 and port

15007
08:28:17,558 --> 08:28:22,520
22. Right? So we can demonstrate this.

15008
08:28:20,398 --> 08:28:25,040
Let me just netcat that

15009
08:28:22,520 --> 08:28:26,280
40.123123123 address. And I'm going to

15010
08:28:25,040 --> 08:28:28,240
specify port

15011
08:28:26,280 --> 08:28:30,000
443. Well, we're obviously not going to

15012
08:28:28,240 --> 08:28:32,000
get a response back from the server. So

15013
08:28:30,000 --> 08:28:35,360
I can cancel that. But you can see we

15014
08:28:32,000 --> 08:28:37,200
log nothing over on TCP dump. So let me

15015
08:28:35,360 --> 08:28:39,638
try that again. Maybe it was a fluke.

15016
08:28:37,200 --> 08:28:41,680
Let me try port 22 or

15017
08:28:39,638 --> 08:28:43,280
SSH again. We're not going to be able to

15018
08:28:41,680 --> 08:28:45,798
connect here. But we should still see

15019
08:28:43,280 --> 08:28:48,558
the packets being logged. And again,

15020
08:28:45,798 --> 08:28:50,958
nothing. So what if we try a port that

15021
08:28:48,558 --> 08:28:51,718
we didn't specify, right? Let's try 1 2

15022
08:28:50,958 --> 08:28:54,958
3

15023
08:28:51,718 --> 08:28:57,600
4. And if we hop back over, well, we can

15024
08:28:54,958 --> 08:28:59,200
see some sin flags that were sent over.

15025
08:28:57,600 --> 08:29:01,280
So in this case, our filter was pretty

15026
08:28:59,200 --> 08:29:04,478
specific.

15027
08:29:01,280 --> 08:29:06,398
Cool. And so finally, TCP dump allows us

15028
08:29:04,478 --> 08:29:08,558
to filter packets based on their

15029
08:29:06,398 --> 08:29:11,120
protocol, right? So to filter packets

15030
08:29:08,558 --> 08:29:14,080
based on protocol, well, let me just get

15031
08:29:11,120 --> 08:29:15,958
rid of all this mess, we can simply use

15032
08:29:14,080 --> 08:29:18,000
the protocol's name as the filter

15033
08:29:15,958 --> 08:29:20,080
expression, right? So some common ones

15034
08:29:18,000 --> 08:29:22,840
you might see obviously TCP if we just

15035
08:29:20,080 --> 08:29:25,840
want to look at TCP packets or of course

15036
08:29:22,840 --> 08:29:27,360
UDP. We can look at ICMP. Remember

15037
08:29:25,840 --> 08:29:28,878
that's a completely different protocol.

15038
08:29:27,360 --> 08:29:31,120
So if we just want to see those echo

15039
08:29:28,878 --> 08:29:34,080
requests and replies well we can specify

15040
08:29:31,120 --> 08:29:35,840
ICMP here or we can supply ARP right the

15041
08:29:34,080 --> 08:29:37,600
address resolution protocol which is

15042
08:29:35,840 --> 08:29:40,080
used for mapping IP addresses to MAC

15043
08:29:37,600 --> 08:29:42,160
addresses on local networks. So these

15044
08:29:40,080 --> 08:29:43,680
are the most common ones you'll see and

15045
08:29:42,160 --> 08:29:46,240
of course we could even exclude any of

15046
08:29:43,680 --> 08:29:48,080
these protocols using the not operator.

15047
08:29:46,240 --> 08:29:50,000
And so obviously we don't have time to

15048
08:29:48,080 --> 08:29:51,920
cover every single combination of useful

15049
08:29:50,000 --> 08:29:53,840
capture filters out there. But I will

15050
08:29:51,920 --> 08:29:56,160
add that the man page or the manual page

15051
08:29:53,840 --> 08:29:58,240
for TCP dump is very well written and

15052
08:29:56,160 --> 08:30:00,478
can give you an entire deep dive on any

15053
08:29:58,240 --> 08:30:02,478
useful flag and argument out there.

15054
08:30:00,478 --> 08:30:04,798
Right. So to view the man page, well, we

15055
08:30:02,478 --> 08:30:07,680
can simply use the man command, give it

15056
08:30:04,798 --> 08:30:09,440
the name TCP dump, and we can pipe this

15057
08:30:07,680 --> 08:30:10,200
to the less command so we can see an

15058
08:30:09,440 --> 08:30:12,558
easier

15059
08:30:10,200 --> 08:30:14,318
output, right? So we can get the usage

15060
08:30:12,558 --> 08:30:16,878
information. We can get a description of

15061
08:30:14,318 --> 08:30:18,240
the utility. We can get all of the

15062
08:30:16,878 --> 08:30:19,440
different options that we have available

15063
08:30:18,240 --> 08:30:21,360
to us. And we're going to cover some

15064
08:30:19,440 --> 08:30:23,440
more of these shortly.

15065
08:30:21,360 --> 08:30:25,280
And if we scroll down to examples, well,

15066
08:30:23,440 --> 08:30:28,558
we can see all of these very useful

15067
08:30:25,280 --> 08:30:30,398
examples or use cases of TCP dump.

15068
08:30:28,558 --> 08:30:33,040
Right? So if we wanted to get as deep as

15069
08:30:30,398 --> 08:30:35,120
to print the TCP packets with the reset

15070
08:30:33,040 --> 08:30:37,440
and acknowledgement flag both set, well,

15071
08:30:35,120 --> 08:30:39,360
we can use something like this, right?

15072
08:30:37,440 --> 08:30:42,638
If we wanted to print the IP packets

15073
08:30:39,360 --> 08:30:44,478
longer than 576 bytes and sent through a

15074
08:30:42,638 --> 08:30:45,920
specific gateway, well, we can use this

15075
08:30:44,478 --> 08:30:47,520
command. And obviously, we can change

15076
08:30:45,920 --> 08:30:49,120
any of these parameters here. This is

15077
08:30:47,520 --> 08:30:51,200
just a sort of list here to get you

15078
08:30:49,120 --> 08:30:53,600
started. And so to quit this, by the

15079
08:30:51,200 --> 08:30:55,040
way, you can just press Q. And so again,

15080
08:30:53,600 --> 08:30:56,878
I'll stress that the most important

15081
08:30:55,040 --> 08:30:59,040
skill to pick up here is the ability to

15082
08:30:56,878 --> 08:31:00,958
combine various options and logical

15083
08:30:59,040 --> 08:31:02,638
operators in order to isolate exactly

15084
08:31:00,958 --> 08:31:04,318
what you're looking for in a given

15085
08:31:02,638 --> 08:31:06,318
scenario. And so this is going to

15086
08:31:04,318 --> 08:31:08,478
require a lot of logical thinking and a

15087
08:31:06,318 --> 08:31:10,478
lot of trial and error and also a lot of

15088
08:31:08,478 --> 08:31:12,318
practice. And so, like I did with the

15089
08:31:10,478 --> 08:31:13,840
fishing analysis section of this course,

15090
08:31:12,318 --> 08:31:16,000
well, at the end of this section, I'll

15091
08:31:13,840 --> 08:31:17,680
compile some useful resources for you to

15092
08:31:16,000 --> 08:31:19,760
get your hands on and also do additional

15093
08:31:17,680 --> 08:31:22,240
practice on dissecting and analyzing

15094
08:31:19,760 --> 08:31:23,760
real pcaps. But before we can obtain

15095
08:31:22,240 --> 08:31:25,520
pcaps, well, we need to learn how to

15096
08:31:23,760 --> 08:31:26,718
save them to a file. And then in the

15097
08:31:25,520 --> 08:31:29,360
next lesson, we're going to actually

15098
08:31:26,718 --> 08:31:31,680
analyze them. And so, thankfully, TCP

15099
08:31:29,360 --> 08:31:33,840
dump makes this incredibly simple to do.

15100
08:31:31,680 --> 08:31:35,840
And so the ability to save and write the

15101
08:31:33,840 --> 08:31:38,000
network traffic that we capture into a

15102
08:31:35,840 --> 08:31:40,318
file is obviously very useful when it

15103
08:31:38,000 --> 08:31:41,760
comes to future analysis. Right? So it

15104
08:31:40,318 --> 08:31:44,398
gives us the ability to do things like

15105
08:31:41,760 --> 08:31:46,878
offline analysis or process pcaps in

15106
08:31:44,398 --> 08:31:49,840
other tools like wireark or an IDS

15107
08:31:46,878 --> 08:31:51,120
system or even back into TCB dump itself

15108
08:31:49,840 --> 08:31:53,920
which we're going to do in the next

15109
08:31:51,120 --> 08:31:56,958
lesson. And so to save any of our output

15110
08:31:53,920 --> 08:31:59,280
into a pcap file, we just need to

15111
08:31:56,958 --> 08:32:01,040
provide the W option here followed by

15112
08:31:59,280 --> 08:32:03,360
the name of the file where we want to

15113
08:32:01,040 --> 08:32:05,040
save the capture. So in this case, I'm

15114
08:32:03,360 --> 08:32:07,440
going to send it over to the desktop

15115
08:32:05,040 --> 08:32:10,440
under the network security TCP dump

15116
08:32:07,440 --> 08:32:12,318
folder. And then I'm going to call it

15117
08:32:10,440 --> 08:32:13,440
capture.pcap. And in this case, it

15118
08:32:12,318 --> 08:32:14,558
doesn't really matter what filters

15119
08:32:13,440 --> 08:32:16,318
you're using or anything or what

15120
08:32:14,558 --> 08:32:17,718
interface. We're just going to practice

15121
08:32:16,318 --> 08:32:20,718
saving a

15122
08:32:17,718 --> 08:32:23,920
file. And so I'm going to run this now.

15123
08:32:20,718 --> 08:32:23,920
And then I'm just going to ping

15124
08:32:25,638 --> 08:32:30,000
google.com. And if we hop back over,

15125
08:32:28,160 --> 08:32:32,160
well, we can see nothing was captured in

15126
08:32:30,000 --> 08:32:34,398
standard output. But if I cancel this

15127
08:32:32,160 --> 08:32:36,718
now, we can see that 10 packets were

15128
08:32:34,398 --> 08:32:39,558
received by the filter and they were

15129
08:32:36,718 --> 08:32:41,840
saved into this capture.pcap

15130
08:32:39,558 --> 08:32:44,920
file. Right? So if I run the file

15131
08:32:41,840 --> 08:32:47,040
command and specify the

15132
08:32:44,920 --> 08:32:49,040
location, well, we can see that it's a

15133
08:32:47,040 --> 08:32:50,878
pcap capture file. And we can even see

15134
08:32:49,040 --> 08:32:53,280
the length here indicating that we did

15135
08:32:50,878 --> 08:32:54,798
in fact save those packets. And if we

15136
08:32:53,280 --> 08:32:56,718
want to verify this further, well, we're

15137
08:32:54,798 --> 08:32:59,360
skipping ahead a bit here. But in this

15138
08:32:56,718 --> 08:33:00,958
case, instead of the W flag to write,

15139
08:32:59,360 --> 08:33:03,040
well, I'm going to change this to an R

15140
08:33:00,958 --> 08:33:05,040
to read from this file. And if I just

15141
08:33:03,040 --> 08:33:08,080
hit run, well, we can see all of those

15142
08:33:05,040 --> 08:33:10,160
ICMP echo requests. And so we can apply

15143
08:33:08,080 --> 08:33:11,760
any of the filters we just covered onto

15144
08:33:10,160 --> 08:33:14,160
this pre-existing data or this

15145
08:33:11,760 --> 08:33:16,638
pre-existing packet capture, right? So

15146
08:33:14,160 --> 08:33:18,120
if I just specify the protocol of ICMP,

15147
08:33:16,638 --> 08:33:21,000
well, we should still get everything

15148
08:33:18,120 --> 08:33:23,398
returned, right? But if I change this to

15149
08:33:21,000 --> 08:33:25,760
TCP, well, we get

15150
08:33:23,398 --> 08:33:27,760
nothing. And so I think this was a good

15151
08:33:25,760 --> 08:33:29,120
adventure into the various live capture

15152
08:33:27,760 --> 08:33:31,680
filters that we have available to us

15153
08:33:29,120 --> 08:33:33,120
within TCP dump. And as I mentioned, in

15154
08:33:31,680 --> 08:33:35,200
the next lesson, we're going to look at

15155
08:33:33,120 --> 08:33:36,798
some real pcap files and start building

15156
08:33:35,200 --> 08:33:38,798
up a very strong strategy and

15157
08:33:36,798 --> 08:33:40,638
methodology and different commands that

15158
08:33:38,798 --> 08:33:42,718
we can use to parse and make sense of

15159
08:33:40,638 --> 08:33:44,318
network traffic in the command line. And

15160
08:33:42,718 --> 08:33:46,478
so I look forward to seeing you in the

15161
08:33:44,318 --> 08:33:46,478
next

15162
08:33:46,680 --> 08:33:51,440
lesson. Okay, now that we know how to

15163
08:33:49,440 --> 08:33:53,520
capture and filter traffic with DCB

15164
08:33:51,440 --> 08:33:55,600
dump, it's time to do some practical

15165
08:33:53,520 --> 08:33:57,760
command line network traffic analysis

15166
08:33:55,600 --> 08:33:59,760
using real pcap files from infected

15167
08:33:57,760 --> 08:34:02,160
machines that were involved in malware

15168
08:33:59,760 --> 08:34:04,478
campaigns in the wild. And so if you

15169
08:34:02,160 --> 08:34:07,600
recall in the last lesson, we saved a

15170
08:34:04,478 --> 08:34:09,280
packet capture into a capture.pcap file.

15171
08:34:07,600 --> 08:34:11,840
And if I just ls my directory here,

15172
08:34:09,280 --> 08:34:13,680
well, we can see that capture.pcap file.

15173
08:34:11,840 --> 08:34:16,478
We can simply view this packet capture

15174
08:34:13,680 --> 08:34:19,200
within TCP dump by using the -ash r

15175
08:34:16,478 --> 08:34:22,398
argument to read in the pcap. So if I

15176
08:34:19,200 --> 08:34:24,120
just run tcp dump with r and then I'm

15177
08:34:22,398 --> 08:34:26,160
just going to provide

15178
08:34:24,120 --> 08:34:28,000
capture.pcap. And you can see just like

15179
08:34:26,160 --> 08:34:29,280
in the end of the last lesson, well we

15180
08:34:28,000 --> 08:34:31,558
can read in this file that just

15181
08:34:29,280 --> 08:34:33,920
contained ICMP echo requests and

15182
08:34:31,558 --> 08:34:35,760
replies. Before we dive into the real

15183
08:34:33,920 --> 08:34:37,280
examples, there are a few more display

15184
08:34:35,760 --> 08:34:39,760
commands that will come in handy as we

15185
08:34:37,280 --> 08:34:42,318
investigate packet captures. The first

15186
08:34:39,760 --> 08:34:44,718
one is the count. So if I just clear

15187
08:34:42,318 --> 08:34:46,638
this and run it again, I'm going to

15188
08:34:44,718 --> 08:34:49,600
provide two dashes here and then the

15189
08:34:46,638 --> 08:34:51,680
word count. And the count option is used

15190
08:34:49,600 --> 08:34:53,440
to display the number or the count of

15191
08:34:51,680 --> 08:34:55,600
packets that are currently matched by

15192
08:34:53,440 --> 08:34:57,200
our filter expressions. So if we don't

15193
08:34:55,600 --> 08:34:58,638
provide any filters, well, we're going

15194
08:34:57,200 --> 08:35:01,360
to get the total amount of packets

15195
08:34:58,638 --> 08:35:04,558
within our entire pcap. And so you can

15196
08:35:01,360 --> 08:35:06,398
see here we have 10 total packets. And

15197
08:35:04,558 --> 08:35:08,558
so this is obviously useful in quickly

15198
08:35:06,398 --> 08:35:10,398
determining how many packets match a

15199
08:35:08,558 --> 08:35:12,958
certain criteria without needing to

15200
08:35:10,398 --> 08:35:15,760
display all of the packet details. The

15201
08:35:12,958 --> 08:35:17,760
next option here is just -ash c. And

15202
08:35:15,760 --> 08:35:19,600
this option specifies the total number

15203
08:35:17,760 --> 08:35:21,920
of packets that we want to capture when

15204
08:35:19,600 --> 08:35:23,440
we're writing to a file or the number of

15205
08:35:21,920 --> 08:35:25,600
packets that we want to return when

15206
08:35:23,440 --> 08:35:27,520
we're reading from a file. And so this

15207
08:35:25,600 --> 08:35:29,440
is useful if you only need to see or

15208
08:35:27,520 --> 08:35:32,398
save a subset of packets in a larger

15209
08:35:29,440 --> 08:35:34,558
pcap file. For example, to only return

15210
08:35:32,398 --> 08:35:36,558
the first two packets in this pcap,

15211
08:35:34,558 --> 08:35:37,920
well, I can provide the number two here.

15212
08:35:36,558 --> 08:35:40,798
And you can see we're just getting those

15213
08:35:37,920 --> 08:35:43,120
two lines. Lastly, here we have some

15214
08:35:40,798 --> 08:35:45,120
commands related to timestamps. So, you

15215
08:35:43,120 --> 08:35:47,040
can see the very first field we have

15216
08:35:45,120 --> 08:35:49,680
here is the timestamp. And that is in

15217
08:35:47,040 --> 08:35:51,840
our local relative time. We have a few

15218
08:35:49,680 --> 08:35:54,160
options depending on how many t's we

15219
08:35:51,840 --> 08:35:56,160
provide in the t argument. So what I

15220
08:35:54,160 --> 08:35:58,478
mean by that is if we just provide one t

15221
08:35:56,160 --> 08:36:00,000
in this dash t well we're going to

15222
08:35:58,478 --> 08:36:01,520
completely remove the time stamp

15223
08:36:00,000 --> 08:36:04,360
altogether from printing. So it

15224
08:36:01,520 --> 08:36:07,760
basically suppresses any time stamp.

15225
08:36:04,360 --> 08:36:09,440
However, if I put two t's this is going

15226
08:36:07,760 --> 08:36:12,160
to convert the time stamp into the

15227
08:36:09,440 --> 08:36:14,160
standard Unix epoch time. And this can

15228
08:36:12,160 --> 08:36:15,760
be very useful in documentation purposes

15229
08:36:14,160 --> 08:36:18,878
because it's sometimes better to have a

15230
08:36:15,760 --> 08:36:21,680
UTC time stamp versus a relative one.

15231
08:36:18,878 --> 08:36:23,520
Well, we also have the tac ttt or the

15232
08:36:21,680 --> 08:36:25,600
3T's which is going to print the

15233
08:36:23,520 --> 08:36:27,840
timestamp in milliseconds since the

15234
08:36:25,600 --> 08:36:29,440
previous packet. So essentially if we

15235
08:36:27,840 --> 08:36:32,958
run this, we're only going to get the

15236
08:36:29,440 --> 08:36:34,958
deltas between each packet. Right? And

15237
08:36:32,958 --> 08:36:36,718
lastly here the four T's is going to

15238
08:36:34,958 --> 08:36:38,718
print the time stamp in the standard

15239
08:36:36,718 --> 08:36:41,280
date and time format. So that year,

15240
08:36:38,718 --> 08:36:43,120
month, date, hours, minutes, seconds.

15241
08:36:41,280 --> 08:36:45,120
And so we can see how this is also a

15242
08:36:43,120 --> 08:36:48,798
useful modifier if we want to display

15243
08:36:45,120 --> 08:36:50,638
the timestamp in an easyto- read format.

15244
08:36:48,798 --> 08:36:53,440
And so with that, let's jump into our

15245
08:36:50,638 --> 08:36:56,440
first pcap example. So head over to the

15246
08:36:53,440 --> 08:37:00,638
pcaps folder within the TCP dump

15247
08:36:56,440 --> 08:37:00,638
directory. And let's start with the

15248
08:37:00,840 --> 08:37:05,360
2021-09-14.pcap

15249
08:37:02,680 --> 08:37:07,760
file. And this contains a capture of a

15250
08:37:05,360 --> 08:37:09,920
host infected with lockbit, a popular

15251
08:37:07,760 --> 08:37:12,478
and known info stealer and remote access

15252
08:37:09,920 --> 08:37:14,240
trojan piece of malware. And so how

15253
08:37:12,478 --> 08:37:15,360
should we first approach this? Well,

15254
08:37:14,240 --> 08:37:17,520
there are many different ways and

15255
08:37:15,360 --> 08:37:20,000
methodologies, but I like to obviously

15256
08:37:17,520 --> 08:37:21,600
start from a wide 50,000 foot view and

15257
08:37:20,000 --> 08:37:23,280
then narrow down the search once I've

15258
08:37:21,600 --> 08:37:25,440
identified any interesting conversations

15259
08:37:23,280 --> 08:37:28,080
or IP addresses. And then I'll do some

15260
08:37:25,440 --> 08:37:30,638
more detailed analysis. And with any

15261
08:37:28,080 --> 08:37:32,638
various IoC's or suspicious IP addresses

15262
08:37:30,638 --> 08:37:34,160
I find, I might need to zoom back out

15263
08:37:32,638 --> 08:37:36,478
and look at the bigger picture again to

15264
08:37:34,160 --> 08:37:38,240
determine the scope. And so I'll also

15265
08:37:36,478 --> 08:37:40,000
say that we'll be slightly limited in

15266
08:37:38,240 --> 08:37:41,280
the amount of detailed analysis that we

15267
08:37:40,000 --> 08:37:44,240
can perform just through the command

15268
08:37:41,280 --> 08:37:46,240
line. And so while I say TCB dump is a

15269
08:37:44,240 --> 08:37:47,920
fantastic tool for capturing packets and

15270
08:37:46,240 --> 08:37:49,120
it offers many speed and scalability

15271
08:37:47,920 --> 08:37:51,520
advantages over something like

15272
08:37:49,120 --> 08:37:53,280
Wireshark, well Wireshark is arguably

15273
08:37:51,520 --> 08:37:55,360
better at performing individual packet

15274
08:37:53,280 --> 08:37:57,200
analysis due to its statistical and

15275
08:37:55,360 --> 08:37:58,878
advanced filter features, but we will

15276
08:37:57,200 --> 08:38:00,920
get to Wireshark in due time. And

15277
08:37:58,878 --> 08:38:03,200
they're both very important tools to

15278
08:38:00,920 --> 08:38:05,600
grasp. So let's start out with the most

15279
08:38:03,200 --> 08:38:07,200
simple command to just read the file and

15280
08:38:05,600 --> 08:38:09,520
see what we're dealing with. So, if you

15281
08:38:07,200 --> 08:38:11,760
recall, I'm just going to run TCP dump,

15282
08:38:09,520 --> 08:38:13,920
provide the R flag here, and then just

15283
08:38:11,760 --> 08:38:16,398
provide the name of the file. In this

15284
08:38:13,920 --> 08:38:16,398
case, that

15285
08:38:16,520 --> 08:38:20,638
2021-09-14.pcap

15286
08:38:18,440 --> 08:38:22,718
file. And we're getting a lot of

15287
08:38:20,638 --> 08:38:24,638
packets. So, what we can do, if you

15288
08:38:22,718 --> 08:38:26,160
remember, we have the count command, so

15289
08:38:24,638 --> 08:38:27,760
we can identify how many packets we're

15290
08:38:26,160 --> 08:38:31,040
dealing with. In this case, we have

15291
08:38:27,760 --> 08:38:32,798
around 3,600 packets. And as good

15292
08:38:31,040 --> 08:38:34,958
practice, like I said, I'm going to

15293
08:38:32,798 --> 08:38:37,280
display the timestamps in Unix epoch

15294
08:38:34,958 --> 08:38:40,000
time. And so to do that, I'm just going

15295
08:38:37,280 --> 08:38:41,920
to prepend the -ashtt there in front of

15296
08:38:40,000 --> 08:38:44,638
all of our commands just so we can get

15297
08:38:41,920 --> 08:38:46,000
the timestamps in that format. And so

15298
08:38:44,638 --> 08:38:48,398
let's start by going through some of

15299
08:38:46,000 --> 08:38:50,398
this at a very high level. And in this

15300
08:38:48,398 --> 08:38:52,000
case, I don't want to provide the N

15301
08:38:50,398 --> 08:38:53,440
argument yet because I might be

15302
08:38:52,000 --> 08:38:56,160
interested in some of the domain names

15303
08:38:53,440 --> 08:38:58,240
that we identify. And as I scroll up

15304
08:38:56,160 --> 08:38:59,958
here, I'm seeing quite a bit of traffic

15305
08:38:58,240 --> 08:39:04,600
between this

15306
08:38:59,958 --> 08:39:06,600
10.0.0.168 address and this 103.23255.14

15307
08:39:04,600 --> 08:39:08,878
232.55.148

15308
08:39:06,600 --> 08:39:11,840
address. And this also appears to be

15309
08:39:08,878 --> 08:39:13,398
port 80 or HTTP traffic, which is going

15310
08:39:11,840 --> 08:39:16,638
to be useful for us since it's

15311
08:39:13,398 --> 08:39:18,398
unencrypted. And so for my first filter,

15312
08:39:16,638 --> 08:39:20,240
I'm just going to specify that we only

15313
08:39:18,398 --> 08:39:22,318
want to look at port 80 traffic as

15314
08:39:20,240 --> 08:39:23,760
either the source or destination port.

15315
08:39:22,318 --> 08:39:25,000
And so to do that, I can just provide

15316
08:39:23,760 --> 08:39:28,160
the port

15317
08:39:25,000 --> 08:39:29,760
argument and just put 80. In this case,

15318
08:39:28,160 --> 08:39:31,760
I'll narrow down the count here so we

15319
08:39:29,760 --> 08:39:33,360
can see how many we've cut down. In this

15320
08:39:31,760 --> 08:39:36,000
case, about over a thousand packets,

15321
08:39:33,360 --> 08:39:37,840
which is nice. And again, I was noticing

15322
08:39:36,000 --> 08:39:40,318
some conversations between those two IPs

15323
08:39:37,840 --> 08:39:42,160
that I identified. And during real

15324
08:39:40,318 --> 08:39:44,000
traffic analysis, we'd probably know the

15325
08:39:42,160 --> 08:39:46,280
affected endpoint source IP address,

15326
08:39:44,000 --> 08:39:48,478
likely from the ticket or the incident

15327
08:39:46,280 --> 08:39:50,160
details. However, in this case, I can

15328
08:39:48,478 --> 08:39:52,160
make the assumption since it's the only

15329
08:39:50,160 --> 08:39:53,680
internal IP I've seen so far, that this

15330
08:39:52,160 --> 08:39:55,760
is probably the source IP of the

15331
08:39:53,680 --> 08:39:57,638
endpoint. In which case, I'll add this

15332
08:39:55,760 --> 08:40:00,160
IP to our filter as the

15333
08:39:57,638 --> 08:40:01,958
host. And I'll just modify our command a

15334
08:40:00,160 --> 08:40:05,920
bit to include

15335
08:40:01,958 --> 08:40:05,920
and with the host of

15336
08:40:07,958 --> 08:40:13,200
10.0.068. And since we're dealing with

15337
08:40:10,280 --> 08:40:15,120
HTTP, I also want to search for any get

15338
08:40:13,200 --> 08:40:17,120
or post requests, which we can actually

15339
08:40:15,120 --> 08:40:19,440
do by leveraging the ever useful GP

15340
08:40:17,120 --> 08:40:21,000
command. And so we can pipe our output

15341
08:40:19,440 --> 08:40:23,360
here into

15342
08:40:21,000 --> 08:40:25,680
GP. And we can then search for any

15343
08:40:23,360 --> 08:40:28,080
instances with get or post that show up

15344
08:40:25,680 --> 08:40:30,718
in the HTTP headers.

15345
08:40:28,080 --> 08:40:32,558
And a get request in HTTP would be like

15346
08:40:30,718 --> 08:40:34,958
a web request to retrieve information

15347
08:40:32,558 --> 08:40:36,398
like fetch me this web page. And a post

15348
08:40:34,958 --> 08:40:37,920
request on the other hand would be a

15349
08:40:36,398 --> 08:40:40,000
request to a web page where we're

15350
08:40:37,920 --> 08:40:42,558
sending in data in what we would call

15351
08:40:40,000 --> 08:40:43,520
post parameters within the HTTP body.

15352
08:40:42,558 --> 08:40:45,920
And this could be things like

15353
08:40:43,520 --> 08:40:47,920
credentials or information in a form and

15354
08:40:45,920 --> 08:40:49,520
many other possibilities. And so it can

15355
08:40:47,920 --> 08:40:51,280
be quite useful to narrow down web

15356
08:40:49,520 --> 08:40:53,760
requests like these especially when the

15357
08:40:51,280 --> 08:40:55,920
connection is unencrypted. And so to

15358
08:40:53,760 --> 08:40:57,520
specify our parameters within GP here,

15359
08:40:55,920 --> 08:41:00,318
I'm going to give it the capital E

15360
08:40:57,520 --> 08:41:01,760
option. So we can specify an expression.

15361
08:41:00,318 --> 08:41:04,000
And in this case, I'm going to wrap it

15362
08:41:01,760 --> 08:41:06,000
in double quotes. And I apologize as

15363
08:41:04,000 --> 08:41:08,638
it's gone to a second line, but I'm just

15364
08:41:06,000 --> 08:41:10,638
going to provide and then pipe that to

15365
08:41:08,638 --> 08:41:14,080
post, meaning that we're going to match

15366
08:41:10,638 --> 08:41:16,958
any words that are get or post. And so

15367
08:41:14,080 --> 08:41:19,600
if I run this, so we can see a number of

15368
08:41:16,958 --> 08:41:21,280
different URLs or endpoints that we

15369
08:41:19,600 --> 08:41:23,318
could perhaps cross reference with our

15370
08:41:21,280 --> 08:41:26,318
web proxy or firewall logs if we had

15371
08:41:23,318 --> 08:41:28,318
them. However, there's one URL or path

15372
08:41:26,318 --> 08:41:32,120
listed here that makes me very curious

15373
08:41:28,318 --> 08:41:34,878
and suspicious. And can you see

15374
08:41:32,120 --> 08:41:36,878
it? Well, it's this one right here,

15375
08:41:34,878 --> 08:41:38,798
which is very interesting. And it

15376
08:41:36,878 --> 08:41:43,120
suggests that the endpoint downloaded an

15377
08:41:38,798 --> 08:41:45,280
executable file called audiodg.exe.

15378
08:41:43,120 --> 08:41:47,600
And any.exe extension should get our

15379
08:41:45,280 --> 08:41:50,600
ears perking up. And the dot in front of

15380
08:41:47,600 --> 08:41:53,520
the file name here is also quite

15381
08:41:50,600 --> 08:41:55,200
suspicious, right? So in file systems, a

15382
08:41:53,520 --> 08:41:57,760
dot at the beginning of a file name

15383
08:41:55,200 --> 08:41:59,440
often signifies a hidden file. However,

15384
08:41:57,760 --> 08:42:00,878
this is more common in Unix like

15385
08:41:59,440 --> 08:42:02,160
operating systems and is not something

15386
08:42:00,878 --> 08:42:03,920
we typically see in Windows

15387
08:42:02,160 --> 08:42:05,920
environments. So this might be an

15388
08:42:03,920 --> 08:42:08,240
unusual naming convention or an attempt

15389
08:42:05,920 --> 08:42:10,398
to mask a malicious file with a false

15390
08:42:08,240 --> 08:42:13,440
extension. And so I'm just going to copy

15391
08:42:10,398 --> 08:42:15,920
the name of this executable here. And if

15392
08:42:13,440 --> 08:42:18,680
we perform some very basic OSINT by

15393
08:42:15,920 --> 08:42:20,878
Google searching the name of the file in

15394
08:42:18,680 --> 08:42:22,920
quotes. Well, we can see that it might

15395
08:42:20,878 --> 08:42:25,280
relate to the Windows audio device

15396
08:42:22,920 --> 08:42:27,440
graph. However, the curious thing here

15397
08:42:25,280 --> 08:42:28,798
is that in our pcap, this file doesn't

15398
08:42:27,440 --> 08:42:31,200
seem to have been downloaded through an

15399
08:42:28,798 --> 08:42:32,798
official Microsoft channel. And the dot

15400
08:42:31,200 --> 08:42:34,878
at the beginning of the file name is now

15401
08:42:32,798 --> 08:42:36,638
even more suspicious.

15402
08:42:34,878 --> 08:42:38,318
And so let's return to our original

15403
08:42:36,638 --> 08:42:40,558
methodology that we built through the

15404
08:42:38,318 --> 08:42:42,478
fishing analysis section of this course.

15405
08:42:40,558 --> 08:42:44,718
And so we've identified a suspicious

15406
08:42:42,478 --> 08:42:46,600
file name here that came from an

15407
08:42:44,718 --> 08:42:49,280
identified indicator of compromise or

15408
08:42:46,600 --> 08:42:52,000
IOC. In this case, we have the IP

15409
08:42:49,280 --> 08:42:52,000
address of

15410
08:42:53,398 --> 08:42:57,280
103.232.55.148. And I'd say a good call

15411
08:42:55,440 --> 08:42:59,200
here is to do a lookup of this IP

15412
08:42:57,280 --> 08:43:01,120
address to confirm whether or not this

15413
08:42:59,200 --> 08:43:03,200
really is affiliated with Microsoft in

15414
08:43:01,120 --> 08:43:04,958
any way.

15415
08:43:03,200 --> 08:43:08,000
And so I'll just head over to the domain

15416
08:43:04,958 --> 08:43:09,600
tools website and paste in this IP. And

15417
08:43:08,000 --> 08:43:11,878
we can see that it's affiliated with a

15418
08:43:09,600 --> 08:43:14,840
server technology company located in

15419
08:43:11,878 --> 08:43:17,600
Vietnam. And it's in no way related to

15420
08:43:14,840 --> 08:43:19,200
Microsoft. So we've identified two IoC's

15421
08:43:17,600 --> 08:43:22,638
hinting at a malware infection in the

15422
08:43:19,200 --> 08:43:24,398
form of a file name and an IP address.

15423
08:43:22,638 --> 08:43:26,398
And so let's step back in our filters

15424
08:43:24,398 --> 08:43:29,318
and perform a more generic search using

15425
08:43:26,398 --> 08:43:32,160
GP for any packet that contains the

15426
08:43:29,318 --> 08:43:34,318
audiodg.exe file. And so I'll just clear

15427
08:43:32,160 --> 08:43:37,798
this out and I'm going to remove all of

15428
08:43:34,318 --> 08:43:39,520
these filters and just search for

15429
08:43:37,798 --> 08:43:41,080
audiodg.exe. And it shouldn't matter

15430
08:43:39,520 --> 08:43:43,440
that we don't have the dot at the

15431
08:43:41,080 --> 08:43:46,958
beginning. And so it looks like we have

15432
08:43:43,440 --> 08:43:49,440
two results. The first one here seems to

15433
08:43:46,958 --> 08:43:52,080
be including a URL within the query

15434
08:43:49,440 --> 08:43:54,240
parameters of this API. And the URL

15435
08:43:52,080 --> 08:43:55,840
within these parameters, well points to

15436
08:43:54,240 --> 08:43:57,920
the same IP address that we just

15437
08:43:55,840 --> 08:43:59,600
identified. And so let's start opening

15438
08:43:57,920 --> 08:44:02,798
these packets up to the best of our

15439
08:43:59,600 --> 08:44:05,600
limited ability within TCP dump. And so

15440
08:44:02,798 --> 08:44:07,360
I'll modify our command a bit here. And

15441
08:44:05,600 --> 08:44:09,040
so because I want to open the ASKI

15442
08:44:07,360 --> 08:44:11,200
output of the payloads contained within

15443
08:44:09,040 --> 08:44:13,638
these packets, well I will apply the

15444
08:44:11,200 --> 08:44:16,080
capital A argument to TCP

15445
08:44:13,638 --> 08:44:18,878
dump. Additionally, I'm going to modify

15446
08:44:16,080 --> 08:44:21,760
our GP command slightly to also append a

15447
08:44:18,878 --> 08:44:24,318
capital A. Now this is a different one.

15448
08:44:21,760 --> 08:44:26,160
With GP, we can append the capital A to

15449
08:44:24,318 --> 08:44:28,958
retrieve a number of trailing lines

15450
08:44:26,160 --> 08:44:30,478
after we match our GP results. And so,

15451
08:44:28,958 --> 08:44:32,160
because we're opening up the payloads

15452
08:44:30,478 --> 08:44:34,000
that are going to be multi-lined, well,

15453
08:44:32,160 --> 08:44:36,398
we can tell GP that we want to also

15454
08:44:34,000 --> 08:44:38,040
display the trailing 500 lines or so

15455
08:44:36,398 --> 08:44:40,558
after we match the

15456
08:44:38,040 --> 08:44:41,920
audiodg.exe string. So, this is not the

15457
08:44:40,558 --> 08:44:44,398
cleanest way to do this, but we are

15458
08:44:41,920 --> 08:44:46,240
limited to command line tools here. And

15459
08:44:44,398 --> 08:44:48,478
so, before I run this, I'm going to pipe

15460
08:44:46,240 --> 08:44:49,920
it once again to the less command. And

15461
08:44:48,478 --> 08:44:51,558
this will make the output a lot easier

15462
08:44:49,920 --> 08:44:53,920
for us to scroll

15463
08:44:51,558 --> 08:44:56,318
through. And so immediately we can see

15464
08:44:53,920 --> 08:44:58,240
this first result here. So we're opening

15465
08:44:56,318 --> 08:45:01,200
up that first packet that was pointing

15466
08:44:58,240 --> 08:45:03,520
to this endpoint here, this API. And if

15467
08:45:01,200 --> 08:45:05,558
we look in the HTTP host header, well,

15468
08:45:03,520 --> 08:45:07,840
we can see it's pointing to

15469
08:45:05,558 --> 08:45:12,520
api.bing.com. And we can also see the

15470
08:45:07,840 --> 08:45:12,520
destination address here is 13.107.5.80.

15471
08:45:13,440 --> 08:45:17,120
And if we do a lookup of this IP

15472
08:45:15,200 --> 08:45:18,718
address, well, we can see that it is in

15473
08:45:17,120 --> 08:45:21,360
fact associated with Microsoft and

15474
08:45:18,718 --> 08:45:24,638
likely Bing. And so based on this

15475
08:45:21,360 --> 08:45:26,798
oddlook URL, it seems to be designed to

15476
08:45:24,638 --> 08:45:28,798
interact with Bing search's API to

15477
08:45:26,798 --> 08:45:30,558
either query information or abuse it in

15478
08:45:28,798 --> 08:45:32,718
some way to redirect to the provided

15479
08:45:30,558 --> 08:45:35,120
URL, which we discovered is hosting that

15480
08:45:32,718 --> 08:45:38,840
executable file. And so I'm going to

15481
08:45:35,120 --> 08:45:41,440
copy the entire URL within this query

15482
08:45:38,840 --> 08:45:44,160
parameter and head over to Cybershere to

15483
08:45:41,440 --> 08:45:46,638
see if we can decode the URL. And so I'm

15484
08:45:44,160 --> 08:45:48,798
just going to search for the URL decode

15485
08:45:46,638 --> 08:45:50,878
and drag it over to the recipe. And we

15486
08:45:48,798 --> 08:45:52,478
can see the full URL. And while we're

15487
08:45:50,878 --> 08:45:54,920
here, we should probably defang it as

15488
08:45:52,478 --> 08:45:57,120
well as it's good practice for our

15489
08:45:54,920 --> 08:45:58,958
documentation. And now this definitely

15490
08:45:57,120 --> 08:46:01,360
looks like a potentially malicious URL

15491
08:45:58,958 --> 08:46:03,920
to me. Partly due to the IP address

15492
08:46:01,360 --> 08:46:05,920
instead of a domain name. the HTTP

15493
08:46:03,920 --> 08:46:08,878
protocol and also the fact that it's

15494
08:46:05,920 --> 08:46:10,798
serving an executable file. And so I'm

15495
08:46:08,878 --> 08:46:12,920
just going to copy this URL quickly and

15496
08:46:10,798 --> 08:46:15,200
head over to virus

15497
08:46:12,920 --> 08:46:16,718
total. And I did mention earlier we

15498
08:46:15,200 --> 08:46:17,958
would be using a lot of these tools all

15499
08:46:16,718 --> 08:46:19,840
throughout our different

15500
08:46:17,958 --> 08:46:22,440
investigations. And if I go under the

15501
08:46:19,840 --> 08:46:24,638
URL section and paste in that

15502
08:46:22,440 --> 08:46:27,280
URL, well, we can see that it was

15503
08:46:24,638 --> 08:46:29,920
flagged by six vendors as malicious,

15504
08:46:27,280 --> 08:46:31,520
which supports our investigation.

15505
08:46:29,920 --> 08:46:34,318
And if we head back over to our output

15506
08:46:31,520 --> 08:46:35,920
here and scroll to the second packet,

15507
08:46:34,318 --> 08:46:37,680
well, we can see the beginning packets

15508
08:46:35,920 --> 08:46:40,080
that contain the actual download of the

15509
08:46:37,680 --> 08:46:41,440
executable file. And specifically, we

15510
08:46:40,080 --> 08:46:43,920
will find this string here of this

15511
08:46:41,440 --> 08:46:45,520
program cannot be run in DOSS mode. And

15512
08:46:43,920 --> 08:46:47,120
this is a string that's often found at

15513
08:46:45,520 --> 08:46:49,680
the beginning of a Windows executable

15514
08:46:47,120 --> 08:46:51,440
file and is part of the DOSS header. And

15515
08:46:49,680 --> 08:46:53,840
so, we've successfully found the main

15516
08:46:51,440 --> 08:46:56,638
malicious IOC within this pcap file, all

15517
08:46:53,840 --> 08:46:58,240
through using TCB dump filters and GP.

15518
08:46:56,638 --> 08:47:00,318
If we wanted to take this any further

15519
08:46:58,240 --> 08:47:01,920
and actually extract the executable file

15520
08:47:00,318 --> 08:47:03,840
or obtain its hashes for further

15521
08:47:01,920 --> 08:47:06,120
analysis, well, we would typically have

15522
08:47:03,840 --> 08:47:08,718
to use something like Wireark to do

15523
08:47:06,120 --> 08:47:10,718
that. And so, I hope this example wasn't

15524
08:47:08,718 --> 08:47:12,080
too complex. But you can see how it can

15525
08:47:10,718 --> 08:47:13,600
sort of get a little difficult to do

15526
08:47:12,080 --> 08:47:15,200
things solely from the command line,

15527
08:47:13,600 --> 08:47:17,520
which is why we have other tools and

15528
08:47:15,200 --> 08:47:18,958
options available to us. But it is still

15529
08:47:17,520 --> 08:47:20,958
important to know how to do some of this

15530
08:47:18,958 --> 08:47:22,558
stuff, like using GP and doing different

15531
08:47:20,958 --> 08:47:24,958
filtering options to find what we're

15532
08:47:22,558 --> 08:47:26,478
looking for. And so since this video got

15533
08:47:24,958 --> 08:47:28,240
a bit longer than I thought, I'm going

15534
08:47:26,478 --> 08:47:31,558
to save the second analysis for the next

15535
08:47:28,240 --> 08:47:33,920
video. So I will see you in the next

15536
08:47:31,558 --> 08:47:35,680
video. All right, so let's go through

15537
08:47:33,920 --> 08:47:37,120
another example. And this time, we'll

15538
08:47:35,680 --> 08:47:39,200
get to chain some more useful command

15539
08:47:37,120 --> 08:47:41,360
line utilities together to parse through

15540
08:47:39,200 --> 08:47:43,120
some more packets. And in this scenario,

15541
08:47:41,360 --> 08:47:45,200
we have a packet capture from a Cobalt

15542
08:47:43,120 --> 08:47:46,878
Strike Beacon after a user fell victim

15543
08:47:45,200 --> 08:47:48,718
to a malicious macro enabled Word

15544
08:47:46,878 --> 08:47:52,318
document. And in this case, we're going

15545
08:47:48,718 --> 08:47:54,958
to be looking at the 2024-04-18.pcap

15546
08:47:52,318 --> 08:47:57,638
pcap file. And so let's start off by

15547
08:47:54,958 --> 08:48:00,398
seeing how many packets we have to deal

15548
08:47:57,638 --> 08:48:02,638
with. So I'm going to read in that file

15549
08:48:00,398 --> 08:48:05,040
and then I'm going to provide the d-

15550
08:48:02,638 --> 08:48:06,958
count argument. You can see we have

15551
08:48:05,040 --> 08:48:09,840
almost 10,000 packets here. So a bit

15552
08:48:06,958 --> 08:48:11,440
more than the last time. And so let's

15553
08:48:09,840 --> 08:48:13,440
start out by doing something that is

15554
08:48:11,440 --> 08:48:15,280
incredibly easy to do in something like

15555
08:48:13,440 --> 08:48:16,878
Wireshark, but is a little more

15556
08:48:15,280 --> 08:48:19,360
complicated when viewing a packet

15557
08:48:16,878 --> 08:48:21,280
capture in TCP dump. And that involves

15558
08:48:19,360 --> 08:48:24,558
looking at statistics of conversations

15559
08:48:21,280 --> 08:48:27,680
and IPs and ports. And so first, let's

15560
08:48:24,558 --> 08:48:29,520
look at the top source IP addresses. And

15561
08:48:27,680 --> 08:48:31,760
so to do that, I'm going to run TCP

15562
08:48:29,520 --> 08:48:34,478
dump. I'm going to provide two T's here

15563
08:48:31,760 --> 08:48:35,878
to convert the timestamp into Unix time.

15564
08:48:34,478 --> 08:48:38,398
I'm going to read in the file. Once

15565
08:48:35,878 --> 08:48:39,680
again, since I'm just dealing with IPs

15566
08:48:38,398 --> 08:48:41,440
right now, I'm going to provide the N

15567
08:48:39,680 --> 08:48:44,160
argument so we don't resolve any IP

15568
08:48:41,440 --> 08:48:46,558
addresses to names. And the only filter

15569
08:48:44,160 --> 08:48:47,840
I'm going to use right now is TCP. This

15570
08:48:46,558 --> 08:48:50,080
is because at this point I'm not

15571
08:48:47,840 --> 08:48:51,240
concerned with any ICMP or ARP or any

15572
08:48:50,080 --> 08:48:53,200
UDP

15573
08:48:51,240 --> 08:48:56,120
packets. And I'm just going to run this

15574
08:48:53,200 --> 08:48:58,318
so we can see what the output looks

15575
08:48:56,120 --> 08:49:00,398
like. Okay, excellent. I'm going to give

15576
08:48:58,318 --> 08:49:03,040
us a bit of space here. And I'm going to

15577
08:49:00,398 --> 08:49:04,638
rerun the command again. This time I'm

15578
08:49:03,040 --> 08:49:06,718
going to pipe it to a very useful

15579
08:49:04,638 --> 08:49:08,638
command called cut. And we're going to

15580
08:49:06,718 --> 08:49:10,878
cover cut in a lot more detail during

15581
08:49:08,638 --> 08:49:12,240
the log analysis and sim section because

15582
08:49:10,878 --> 08:49:13,760
it's really one of those Swiss Army

15583
08:49:12,240 --> 08:49:15,520
knife tools that every sock analyst

15584
08:49:13,760 --> 08:49:17,680
should master because it really helps

15585
08:49:15,520 --> 08:49:19,440
you parse through logs very quickly. And

15586
08:49:17,680 --> 08:49:21,760
in this case, the cut command allows us

15587
08:49:19,440 --> 08:49:23,600
to specify a delimiter with the tac d

15588
08:49:21,760 --> 08:49:26,160
option. And in this case, I'm going to

15589
08:49:23,600 --> 08:49:27,840
put the delimiter in quotes. And for the

15590
08:49:26,160 --> 08:49:30,718
delimiter itself, I'm just going to

15591
08:49:27,840 --> 08:49:32,000
press the space bar to add in a space.

15592
08:49:30,718 --> 08:49:35,120
Because if you look at some of these

15593
08:49:32,000 --> 08:49:37,120
outputs here, we have a field and then

15594
08:49:35,120 --> 08:49:38,958
we have a delimiter of a space and then

15595
08:49:37,120 --> 08:49:42,040
we have another field for the protocol

15596
08:49:38,958 --> 08:49:44,478
and then another space and then the IP

15597
08:49:42,040 --> 08:49:47,280
address. And so this is the field that I

15598
08:49:44,478 --> 08:49:49,760
want to extract. And so in this case, I

15599
08:49:47,280 --> 08:49:51,600
can provide the -f option to specify the

15600
08:49:49,760 --> 08:49:54,000
field that we're cutting. And in this

15601
08:49:51,600 --> 08:49:56,718
case, if we count, we have one field,

15602
08:49:54,000 --> 08:49:58,440
two fields, and three fields. And so

15603
08:49:56,718 --> 08:50:01,360
I'll just provide the number

15604
08:49:58,440 --> 08:50:03,520
three. And if I run this, well, you can

15605
08:50:01,360 --> 08:50:05,760
see we're just cutting the IP addresses.

15606
08:50:03,520 --> 08:50:07,760
However, due to the way that TCP dump

15607
08:50:05,760 --> 08:50:10,398
organizes things, we're also getting the

15608
08:50:07,760 --> 08:50:12,160
port numbers appended at the end. So in

15609
08:50:10,398 --> 08:50:14,240
this case, we can pipe this to yet

15610
08:50:12,160 --> 08:50:16,080
another cut command. And in this case,

15611
08:50:14,240 --> 08:50:18,000
we can specify the delimiter of the

15612
08:50:16,080 --> 08:50:20,160
period. And if we think about the

15613
08:50:18,000 --> 08:50:22,638
periods in these outputs, well, we have

15614
08:50:20,160 --> 08:50:24,798
one field, two fields, three fields,

15615
08:50:22,638 --> 08:50:27,920
four and five. So in this case, we want

15616
08:50:24,798 --> 08:50:30,318
to grab fields one to four, but exclude

15617
08:50:27,920 --> 08:50:33,200
five. And so for the fields option, I

15618
08:50:30,318 --> 08:50:35,280
can just provide 1 to four. So we can

15619
08:50:33,200 --> 08:50:36,878
provide that range there with the dash.

15620
08:50:35,280 --> 08:50:38,398
And so I'll run this one more time. And

15621
08:50:36,878 --> 08:50:41,760
you can see we're just getting the IP

15622
08:50:38,398 --> 08:50:43,520
addresses now. And so this is great, but

15623
08:50:41,760 --> 08:50:45,040
we have a lot of IP addresses here.

15624
08:50:43,520 --> 08:50:47,600
We're not doing any kind of filtering or

15625
08:50:45,040 --> 08:50:49,360
sorting. And so that's where the sort

15626
08:50:47,600 --> 08:50:50,878
command comes in, which is another very

15627
08:50:49,360 --> 08:50:52,798
useful command that again we're going to

15628
08:50:50,878 --> 08:50:54,718
cover in some more detail later on. But

15629
08:50:52,798 --> 08:50:55,878
let this be a introduction to it if you

15630
08:50:54,718 --> 08:50:58,080
haven't used it

15631
08:50:55,878 --> 08:51:00,398
already. And so I'm going to pipe this

15632
08:50:58,080 --> 08:51:02,478
output once again into the sort command.

15633
08:51:00,398 --> 08:51:03,760
And let's see how that changes things.

15634
08:51:02,478 --> 08:51:05,360
Well, we can see that all the IP

15635
08:51:03,760 --> 08:51:08,398
addresses have been sorted in descending

15636
08:51:05,360 --> 08:51:11,040
order. And so that's useful, but how do

15637
08:51:08,398 --> 08:51:12,558
we cut down on the duplicate entries?

15638
08:51:11,040 --> 08:51:15,120
Well, that is where we can pipe this

15639
08:51:12,558 --> 08:51:16,958
into the unique command.

15640
08:51:15,120 --> 08:51:18,878
And that's going to cut down all of the

15641
08:51:16,958 --> 08:51:20,558
entries that are duplicates on the same

15642
08:51:18,878 --> 08:51:22,558
line. Right? So you can see we had a

15643
08:51:20,558 --> 08:51:24,558
bunch of 85s here. This IP address

15644
08:51:22,558 --> 08:51:25,920
duplicated on the same line. And so

15645
08:51:24,558 --> 08:51:27,520
unique is going to cut down on all of

15646
08:51:25,920 --> 08:51:29,760
these. So it aggregates into a single

15647
08:51:27,520 --> 08:51:32,000
line. And a modifier that we can add to

15648
08:51:29,760 --> 08:51:34,958
the unique command is the C option or

15649
08:51:32,000 --> 08:51:36,878
the C argument which will display a nice

15650
08:51:34,958 --> 08:51:38,718
count for us. And so this is the amount

15651
08:51:36,878 --> 08:51:41,280
of unique aggregated entries of that

15652
08:51:38,718 --> 08:51:43,440
single IP address. And so this is great.

15653
08:51:41,280 --> 08:51:46,318
We're almost there. However, we can do

15654
08:51:43,440 --> 08:51:49,360
one more sort command here with the -ash

15655
08:51:46,318 --> 08:51:50,958
nr with the n being a numeric sort to

15656
08:51:49,360 --> 08:51:54,240
compare the string against the numerical

15657
08:51:50,958 --> 08:51:57,200
data of the count values here. NR to do

15658
08:51:54,240 --> 08:51:59,360
it in reverse. And so if we run this, we

15659
08:51:57,200 --> 08:52:01,040
will finally get a nice and sorted list

15660
08:51:59,360 --> 08:52:03,520
with all of the source IP addresses

15661
08:52:01,040 --> 08:52:05,440
within this pcap file. And if we scroll

15662
08:52:03,520 --> 08:52:08,318
up, well, we can see that the top IP

15663
08:52:05,440 --> 08:52:08,318
address here is this

15664
08:52:08,440 --> 08:52:13,520
10.4.18.169. And in second place, we

15665
08:52:10,478 --> 08:52:13,520
have this 85.23.

15666
08:52:13,798 --> 08:52:18,398
239.53.219. We also have some other

15667
08:52:15,840 --> 08:52:21,120
interesting IPs as well. And so

15668
08:52:18,398 --> 08:52:22,958
similarly we can run the same command

15669
08:52:21,120 --> 08:52:25,200
but we just need to change the first

15670
08:52:22,958 --> 08:52:27,520
value here from sorting on the third

15671
08:52:25,200 --> 08:52:29,878
field to the fifth. And in this case we

15672
08:52:27,520 --> 08:52:32,240
will get the top destination IP

15673
08:52:29,878 --> 08:52:34,160
addresses. Right? So if I run that and

15674
08:52:32,240 --> 08:52:35,760
we scroll back to the top well we're

15675
08:52:34,160 --> 08:52:37,680
getting the same results basically

15676
08:52:35,760 --> 08:52:39,520
because the source and destination seem

15677
08:52:37,680 --> 08:52:41,520
to be talking to each other the most.

15678
08:52:39,520 --> 08:52:42,520
And so we again we have this 10.4 4 and

15679
08:52:41,520 --> 08:52:44,638
this

15680
08:52:42,520 --> 08:52:46,398
85.239. And so from these initial

15681
08:52:44,638 --> 08:52:47,760
statistics, it looks like this private

15682
08:52:46,398 --> 08:52:50,318
IP address might be the affected

15683
08:52:47,760 --> 08:52:53,280
endpoint. And this one right here is a

15684
08:52:50,318 --> 08:52:54,638
potentially interesting IP to look into.

15685
08:52:53,280 --> 08:52:56,478
And so I'm going to get rid of all these

15686
08:52:54,638 --> 08:53:00,240
cut commands here. And I'm going to

15687
08:52:56,478 --> 08:53:00,240
specify that we want the source of

15688
08:53:00,360 --> 08:53:06,040
10.418.169 and the destination IP of

15689
08:53:03,040 --> 08:53:06,040
85.23953.29.

15690
08:53:07,440 --> 08:53:10,878
And if we just run a count on these,

15691
08:53:09,600 --> 08:53:12,638
well, we can see that we've narrowed

15692
08:53:10,878 --> 08:53:14,798
this down to about a thousand packets,

15693
08:53:12,638 --> 08:53:16,718
which is nice. And so now let's

15694
08:53:14,798 --> 08:53:18,558
aggregate and get some statistics on the

15695
08:53:16,718 --> 08:53:20,798
top ports that these two IP addresses

15696
08:53:18,558 --> 08:53:22,240
are using in their communications. And

15697
08:53:20,798 --> 08:53:24,318
so to do this, let me just clear this

15698
08:53:22,240 --> 08:53:26,718
all out. I'm going to remove the count

15699
08:53:24,318 --> 08:53:28,318
here. And I'm going to pipe the output

15700
08:53:26,718 --> 08:53:30,558
of, you know, these filters here with

15701
08:53:28,318 --> 08:53:32,958
the source and destination. And I'm

15702
08:53:30,558 --> 08:53:34,558
going to cut based on the space again.

15703
08:53:32,958 --> 08:53:36,160
And this time I want the third field

15704
08:53:34,558 --> 08:53:39,200
again because remember we're getting the

15705
08:53:36,160 --> 08:53:41,240
IP and the port. And so we want to pipe

15706
08:53:39,200 --> 08:53:44,478
this to another cut

15707
08:53:41,240 --> 08:53:47,360
command for any periods. And in this

15708
08:53:44,478 --> 08:53:49,440
case we only want the fifth field. And

15709
08:53:47,360 --> 08:53:51,200
that's just going to return the ports.

15710
08:53:49,440 --> 08:53:54,160
And so now it's just a matter of sorting

15711
08:53:51,200 --> 08:53:55,080
and grabbing the unique and then sorting

15712
08:53:54,160 --> 08:53:57,120
once

15713
08:53:55,080 --> 08:53:59,840
more. And you can see we're now getting

15714
08:53:57,120 --> 08:54:02,000
the top source port numbers. And if we

15715
08:53:59,840 --> 08:54:04,360
just modify this slightly and in this

15716
08:54:02,000 --> 08:54:07,680
case I'm just going to change source

15717
08:54:04,360 --> 08:54:09,200
here to destination and then I'll change

15718
08:54:07,680 --> 08:54:10,520
destination to source to basically

15719
08:54:09,200 --> 08:54:13,120
reverse this

15720
08:54:10,520 --> 08:54:15,200
filter. And you can see we're only

15721
08:54:13,120 --> 08:54:17,280
returning port 80 as the destination

15722
08:54:15,200 --> 08:54:19,280
port. And so we can see that the

15723
08:54:17,280 --> 08:54:21,520
majority of traffic is on port 80 or

15724
08:54:19,280 --> 08:54:23,120
HTTP and what looks like a number of

15725
08:54:21,520 --> 08:54:24,638
ephemeral or highle ports from the

15726
08:54:23,120 --> 08:54:26,718
client's end which of course makes

15727
08:54:24,638 --> 08:54:28,638
sense. And so now that we know that

15728
08:54:26,718 --> 08:54:31,040
we're just dealing with port 80 traffic,

15729
08:54:28,638 --> 08:54:32,558
well, let's look a bit deeper. And if

15730
08:54:31,040 --> 08:54:34,878
you recall what we did with our previous

15731
08:54:32,558 --> 08:54:37,360
pcap, well, we can pull back things like

15732
08:54:34,878 --> 08:54:40,558
the HTTP get or post headers from the

15733
08:54:37,360 --> 08:54:41,920
packets themselves using GP. And so I'll

15734
08:54:40,558 --> 08:54:43,920
just search on that source and

15735
08:54:41,920 --> 08:54:46,160
destination IP. And then I'll type this

15736
08:54:43,920 --> 08:54:48,080
to GP where we'll provide the capital E

15737
08:54:46,160 --> 08:54:51,600
to do an expression. And then we want to

15738
08:54:48,080 --> 08:54:53,200
look for get or post.

15739
08:54:51,600 --> 08:54:55,558
If we run this, well, we can see a

15740
08:54:53,200 --> 08:54:57,680
number of post requests to this API

15741
08:54:55,558 --> 08:54:59,920
endpoint. And this endpoint has a

15742
08:54:57,680 --> 08:55:01,000
seemingly unique identifier here, which

15743
08:54:59,920 --> 08:55:03,440
is very

15744
08:55:01,000 --> 08:55:05,600
curious. And so, let's try opening up

15745
08:55:03,440 --> 08:55:07,680
some of these packets. And so, I'm going

15746
08:55:05,600 --> 08:55:10,318
to clear this out. And this time, I'm

15747
08:55:07,680 --> 08:55:12,080
going to provide the - C argument to TCP

15748
08:55:10,318 --> 08:55:14,398
dump to only pull back the first five

15749
08:55:12,080 --> 08:55:16,080
packets here. And in this case, I'm

15750
08:55:14,398 --> 08:55:17,920
going to provide the capital A argument

15751
08:55:16,080 --> 08:55:19,680
to open up the packet in that ASI

15752
08:55:17,920 --> 08:55:21,920
format.

15753
08:55:19,680 --> 08:55:23,520
And so when we do that, well, we get a

15754
08:55:21,920 --> 08:55:27,478
very interesting content type here of

15755
08:55:23,520 --> 08:55:30,080
Los Angeles and a user agent of SS load

15756
08:55:27,478 --> 08:55:31,920
1.1. And I've never seen this user agent

15757
08:55:30,080 --> 08:55:34,160
string before. And so I'm going to copy

15758
08:55:31,920 --> 08:55:36,160
SS load and once again do some more

15759
08:55:34,160 --> 08:55:37,398
OSINT and just Google to see if I can

15760
08:55:36,160 --> 08:55:39,680
find any

15761
08:55:37,398 --> 08:55:41,600
information. And when I search for SS

15762
08:55:39,680 --> 08:55:43,760
load, well, I can immediately see this

15763
08:55:41,600 --> 08:55:46,718
Malpedia article here specifying that

15764
08:55:43,760 --> 08:55:48,478
it's part of a malware family.

15765
08:55:46,718 --> 08:55:50,638
And we can see that SSL load is a

15766
08:55:48,478 --> 08:55:53,120
rustbased downloader that is used to

15767
08:55:50,638 --> 08:55:55,040
deliver secondary payloads. And we can

15768
08:55:53,120 --> 08:55:57,280
see that the first stage of the malware

15769
08:55:55,040 --> 08:56:00,318
connects to a telegram channel named SS

15770
08:55:57,280 --> 08:56:02,160
load to retrieve another URL. We can see

15771
08:56:00,318 --> 08:56:04,478
that it downloads a compressed PE file

15772
08:56:02,160 --> 08:56:07,520
or an executable file using a hard-coded

15773
08:56:04,478 --> 08:56:10,318
user agent of SS load 1.x. And this is

15774
08:56:07,520 --> 08:56:13,200
the user agent that we saw in our HTTP

15775
08:56:10,318 --> 08:56:15,080
headers. If I go back to Google here and

15776
08:56:13,200 --> 08:56:18,318
search SS

15777
08:56:15,080 --> 08:56:20,558
load, well, I can see this GitHub URL.

15778
08:56:18,318 --> 08:56:22,398
And in this case, we can see a number of

15779
08:56:20,558 --> 08:56:24,478
additional IOC's that we can perhaps

15780
08:56:22,398 --> 08:56:26,240
look out for in our pcap file. For

15781
08:56:24,478 --> 08:56:27,840
example, this appears to be the Telegram

15782
08:56:26,240 --> 08:56:30,318
link because I know from experience that

15783
08:56:27,840 --> 08:56:32,558
t.m me is a domain owned and operated by

15784
08:56:30,318 --> 08:56:34,160
Telegram. We can see this IP address

15785
08:56:32,558 --> 08:56:38,000
which we actually already discovered.

15786
08:56:34,160 --> 08:56:39,520
So, this is that 85.239 IP address. We

15787
08:56:38,000 --> 08:56:42,398
can see that it downloads an encrypted

15788
08:56:39,520 --> 08:56:44,080
payload on this URL. So let's see if we

15789
08:56:42,398 --> 08:56:46,878
can find the domain name associated with

15790
08:56:44,080 --> 08:56:48,958
that IP address. And so in this case,

15791
08:56:46,878 --> 08:56:52,638
I'm just going to provide the filter of

15792
08:56:48,958 --> 08:56:52,638
host. And I'm going to provide that

15793
08:56:55,160 --> 08:57:00,000
85.23953.29. And if I run this, well, we

15794
08:56:58,240 --> 08:57:01,840
can see a very interesting domain name

15795
08:57:00,000 --> 08:57:03,280
here.

15796
08:57:01,840 --> 08:57:05,120
And it appears based on this first

15797
08:57:03,280 --> 08:57:07,760
subdomain, it's using some sort of

15798
08:57:05,120 --> 08:57:08,680
dynamic DNS to have a random value for

15799
08:57:07,760 --> 08:57:11,200
this

15800
08:57:08,680 --> 08:57:13,958
subdomain. And so with that, I will take

15801
08:57:11,200 --> 08:57:15,600
the base domain here of first

15802
08:57:13,958 --> 08:57:17,520
opportunity.online and head back to

15803
08:57:15,600 --> 08:57:20,080
Virus Total to see if I can find any

15804
08:57:17,520 --> 08:57:23,798
information about this domain name. If I

15805
08:57:20,080 --> 08:57:26,080
search under the URL tab for that domain

15806
08:57:23,798 --> 08:57:27,840
name, well, we can see that two security

15807
08:57:26,080 --> 08:57:30,718
vendors here flagged the URL or the

15808
08:57:27,840 --> 08:57:32,478
domain as malicious.

15809
08:57:30,718 --> 08:57:34,318
And so since we were seeing a large

15810
08:57:32,478 --> 08:57:36,240
number of post requests, well, let's try

15811
08:57:34,318 --> 08:57:37,760
opening up some of the packets to see if

15812
08:57:36,240 --> 08:57:39,520
any passwords or credentials were

15813
08:57:37,760 --> 08:57:41,040
submitted. And we can actually do that

15814
08:57:39,520 --> 08:57:43,920
through some clever expressions within

15815
08:57:41,040 --> 08:57:46,080
Grep. And so I'll run the command again.

15816
08:57:43,920 --> 08:57:47,760
In this case, I'll append the capital A

15817
08:57:46,080 --> 08:57:50,160
so we can see the ASKY output of the

15818
08:57:47,760 --> 08:57:52,160
payload. And I'll pipe this over to Grep

15819
08:57:50,160 --> 08:57:54,160
where I'll use -ash I to make sure it's

15820
08:57:52,160 --> 08:57:56,160
case insensitive. Within our search

15821
08:57:54,160 --> 08:57:58,200
here, I will look for any results that

15822
08:57:56,160 --> 08:58:03,360
contain the word

15823
08:57:58,200 --> 08:58:05,360
user or pass for password or login. And

15824
08:58:03,360 --> 08:58:07,040
if we run this, well, we're actually

15825
08:58:05,360 --> 08:58:08,798
getting all of the user agent strings,

15826
08:58:07,040 --> 08:58:10,600
which isn't very useful. So, what I can

15827
08:58:08,798 --> 08:58:13,440
do is pipe this to yet another GP

15828
08:58:10,600 --> 08:58:16,520
command. And this time, I'll use -ashv

15829
08:58:13,440 --> 08:58:18,798
to exclude the word user

15830
08:58:16,520 --> 08:58:21,520
agent. Now, if I run this, we should get

15831
08:58:18,798 --> 08:58:24,478
any other outputs. And in this case, we

15832
08:58:21,520 --> 08:58:26,478
get a very interesting object here. So

15833
08:58:24,478 --> 08:58:28,240
we can actually see some key value pairs

15834
08:58:26,478 --> 08:58:29,760
that might relate to the beacon or

15835
08:58:28,240 --> 08:58:31,440
information related to the affected

15836
08:58:29,760 --> 08:58:33,360
endpoint that was being sent over to the

15837
08:58:31,440 --> 08:58:35,360
attacker. So we can see things like an

15838
08:58:33,360 --> 08:58:37,000
IP address here. We can see the domain

15839
08:58:35,360 --> 08:58:39,200
that the affected endpoint was likely

15840
08:58:37,000 --> 08:58:40,958
on. We can see the host name of the

15841
08:58:39,200 --> 08:58:42,520
affected system. We can see the

15842
08:58:40,958 --> 08:58:44,798
architecture and operating system

15843
08:58:42,520 --> 08:58:46,638
version. We can even see the user that

15844
08:58:44,798 --> 08:58:48,240
was logged in. And we're getting all

15845
08:58:46,638 --> 08:58:51,040
this information just from the keep

15846
08:58:48,240 --> 08:58:53,200
alive object inside this packet.

15847
08:58:51,040 --> 08:58:55,440
And so let's also use GP to see if we

15848
08:58:53,200 --> 08:58:57,760
can find any files that were downloaded.

15849
08:58:55,440 --> 08:58:59,840
And so sometimes HTTP packets will

15850
08:58:57,760 --> 08:59:02,240
contain a file name header to specify

15851
08:58:59,840 --> 08:59:03,680
the name of a file being downloaded. And

15852
08:59:02,240 --> 08:59:06,318
in this case, I'm just going to search

15853
08:59:03,680 --> 08:59:08,000
for the string of file name. And if we

15854
08:59:06,318 --> 08:59:10,280
run this, well, we can see some

15855
08:59:08,000 --> 08:59:12,958
interesting results. We are seeing this

15856
08:59:10,280 --> 08:59:14,398
crypted_dll.bin file. And so this is

15857
08:59:12,958 --> 08:59:16,398
definitely something we want to open up

15858
08:59:14,398 --> 08:59:18,558
in Wireshark now to get more details on

15859
08:59:16,398 --> 08:59:20,958
the payload that was downloaded. But we

15860
08:59:18,558 --> 08:59:22,318
will save this for another lesson. And

15861
08:59:20,958 --> 08:59:24,958
so while we're here, let's see if we can

15862
08:59:22,318 --> 08:59:26,798
hunt down the remaining IoC's. And so if

15863
08:59:24,958 --> 08:59:29,440
you recall, we actually had reference to

15864
08:59:26,798 --> 08:59:30,958
a TM me domain here, which actually

15865
08:59:29,440 --> 08:59:33,360
relates to the Telegram messaging

15866
08:59:30,958 --> 08:59:34,840
service, which is sometimes used as a C2

15867
08:59:33,360 --> 08:59:36,958
or command and control channel for

15868
08:59:34,840 --> 08:59:39,200
attackers. And so let's do a search

15869
08:59:36,958 --> 08:59:42,478
across our entire pcap file for anything

15870
08:59:39,200 --> 08:59:47,600
related to T.M. me. And so I will search

15871
08:59:42,478 --> 08:59:49,200
the entire file and just g for TM me.

15872
08:59:47,600 --> 08:59:51,000
Interesting. So we can see some related

15873
08:59:49,200 --> 08:59:53,360
DNS queries to that

15874
08:59:51,000 --> 08:59:55,040
domain. And so in this case we have

15875
08:59:53,360 --> 08:59:56,878
certain values like this which is the

15876
08:59:55,040 --> 08:59:59,120
identifier for the DNS query. And this

15877
08:59:56,878 --> 09:00:00,638
is a randomly generated number. In this

15878
08:59:59,120 --> 09:00:02,878
case we have a with a question mark

15879
09:00:00,638 --> 09:00:04,558
here. This indicates the type of DNS

15880
09:00:02,878 --> 09:00:06,160
query that is being performed. In this

15881
09:00:04,558 --> 09:00:08,520
case it's an A query which is used to

15882
09:00:06,160 --> 09:00:11,280
translate a domain name to an IPv4

15883
09:00:08,520 --> 09:00:13,520
address. And lastly we have t.m me which

15884
09:00:11,280 --> 09:00:15,600
is the actual domain name being queried.

15885
09:00:13,520 --> 09:00:17,760
And so to put this all together, these

15886
09:00:15,600 --> 09:00:18,520
packets represent DNS queries from our

15887
09:00:17,760 --> 09:00:21,360
source

15888
09:00:18,520 --> 09:00:24,638
endpoint asking for the IPv4 address

15889
09:00:21,360 --> 09:00:26,398
correspondent to the domain name t.m me.

15890
09:00:24,638 --> 09:00:28,920
And so if we change our filter here to

15891
09:00:26,398 --> 09:00:31,120
search for the host of t.m

15892
09:00:28,920 --> 09:00:34,240
me. Well, it looks like all of the

15893
09:00:31,120 --> 09:00:35,520
traffic is HTTPS traffic on port 443,

15894
09:00:34,240 --> 09:00:37,120
meaning that we can't really dig into

15895
09:00:35,520 --> 09:00:38,558
the payloads without having the TLS

15896
09:00:37,120 --> 09:00:40,080
certificate, which we typically don't

15897
09:00:38,558 --> 09:00:42,240
have.

15898
09:00:40,080 --> 09:00:44,240
And so lastly, the IoC's we found also

15899
09:00:42,240 --> 09:00:45,520
mentioned a malicious DLL file that is

15900
09:00:44,240 --> 09:00:47,840
used for the second stage of the

15901
09:00:45,520 --> 09:00:50,318
malware. And so let's see if we perform

15902
09:00:47,840 --> 09:00:52,798
a basic search here if we can pull back

15903
09:00:50,318 --> 09:00:54,718
anything related to a DLL. And in this

15904
09:00:52,798 --> 09:00:57,520
case, we actually did. We can see that

15905
09:00:54,718 --> 09:01:01,760
the endpoint here made a get request for

15906
09:00:57,520 --> 09:01:03,200
this 8080.dll file.

15907
09:01:01,760 --> 09:01:05,680
And if I attempt to open this packet up

15908
09:01:03,200 --> 09:01:07,798
with the capital A and then also append

15909
09:01:05,680 --> 09:01:10,840
capital A with GP so I can pull back 50

15910
09:01:07,798 --> 09:01:13,040
lines and then pipe it over to

15911
09:01:10,840 --> 09:01:14,440
less. Well, we can start to see the

15912
09:01:13,040 --> 09:01:16,120
contents of the

15913
09:01:14,440 --> 09:01:18,398
crypted_dll.bin

15914
09:01:16,120 --> 09:01:20,398
file. But at this point, we really need

15915
09:01:18,398 --> 09:01:22,398
to open this up in Wireshark as we can't

15916
09:01:20,398 --> 09:01:24,798
do detailed analysis like this with TCP

15917
09:01:22,398 --> 09:01:26,638
dump alone.

15918
09:01:24,798 --> 09:01:28,638
And so these were two somewhat elaborate

15919
09:01:26,638 --> 09:01:31,440
command line investigations to cap off

15920
09:01:28,638 --> 09:01:33,200
our TCP dump lessons, but hopefully they

15921
09:01:31,440 --> 09:01:34,958
showed you a bit of the general process

15922
09:01:33,200 --> 09:01:37,040
and methodology on how we can use

15923
09:01:34,958 --> 09:01:39,120
various display filters to zoom in and

15924
09:01:37,040 --> 09:01:41,200
isolate what we're looking for and how

15925
09:01:39,120 --> 09:01:44,318
we can use various IoC's we find to

15926
09:01:41,200 --> 09:01:46,638
enhance our search. And so to conclude,

15927
09:01:44,318 --> 09:01:48,080
TCP dump is a fantastic tool for quickly

15928
09:01:46,638 --> 09:01:50,798
and efficiently capturing network

15929
09:01:48,080 --> 09:01:52,240
traffic and aggregating network packets.

15930
09:01:50,798 --> 09:01:53,760
However, in the next lessons that

15931
09:01:52,240 --> 09:01:55,840
follow, we're going to take a look at

15932
09:01:53,760 --> 09:01:57,680
Wireshark, which is a graphical packet

15933
09:01:55,840 --> 09:01:59,040
analyzer, which will give us a lot more

15934
09:01:57,680 --> 09:02:01,360
power in various features like

15935
09:01:59,040 --> 09:02:02,558
statistics aggregation or conversation

15936
09:02:01,360 --> 09:02:04,958
following that can make our

15937
09:02:02,558 --> 09:02:06,478
investigations much easier. And so, at

15938
09:02:04,958 --> 09:02:08,240
the end of the day, it's important that

15939
09:02:06,478 --> 09:02:09,920
we cover and know both as you never know

15940
09:02:08,240 --> 09:02:12,398
what you'll have access to in the field

15941
09:02:09,920 --> 09:02:13,840
with certain incidents or scenarios. And

15942
09:02:12,398 --> 09:02:15,840
so, with that, I will see you in the

15943
09:02:13,840 --> 09:02:19,120
next lesson for the challenge and then

15944
09:02:15,840 --> 09:02:21,280
see you over in the Wireshark section.

15945
09:02:19,120 --> 09:02:23,360
Welcome to the Wireshark section of this

15946
09:02:21,280 --> 09:02:25,440
course. As I've mentioned a few times

15947
09:02:23,360 --> 09:02:26,958
already, Wireshark is another essential

15948
09:02:25,440 --> 09:02:28,718
tool for anyone involved in either

15949
09:02:26,958 --> 09:02:31,200
network troubleshooting and in our case,

15950
09:02:28,718 --> 09:02:33,040
network traffic analysis. And as sock

15951
09:02:31,200 --> 09:02:34,958
analysts, we need to know how to use it

15952
09:02:33,040 --> 09:02:36,718
to both create and carve through and

15953
09:02:34,958 --> 09:02:39,200
analyze pcaps when responding to

15954
09:02:36,718 --> 09:02:40,398
malicious activity over the network. So

15955
09:02:39,200 --> 09:02:42,240
there might be scenarios where we're

15956
09:02:40,398 --> 09:02:43,920
handed a pcap file that contains

15957
09:02:42,240 --> 09:02:45,360
suspicious traffic and we need to

15958
09:02:43,920 --> 09:02:47,440
analyze it to identify various

15959
09:02:45,360 --> 09:02:48,958
indicators of compromise or live

15960
09:02:47,440 --> 09:02:50,398
incident response scenarios where we

15961
09:02:48,958 --> 09:02:51,760
might need to actually remote in and

15962
09:02:50,398 --> 09:02:53,680
capture packets directly from a

15963
09:02:51,760 --> 09:02:56,000
compromised server or workstation. And

15964
09:02:53,680 --> 09:02:58,398
so Wireshark is a free and open- source

15965
09:02:56,000 --> 09:03:00,798
GUI based utility. So a graphical user

15966
09:02:58,398 --> 09:03:02,878
interfacebased utility and is the most

15967
09:03:00,798 --> 09:03:05,600
widely used network protocol analyzer in

15968
09:03:02,878 --> 09:03:07,600
the world. And like with TCP dump, we

15969
09:03:05,600 --> 09:03:09,760
can use Wireshark to do live capture and

15970
09:03:07,600 --> 09:03:11,280
offline analysis of network traffic. So

15971
09:03:09,760 --> 09:03:13,440
we can capture live network traffic

15972
09:03:11,280 --> 09:03:14,958
through any of our network interfaces or

15973
09:03:13,440 --> 09:03:17,600
analyze previously captured packets

15974
09:03:14,958 --> 09:03:19,440
through pcap or other file formats. And

15975
09:03:17,600 --> 09:03:21,680
because Wireshark is a graphic based

15976
09:03:19,440 --> 09:03:24,318
tool, it offers several analysis

15977
09:03:21,680 --> 09:03:26,080
advantages over TCP dump. And it allows

15978
09:03:24,318 --> 09:03:28,240
us to do more of a deep inspection of

15979
09:03:26,080 --> 09:03:30,000
various networking protocols and use

15980
09:03:28,240 --> 09:03:32,240
things like powerful display filters to

15981
09:03:30,000 --> 09:03:34,240
narrow down interesting traffic and even

15982
09:03:32,240 --> 09:03:36,958
follow stateful conversations like TCP

15983
09:03:34,240 --> 09:03:39,200
and HTTP data streams. And we can look

15984
09:03:36,958 --> 09:03:41,920
at highle statistics which really helps

15985
09:03:39,200 --> 09:03:43,360
the initial analysis process. And so

15986
09:03:41,920 --> 09:03:44,958
when it comes to network packet

15987
09:03:43,360 --> 09:03:47,200
analysis, many folks like to put

15988
09:03:44,958 --> 09:03:48,798
Wireshark and TCP dump headto-head and

15989
09:03:47,200 --> 09:03:50,798
have strong opinions on which is the

15990
09:03:48,798 --> 09:03:52,798
better tool. And well, the truth is,

15991
09:03:50,798 --> 09:03:54,798
like I said before, both Wireshark and

15992
09:03:52,798 --> 09:03:56,240
TCP dump have their own strengths and

15993
09:03:54,798 --> 09:03:58,318
weaknesses and are suitable for

15994
09:03:56,240 --> 09:04:00,318
different purposes rather than one being

15995
09:03:58,318 --> 09:04:02,000
categorically better than one another.

15996
09:04:00,318 --> 09:04:04,000
And so TCP dump being a command

15997
09:04:02,000 --> 09:04:05,600
linebased tool is known for its speed

15998
09:04:04,000 --> 09:04:07,280
and efficiency. And it's especially

15999
09:04:05,600 --> 09:04:08,958
useful in environments with high network

16000
09:04:07,280 --> 09:04:10,958
throughput and data rates and large

16001
09:04:08,958 --> 09:04:13,200
volumes of traffic. And like we said

16002
09:04:10,958 --> 09:04:14,878
before, TCP dump is available on almost

16003
09:04:13,200 --> 09:04:17,040
every Unixbased system, making it a

16004
09:04:14,878 --> 09:04:18,558
powerful and ubiquitous tool and also

16005
09:04:17,040 --> 09:04:20,160
doesn't require a graphical user

16006
09:04:18,558 --> 09:04:22,638
interface. So it's ideal for headless

16007
09:04:20,160 --> 09:04:23,920
servers and remote sessions. Wireshark

16008
09:04:22,638 --> 09:04:25,840
on the other hand is really good at

16009
09:04:23,920 --> 09:04:27,280
detailed packet analysis, right? So it

16010
09:04:25,840 --> 09:04:29,200
makes navigating and filtering and

16011
09:04:27,280 --> 09:04:30,958
analyzing network traffic much easier

16012
09:04:29,200 --> 09:04:33,040
and it offers way more visualizations

16013
09:04:30,958 --> 09:04:34,798
and statistics. But of course the

16014
09:04:33,040 --> 09:04:36,558
drawbacks are it can be very resource

16015
09:04:34,798 --> 09:04:39,040
inensive and often struggles with very

16016
09:04:36,558 --> 09:04:40,958
high data rates and large capture files.

16017
09:04:39,040 --> 09:04:42,240
And so if you have a very large pcap

16018
09:04:40,958 --> 09:04:44,000
file, well, you might need to first

16019
09:04:42,240 --> 09:04:46,398
carve it down with relevant filters with

16020
09:04:44,000 --> 09:04:48,240
TCP dump or something like T-shark first

16021
09:04:46,398 --> 09:04:50,718
and then load it into Wireshark once

16022
09:04:48,240 --> 09:04:52,318
it's a lot smaller. And so in general,

16023
09:04:50,718 --> 09:04:54,318
for real-time traffic capture on

16024
09:04:52,318 --> 09:04:55,760
high-speed networks, TCP dump is more

16025
09:04:54,318 --> 09:04:58,000
suitable due to its efficiency and

16026
09:04:55,760 --> 09:05:00,160
scalability. But for in-depth analysis

16027
09:04:58,000 --> 09:05:03,040
and visualization, Wireshark is the

16028
09:05:00,160 --> 09:05:04,558
better choice. And so unlike TCP dump,

16029
09:05:03,040 --> 09:05:06,240
Wireshark typically does not come

16030
09:05:04,558 --> 09:05:08,318
bundled in to most default Linux

16031
09:05:06,240 --> 09:05:10,000
distributions or with Windows. So, let's

16032
09:05:08,318 --> 09:05:12,638
quickly cover the installation process

16033
09:05:10,000 --> 09:05:14,558
for each. And so, on Linux, the easiest

16034
09:05:12,638 --> 09:05:16,638
way uh is typically through your

16035
09:05:14,558 --> 09:05:18,160
built-in package manager. And in our

16036
09:05:16,638 --> 09:05:20,200
case, we're running Ubuntu. So, we

16037
09:05:18,160 --> 09:05:23,360
really just need to run pseudoapp

16038
09:05:20,200 --> 09:05:25,600
install Wireshark and say yes to the

16039
09:05:23,360 --> 09:05:25,600
prompt

16040
09:05:26,120 --> 09:05:29,520
there. And so, we will be met with this

16041
09:05:28,398 --> 09:05:31,840
screen here when we're installing

16042
09:05:29,520 --> 09:05:33,920
Wireshark. And this is basically asking

16043
09:05:31,840 --> 09:05:36,240
us if non-root users should be able to

16044
09:05:33,920 --> 09:05:37,840
capture packets. And if you remember

16045
09:05:36,240 --> 09:05:39,440
with TCP dump, well, we couldn't

16046
09:05:37,840 --> 09:05:41,280
actually start a capture without

16047
09:05:39,440 --> 09:05:43,520
prepending it with pseudo because we

16048
09:05:41,280 --> 09:05:45,440
need to be a root user or a super user

16049
09:05:43,520 --> 09:05:46,878
in order to capture packets and interact

16050
09:05:45,440 --> 09:05:48,718
with the network interface at that

16051
09:05:46,878 --> 09:05:52,160
level. And so I'm just going to go with

16052
09:05:48,718 --> 09:05:52,160
the default option here and say

16053
09:05:58,040 --> 09:06:04,798
no. Excellent. So we have it installed

16054
09:06:00,638 --> 09:06:04,798
now. And you'll notice if I just run

16055
09:06:05,478 --> 09:06:08,800
Wireshark and don't worry about the

16056
09:06:07,360 --> 09:06:11,278
interface yet. We'll get to this in due

16057
09:06:08,800 --> 09:06:12,718
time. But if I just start a capture,

16058
09:06:11,278 --> 09:06:14,480
well, you can see I'm getting this

16059
09:06:12,718 --> 09:06:16,718
error. And this is because I did not

16060
09:06:14,480 --> 09:06:18,078
start Wireark as pseudo. And so just

16061
09:06:16,718 --> 09:06:20,000
remember if you select that default

16062
09:06:18,078 --> 09:06:21,680
option there to prevent non-super users

16063
09:06:20,000 --> 09:06:23,040
from capturing packets, well, you're

16064
09:06:21,680 --> 09:06:24,640
going to run into this issue unless you

16065
09:06:23,040 --> 09:06:26,558
start Wireshark as a super user or

16066
09:06:24,640 --> 09:06:29,122
someone in the Wireshark group. And so

16067
09:06:26,558 --> 09:06:31,918
to fix this this time I'm just going to

16068
09:06:29,122 --> 09:06:31,918
run pseudo

16069
09:06:32,758 --> 09:06:36,840
wireark and I should be able to capture

16070
09:06:35,040 --> 09:06:39,278
packets with no

16071
09:06:36,840 --> 09:06:41,520
problem. Now there is a way to get the

16072
09:06:39,278 --> 09:06:43,278
latest and greatest release of wireark.

16073
09:06:41,520 --> 09:06:45,840
And to do that we would need to run a

16074
09:06:43,278 --> 09:06:47,200
couple of extra commands. And so I'll

16075
09:06:45,840 --> 09:06:48,960
list the commands below if you want to

16076
09:06:47,200 --> 09:06:50,320
install the latest release yourself. But

16077
09:06:48,960 --> 09:06:52,480
just know we won't need it for this

16078
09:06:50,320 --> 09:06:54,718
section. And so to do it, we would need

16079
09:06:52,480 --> 09:06:57,278
to add the Wireshark dev repository to

16080
09:06:54,718 --> 09:06:57,278
our package

16081
09:06:58,520 --> 09:07:04,718
manager. And after doing so, we would

16082
09:07:00,878 --> 09:07:04,718
just need to run a pseudo apt

16083
09:07:05,878 --> 09:07:10,640
update and then pseudoapp install

16084
09:07:18,598 --> 09:07:23,918
wireark. To download Wireshark on

16085
09:07:21,040 --> 09:07:26,398
Windows, we can go to wireshark.org and

16086
09:07:23,918 --> 09:07:28,398
click on get started. From here, you can

16087
09:07:26,398 --> 09:07:30,718
select the installer applicable to your

16088
09:07:28,398 --> 09:07:34,238
systems architecture. In this case, I

16089
09:07:30,718 --> 09:07:34,238
will choose the Windows 64-bit

16090
09:07:37,878 --> 09:07:43,122
installer. And once the download is

16091
09:07:40,078 --> 09:07:43,122
complete, we can run the

16092
09:07:43,238 --> 09:07:46,640
installer. And we can now go through

16093
09:07:45,278 --> 09:07:49,438
this wizard to guide us through the

16094
09:07:46,640 --> 09:07:51,122
installation process. Accept the license

16095
09:07:49,438 --> 09:07:52,480
agreement.

16096
09:07:51,122 --> 09:07:54,000
And here we can choose various

16097
09:07:52,480 --> 09:07:56,480
components that we want to include or

16098
09:07:54,000 --> 09:07:58,558
install with Wireshark. In this case,

16099
09:07:56,480 --> 09:08:00,558
you can see T-Shark is already selected.

16100
09:07:58,558 --> 09:08:02,238
And T-shark is a command line interface

16101
09:08:00,558 --> 09:08:04,718
version of Wireshark and is more

16102
09:08:02,238 --> 09:08:06,078
powerful than TCP dump or wind dump. We

16103
09:08:04,718 --> 09:08:07,758
won't get into covering it in this

16104
09:08:06,078 --> 09:08:09,918
section, but we can keep the defaults

16105
09:08:07,758 --> 09:08:12,480
here and just click on next. Choose

16106
09:08:09,918 --> 09:08:14,160
where you want to save the program. And

16107
09:08:12,480 --> 09:08:16,398
if you don't already have it installed,

16108
09:08:14,160 --> 09:08:18,640
it's going to install NPC for you as

16109
09:08:16,398 --> 09:08:22,078
well. This is required in order for

16110
09:08:18,640 --> 09:08:22,078
Wireshark to run.

16111
09:08:24,640 --> 09:08:28,200
Once this is finished, we can click next

16112
09:08:26,800 --> 09:08:30,438
and then

16113
09:08:28,200 --> 09:08:34,160
finish. And now we can just search for

16114
09:08:30,438 --> 09:08:34,160
Wireshark and run the

16115
09:08:35,960 --> 09:08:39,520
application. And I'm going to hop back

16116
09:08:37,918 --> 09:08:40,878
over to Linux now. But basically

16117
09:08:39,520 --> 09:08:42,558
everything we cover here is going to be

16118
09:08:40,878 --> 09:08:44,438
applicable to both the Windows and Linux

16119
09:08:42,558 --> 09:08:47,040
version of

16120
09:08:44,438 --> 09:08:49,278
Wireshark. So let's open up Wireshark

16121
09:08:47,040 --> 09:08:50,800
and take a quick tour. And I'll mention

16122
09:08:49,278 --> 09:08:52,320
that there are several options for us to

16123
09:08:50,800 --> 09:08:53,758
start Wireshark directly from the

16124
09:08:52,320 --> 09:08:55,278
command line. And there are several

16125
09:08:53,758 --> 09:08:57,040
options that we can provide as we do

16126
09:08:55,278 --> 09:08:59,758
that like specifying capture interfaces

16127
09:08:57,040 --> 09:09:02,480
or opening up specific pcap files. For

16128
09:08:59,758 --> 09:09:06,000
example, if I run pseudo wireshark with

16129
09:09:02,480 --> 09:09:09,360
the -ash i here and select the03

16130
09:09:06,000 --> 09:09:09,360
interface with the k

16131
09:09:09,398 --> 09:09:14,800
argument. Well, this will directly start

16132
09:09:11,598 --> 09:09:16,718
a capture on that emp3 interface.

16133
09:09:14,800 --> 09:09:19,438
However, I will just run pseudo

16134
09:09:16,718 --> 09:09:21,360
Wireshark to open up the welcome screen.

16135
09:09:19,438 --> 09:09:23,278
And so when you open Wireshark without

16136
09:09:21,360 --> 09:09:25,680
starting a capture or opening a capture

16137
09:09:23,278 --> 09:09:27,520
file, well, it will display this welcome

16138
09:09:25,680 --> 09:09:29,278
screen which lists any recent open

16139
09:09:27,520 --> 09:09:31,598
captured files if we had any. In this

16140
09:09:29,278 --> 09:09:33,558
case, we don't. And also the available

16141
09:09:31,598 --> 09:09:36,078
capture interfaces for capturing network

16142
09:09:33,558 --> 09:09:38,160
traffic. And so just at a high level in

16143
09:09:36,078 --> 09:09:40,078
terms of our user interface, you can see

16144
09:09:38,160 --> 09:09:41,598
we have the menu bar at the top here.

16145
09:09:40,078 --> 09:09:43,758
And this obviously contains various

16146
09:09:41,598 --> 09:09:45,520
menus for file operations, right? So, we

16147
09:09:43,758 --> 09:09:47,122
can open PECAP files. It's currently

16148
09:09:45,520 --> 09:09:49,360
grayed out, but we could save captures

16149
09:09:47,122 --> 09:09:50,398
as we start capturing packets. And we're

16150
09:09:49,360 --> 09:09:52,122
going to return to a lot of these

16151
09:09:50,398 --> 09:09:54,558
options here as we start capturing

16152
09:09:52,122 --> 09:09:56,238
packets. We also have the main toolbar

16153
09:09:54,558 --> 09:09:58,000
here, which is going to provide us quick

16154
09:09:56,238 --> 09:09:59,520
access to common actions, right? So,

16155
09:09:58,000 --> 09:10:01,278
like starting packet captures or

16156
09:09:59,520 --> 09:10:02,878
stopping them. We could restart our

16157
09:10:01,278 --> 09:10:05,360
packet capture. We can even open files

16158
09:10:02,878 --> 09:10:06,960
this way as well. We also have a section

16159
09:10:05,360 --> 09:10:08,480
here for capture filters, which we're

16160
09:10:06,960 --> 09:10:10,960
going to get into in more detail in a

16161
09:10:08,480 --> 09:10:13,122
future lesson. But the main area here is

16162
09:10:10,960 --> 09:10:14,800
our list of interfaces. And you'll

16163
09:10:13,122 --> 09:10:17,840
notice this is pretty similar to when we

16164
09:10:14,800 --> 09:10:19,398
ran TCP dump with the capital D argument

16165
09:10:17,840 --> 09:10:21,438
to list our

16166
09:10:19,398 --> 09:10:23,438
interfaces. You'll also notice this

16167
09:10:21,438 --> 09:10:25,438
little spark line here or this graph

16168
09:10:23,438 --> 09:10:27,122
indicating if a current interface has

16169
09:10:25,438 --> 09:10:28,160
packets going through it. And so this

16170
09:10:27,122 --> 09:10:29,520
can be helpful if you're trying to

16171
09:10:28,160 --> 09:10:31,520
figure out which interface you actually

16172
09:10:29,520 --> 09:10:34,360
want to capture packets from. Right? If

16173
09:10:31,520 --> 09:10:36,160
I just open Firefox and go to

16174
09:10:34,360 --> 09:10:38,320
google.com, well, we're going to start

16175
09:10:36,160 --> 09:10:40,078
to see a lot of traffic coming from our

16176
09:10:38,320 --> 09:10:41,918
various interfaces as we interact with

16177
09:10:40,078 --> 09:10:43,680
the internet.

16178
09:10:41,918 --> 09:10:45,680
And so we can select any of these

16179
09:10:43,680 --> 09:10:47,598
interfaces to capture from and we can

16180
09:10:45,680 --> 09:10:49,360
also select multiple. Right? So we have

16181
09:10:47,598 --> 09:10:52,000
the any option here to capture from all

16182
09:10:49,360 --> 09:10:53,918
interfaces or we can click and hold

16183
09:10:52,000 --> 09:10:55,840
control and select various other

16184
09:10:53,918 --> 09:10:59,160
interfaces to collect both at the same

16185
09:10:55,840 --> 09:11:01,360
time. Or I can hold shift and select

16186
09:10:59,160 --> 09:11:03,278
everything. And if we hover over any of

16187
09:11:01,360 --> 09:11:05,278
these interfaces, for example, this one

16188
09:11:03,278 --> 09:11:06,718
here, well, we can see its IP address

16189
09:11:05,278 --> 09:11:08,640
and any capture filters that are

16190
09:11:06,718 --> 09:11:10,398
applied.

16191
09:11:08,640 --> 09:11:12,640
So for example, let's start monitoring

16192
09:11:10,398 --> 09:11:14,078
on our local loop back interface. So in

16193
09:11:12,640 --> 09:11:16,878
this case, I'm going to select the loop

16194
09:11:14,078 --> 09:11:18,480
back interface here. And let's recreate

16195
09:11:16,878 --> 09:11:20,718
the same scenario that we've done a

16196
09:11:18,480 --> 09:11:22,238
couple times already with netcat. And in

16197
09:11:20,718 --> 09:11:24,320
doing so, we can get some simple and

16198
09:11:22,238 --> 09:11:26,078
easy to read packets to start to dissect

16199
09:11:24,320 --> 09:11:28,320
and understand the layout and feature

16200
09:11:26,078 --> 09:11:29,758
set of wire. And once we go through this

16201
09:11:28,320 --> 09:11:31,438
activity, well, we'll start loading in

16202
09:11:29,758 --> 09:11:34,480
some real pcaps containing malware like

16203
09:11:31,438 --> 09:11:36,320
we did with TCP dump. And so in this tab

16204
09:11:34,480 --> 09:11:38,960
here, I'm just going to start up netcat

16205
09:11:36,320 --> 09:11:40,960
and listen on port 1 2 3 4. And I'm

16206
09:11:38,960 --> 09:11:42,718
going to return to Wireshark and double

16207
09:11:40,960 --> 09:11:44,520
click the loop back interface here to

16208
09:11:42,718 --> 09:11:46,640
immediately start our

16209
09:11:44,520 --> 09:11:48,320
capture. So now that we're capturing

16210
09:11:46,640 --> 09:11:50,122
packets, I'm going to open up another

16211
09:11:48,320 --> 09:11:53,438
tab

16212
09:11:50,122 --> 09:11:55,918
here with control shift and t. And then

16213
09:11:53,438 --> 09:12:00,360
I'm going to connect with netcat on my

16214
09:11:55,918 --> 09:12:02,878
local host on port 1 2 3

16215
09:12:00,360 --> 09:12:05,598
4. and we should see the three-way

16216
09:12:02,878 --> 09:12:07,598
handshake taking place. And at this

16217
09:12:05,598 --> 09:12:09,840
point, I'm going to stop the capture.

16218
09:12:07,598 --> 09:12:11,520
And I'll just zoom in a little bit here.

16219
09:12:09,840 --> 09:12:13,520
We're now looking at what is referred to

16220
09:12:11,520 --> 09:12:15,122
as the main window. And Wireshark

16221
09:12:13,520 --> 09:12:17,360
further breaks down this main window

16222
09:12:15,122 --> 09:12:19,598
into three distinct sections. So, I'm

16223
09:12:17,360 --> 09:12:21,200
going to click on a packet here. And you

16224
09:12:19,598 --> 09:12:22,800
can kind of only see two here. This is

16225
09:12:21,200 --> 09:12:24,640
because of my screen size. So, if this

16226
09:12:22,800 --> 09:12:25,840
is happening to you, just go over to the

16227
09:12:24,640 --> 09:12:27,360
right here. And you should see this

16228
09:12:25,840 --> 09:12:29,680
little window here or this pane that got

16229
09:12:27,360 --> 09:12:32,160
cut off. So we can drag this into view

16230
09:12:29,680 --> 09:12:33,520
so we can see it more clearly. And so in

16231
09:12:32,160 --> 09:12:35,758
the top here we're going to see this

16232
09:12:33,520 --> 09:12:38,160
packet list pane. And this essentially

16233
09:12:35,758 --> 09:12:39,438
provides a summary of each packet. So we

16234
09:12:38,160 --> 09:12:41,122
can see we have different columns here

16235
09:12:39,438 --> 09:12:43,122
like the source and destination IP

16236
09:12:41,122 --> 09:12:45,840
addresses, the protocol, the length,

16237
09:12:43,122 --> 09:12:47,918
even a timestamp. And so once we click

16238
09:12:45,840 --> 09:12:49,360
on or select any of these packets, well,

16239
09:12:47,918 --> 09:12:51,598
we can see the details in the other

16240
09:12:49,360 --> 09:12:54,000
panes here are going to update. And I'm

16241
09:12:51,598 --> 09:12:55,840
just going to drag this more into view.

16242
09:12:54,000 --> 09:12:57,918
And so by default, we're going to see

16243
09:12:55,840 --> 09:13:00,000
this list of columns here. So we have

16244
09:12:57,918 --> 09:13:01,680
number here and this actually refers to

16245
09:13:00,000 --> 09:13:03,680
the number of the packet within the

16246
09:13:01,680 --> 09:13:05,122
capture file and this number is not

16247
09:13:03,680 --> 09:13:06,558
going to change even if we use any of

16248
09:13:05,122 --> 09:13:08,238
our display filters. This is something

16249
09:13:06,558 --> 09:13:10,480
that Wireark adds to make navigating

16250
09:13:08,238 --> 09:13:12,238
through packets easier. Next we have

16251
09:13:10,480 --> 09:13:14,398
time here and so this refers to a

16252
09:13:12,238 --> 09:13:15,918
timestamp of the packet and we can

16253
09:13:14,398 --> 09:13:17,480
actually change the presentation format

16254
09:13:15,918 --> 09:13:19,758
of the time stamp which we'll get into

16255
09:13:17,480 --> 09:13:21,278
shortly. Under source here we obviously

16256
09:13:19,758 --> 09:13:23,122
have the source address of where the

16257
09:13:21,278 --> 09:13:24,960
packet is coming from and of course

16258
09:13:23,122 --> 09:13:27,200
destination is where the packet is going

16259
09:13:24,960 --> 09:13:29,122
to. We have the protocol here which is

16260
09:13:27,200 --> 09:13:30,718
the abbreviation of whatever protocol is

16261
09:13:29,122 --> 09:13:32,960
being used in this case transmission

16262
09:13:30,718 --> 09:13:35,122
control protocol. We have the length of

16263
09:13:32,960 --> 09:13:36,640
each packet as well as the info column

16264
09:13:35,122 --> 09:13:39,040
here which shows additional information

16265
09:13:36,640 --> 09:13:40,480
about the packet content itself. In this

16266
09:13:39,040 --> 09:13:42,320
case we can see various things like the

16267
09:13:40,480 --> 09:13:44,160
flags and the window size and sequence

16268
09:13:42,320 --> 09:13:46,398
numbers very similar to what we were

16269
09:13:44,160 --> 09:13:48,320
looking at in TCP dump. And so I

16270
09:13:46,398 --> 09:13:50,000
mentioned this timestamp presentation.

16271
09:13:48,320 --> 09:13:52,238
Well we can change the format here and

16272
09:13:50,000 --> 09:13:54,718
the precision using this view menu at

16273
09:13:52,238 --> 09:13:57,278
the top. And so if we click on view and

16274
09:13:54,718 --> 09:13:59,040
then go to time display format. Well, by

16275
09:13:57,278 --> 09:14:00,960
default, Wireshark is going to display

16276
09:13:59,040 --> 09:14:03,520
the packets in seconds since the first

16277
09:14:00,960 --> 09:14:05,200
captured packet. The most common format

16278
09:14:03,520 --> 09:14:08,160
and typically best practice is to use

16279
09:14:05,200 --> 09:14:10,160
the UTC date and time of day or we can

16280
09:14:08,160 --> 09:14:11,398
also use the Unix timestamp with seconds

16281
09:14:10,160 --> 09:14:13,598
since

16282
09:14:11,398 --> 09:14:17,122
19701. In this case, I will switch it to

16283
09:14:13,598 --> 09:14:18,878
UTC date and time of day. And so next,

16284
09:14:17,122 --> 09:14:21,758
you can see we have the packet details

16285
09:14:18,878 --> 09:14:23,438
pane over here on the bottom left. And

16286
09:14:21,758 --> 09:14:25,840
this will contain a detailed protocol

16287
09:14:23,438 --> 09:14:27,520
breakdown of the packet that we select.

16288
09:14:25,840 --> 09:14:29,200
And any lines you see with this arrow to

16289
09:14:27,520 --> 09:14:31,438
the left, well, we can click on them to

16290
09:14:29,200 --> 09:14:32,800
expand and find out more information. In

16291
09:14:31,438 --> 09:14:34,398
this case, under transmission control

16292
09:14:32,800 --> 09:14:36,000
protocol, well, we can open up the

16293
09:14:34,398 --> 09:14:38,640
conversation completeness to see the

16294
09:14:36,000 --> 09:14:41,040
flags that were set. And on the right

16295
09:14:38,640 --> 09:14:42,320
here, we have the packet bytes pane

16296
09:14:41,040 --> 09:14:44,640
because what we're seeing here is the

16297
09:14:42,320 --> 09:14:47,200
hex output as well as the decoded asy

16298
09:14:44,640 --> 09:14:48,960
content of the packet itself.

16299
09:14:47,200 --> 09:14:50,718
And as we click on different areas in

16300
09:14:48,960 --> 09:14:52,320
the packet details pane, well, it's

16301
09:14:50,718 --> 09:14:55,122
going to highlight the related sections

16302
09:14:52,320 --> 09:14:56,640
within the packet bytes pane as well.

16303
09:14:55,122 --> 09:14:58,160
And so we can start going through some

16304
09:14:56,640 --> 09:15:00,078
of these layers, right? So we have the

16305
09:14:58,160 --> 09:15:01,680
frame here, and this will show us what

16306
09:15:00,078 --> 09:15:03,200
frame we're looking at and details

16307
09:15:01,680 --> 09:15:05,598
specific to the physical layer of the

16308
09:15:03,200 --> 09:15:07,278
OSI model. Next, you can see we have the

16309
09:15:05,598 --> 09:15:09,680
source and destination MAC addresses

16310
09:15:07,278 --> 09:15:11,438
from the data link layer. Additionally,

16311
09:15:09,680 --> 09:15:13,278
we have internet protocol version 4

16312
09:15:11,438 --> 09:15:15,278
here, which of course relates to the

16313
09:15:13,278 --> 09:15:17,520
network layer and we can identify the

16314
09:15:15,278 --> 09:15:19,360
source and destination address. So

16315
09:15:17,520 --> 09:15:21,200
again, this is the entire IP packet that

16316
09:15:19,360 --> 09:15:22,800
we're looking at. And lastly, of course,

16317
09:15:21,200 --> 09:15:24,960
in this case, we have the transmission

16318
09:15:22,800 --> 09:15:26,320
control protocol. And as we start

16319
09:15:24,960 --> 09:15:27,680
looking at some more packets, well,

16320
09:15:26,320 --> 09:15:29,598
we're going to see some more application

16321
09:15:27,680 --> 09:15:31,078
protocols and application data within

16322
09:15:29,598 --> 09:15:33,360
this packet details

16323
09:15:31,078 --> 09:15:35,122
pane. We can see at the top here, we

16324
09:15:33,360 --> 09:15:37,438
have the option to apply a display

16325
09:15:35,122 --> 09:15:39,278
filter. So, this is the filter toolbar,

16326
09:15:37,438 --> 09:15:40,878
and it allows us to quickly edit and

16327
09:15:39,278 --> 09:15:42,398
apply display filters. We're going to

16328
09:15:40,878 --> 09:15:43,718
cover display filters in much more

16329
09:15:42,398 --> 09:15:46,160
detail in the next

16330
09:15:43,718 --> 09:15:47,840
lesson. And at the very bottom here, we

16331
09:15:46,160 --> 09:15:49,680
can see we have the name of the pcap

16332
09:15:47,840 --> 09:15:51,520
file that we have open. In this case,

16333
09:15:49,680 --> 09:15:52,878
it's set to a temporary value because we

16334
09:15:51,520 --> 09:15:55,278
haven't actually saved this packet

16335
09:15:52,878 --> 09:15:57,200
capture yet. But this status bar here

16336
09:15:55,278 --> 09:15:58,480
can be very useful for us. For example,

16337
09:15:57,200 --> 09:16:00,640
if I start hovering over different

16338
09:15:58,480 --> 09:16:02,238
sections in the packet bytes pane here,

16339
09:16:00,640 --> 09:16:03,918
well, we can see that the status bar

16340
09:16:02,238 --> 09:16:05,680
here is going to update to the relevant

16341
09:16:03,918 --> 09:16:08,680
column names that we can then filter off

16342
09:16:05,680 --> 09:16:11,040
of once we start looking at display

16343
09:16:08,680 --> 09:16:13,078
filters. Another very useful option

16344
09:16:11,040 --> 09:16:14,960
available in Wireshark is packet

16345
09:16:13,078 --> 09:16:16,640
colorization. And so we can set up

16346
09:16:14,960 --> 09:16:18,398
Wireark so that it will colorize

16347
09:16:16,640 --> 09:16:20,558
different packets according to a

16348
09:16:18,398 --> 09:16:22,000
specific display filter that we set. And

16349
09:16:20,558 --> 09:16:23,598
so we could potentially use this to

16350
09:16:22,000 --> 09:16:25,680
emphasize various packets that we're

16351
09:16:23,598 --> 09:16:27,840
interested in. And so there are two

16352
09:16:25,680 --> 09:16:29,360
types of coloring rules in Wireshark. We

16353
09:16:27,840 --> 09:16:31,278
have temporary rules that are only in

16354
09:16:29,360 --> 09:16:32,800
effect until we quit the program. And we

16355
09:16:31,278 --> 09:16:34,558
also have permanent rules that are saved

16356
09:16:32,800 --> 09:16:36,078
in a preference file that are always

16357
09:16:34,558 --> 09:16:37,918
available and will always be applied to

16358
09:16:36,078 --> 09:16:39,360
whatever pcap we're looking at. And so

16359
09:16:37,918 --> 09:16:41,598
temporary rules can be added by

16360
09:16:39,360 --> 09:16:43,360
selecting a particular packet. And once

16361
09:16:41,598 --> 09:16:45,360
we have a packet selected, we can press

16362
09:16:43,360 --> 09:16:47,360
the control key along with one of the

16363
09:16:45,360 --> 09:16:49,040
number keys to start automatically

16364
09:16:47,360 --> 09:16:51,360
applying different colors to the

16365
09:16:49,040 --> 09:16:53,360
conversation. And so to permanently

16366
09:16:51,360 --> 09:16:58,122
colorize packets, we can click on the

16367
09:16:53,360 --> 09:17:00,800
view option here and go down to coloring

16368
09:16:58,122 --> 09:17:02,398
rules. If we click on this, well, we can

16369
09:17:00,800 --> 09:17:04,558
see a number of the default coloring

16370
09:17:02,398 --> 09:17:06,960
rules that Wireshark ships with. For

16371
09:17:04,558 --> 09:17:08,160
example, if we have a TCP reset packet,

16372
09:17:06,960 --> 09:17:10,640
well, it's going to be colored with this

16373
09:17:08,160 --> 09:17:12,640
red background and yellow text. If we

16374
09:17:10,640 --> 09:17:14,398
click on the green plus icon here, well,

16375
09:17:12,640 --> 09:17:17,040
we can create our own coloring rule

16376
09:17:14,398 --> 09:17:18,320
according to a specific display filter.

16377
09:17:17,040 --> 09:17:20,078
And we don't have to worry about this

16378
09:17:18,320 --> 09:17:22,398
yet. But let's see one of these default

16379
09:17:20,078 --> 09:17:24,438
rules in action. And so I'm just going

16380
09:17:22,398 --> 09:17:27,758
to start a new

16381
09:17:24,438 --> 09:17:29,640
capture. And in this case, I'm simply

16382
09:17:27,758 --> 09:17:33,360
going to

16383
09:17:29,640 --> 09:17:35,680
curl localhost and fetch just a random

16384
09:17:33,360 --> 09:17:37,598
file. And if we look back here, well, we

16385
09:17:35,680 --> 09:17:40,320
can see some more colors. In this case,

16386
09:17:37,598 --> 09:17:42,160
the port 80 traffic or the HTTP was in

16387
09:17:40,320 --> 09:17:44,398
green. In this case, because we had a

16388
09:17:42,160 --> 09:17:46,960
reset packet, well, that was in that red

16389
09:17:44,398 --> 09:17:48,078
background with yellow text. And so I

16390
09:17:46,960 --> 09:17:49,840
think this was a good start to

16391
09:17:48,078 --> 09:17:51,680
installing and introducing the general

16392
09:17:49,840 --> 09:17:53,520
UI of Wireshark. If it seems

16393
09:17:51,680 --> 09:17:54,718
overwhelming now, don't worry too much

16394
09:17:53,520 --> 09:17:56,960
because we're going to get into some

16395
09:17:54,718 --> 09:17:58,238
more practical analysis and everything's

16396
09:17:56,960 --> 09:18:00,160
going to start making sense once we

16397
09:17:58,238 --> 09:18:01,520
start actually looking at pcap files.

16398
09:18:00,160 --> 09:18:03,040
And so in the next video, we're going to

16399
09:18:01,520 --> 09:18:05,200
look at how we can use the power of both

16400
09:18:03,040 --> 09:18:06,640
capture and display filters to focus on

16401
09:18:05,200 --> 09:18:08,398
and narrow down specific network

16402
09:18:06,640 --> 09:18:09,480
traffic. And then we'll start analyzing

16403
09:18:08,398 --> 09:18:11,520
some real

16404
09:18:09,480 --> 09:18:14,160
pcaps. All right, welcome back to

16405
09:18:11,520 --> 09:18:16,800
Wireshark. And Wireshark allows us to

16406
09:18:14,160 --> 09:18:18,640
specify or limit the packet capture only

16407
09:18:16,800 --> 09:18:21,122
to packets that match a particular

16408
09:18:18,640 --> 09:18:22,800
capture filter. And Wireshark capture

16409
09:18:21,122 --> 09:18:24,878
filters are written in the lib pcap

16410
09:18:22,800 --> 09:18:26,800
filter language. And lucky for us, we

16411
09:18:24,878 --> 09:18:29,040
use this very same filter language when

16412
09:18:26,800 --> 09:18:30,480
we cover TCB dumps filtering options. So

16413
09:18:29,040 --> 09:18:33,278
we should be well accustomed to the

16414
09:18:30,480 --> 09:18:34,800
general syntax. And like with TCP dump,

16415
09:18:33,278 --> 09:18:36,480
we won't be able to cover every single

16416
09:18:34,800 --> 09:18:38,480
capture filter out there. But I'll cover

16417
09:18:36,480 --> 09:18:40,000
the basic syntax with common examples

16418
09:18:38,480 --> 09:18:42,078
and provide a reference to the

16419
09:18:40,000 --> 09:18:43,200
documentation for more examples below.

16420
09:18:42,078 --> 09:18:45,398
And so I'm just going to start up

16421
09:18:43,200 --> 09:18:48,000
Wireshark once

16422
09:18:45,398 --> 09:18:49,520
again. And capture filters should not be

16423
09:18:48,000 --> 09:18:51,278
confused with display filters, which

16424
09:18:49,520 --> 09:18:52,878
we're going to cover shortly. And so

16425
09:18:51,278 --> 09:18:55,278
capture filters are much more limited

16426
09:18:52,878 --> 09:18:57,438
and allow us to reduce the size of a raw

16427
09:18:55,278 --> 09:18:59,122
packet capture. The latter or the

16428
09:18:57,438 --> 09:19:00,800
display filters are used to hide some

16429
09:18:59,122 --> 09:19:02,640
packets from an already established or

16430
09:19:00,800 --> 09:19:04,480
captured packet list and offer a lot

16431
09:19:02,640 --> 09:19:06,480
more functionality with specific columns

16432
09:19:04,480 --> 09:19:08,160
and field names. And so obviously

16433
09:19:06,480 --> 09:19:10,320
capture filters are set before we start

16434
09:19:08,160 --> 09:19:12,558
a packet capture and cannot be modified

16435
09:19:10,320 --> 09:19:13,918
during the capture. Display filters on

16436
09:19:12,558 --> 09:19:15,120
the other hand, well, we don't have that

16437
09:19:13,918 --> 09:19:17,276
limitation and we can just change them

16438
09:19:15,120 --> 09:19:18,800
on the fly whenever we want. And so once

16439
09:19:17,276 --> 09:19:20,320
we're back in this welcome screen here,

16440
09:19:18,800 --> 09:19:22,916
well, we can find the capture filter

16441
09:19:20,320 --> 09:19:24,960
itself just above the list of

16442
09:19:22,916 --> 09:19:26,960
interfaces. And this is where we can

16443
09:19:24,960 --> 09:19:28,960
actually specify and type in our capture

16444
09:19:26,960 --> 09:19:30,400
filter. And if you remember, a lot of

16445
09:19:28,960 --> 09:19:32,800
this is going to be mostly review from

16446
09:19:30,400 --> 09:19:34,640
the TCB dump section. And so we have the

16447
09:19:32,800 --> 09:19:36,400
primitive elements, right? So these

16448
09:19:34,640 --> 09:19:38,560
include qualifiers like the host, right?

16449
09:19:36,400 --> 09:19:39,916
If we want to specify a particular host.

16450
09:19:38,560 --> 09:19:41,680
And you can see wire sharkark is giving

16451
09:19:39,916 --> 09:19:44,080
us some useful indicators here on how we

16452
09:19:41,680 --> 09:19:45,436
can complete the filter. And we also

16453
09:19:44,080 --> 09:19:47,320
have things like port, right? If we want

16454
09:19:45,436 --> 09:19:49,916
to specify a particular

16455
09:19:47,320 --> 09:19:52,120
port, we can also prepend this with like

16456
09:19:49,916 --> 09:19:54,880
source for source

16457
09:19:52,120 --> 09:19:57,120
port. We also have various operators,

16458
09:19:54,880 --> 09:20:00,560
right? So these include things like and

16459
09:19:57,120 --> 09:20:02,400
or or not. And we can combine these or

16460
09:20:00,560 --> 09:20:04,560
negate primitives that we covered to

16461
09:20:02,400 --> 09:20:06,080
create complex filter expressions. So

16462
09:20:04,560 --> 09:20:09,040
for example, if we only wanted to

16463
09:20:06,080 --> 09:20:11,880
capture traffic to or from 8.8.8 8.8.

16464
09:20:09,040 --> 09:20:14,240
Well, we can just type in host

16465
09:20:11,880 --> 09:20:16,560
8.8.8.8. If we wanted to capture traffic

16466
09:20:14,240 --> 09:20:18,960
to or from a range of IP addresses,

16467
09:20:16,560 --> 09:20:20,640
well, we can use the net qualifier here

16468
09:20:18,960 --> 09:20:22,960
and we can specify that range or that

16469
09:20:20,640 --> 09:20:22,960
cider

16470
09:20:23,080 --> 09:20:27,120
notation. If we wanted to be more

16471
09:20:25,040 --> 09:20:29,436
specific, we can specify the source net,

16472
09:20:27,120 --> 09:20:30,520
right? So, only coming from a range of

16473
09:20:29,436 --> 09:20:32,800
IP

16474
09:20:30,520 --> 09:20:35,360
addresses. If we wanted to capture only

16475
09:20:32,800 --> 09:20:38,240
DNS traffic, well, we could just use

16476
09:20:35,360 --> 09:20:40,596
port 53. If we wanted to capture all

16477
09:20:38,240 --> 09:20:43,200
Telnet traffic not from

16478
09:20:40,596 --> 09:20:47,960
10.0.0.5, well, we could specify port 23

16479
09:20:43,200 --> 09:20:50,596
for TNET and not source of the host of

16480
09:20:47,960 --> 09:20:53,520
10.0.0.5. If we wanted to capture any

16481
09:20:50,596 --> 09:20:55,200
non-HTTP and non-SMTP traffic on a

16482
09:20:53,520 --> 09:20:58,240
particular host, well, we could specify

16483
09:20:55,200 --> 09:21:00,160
the host, in this case, example.com and

16484
09:20:58,240 --> 09:21:03,040
not, and remember, we can wrap these in

16485
09:21:00,160 --> 09:21:07,200
parenthesis here to specify port 80 or

16486
09:21:03,040 --> 09:21:09,276
port 25. And I spelled and wrong.

16487
09:21:07,200 --> 09:21:11,040
And the not in this case is used to make

16488
09:21:09,276 --> 09:21:14,720
sure the negation applies to both port

16489
09:21:11,040 --> 09:21:16,560
80 and port 25. We can also get pretty

16490
09:21:14,720 --> 09:21:18,960
in-depth and specify lengths in bytes

16491
09:21:16,560 --> 09:21:20,400
and various payload signatures. And some

16492
09:21:18,960 --> 09:21:22,480
of these examples will be found in the

16493
09:21:20,400 --> 09:21:24,080
documentation link below. But the main

16494
09:21:22,480 --> 09:21:25,756
takeaway here is that capture filters in

16495
09:21:24,080 --> 09:21:27,916
Wireshark are used to limit the amount

16496
09:21:25,756 --> 09:21:30,720
of traffic captured by specifying our

16497
09:21:27,916 --> 09:21:32,080
criteria of the packets of interest. And

16498
09:21:30,720 --> 09:21:33,916
we can also take a look at some more

16499
09:21:32,080 --> 09:21:37,360
default examples by clicking the green

16500
09:21:33,916 --> 09:21:37,360
bookmark option here.

16501
09:21:37,680 --> 09:21:40,880
And if we have any filters that we use

16502
09:21:39,360 --> 09:21:43,596
frequently, well, we can add them to

16503
09:21:40,880 --> 09:21:45,756
this section as well. And so let's use

16504
09:21:43,596 --> 09:21:49,200
that example.com example. So if I

16505
09:21:45,756 --> 09:21:52,480
specify the host of example.com and not

16506
09:21:49,200 --> 09:21:53,800
port 80 or port 25, well, I'm going to

16507
09:21:52,480 --> 09:21:55,916
start capturing on

16508
09:21:53,800 --> 09:21:58,436
ENSP03. And remember, your interface

16509
09:21:55,916 --> 09:22:01,040
here connected to the internet might be

16510
09:21:58,436 --> 09:22:02,560
different. So if I open up the terminal,

16511
09:22:01,040 --> 09:22:03,960
I'm going to run netcat for

16512
09:22:02,560 --> 09:22:06,756
www.agample.com.

16513
09:22:03,960 --> 09:22:10,000
example.com and I'm going to try port

16514
09:22:06,756 --> 09:22:12,640
80. Well, we can see nothing was logged.

16515
09:22:10,000 --> 09:22:14,680
In this case, I'll try port 25. I'll

16516
09:22:12,640 --> 09:22:17,120
also add the verbose option

16517
09:22:14,680 --> 09:22:19,080
here. No, we're still getting nothing.

16518
09:22:17,120 --> 09:22:22,800
But what if I try a port that we didn't

16519
09:22:19,080 --> 09:22:24,596
specify, like 1 2 3 4. Well, we can see

16520
09:22:22,800 --> 09:22:26,800
in this case we did capture those

16521
09:22:24,596 --> 09:22:29,360
packets. And so, let's quickly talk

16522
09:22:26,800 --> 09:22:30,880
about saving a pecap file. So once we're

16523
09:22:29,360 --> 09:22:33,200
happy with the packets that we captured,

16524
09:22:30,880 --> 09:22:36,080
in this case let's say we are, we can go

16525
09:22:33,200 --> 09:22:37,916
ahead and click on file save as, which

16526
09:22:36,080 --> 09:22:40,400
allows us to save the current capture to

16527
09:22:37,916 --> 09:22:42,000
a file on disk. And the most common

16528
09:22:40,400 --> 09:22:45,040
formats that we can save the captures

16529
09:22:42,000 --> 09:22:46,240
are is of course this.pcap file, which

16530
09:22:45,040 --> 09:22:49,200
of course we're used to seeing through

16531
09:22:46,240 --> 09:22:51,040
TCP dump. And we also have this pcapng

16532
09:22:49,200 --> 09:22:53,200
file. And this is a more technically

16533
09:22:51,040 --> 09:22:55,520
flexible and extensible successor to the

16534
09:22:53,200 --> 09:22:57,680
default.pcap pcap file and is used as

16535
09:22:55,520 --> 09:23:00,000
the default file format in Wireshark

16536
09:22:57,680 --> 09:23:02,000
after version 1.8. But in this case,

16537
09:23:00,000 --> 09:23:04,560
I'll just choose a pcap file. You can

16538
09:23:02,000 --> 09:23:05,640
see we can name it as test.pcap and I'll

16539
09:23:04,560 --> 09:23:08,880
just click on

16540
09:23:05,640 --> 09:23:10,720
save. Okay, so once we have a pcap file,

16541
09:23:08,880 --> 09:23:12,560
but we can simply load it into Wireshark

16542
09:23:10,720 --> 09:23:14,160
for us as analysts to perform deeper

16543
09:23:12,560 --> 09:23:16,160
analysis. And I'll mention again,

16544
09:23:14,160 --> 09:23:18,320
Wireshark is not the best at handling

16545
09:23:16,160 --> 09:23:19,756
very large pcap files. And sometimes it

16546
09:23:18,320 --> 09:23:21,596
might actually be impossible due to the

16547
09:23:19,756 --> 09:23:23,436
system freezing up and crashing on you.

16548
09:23:21,596 --> 09:23:25,276
And so because of this, it's often a

16549
09:23:23,436 --> 09:23:27,436
good technique to carve through a very

16550
09:23:25,276 --> 09:23:29,756
large pcap file like a multi- gigabyte

16551
09:23:27,436 --> 09:23:32,240
file with something like TCP dump using

16552
09:23:29,756 --> 09:23:33,840
our lib pcap filters or just by making

16553
09:23:32,240 --> 09:23:35,436
sure you have good capture filters in

16554
09:23:33,840 --> 09:23:36,880
place initially to ensure we're not

16555
09:23:35,436 --> 09:23:39,596
flooding our file with unnecessary

16556
09:23:36,880 --> 09:23:41,680
noise. And so to open a pcap file in

16557
09:23:39,596 --> 09:23:44,800
Wireshark, we can head over to the file

16558
09:23:41,680 --> 09:23:46,320
menu here and click on open.

16559
09:23:44,800 --> 09:23:49,520
In this case, I'm going to head to the

16560
09:23:46,320 --> 09:23:52,480
pcaps folder within the wire directory

16561
09:23:49,520 --> 09:23:52,480
and then click on this

16562
09:23:52,520 --> 09:23:56,960
2021-09-14.pcap file. And this is the

16563
09:23:55,120 --> 09:23:59,520
file that we covered in the TCP dump

16564
09:23:56,960 --> 09:24:01,040
analysis section of the course. And so

16565
09:23:59,520 --> 09:24:03,916
I'll just double click on this file to

16566
09:24:01,040 --> 09:24:06,320
open it up. And notice if we go back to

16567
09:24:03,916 --> 09:24:08,640
the file tab here, we can also merge

16568
09:24:06,320 --> 09:24:10,080
multiple pcaps together. And so with

16569
09:24:08,640 --> 09:24:12,480
this option, we can actually merge

16570
09:24:10,080 --> 09:24:14,240
multiple pcaps into a single file. And

16571
09:24:12,480 --> 09:24:16,560
we can maintain the chronological order

16572
09:24:14,240 --> 09:24:17,916
of each packet. And this could be really

16573
09:24:16,560 --> 09:24:19,680
useful in situations where we've

16574
09:24:17,916 --> 09:24:21,200
captured traffic from different sources

16575
09:24:19,680 --> 09:24:23,596
or at different times, but we want to

16576
09:24:21,200 --> 09:24:24,640
analyze them more cohesively. But in

16577
09:24:23,596 --> 09:24:26,756
this case, we don't need to merge

16578
09:24:24,640 --> 09:24:29,520
anything. I just wanted to showcase that

16579
09:24:26,756 --> 09:24:32,120
option. And so now that we have a real

16580
09:24:29,520 --> 09:24:34,720
pcap loaded in, let's talk about display

16581
09:24:32,120 --> 09:24:36,160
filters. And so, as I mentioned before,

16582
09:24:34,720 --> 09:24:38,080
display filters can be applied in the

16583
09:24:36,160 --> 09:24:39,840
Wireshark interface after we've started

16584
09:24:38,080 --> 09:24:42,000
capturing packets or after the packets

16585
09:24:39,840 --> 09:24:44,080
have been captured. and they're used to

16586
09:24:42,000 --> 09:24:45,640
only pull back or return specific

16587
09:24:44,080 --> 09:24:47,840
subsets of packets that match our

16588
09:24:45,640 --> 09:24:50,160
criteria. And while it's similar to the

16589
09:24:47,840 --> 09:24:52,160
lib pcap language for capture filters,

16590
09:24:50,160 --> 09:24:53,916
well, wireark provides a display filter

16591
09:24:52,160 --> 09:24:55,840
language that lets us precisely control

16592
09:24:53,916 --> 09:24:57,276
which packets are being displayed using

16593
09:24:55,840 --> 09:24:59,436
multiple different columns and field

16594
09:24:57,276 --> 09:25:01,360
names. And so we can check for things

16595
09:24:59,436 --> 09:25:03,360
like the presence of a protocol or field

16596
09:25:01,360 --> 09:25:05,840
or the value of a specific field or even

16597
09:25:03,360 --> 09:25:07,756
compare two fields together. And so the

16598
09:25:05,840 --> 09:25:10,320
simplest display filter is one that just

16599
09:25:07,756 --> 09:25:12,000
displays a single protocol. And so to

16600
09:25:10,320 --> 09:25:14,000
only display packets containing a

16601
09:25:12,000 --> 09:25:15,596
specific protocol, well, we can type the

16602
09:25:14,000 --> 09:25:18,080
name of the protocol into Wireshark's

16603
09:25:15,596 --> 09:25:20,240
display filter toolbar. So to only

16604
09:25:18,080 --> 09:25:24,080
display TCP packets, well, I can just

16605
09:25:20,240 --> 09:25:25,840
type in TCP and hit enter. Similarly, to

16606
09:25:24,080 --> 09:25:27,596
only display packets containing a

16607
09:25:25,840 --> 09:25:30,080
particular field, well, we can type in

16608
09:25:27,596 --> 09:25:32,160
the name of that field into the toolbar.

16609
09:25:30,080 --> 09:25:35,200
For example, to only display HTTP

16610
09:25:32,160 --> 09:25:37,520
requests, well, we can type in HTTP

16611
09:25:35,200 --> 09:25:39,320
request. We can see it sort of has this

16612
09:25:37,520 --> 09:25:41,680
object and value

16613
09:25:39,320 --> 09:25:43,680
notation and so we can do things like

16614
09:25:41,680 --> 09:25:45,596
comparisons as well. So we can build

16615
09:25:43,680 --> 09:25:47,240
display filters to compare values using

16616
09:25:45,596 --> 09:25:49,040
a number of different comparison

16617
09:25:47,240 --> 09:25:51,520
operators. Right? So we have the

16618
09:25:49,040 --> 09:25:53,120
equality or the equal filter and this is

16619
09:25:51,520 --> 09:25:55,436
a very common filter where we can

16620
09:25:53,120 --> 09:25:57,520
specify if a specific field equals a

16621
09:25:55,436 --> 09:26:01,120
given value. For example, I can search

16622
09:25:57,520 --> 09:26:03,596
for the IP address field or add and I

16623
09:26:01,120 --> 09:26:07,000
can set if it equals a specific IP

16624
09:26:03,596 --> 09:26:08,800
address, right? like 1

16625
09:26:07,000 --> 09:26:10,960
192.168.0.1. In this case, we won't

16626
09:26:08,800 --> 09:26:12,560
return anything. But if I go back and

16627
09:26:10,960 --> 09:26:14,800
choose one of these IP addresses here,

16628
09:26:12,560 --> 09:26:14,800
like

16629
09:26:15,160 --> 09:26:18,640
103.232.55.148, well, we can see we're

16630
09:26:16,960 --> 09:26:20,840
only pulling back conversations where

16631
09:26:18,640 --> 09:26:22,640
that IP address is either the source or

16632
09:26:20,840 --> 09:26:24,640
destination. We also have different

16633
09:26:22,640 --> 09:26:26,560
operators like the greater than and less

16634
09:26:24,640 --> 09:26:28,000
than or greater than and equal to or

16635
09:26:26,560 --> 09:26:29,200
less than and equal to. And we're going

16636
09:26:28,000 --> 09:26:31,756
to cover some of these as we start

16637
09:26:29,200 --> 09:26:33,596
diving into more packets. We also have

16638
09:26:31,756 --> 09:26:35,840
some really useful operators as well

16639
09:26:33,596 --> 09:26:37,200
like the contains field. So in this case

16640
09:26:35,840 --> 09:26:39,916
we can filter packets where the

16641
09:26:37,200 --> 09:26:42,480
specified field contains a given value.

16642
09:26:39,916 --> 09:26:45,200
Right? So for example I can do HTTP

16643
09:26:42,480 --> 09:26:46,800
contains the word login. In this case

16644
09:26:45,200 --> 09:26:49,520
it's going to filter packets where the

16645
09:26:46,800 --> 09:26:51,916
HTTP payload contains that word. In this

16646
09:26:49,520 --> 09:26:53,756
case we don't have any matches but in

16647
09:26:51,916 --> 09:26:55,596
this case we can see this specific

16648
09:26:53,756 --> 09:26:59,000
packet is making a get request to the

16649
09:26:55,596 --> 09:27:02,000
service endpoint. So if I do HTTP

16650
09:26:59,000 --> 09:27:04,000
contains service, well, we should pull

16651
09:27:02,000 --> 09:27:06,160
back that exact packet along with any

16652
09:27:04,000 --> 09:27:07,596
others that mention the name service. If

16653
09:27:06,160 --> 09:27:09,840
you remember this specific packet

16654
09:27:07,596 --> 09:27:11,560
capture, well, we identified the audiodg

16655
09:27:09,840 --> 09:27:13,596
executable as an indicator of

16656
09:27:11,560 --> 09:27:14,916
compromise. In this case, I can do a

16657
09:27:13,596 --> 09:27:16,640
search for

16658
09:27:14,916 --> 09:27:19,040
audiodg.exe. And you can see we're

16659
09:27:16,640 --> 09:27:20,720
pulling back some relevant packets. And

16660
09:27:19,040 --> 09:27:22,960
like with capture filters, we also have

16661
09:27:20,720 --> 09:27:25,680
logical operators as well. So we have

16662
09:27:22,960 --> 09:27:26,880
things like and or or not. And we're

16663
09:27:25,680 --> 09:27:28,596
going to cover these in more detail as

16664
09:27:26,880 --> 09:27:30,880
we start going through the

16665
09:27:28,596 --> 09:27:32,480
analysis. And so these specific fields

16666
09:27:30,880 --> 09:27:34,400
that we use are going to be dependent on

16667
09:27:32,480 --> 09:27:36,160
what we're actually looking for, right?

16668
09:27:34,400 --> 09:27:37,840
And there's an extremely large variety

16669
09:27:36,160 --> 09:27:39,200
of fields and column names that we can

16670
09:27:37,840 --> 09:27:40,720
use. And we're going to pick up on the

16671
09:27:39,200 --> 09:27:43,200
most common and useful fields as we

16672
09:27:40,720 --> 09:27:44,800
start to analyze pcaps. And so now that

16673
09:27:43,200 --> 09:27:46,560
we covered the basic syntax in

16674
09:27:44,800 --> 09:27:49,360
components, I think it's probably best

16675
09:27:46,560 --> 09:27:50,880
to go through some examples. Right? So

16676
09:27:49,360 --> 09:27:53,200
we kind of covered this already, right?

16677
09:27:50,880 --> 09:27:54,480
If we wanted to only show HTTP traffic,

16678
09:27:53,200 --> 09:27:56,480
well, we can just type in the name of

16679
09:27:54,480 --> 09:27:58,480
the protocol. If we wanted to get more

16680
09:27:56,480 --> 09:28:01,200
specific, well, we can specify if the

16681
09:27:58,480 --> 09:28:03,756
request and the method of the request is

16682
09:28:01,200 --> 09:28:06,560
equal to post and we can pull back any

16683
09:28:03,756 --> 09:28:08,596
post requests. Similarly, we can change

16684
09:28:06,560 --> 09:28:10,880
this to get to pull back any get

16685
09:28:08,596 --> 09:28:13,596
requests. Instead of the method, I can

16686
09:28:10,880 --> 09:28:16,200
also search based off of the URI. In

16687
09:28:13,596 --> 09:28:19,436
this case, we can do

16688
09:28:16,200 --> 09:28:21,120
contains audio DG. And again, in this

16689
09:28:19,436 --> 09:28:23,120
case, we're pulling back any packets

16690
09:28:21,120 --> 09:28:25,120
where if we dig into the HTTP or the

16691
09:28:23,120 --> 09:28:26,640
hypertext transfer protocol, and if we

16692
09:28:25,120 --> 09:28:29,640
look at the actual URI within the

16693
09:28:26,640 --> 09:28:31,840
payload, well, we're going to match

16694
09:28:29,640 --> 09:28:34,080
audiodg.exe. If we only wanted to pull

16695
09:28:31,840 --> 09:28:36,080
back DNS traffic from a specific domain

16696
09:28:34,080 --> 09:28:39,640
name like example.com, well, we can

16697
09:28:36,080 --> 09:28:43,520
change this to DNS.query or

16698
09:28:39,640 --> 09:28:45,276
qry.name equalsample.com.

16699
09:28:43,520 --> 09:28:47,756
If we wanted to only pull back traffic

16700
09:28:45,276 --> 09:28:49,080
from a specific port like port 80, well,

16701
09:28:47,756 --> 09:28:52,200
we could run

16702
09:28:49,080 --> 09:28:54,720
TCP.port equals

16703
09:28:52,200 --> 09:28:56,560
80. Another extremely useful and

16704
09:28:54,720 --> 09:28:58,436
important option here is the ability to

16705
09:28:56,560 --> 09:29:00,800
both prepare and apply filters within

16706
09:28:58,436 --> 09:29:02,000
Wireshark. And so essentially any piece

16707
09:29:00,800 --> 09:29:03,680
of data that we're looking at within

16708
09:29:02,000 --> 09:29:05,596
Wireshark, whether it be any of the

16709
09:29:03,680 --> 09:29:06,880
columns here or any of the fields and

16710
09:29:05,596 --> 09:29:08,880
columns that we can extract from the

16711
09:29:06,880 --> 09:29:11,360
packet details itself. For example, let

16712
09:29:08,880 --> 09:29:13,200
me open up an HTTP request here. Well,

16713
09:29:11,360 --> 09:29:16,240
we can right click on the specific entry

16714
09:29:13,200 --> 09:29:18,480
or value or the column and from here we

16715
09:29:16,240 --> 09:29:20,560
can either select apply as filter or

16716
09:29:18,480 --> 09:29:22,720
prepare as filter. And if we choose

16717
09:29:20,560 --> 09:29:24,400
prepare as filter and click selected,

16718
09:29:22,720 --> 09:29:26,480
well, you can see it's going to add the

16719
09:29:24,400 --> 09:29:29,320
relevant matching syntax to the display

16720
09:29:26,480 --> 09:29:31,916
filter but not actually run the filter

16721
09:29:29,320 --> 09:29:34,160
yet. If I rightclick this again and

16722
09:29:31,916 --> 09:29:35,916
click on apply as filter, well, this is

16723
09:29:34,160 --> 09:29:37,080
going to immediately filter the packets

16724
09:29:35,916 --> 09:29:38,960
to what we

16725
09:29:37,080 --> 09:29:40,640
selected. Right? Right. So in this case,

16726
09:29:38,960 --> 09:29:43,400
we're pulling back the specific packet

16727
09:29:40,640 --> 09:29:45,840
where the URI contained

16728
09:29:43,400 --> 09:29:47,916
/service. And in my opinion, this is the

16729
09:29:45,840 --> 09:29:50,320
best way to learn how to create and edit

16730
09:29:47,916 --> 09:29:51,520
display filters in Wireshark. So feel

16731
09:29:50,320 --> 09:29:53,596
free to play around with some of these

16732
09:29:51,520 --> 09:29:55,276
filters and conditions and field names.

16733
09:29:53,596 --> 09:29:57,360
In the next lesson, I want to talk about

16734
09:29:55,276 --> 09:29:59,276
statistics within Wireshark, which are

16735
09:29:57,360 --> 09:30:00,800
another absolutely invaluable way for us

16736
09:29:59,276 --> 09:30:03,200
to break down and make sense of a

16737
09:30:00,800 --> 09:30:04,560
daunting and large pcap file. And then

16738
09:30:03,200 --> 09:30:05,840
we're going to finally walk through and

16739
09:30:04,560 --> 09:30:08,000
highlight some additional analysis

16740
09:30:05,840 --> 09:30:08,916
strategies. And so I'll see you in the

16741
09:30:08,000 --> 09:30:11,360
next

16742
09:30:08,916 --> 09:30:12,960
video. In addition to display filters

16743
09:30:11,360 --> 09:30:14,720
that can help us isolate interesting

16744
09:30:12,960 --> 09:30:16,640
traffic that we're looking for, well,

16745
09:30:14,720 --> 09:30:18,960
wireark offers a robust set of

16746
09:30:16,640 --> 09:30:20,960
statistical features to analyze captured

16747
09:30:18,960 --> 09:30:22,720
network traffic from a high level and is

16748
09:30:20,960 --> 09:30:24,320
one of the most important features we

16749
09:30:22,720 --> 09:30:26,720
have available to us when it comes to

16750
09:30:24,320 --> 09:30:28,800
making sense of a large pcap file. And

16751
09:30:26,720 --> 09:30:30,720
in my methodology, the statistics in

16752
09:30:28,800 --> 09:30:32,640
Wireshark is the best way to start our

16753
09:30:30,720 --> 09:30:34,640
analysis because it will provide us with

16754
09:30:32,640 --> 09:30:36,080
all the highle guidance and overview

16755
09:30:34,640 --> 09:30:37,680
that we need to start drilling into

16756
09:30:36,080 --> 09:30:39,436
things like interesting conversations

16757
09:30:37,680 --> 09:30:41,360
and top talkers and protocols of

16758
09:30:39,436 --> 09:30:43,200
interest, which we'll get into. And we

16759
09:30:41,360 --> 09:30:45,436
can find all of these statistics, of

16760
09:30:43,200 --> 09:30:47,680
course, under the statistics tab in the

16761
09:30:45,436 --> 09:30:49,276
top menu bar. And you can see there are

16762
09:30:47,680 --> 09:30:51,200
a lot here, and we're not going to cover

16763
09:30:49,276 --> 09:30:52,800
every single one, but we'll cover the

16764
09:30:51,200 --> 09:30:54,240
most important and useful statistics

16765
09:30:52,800 --> 09:30:56,560
that are going to help us for quick

16766
09:30:54,240 --> 09:30:58,276
wins. And so let's start out with the

16767
09:30:56,560 --> 09:31:00,560
first one here or the capture file

16768
09:30:58,276 --> 09:31:01,916
properties. And so if we click on this,

16769
09:31:00,560 --> 09:31:04,000
you can see we're going to be brought to

16770
09:31:01,916 --> 09:31:05,680
this window pane here. And this is going

16771
09:31:04,000 --> 09:31:07,596
to open the capture file properties

16772
09:31:05,680 --> 09:31:09,756
pane, which is going to cover a lot of

16773
09:31:07,596 --> 09:31:12,080
useful information and metadata about

16774
09:31:09,756 --> 09:31:14,160
the packet capture itself. Right? So the

16775
09:31:12,080 --> 09:31:15,916
file tab here, right? So under file

16776
09:31:14,160 --> 09:31:18,840
here, we can see things like the name

16777
09:31:15,916 --> 09:31:21,436
and the Shaw 256 hash of the actual pcap

16778
09:31:18,840 --> 09:31:23,200
itself. Under time here, we can see the

16779
09:31:21,436 --> 09:31:24,880
time stamp of when the first packet and

16780
09:31:23,200 --> 09:31:26,480
last packet was delivered. as well as

16781
09:31:24,880 --> 09:31:28,320
the elapse time between the first and

16782
09:31:26,480 --> 09:31:30,720
last packet. In this case, we have about

16783
09:31:28,320 --> 09:31:32,240
9 minutes. And this is going to be very

16784
09:31:30,720 --> 09:31:34,320
useful for us because we can use this

16785
09:31:32,240 --> 09:31:35,916
section to confirm that the pcap we're

16786
09:31:34,320 --> 09:31:37,596
looking at contains the actual traffic

16787
09:31:35,916 --> 09:31:39,840
that we're looking for. Right? So, if

16788
09:31:37,596 --> 09:31:41,520
we're handed a pcap file in an alert,

16789
09:31:39,840 --> 09:31:43,040
well, we need a way to confirm with the

16790
09:31:41,520 --> 09:31:44,400
client or the stakeholders that the file

16791
09:31:43,040 --> 09:31:46,560
we're about to investigate and spend

16792
09:31:44,400 --> 09:31:48,000
time analyzing actually contains the

16793
09:31:46,560 --> 09:31:50,000
traffic from the time frame of the

16794
09:31:48,000 --> 09:31:51,916
incident. And so we can avoid a lot of

16795
09:31:50,000 --> 09:31:54,320
wasted time and resources by checking

16796
09:31:51,916 --> 09:31:56,720
the time of the first and last packet.

16797
09:31:54,320 --> 09:31:58,480
We also get various well statistics as

16798
09:31:56,720 --> 09:32:00,000
well. Right? So we can see the total

16799
09:31:58,480 --> 09:32:01,840
amount of packets that were captured in

16800
09:32:00,000 --> 09:32:03,756
this file. And if we had a particular

16801
09:32:01,840 --> 09:32:06,640
display filter set, well, we can see the

16802
09:32:03,756 --> 09:32:08,720
amount of display packets as well. For

16803
09:32:06,640 --> 09:32:11,680
example, if I close this and just run

16804
09:32:08,720 --> 09:32:14,560
HTTP as our display filter and head back

16805
09:32:11,680 --> 09:32:17,916
to the capture file properties, in this

16806
09:32:14,560 --> 09:32:21,320
case, we only have 86 packets or 2.3% of

16807
09:32:17,916 --> 09:32:24,000
the packets that match with the HTTP

16808
09:32:21,320 --> 09:32:25,480
protocol. And so, next, let's look at

16809
09:32:24,000 --> 09:32:27,680
resolved

16810
09:32:25,480 --> 09:32:29,756
addresses. And in this case, we can see

16811
09:32:27,680 --> 09:32:32,160
wherever a DNS lookup was performed and

16812
09:32:29,756 --> 09:32:34,800
an IP address was mapped to a domain.

16813
09:32:32,160 --> 09:32:36,480
And so as we start scrolling down here,

16814
09:32:34,800 --> 09:32:38,640
well, we're going to start to see some

16815
09:32:36,480 --> 09:32:40,596
IP addresses on the left here and the

16816
09:32:38,640 --> 09:32:42,960
associated or resolved names over on the

16817
09:32:40,596 --> 09:32:44,720
right. And the hosts that are populated

16818
09:32:42,960 --> 09:32:46,436
here are typically taken from the DNS

16819
09:32:44,720 --> 09:32:48,800
answers within the capture

16820
09:32:46,436 --> 09:32:50,400
file. And so this saves us a lot of

16821
09:32:48,800 --> 09:32:53,320
manual work by looking through different

16822
09:32:50,400 --> 09:32:55,680
DNS queries and

16823
09:32:53,320 --> 09:32:58,320
responses. And so next here we have the

16824
09:32:55,680 --> 09:33:00,080
protocol hierarchy. And as the name

16825
09:32:58,320 --> 09:33:02,000
suggests, well, this window pane here

16826
09:33:00,080 --> 09:33:03,436
presents a hierarchical view of the

16827
09:33:02,000 --> 09:33:05,436
different protocols encountered within

16828
09:33:03,436 --> 09:33:07,120
the captured traffic. And it displays

16829
09:33:05,436 --> 09:33:09,276
statistics and calculations like the

16830
09:33:07,120 --> 09:33:11,436
number of packets and the bytes and the

16831
09:33:09,276 --> 09:33:13,200
percentage of bytes as well. And so

16832
09:33:11,436 --> 09:33:14,800
using this, we can easily identify which

16833
09:33:13,200 --> 09:33:16,800
protocols are predominant within the

16834
09:33:14,800 --> 09:33:18,400
traffic and figure out some quick wins

16835
09:33:16,800 --> 09:33:20,480
on if we can see any high volumes of

16836
09:33:18,400 --> 09:33:21,840
traffic on a suspicious protocol or

16837
09:33:20,480 --> 09:33:23,120
identify any protocols that might have

16838
09:33:21,840 --> 09:33:24,800
unencrypted connections that could

16839
09:33:23,120 --> 09:33:25,560
benefit us as we dig into the payloads

16840
09:33:24,800 --> 09:33:28,160
more

16841
09:33:25,560 --> 09:33:29,756
easily. And one important thing to note

16842
09:33:28,160 --> 09:33:32,240
is that it's going to use the current

16843
09:33:29,756 --> 09:33:34,240
display filter to aggregate this data.

16844
09:33:32,240 --> 09:33:36,880
In this case, we're returning a 100% of

16845
09:33:34,240 --> 09:33:39,040
the packets as HTTP, which isn't the

16846
09:33:36,880 --> 09:33:42,596
case for this pcap file. So, if I remove

16847
09:33:39,040 --> 09:33:44,720
the display filter and run this

16848
09:33:42,596 --> 09:33:47,276
again, well, you can see we're starting

16849
09:33:44,720 --> 09:33:49,840
to see some more protocols here. In this

16850
09:33:47,276 --> 09:33:52,240
case, we do have some HTTP traffic, but

16851
09:33:49,840 --> 09:33:55,880
we also have a lot of TLS or HTTPS

16852
09:33:52,240 --> 09:33:55,880
traffic as well.

16853
09:33:56,000 --> 09:33:59,840
So next let's look at

16854
09:33:57,720 --> 09:34:01,916
conversations and the conversation

16855
09:33:59,840 --> 09:34:03,436
statistics feature will organize traffic

16856
09:34:01,916 --> 09:34:05,520
based on the communication between

16857
09:34:03,436 --> 09:34:06,960
endpoints like IP addresses and ports

16858
09:34:05,520 --> 09:34:09,040
and it provides details like the number

16859
09:34:06,960 --> 09:34:11,436
of packets and bytes and the packet rate

16860
09:34:09,040 --> 09:34:13,276
for each conversation. And so by using

16861
09:34:11,436 --> 09:34:15,040
this well we can analyze communication

16862
09:34:13,276 --> 09:34:16,720
patterns and identify things like the

16863
09:34:15,040 --> 09:34:19,200
top talkers or the most predominant

16864
09:34:16,720 --> 09:34:21,040
talkers on the network. And for example,

16865
09:34:19,200 --> 09:34:22,800
this can be really useful as we can

16866
09:34:21,040 --> 09:34:24,480
potentially see if an internal IP is

16867
09:34:22,800 --> 09:34:26,560
reaching out predominantly to an IP we

16868
09:34:24,480 --> 09:34:27,916
don't recognize or perhaps one IP

16869
09:34:26,560 --> 09:34:29,680
address is making a large number of

16870
09:34:27,916 --> 09:34:31,120
requests to a number of different IPs

16871
09:34:29,680 --> 09:34:34,000
and maybe we're dealing with a port

16872
09:34:31,120 --> 09:34:36,000
scan. And so if we click on the IPv4 tab

16873
09:34:34,000 --> 09:34:39,040
here, well, we're going to get all the

16874
09:34:36,000 --> 09:34:41,200
IPv4 statistics. And in this case, we

16875
09:34:39,040 --> 09:34:43,840
can click on bytes two times so we can

16876
09:34:41,200 --> 09:34:45,680
sort it in descending order. And this

16877
09:34:43,840 --> 09:34:47,040
gives us a general breakdown on who was

16878
09:34:45,680 --> 09:34:49,360
talking or communicating with what

16879
09:34:47,040 --> 09:34:51,880
system the most. In this case, we can

16880
09:34:49,360 --> 09:34:55,756
see this internal address of

16881
09:34:51,880 --> 09:34:55,756
10.0.0.168 communicating with

16882
09:34:56,916 --> 09:35:00,640
103.23255.148. And we can see the amount

16883
09:34:58,880 --> 09:35:04,320
of packets that were delivered from A,

16884
09:35:00,640 --> 09:35:05,680
so address A to address B or the packets

16885
09:35:04,320 --> 09:35:07,840
that were delivered from address B to

16886
09:35:05,680 --> 09:35:09,200
address A. And if we notice an

16887
09:35:07,840 --> 09:35:11,276
interesting conversation here that we

16888
09:35:09,200 --> 09:35:13,040
want to dive into in more detail. So for

16889
09:35:11,276 --> 09:35:14,960
example, this top one here. Well, we can

16890
09:35:13,040 --> 09:35:16,640
right click on the conversation and what

16891
09:35:14,960 --> 09:35:19,200
do you know? We can prepare or apply it

16892
09:35:16,640 --> 09:35:20,880
as a filter. Well, we can choose which

16893
09:35:19,200 --> 09:35:22,480
direction we want to specify for the

16894
09:35:20,880 --> 09:35:24,880
traffic, right? Do we want to look at

16895
09:35:22,480 --> 09:35:27,040
either A going to B or B going to A or

16896
09:35:24,880 --> 09:35:29,200
only A going to B? So this gives us a

16897
09:35:27,040 --> 09:35:31,480
lot of easy options to filter off of.

16898
09:35:29,200 --> 09:35:34,000
For example, if I click on both A and

16899
09:35:31,480 --> 09:35:36,880
B, well, you can see the display filter

16900
09:35:34,000 --> 09:35:38,800
that it immediately applied.

16901
09:35:36,880 --> 09:35:40,756
And so I'll just clear that out. And

16902
09:35:38,800 --> 09:35:42,960
next, if we look at the endpoints tab

16903
09:35:40,756 --> 09:35:44,960
here, well, this is going to give us

16904
09:35:42,960 --> 09:35:46,880
insights on the individual host network

16905
09:35:44,960 --> 09:35:48,640
activities like the network traffic sent

16906
09:35:46,880 --> 09:35:51,680
and received and the packet count and

16907
09:35:48,640 --> 09:35:53,276
data size. And if I click on IPv4 again,

16908
09:35:51,680 --> 09:35:54,800
well, we can get a list of all of the

16909
09:35:53,276 --> 09:35:57,200
different endpoints that are included

16910
09:35:54,800 --> 09:35:58,880
within this pcap file. And this is kind

16911
09:35:57,200 --> 09:36:00,720
of similar to what we were painstakingly

16912
09:35:58,880 --> 09:36:02,640
doing manually with TCP dump when we

16913
09:36:00,720 --> 09:36:04,880
were piping things to cut and sort and

16914
09:36:02,640 --> 09:36:07,040
unique to pull back and aggregate the

16915
09:36:04,880 --> 09:36:08,560
top talkers. In this case, I can just

16916
09:36:07,040 --> 09:36:10,320
click on bytes here to sort the amount

16917
09:36:08,560 --> 09:36:12,800
of bytes or the amount of packets in

16918
09:36:10,320 --> 09:36:12,800
descending

16919
09:36:12,916 --> 09:36:18,240
order. Lastly, here we can also go down

16920
09:36:15,436 --> 09:36:20,080
to HTTP and look at any of the requests

16921
09:36:18,240 --> 09:36:22,000
that were made. And so with this option,

16922
09:36:20,080 --> 09:36:23,596
we can see all of the different HTTP

16923
09:36:22,000 --> 09:36:26,320
requests that were made to various

16924
09:36:23,596 --> 09:36:27,720
servers and URIs all in a very nice and

16925
09:36:26,320 --> 09:36:30,240
easy to understand

16926
09:36:27,720 --> 09:36:33,080
chart. Right? So if we scroll down here,

16927
09:36:30,240 --> 09:36:35,200
well, we can see this

16928
09:36:33,080 --> 09:36:38,000
103.232.55.148 address. And we can

16929
09:36:35,200 --> 09:36:40,560
immediately see the audiodg.exe endpoint

16930
09:36:38,000 --> 09:36:42,640
that was accessed. And so this can be a

16931
09:36:40,560 --> 09:36:43,916
very quick win for you if the pcap file

16932
09:36:42,640 --> 09:36:47,200
you're analyzing contains a lot of

16933
09:36:43,916 --> 09:36:49,120
unencrypted HTTP traffic.

16934
09:36:47,200 --> 09:36:51,360
And so moving on, we'll touch on this

16935
09:36:49,120 --> 09:36:53,360
some more later, but Wireshark allows us

16936
09:36:51,360 --> 09:36:55,596
to aggregate and rebuild an entire

16937
09:36:53,360 --> 09:36:58,640
stream of protocol specific packets like

16938
09:36:55,596 --> 09:37:00,000
TCP or HTTP. And in doing this, we can

16939
09:36:58,640 --> 09:37:02,000
understand the whole picture a lot

16940
09:37:00,000 --> 09:37:04,240
better. And this is something we tried

16941
09:37:02,000 --> 09:37:06,000
our darnest to do with TCP dump alone.

16942
09:37:04,240 --> 09:37:08,000
But Wireshark just makes this so simple

16943
09:37:06,000 --> 09:37:09,880
for us and is such a powerful option

16944
09:37:08,000 --> 09:37:11,756
when we want to see the entire

16945
09:37:09,880 --> 09:37:15,276
conversation. For example, I'm just

16946
09:37:11,756 --> 09:37:16,560
going to filter on HTTP traffic. And in

16947
09:37:15,276 --> 09:37:19,400
this case, I'm going to choose this

16948
09:37:16,560 --> 09:37:22,400
packet here, packet

16949
09:37:19,400 --> 09:37:24,880
1186. And if I right click on the packet

16950
09:37:22,400 --> 09:37:27,840
and go down to follow, well, I can

16951
09:37:24,880 --> 09:37:30,560
follow either the TCP stream or the HTTP

16952
09:37:27,840 --> 09:37:32,080
stream. And since the HTTP stream is

16953
09:37:30,560 --> 09:37:34,080
going to contain more details about the

16954
09:37:32,080 --> 09:37:36,320
HTTP payload, well, I'm going to click

16955
09:37:34,080 --> 09:37:38,240
on this, and we're going to be brought

16956
09:37:36,320 --> 09:37:40,240
to this amazing pane here that is going

16957
09:37:38,240 --> 09:37:42,560
to show us the entire conversation

16958
09:37:40,240 --> 09:37:44,320
between the two endpoints. And so we can

16959
09:37:42,560 --> 09:37:46,560
see that all of the requests here are in

16960
09:37:44,320 --> 09:37:48,720
that red color and all of the responses

16961
09:37:46,560 --> 09:37:50,960
from the web server are in blue. And so

16962
09:37:48,720 --> 09:37:52,720
we can see all of the headers as well as

16963
09:37:50,960 --> 09:37:54,160
any of the body content. Right? So we

16964
09:37:52,720 --> 09:37:56,880
can actually reconstruct this web page

16965
09:37:54,160 --> 09:37:58,720
if we really wanted to. And again, this

16966
09:37:56,880 --> 09:38:00,240
can be very useful in investigations

16967
09:37:58,720 --> 09:38:02,560
when you're dealing with an unencrypted

16968
09:38:00,240 --> 09:38:04,800
payload. We can also either select the

16969
09:38:02,560 --> 09:38:06,800
entire conversation or only the requests

16970
09:38:04,800 --> 09:38:08,520
here or only the responses, right? So we

16971
09:38:06,800 --> 09:38:11,160
can filter this more if we wanted

16972
09:38:08,520 --> 09:38:13,680
to. And so I mentioned packet numbers

16973
09:38:11,160 --> 09:38:15,680
earlier. Well, each packet captured in

16974
09:38:13,680 --> 09:38:17,680
Wireshark is going to be assigned a

16975
09:38:15,680 --> 09:38:19,756
unique sequential number. And this

16976
09:38:17,680 --> 09:38:21,840
packet number serves as an identifier

16977
09:38:19,756 --> 09:38:24,480
and is displayed in the packet list pane

16978
09:38:21,840 --> 09:38:25,756
as you can see here. And these can be

16979
09:38:24,480 --> 09:38:27,596
really important for us in terms of

16980
09:38:25,756 --> 09:38:29,360
referencing and analysis, right? So we

16981
09:38:27,596 --> 09:38:31,040
can actually track and log and reference

16982
09:38:29,360 --> 09:38:33,200
specific packets during analysis and

16983
09:38:31,040 --> 09:38:34,720
document them accordingly because these

16984
09:38:33,200 --> 09:38:36,480
packet numbers are chronological and

16985
09:38:34,720 --> 09:38:38,240
sequential and so they're not going to

16986
09:38:36,480 --> 09:38:40,640
change if we start applying things like

16987
09:38:38,240 --> 09:38:42,480
display filters. We also have some

16988
09:38:40,640 --> 09:38:44,960
useful navigation options around the

16989
09:38:42,480 --> 09:38:46,640
packet numbers themselves. For example,

16990
09:38:44,960 --> 09:38:49,560
I can click on the go option here in the

16991
09:38:46,640 --> 09:38:52,080
main toolbar and click go to

16992
09:38:49,560 --> 09:38:54,916
packet. In this case, I can type in a

16993
09:38:52,080 --> 09:38:57,680
packet number. For example, I'll type in

16994
09:38:54,916 --> 09:38:58,880
1,250. And if I click go to packet,

16995
09:38:57,680 --> 09:39:00,880
well, it's going to immediately

16996
09:38:58,880 --> 09:39:02,720
highlight this packet number for me. And

16997
09:39:00,880 --> 09:39:04,240
this can obviously be very useful when

16998
09:39:02,720 --> 09:39:06,640
we want to pinpoint and find a

16999
09:39:04,240 --> 09:39:09,040
particular packet by its number. We can

17000
09:39:06,640 --> 09:39:10,520
also mark specific packets as well. So

17001
09:39:09,040 --> 09:39:13,520
if I right click on any of these

17002
09:39:10,520 --> 09:39:15,680
packets, I can click on mark packet.

17003
09:39:13,520 --> 09:39:17,916
Alternatively, with a packet selected, I

17004
09:39:15,680 --> 09:39:20,080
can press CtrlM and it's going to mark

17005
09:39:17,916 --> 09:39:22,400
that packet for me.

17006
09:39:20,080 --> 09:39:25,160
And after doing so, I can go up to the

17007
09:39:22,400 --> 09:39:27,916
display filter and type in

17008
09:39:25,160 --> 09:39:30,640
frame.mmarked and set that to equal to 1

17009
09:39:27,916 --> 09:39:32,160
to only display marked packets. And so

17010
09:39:30,640 --> 09:39:33,960
obviously this can be very useful for

17011
09:39:32,160 --> 09:39:37,200
tagging a packet for later

17012
09:39:33,960 --> 09:39:38,880
review. And so lastly here we can export

17013
09:39:37,200 --> 09:39:40,800
various objects that are found within

17014
09:39:38,880 --> 09:39:43,520
our packet capture directly out of

17015
09:39:40,800 --> 09:39:45,360
Wireshark. And this is another extremely

17016
09:39:43,520 --> 09:39:46,800
useful feature here because you can

17017
09:39:45,360 --> 09:39:48,640
think of the scenario where a user

17018
09:39:46,800 --> 09:39:50,640
suspectedly downloaded malware like an

17019
09:39:48,640 --> 09:39:52,640
executable or a malicious PDF or a word

17020
09:39:50,640 --> 09:39:55,276
document. Well, if the connection was

17021
09:39:52,640 --> 09:39:57,436
over an insecure protocol like HTTP or

17022
09:39:55,276 --> 09:39:59,200
an unencrypted FTP server or an SMB

17023
09:39:57,436 --> 09:40:01,120
session or if we were doing some sort of

17024
09:39:59,200 --> 09:40:03,520
TLS inspection and had our own trusted

17025
09:40:01,120 --> 09:40:05,200
CA or encryption key log file, well, we

17026
09:40:03,520 --> 09:40:08,320
could potentially decrypt the data over

17027
09:40:05,200 --> 09:40:10,080
HTTPS as well. And by extracting these

17028
09:40:08,320 --> 09:40:12,080
files, we can do analysis that we're

17029
09:40:10,080 --> 09:40:13,756
already quite familiar with. So we could

17030
09:40:12,080 --> 09:40:15,276
extract the hashes of these files and

17031
09:40:13,756 --> 09:40:17,276
compare them against malware databases

17032
09:40:15,276 --> 09:40:19,160
like virus total. Or we could actually

17033
09:40:17,276 --> 09:40:21,596
submit these files for dynamic malware

17034
09:40:19,160 --> 09:40:23,040
analysis. Or in the case of a PDF or

17035
09:40:21,596 --> 09:40:24,560
office document, we could carve into

17036
09:40:23,040 --> 09:40:27,360
them and extract any malicious scripts

17037
09:40:24,560 --> 09:40:29,520
or embedded objects. And to do this,

17038
09:40:27,360 --> 09:40:31,756
it's honestly quite simple. I click on

17039
09:40:29,520 --> 09:40:33,680
file here and I can go down to export

17040
09:40:31,756 --> 09:40:35,040
objects. And you can see various

17041
09:40:33,680 --> 09:40:37,520
protocols here that we can search off

17042
09:40:35,040 --> 09:40:39,436
of. In this case, since we have a lot of

17043
09:40:37,520 --> 09:40:42,320
HTTP traffic, well, I'm going to click

17044
09:40:39,436 --> 09:40:44,520
on HTTP and we can see all of the

17045
09:40:42,320 --> 09:40:47,640
different files that were sent over the

17046
09:40:44,520 --> 09:40:50,160
wire. Particularly, we're aware of the

17047
09:40:47,640 --> 09:40:51,640
audg.exe file. And if we scroll down,

17048
09:40:50,160 --> 09:40:53,756
well, we can find the actual file

17049
09:40:51,640 --> 09:40:55,436
itself. And so, in this case, with it

17050
09:40:53,756 --> 09:40:57,520
highlighted, I'm going to click on the

17051
09:40:55,436 --> 09:40:59,436
save option. And you can see I can

17052
09:40:57,520 --> 09:41:02,160
actually save and extract the file from

17053
09:40:59,436 --> 09:41:05,120
the pcap file itself.

17054
09:41:02,160 --> 09:41:07,436
And so if I click on save here and back

17055
09:41:05,120 --> 09:41:09,200
in the terminal, I can run an ls with

17056
09:41:07,436 --> 09:41:10,800
the tac a flag because remember it was

17057
09:41:09,200 --> 09:41:14,360
saved with a dot at the beginning of the

17058
09:41:10,800 --> 09:41:17,520
file name. Well, we can see the

17059
09:41:14,360 --> 09:41:20,640
audiodg.exe file. And of course, I can

17060
09:41:17,520 --> 09:41:22,520
run a file on that file and we can see

17061
09:41:20,640 --> 09:41:24,800
it's a PE32

17062
09:41:22,520 --> 09:41:29,120
executable. And I of course can run the

17063
09:41:24,800 --> 09:41:31,240
Shaw 256 sum of the file as well.

17064
09:41:29,120 --> 09:41:34,436
And if I copy this file

17065
09:41:31,240 --> 09:41:37,680
hash, I can search for it on virus

17066
09:41:34,436 --> 09:41:40,000
total. And we can see 52 out of 72

17067
09:41:37,680 --> 09:41:42,480
security vendors and four sandboxes flag

17068
09:41:40,000 --> 09:41:44,160
the file as malicious. And so in doing

17069
09:41:42,480 --> 09:41:46,320
this exercise, we can really see how

17070
09:41:44,160 --> 09:41:48,160
useful Wireshark is for performing more

17071
09:41:46,320 --> 09:41:49,596
detailed inspection. This is just

17072
09:41:48,160 --> 09:41:52,880
something we could not really have done

17073
09:41:49,596 --> 09:41:54,880
with TCP dump.

17074
09:41:52,880 --> 09:41:56,720
And so now the past few lessons did

17075
09:41:54,880 --> 09:41:59,360
really contain a lot of information and

17076
09:41:56,720 --> 09:42:00,800
syntax and options. So let's take a step

17077
09:41:59,360 --> 09:42:03,040
back and put all of what we learned

17078
09:42:00,800 --> 09:42:05,120
together and run through a sample PCAP

17079
09:42:03,040 --> 09:42:06,680
in the next lesson. And so I will see

17080
09:42:05,120 --> 09:42:09,040
you in the next

17081
09:42:06,680 --> 09:42:11,040
video. Now that we've taken in quite a

17082
09:42:09,040 --> 09:42:12,800
bit of information, let's walk through

17083
09:42:11,040 --> 09:42:15,680
the general process for effectively

17084
09:42:12,800 --> 09:42:17,680
analyzing a pcap in Wireshark. And the

17085
09:42:15,680 --> 09:42:19,680
methodology we cover here can easily be

17086
09:42:17,680 --> 09:42:21,916
applied to any packet analyzing solution

17087
09:42:19,680 --> 09:42:23,596
or tool. But in our case, Wireark makes

17088
09:42:21,916 --> 09:42:25,756
all of this very easy for us with its

17089
09:42:23,596 --> 09:42:29,276
visualizations and statistics. And so,

17090
09:42:25,756 --> 09:42:29,276
let's get right into it and open up

17091
09:42:30,200 --> 09:42:34,880
Wireshark. And in this case, I'm going

17092
09:42:32,160 --> 09:42:37,596
to click on file and open. And I'm going

17093
09:42:34,880 --> 09:42:37,596
to select the

17094
09:42:37,800 --> 09:42:40,800
2023-2-3.pcap

17095
09:42:40,840 --> 09:42:46,560
file. And this is a public pcap exercise

17096
09:42:44,000 --> 09:42:49,276
that was provided by malwareanalysis.net

17097
09:42:46,560 --> 09:42:51,276
net and Palo Alto Network's unit 42

17098
09:42:49,276 --> 09:42:52,480
which is a fantastic resource for PCAP

17099
09:42:51,276 --> 09:42:54,240
samples that I'll cover in the

17100
09:42:52,480 --> 09:42:56,480
additional practice lesson and so all

17101
09:42:54,240 --> 09:42:58,560
credit goes to them for this sample and

17102
09:42:56,480 --> 09:43:00,240
so first once we have the sample open

17103
09:42:58,560 --> 09:43:02,240
the first thing I typically do in an

17104
09:43:00,240 --> 09:43:04,080
investigation is to set up the timestamp

17105
09:43:02,240 --> 09:43:06,160
so I can document consistently with a

17106
09:43:04,080 --> 09:43:07,520
common reference format and so to do

17107
09:43:06,160 --> 09:43:09,200
this we've already technically done it

17108
09:43:07,520 --> 09:43:11,596
in the previous lesson but I'll click on

17109
09:43:09,200 --> 09:43:13,436
view here under time display format and

17110
09:43:11,596 --> 09:43:16,000
make sure that I have UTC date and time

17111
09:43:13,436 --> 09:43:17,756
of day selected and we could choose a

17112
09:43:16,000 --> 09:43:19,916
Unix time stamp as well or that epoch

17113
09:43:17,756 --> 09:43:22,640
time. But for readability, I'll choose

17114
09:43:19,916 --> 09:43:24,160
this option. And depending on what time

17115
09:43:22,640 --> 09:43:26,320
stamps we have available to us, either

17116
09:43:24,160 --> 09:43:28,160
through the alert or a ticket, we might

17117
09:43:26,320 --> 09:43:30,080
need to modify or shift the time format

17118
09:43:28,160 --> 09:43:31,756
slightly to correlate things correctly.

17119
09:43:30,080 --> 09:43:34,720
But in this case, the default UTC will

17120
09:43:31,756 --> 09:43:36,800
work nicely for us. And so next, let's

17121
09:43:34,720 --> 09:43:38,640
follow our methodology, right? So we can

17122
09:43:36,800 --> 09:43:40,480
start from a high level or a zoomed out

17123
09:43:38,640 --> 09:43:42,080
overview and then highlight any

17124
09:43:40,480 --> 09:43:44,000
interesting conversations or end points

17125
09:43:42,080 --> 09:43:46,880
to focus on as we go through the pcap

17126
09:43:44,000 --> 09:43:49,480
file. And so to do this, what we can and

17127
09:43:46,880 --> 09:43:52,080
we should leverage Wireshark's

17128
09:43:49,480 --> 09:43:55,040
statistics. And so first I will go to

17129
09:43:52,080 --> 09:43:57,120
capture file properties. And we can see

17130
09:43:55,040 --> 09:43:58,880
that we have over 50,000 packets

17131
09:43:57,120 --> 09:44:01,596
captured within this file, which is

17132
09:43:58,880 --> 09:44:03,120
quite a lot. And so this is why it's so

17133
09:44:01,596 --> 09:44:05,596
important that we start from the top and

17134
09:44:03,120 --> 09:44:07,200
drill down as needed. If we look under

17135
09:44:05,596 --> 09:44:08,720
the time here, well, we can see that the

17136
09:44:07,200 --> 09:44:10,720
elapsed time between the first and last

17137
09:44:08,720 --> 09:44:13,436
packet was almost 3 hours, between

17138
09:44:10,720 --> 09:44:15,040
around 12:00 p.m. to 2:45ish.

17139
09:44:13,436 --> 09:44:16,640
And so again, this can be very useful

17140
09:44:15,040 --> 09:44:18,480
information to confirm before we start

17141
09:44:16,640 --> 09:44:20,480
diving in and investing resources and

17142
09:44:18,480 --> 09:44:21,800
time into analyzing a file that doesn't

17143
09:44:20,480 --> 09:44:26,200
contain the relevant

17144
09:44:21,800 --> 09:44:28,160
data. And so next, let's go down to

17145
09:44:26,200 --> 09:44:30,960
conversations. And from here, if I click

17146
09:44:28,160 --> 09:44:32,880
on the IPv4 tab and click on packets A

17147
09:44:30,960 --> 09:44:35,960
to B and filter this on the most amount

17148
09:44:32,880 --> 09:44:40,040
of packets, well, we can see that

17149
09:44:35,960 --> 09:44:42,400
10.0.0.149 communicated the most with

17150
09:44:40,040 --> 09:44:44,880
10.0.0.6. And so we can make note of

17151
09:44:42,400 --> 09:44:46,800
this 149 address as our likely culprit

17152
09:44:44,880 --> 09:44:49,436
for the victim because all of the

17153
09:44:46,800 --> 09:44:50,880
traffic originated from this IP address.

17154
09:44:49,436 --> 09:44:53,276
And we can see that it's communicating

17155
09:44:50,880 --> 09:44:55,120
the most with this 6 address which is

17156
09:44:53,276 --> 09:44:57,360
another internal IP address on the same

17157
09:44:55,120 --> 09:44:59,916
subnet as the victim with most of the

17158
09:44:57,360 --> 09:45:01,640
traffic heading in one direction. So

17159
09:44:59,916 --> 09:45:04,080
we'll make note of that for

17160
09:45:01,640 --> 09:45:07,756
now. And we can also note some of the

17161
09:45:04,080 --> 09:45:07,756
other top talkers. Right? So we have

17162
09:45:08,276 --> 09:45:15,120
208.187.122.74. We have

17163
09:45:11,480 --> 09:45:15,120
78.3167.7. We also have

17164
09:45:15,240 --> 09:45:20,000
5.75.25.43. And so next, let's take a

17165
09:45:17,520 --> 09:45:21,756
look at the protocol hierarchy and look

17166
09:45:20,000 --> 09:45:23,680
at the most common protocols and see if

17167
09:45:21,756 --> 09:45:25,360
we can identify any lowhanging fruit or

17168
09:45:23,680 --> 09:45:28,000
quick wins to base some more detailed

17169
09:45:25,360 --> 09:45:29,680
analysis off of. And usually what I like

17170
09:45:28,000 --> 09:45:31,916
to do is close all these arrows here to

17171
09:45:29,680 --> 09:45:33,360
make it more easy to look at. And

17172
09:45:31,916 --> 09:45:36,480
interestingly, we can see we have a lot

17173
09:45:33,360 --> 09:45:39,756
of net bios and SMB and LDAP and RPC,

17174
09:45:36,480 --> 09:45:42,160
even SMTP and ARP communication as well

17175
09:45:39,756 --> 09:45:44,880
with a small number of HTTP traffic with

17176
09:45:42,160 --> 09:45:46,800
only four packets. And since it's

17177
09:45:44,880 --> 09:45:48,000
unencrypted, we only have four packets.

17178
09:45:46,800 --> 09:45:50,000
So, let's start looking through the

17179
09:45:48,000 --> 09:45:51,436
small amount of HTTP traffic to see if

17180
09:45:50,000 --> 09:45:53,800
we can find where any potential

17181
09:45:51,436 --> 09:45:56,640
malicious traffic originated

17182
09:45:53,800 --> 09:45:58,160
from. And so first let's set up some

17183
09:45:56,640 --> 09:45:59,756
additional columns to show the source

17184
09:45:58,160 --> 09:46:02,320
and destination ports which are not

17185
09:45:59,756 --> 09:46:05,120
enabled by default within Wireshark. And

17186
09:46:02,320 --> 09:46:07,680
so we can do this by clicking on edit

17187
09:46:05,120 --> 09:46:10,240
and then go down to preferences. From

17188
09:46:07,680 --> 09:46:12,000
here we can click on columns. And so to

17189
09:46:10,240 --> 09:46:15,040
add a column we can click on the green

17190
09:46:12,000 --> 09:46:17,120
plus icon here. And in this case we can

17191
09:46:15,040 --> 09:46:20,240
set a title. And so I'll just call it

17192
09:46:17,120 --> 09:46:22,560
source port. And for the type here well

17193
09:46:20,240 --> 09:46:24,960
we have this drop down menu. In this

17194
09:46:22,560 --> 09:46:27,160
case, I can go down to source and find

17195
09:46:24,960 --> 09:46:29,276
source port

17196
09:46:27,160 --> 09:46:31,436
unresolved. Next, I can add a second

17197
09:46:29,276 --> 09:46:34,360
column for destination port. In this

17198
09:46:31,436 --> 09:46:37,120
case, I'll just call it desk

17199
09:46:34,360 --> 09:46:39,120
port. And under the type here, again,

17200
09:46:37,120 --> 09:46:41,680
very similarly, we can click on desk

17201
09:46:39,120 --> 09:46:43,596
port here, unresolved. And just to make

17202
09:46:41,680 --> 09:46:45,436
this easier to look at in the columns

17203
09:46:43,596 --> 09:46:47,240
view, I'm going to drag this up right

17204
09:46:45,436 --> 09:46:49,436
under

17205
09:46:47,240 --> 09:46:51,120
source. So, we have the source IP

17206
09:46:49,436 --> 09:46:52,880
address and then the source port.

17207
09:46:51,120 --> 09:46:55,120
Similarly, I will drag the destination

17208
09:46:52,880 --> 09:46:57,640
port here, right under destination. And

17209
09:46:55,120 --> 09:47:00,320
feel free to name these whatever you

17210
09:46:57,640 --> 09:47:01,680
like. Once we click okay, well, we can

17211
09:47:00,320 --> 09:47:03,640
see our screen refreshed here. And we

17212
09:47:01,680 --> 09:47:06,680
now have the source port and destination

17213
09:47:03,640 --> 09:47:09,520
port. And so we wanted to look at HTTP

17214
09:47:06,680 --> 09:47:11,400
traffic. So let's add a display filter

17215
09:47:09,520 --> 09:47:13,596
to just select that

17216
09:47:11,400 --> 09:47:16,400
protocol. And in doing this, we can

17217
09:47:13,596 --> 09:47:18,560
immediately identify those four packets.

17218
09:47:16,400 --> 09:47:21,276
And so let's open up the HTTP packet

17219
09:47:18,560 --> 09:47:23,756
details for this first packet here.

17220
09:47:21,276 --> 09:47:25,680
We can see an interesting result here.

17221
09:47:23,756 --> 09:47:27,756
The host value in the HTTP request

17222
09:47:25,680 --> 09:47:29,640
header is an IP address and not a domain

17223
09:47:27,756 --> 09:47:32,560
name, which is immediately suspicious to

17224
09:47:29,640 --> 09:47:34,000
me. If we go up to the get request here,

17225
09:47:32,560 --> 09:47:35,880
well, we can see it's making a request

17226
09:47:34,000 --> 09:47:38,080
to

17227
09:47:35,880 --> 09:47:40,080
86607.dat. And so, it's making a get

17228
09:47:38,080 --> 09:47:42,000
request to a DAT file, which is also

17229
09:47:40,080 --> 09:47:43,596
very suspicious. It almost feels like

17230
09:47:42,000 --> 09:47:45,756
that Mr. Robot episode where Elliot

17231
09:47:43,596 --> 09:47:47,120
finds the DAT file. And so, let's open

17232
09:47:45,756 --> 09:47:49,040
up this stream. So, I'm going to right

17233
09:47:47,120 --> 09:47:50,840
click on the packet and click on follow

17234
09:47:49,040 --> 09:47:53,040
and then HTTP

17235
09:47:50,840 --> 09:47:54,680
stream. And in this case, we're going to

17236
09:47:53,040 --> 09:47:56,800
start rebuilding the

17237
09:47:54,680 --> 09:47:59,276
conversation. And in the actual header

17238
09:47:56,800 --> 09:48:01,360
of this request, we see some even more

17239
09:47:59,276 --> 09:48:04,160
suspicious information. Under the user

17240
09:48:01,360 --> 09:48:05,840
agent, we have curl, the curl utility.

17241
09:48:04,160 --> 09:48:07,520
And typically, an end user would never

17242
09:48:05,840 --> 09:48:09,200
have curl as their user agent unless

17243
09:48:07,520 --> 09:48:11,120
they've executed some sort of script

17244
09:48:09,200 --> 09:48:13,680
either knowingly or unknowingly. So

17245
09:48:11,120 --> 09:48:15,200
again, this is very suspicious. And if

17246
09:48:13,680 --> 09:48:16,800
we look at the actual response from the

17247
09:48:15,200 --> 09:48:18,800
server where it's sending over this

17248
09:48:16,800 --> 09:48:20,160
attachment or this downloadable file,

17249
09:48:18,800 --> 09:48:21,840
well, we are seeing that common string

17250
09:48:20,160 --> 09:48:24,960
here of this program cannot be run in

17251
09:48:21,840 --> 09:48:27,040
DOSS mode. Additionally, we have MZ here

17252
09:48:24,960 --> 09:48:29,680
as the magic bytes or the file signature

17253
09:48:27,040 --> 09:48:31,360
at the very beginning of the file. And

17254
09:48:29,680 --> 09:48:33,160
if I go to Google here and just search

17255
09:48:31,360 --> 09:48:35,276
for list of file

17256
09:48:33,160 --> 09:48:37,200
signatures, well, we can get a list from

17257
09:48:35,276 --> 09:48:39,596
Wikipedia here of all the common file

17258
09:48:37,200 --> 09:48:41,520
signatures and what they mean. And these

17259
09:48:39,596 --> 09:48:43,596
file signatures are also known as magic

17260
09:48:41,520 --> 09:48:45,120
numbers or magic bytes. And they

17261
09:48:43,596 --> 09:48:47,680
typically tell operating systems what

17262
09:48:45,120 --> 09:48:49,596
kind of file to present. For example, if

17263
09:48:47,680 --> 09:48:51,360
I search for a JPEG, well, this is the

17264
09:48:49,596 --> 09:48:53,756
magic bite or the magic file signature

17265
09:48:51,360 --> 09:48:55,480
you'll find at the start of a JPEG file.

17266
09:48:53,756 --> 09:48:58,560
And this is what it looks like in

17267
09:48:55,480 --> 09:49:00,400
hex. So if I do a search for MZ here,

17268
09:48:58,560 --> 09:49:03,276
well, we're immediately seeing this is a

17269
09:49:00,400 --> 09:49:05,520
DOSS MZ executable. And if we click on

17270
09:49:03,276 --> 09:49:08,160
this, we can see the actual MZ stands

17271
09:49:05,520 --> 09:49:10,160
for the creator of the DOSS program. I

17272
09:49:08,160 --> 09:49:12,480
think it says it here. Yes, we can see

17273
09:49:10,160 --> 09:49:14,560
this hexadimal string here or this MZ

17274
09:49:12,480 --> 09:49:16,756
are the initials of Mark Zikowski, one

17275
09:49:14,560 --> 09:49:19,360
of the leading developers of MS

17276
09:49:16,756 --> 09:49:21,520
DOSS. So in this case, the endpoint here

17277
09:49:19,360 --> 09:49:23,756
or the victim downloaded an executable

17278
09:49:21,520 --> 09:49:25,756
file from this web server using the curl

17279
09:49:23,756 --> 09:49:27,756
utility. And if you remember, we could

17280
09:49:25,756 --> 09:49:30,160
have actually found this using the HTTP

17281
09:49:27,756 --> 09:49:32,916
statistics here under requests. You can

17282
09:49:30,160 --> 09:49:34,596
see immediately we are finding this

17283
09:49:32,916 --> 09:49:37,320
86607.dat

17284
09:49:34,596 --> 09:49:39,756
file. And so let's continue gathering

17285
09:49:37,320 --> 09:49:41,840
IoC's. So specifically we have the name

17286
09:49:39,756 --> 09:49:43,680
of the file and its URL and the IP

17287
09:49:41,840 --> 09:49:45,756
address that is associated with hosting

17288
09:49:43,680 --> 09:49:48,480
it. But let's also extract the file

17289
09:49:45,756 --> 09:49:50,000
itself so we can gather its hashes. And

17290
09:49:48,480 --> 09:49:53,200
so of course if you remember to do that

17291
09:49:50,000 --> 09:49:54,680
we can go under file export objects and

17292
09:49:53,200 --> 09:49:57,200
click on

17293
09:49:54,680 --> 09:49:58,560
HTTP. And in this case we can see there

17294
09:49:57,200 --> 09:50:00,320
is a certificate here which we don't

17295
09:49:58,560 --> 09:50:02,400
really need to worry about. But we do

17296
09:50:00,320 --> 09:50:04,800
have this file. And if I highlight it

17297
09:50:02,400 --> 09:50:07,120
and click on save, well, we can save it

17298
09:50:04,800 --> 09:50:09,200
to our folder here. And so now that

17299
09:50:07,120 --> 09:50:10,800
we've extracted it, I'm going to back

17300
09:50:09,200 --> 09:50:13,800
out of this directory where I saved it.

17301
09:50:10,800 --> 09:50:15,916
I'm just going to run a file on

17302
09:50:13,800 --> 09:50:18,960
8667.dat. And we can see, of course, it

17303
09:50:15,916 --> 09:50:22,160
is a p32 executable. In this case, a

17304
09:50:18,960 --> 09:50:25,320
Windows DL file. And I can simply run

17305
09:50:22,160 --> 09:50:27,360
Shaw 256 sum to get the hash of the

17306
09:50:25,320 --> 09:50:28,960
file. And of course, we want to make

17307
09:50:27,360 --> 09:50:31,596
note of this in our documentation and in

17308
09:50:28,960 --> 09:50:33,120
our ticketing software. And so now it's

17309
09:50:31,596 --> 09:50:34,480
just a matter of doing file reputation

17310
09:50:33,120 --> 09:50:36,880
checks that we're very used to doing

17311
09:50:34,480 --> 09:50:38,640
already from the fishing section, right?

17312
09:50:36,880 --> 09:50:39,640
So we can check virus total and paste in

17313
09:50:38,640 --> 09:50:42,436
the

17314
09:50:39,640 --> 09:50:44,400
hash. And of course it's being

17315
09:50:42,436 --> 09:50:46,560
flagged. We can check the malware

17316
09:50:44,400 --> 09:50:48,480
bizarre database in this case under

17317
09:50:46,560 --> 09:50:51,040
search syntax here. We can see that we

17318
09:50:48,480 --> 09:50:52,840
can specify a SHA 256 hash using this

17319
09:50:51,040 --> 09:50:55,276
syntax

17320
09:50:52,840 --> 09:50:59,880
here. And if we run that, we can see we

17321
09:50:55,276 --> 09:50:59,880
have a match in this case to Quackbot.

17322
09:51:01,276 --> 09:51:05,000
And so it looks like this file hash is

17323
09:51:03,040 --> 09:51:07,436
associated with the Quackbot malware

17324
09:51:05,000 --> 09:51:09,200
family. And so we've successfully

17325
09:51:07,436 --> 09:51:10,960
identified a number of IoC's that

17326
09:51:09,200 --> 09:51:12,880
resulted in the infection of the victim

17327
09:51:10,960 --> 09:51:14,480
machine here. We've also determined

17328
09:51:12,880 --> 09:51:16,040
through our analysis and research that

17329
09:51:14,480 --> 09:51:18,000
the specific type of malware is

17330
09:51:16,040 --> 09:51:19,680
Quackbot. And so let's do some more

17331
09:51:18,000 --> 09:51:21,840
research into Quackbot and see if we can

17332
09:51:19,680 --> 09:51:23,120
discover any post compromised IoC's or

17333
09:51:21,840 --> 09:51:26,276
tactics that we might be able to

17334
09:51:23,120 --> 09:51:29,756
additionally identify in our PCAP

17335
09:51:26,276 --> 09:51:31,360
sample. And in this Sofos article here,

17336
09:51:29,756 --> 09:51:33,120
they discovered an infected host

17337
09:51:31,360 --> 09:51:34,720
performing an ARP scan on the internal

17338
09:51:33,120 --> 09:51:36,240
network to discover if there are any

17339
09:51:34,720 --> 09:51:37,560
other active IP addresses that they

17340
09:51:36,240 --> 09:51:40,000
could maybe pivot

17341
09:51:37,560 --> 09:51:41,960
to. Very similar activity here in this

17342
09:51:40,000 --> 09:51:44,640
Canadian Center for Cyber Security

17343
09:51:41,960 --> 09:51:46,160
alert in which they've identified CACbot

17344
09:51:44,640 --> 09:51:48,400
performing an ARP scan in order to

17345
09:51:46,160 --> 09:51:49,756
discover other endpoints on the network.

17346
09:51:48,400 --> 09:51:50,916
Specifically, they're mapping it to

17347
09:51:49,756 --> 09:51:53,040
MITER

17348
09:51:50,916 --> 09:51:54,640
T1016. And we're going to get into the

17349
09:51:53,040 --> 09:51:55,916
MITER attack framework in a lot more

17350
09:51:54,640 --> 09:51:57,756
detail in the threat intelligence

17351
09:51:55,916 --> 09:51:59,520
section. But if we look at the actual

17352
09:51:57,756 --> 09:52:01,596
software categorization of CACbot

17353
09:51:59,520 --> 09:52:04,640
itself, well, we can see associated

17354
09:52:01,596 --> 09:52:06,120
techniques used particularly under the

17355
09:52:04,640 --> 09:52:08,160
technique of

17356
09:52:06,120 --> 09:52:09,480
T1016. Well, we can see another

17357
09:52:08,160 --> 09:52:12,000
reference to using

17358
09:52:09,480 --> 09:52:14,240
ARP. In this article here, we can see

17359
09:52:12,000 --> 09:52:17,436
that it was using SMB protocol to spread

17360
09:52:14,240 --> 09:52:19,120
across a network.

17361
09:52:17,436 --> 09:52:20,480
And in this scroll article here, we can

17362
09:52:19,120 --> 09:52:22,560
see that it was also discovered

17363
09:52:20,480 --> 09:52:23,800
exfiltrating emails in an email thread

17364
09:52:22,560 --> 09:52:26,400
hijacking

17365
09:52:23,800 --> 09:52:28,880
attack. And so if you recall, along with

17366
09:52:26,400 --> 09:52:30,640
IP and TCP traffic, we did actually see

17367
09:52:28,880 --> 09:52:33,120
a large amount of ARP traffic in our

17368
09:52:30,640 --> 09:52:34,720
protocol hierarchy. And so with that in

17369
09:52:33,120 --> 09:52:36,400
mind, we can check our PECAP for any

17370
09:52:34,720 --> 09:52:38,320
indicators of an attacker performing an

17371
09:52:36,400 --> 09:52:41,200
ARP scan from the compromised victim

17372
09:52:38,320 --> 09:52:43,120
device. And an ARP scan or an address

17373
09:52:41,200 --> 09:52:45,200
resolution protocol scan is a technique

17374
09:52:43,120 --> 09:52:47,520
that attackers commonly use to identify

17375
09:52:45,200 --> 09:52:49,520
active IP addresses within a compromised

17376
09:52:47,520 --> 09:52:51,276
network. And so these scans operate at

17377
09:52:49,520 --> 09:52:53,040
the MAC address layer where a device

17378
09:52:51,276 --> 09:52:55,040
will send ARP queries to the broadcast

17379
09:52:53,040 --> 09:52:56,720
MAC address. And the purpose of these

17380
09:52:55,040 --> 09:52:58,480
queries is to discover which IP

17381
09:52:56,720 --> 09:52:59,916
addresses respond and are currently in

17382
09:52:58,480 --> 09:53:02,080
use or active within the network

17383
09:52:59,916 --> 09:53:04,160
segment. And so an ARP scan will

17384
09:53:02,080 --> 09:53:05,840
typically involve a client sending ARP

17385
09:53:04,160 --> 09:53:08,080
requests to sequential IP addresses

17386
09:53:05,840 --> 09:53:10,000
within a network. And so if we start

17387
09:53:08,080 --> 09:53:11,756
seeing some sequential queries, this

17388
09:53:10,000 --> 09:53:13,200
will be a telltale sign of an ARP scan

17389
09:53:11,756 --> 09:53:15,040
and suggest that an attacker might be

17390
09:53:13,200 --> 09:53:17,756
attempting to map out the network by

17391
09:53:15,040 --> 09:53:19,596
identifying which IP addresses respond.

17392
09:53:17,756 --> 09:53:21,560
And so to find this traffic, well, we

17393
09:53:19,596 --> 09:53:23,756
can use the following Wireshark

17394
09:53:21,560 --> 09:53:26,000
filter. In this case, we can filter on

17395
09:53:23,756 --> 09:53:28,320
the ARP protocol. And additionally, we

17396
09:53:26,000 --> 09:53:30,080
can look at the Ethernet destination of

17397
09:53:28,320 --> 09:53:32,880
that broadcast address. And the

17398
09:53:30,080 --> 09:53:34,880
broadcast address is two Fs with a colon

17399
09:53:32,880 --> 09:53:36,960
six times.

17400
09:53:34,880 --> 09:53:38,960
And so if we run this, well, we can

17401
09:53:36,960 --> 09:53:40,720
immediately see all of these broadcast

17402
09:53:38,960 --> 09:53:42,840
queries, right? So if we look under

17403
09:53:40,720 --> 09:53:45,200
destination, it it is to the broadcast

17404
09:53:42,840 --> 09:53:47,436
address. And if we look under the info

17405
09:53:45,200 --> 09:53:48,800
column here, well, this is basically the

17406
09:53:47,436 --> 09:53:50,720
query that is being asked through the

17407
09:53:48,800 --> 09:53:52,200
address resolution protocol, right? So

17408
09:53:50,720 --> 09:53:54,400
who has

17409
09:53:52,200 --> 09:53:56,800
10.0.0.248? And they're asking tell me

17410
09:53:54,400 --> 09:53:58,960
as the host address here. And as we

17411
09:53:56,800 --> 09:54:01,436
scroll down, well, we can see the IP

17412
09:53:58,960 --> 09:54:03,680
addresses are descending. And this is a

17413
09:54:01,436 --> 09:54:04,880
clear indication of an ARP scan. And at

17414
09:54:03,680 --> 09:54:06,800
this point, we can infer that the

17415
09:54:04,880 --> 09:54:08,560
attacker who compromised the machine was

17416
09:54:06,800 --> 09:54:10,160
attempting to find any other active

17417
09:54:08,560 --> 09:54:12,800
machines within the network to

17418
09:54:10,160 --> 09:54:14,480
potentially probe or move laterally to.

17419
09:54:12,800 --> 09:54:16,320
And so, if an attacker manages to

17420
09:54:14,480 --> 09:54:18,080
identify any active IP addresses within

17421
09:54:16,320 --> 09:54:19,756
the network, well, they'll likely

17422
09:54:18,080 --> 09:54:21,436
attempt to ping these systems to see if

17423
09:54:19,756 --> 09:54:22,880
they're alive and if they can get a

17424
09:54:21,436 --> 09:54:25,276
response before performing additional

17425
09:54:22,880 --> 09:54:27,080
port or service scans. In this case, we

17426
09:54:25,276 --> 09:54:30,160
can use the ICMP

17427
09:54:27,080 --> 09:54:32,560
filter to see if we can find any ICMP

17428
09:54:30,160 --> 09:54:34,640
echo requests or replies.

17429
09:54:32,560 --> 09:54:37,120
And in this case, we have four packets,

17430
09:54:34,640 --> 09:54:38,560
two requests and two replies.

17431
09:54:37,120 --> 09:54:40,840
Interestingly enough, it looks like the

17432
09:54:38,560 --> 09:54:43,960
attacker managed to identify

17433
09:54:40,840 --> 09:54:46,240
10.0.0.6 as well as

17434
09:54:43,960 --> 09:54:47,840
10.0.0.1. And so we can also check if

17435
09:54:46,240 --> 09:54:49,360
the attacker performed any kind of port

17436
09:54:47,840 --> 09:54:50,800
scanning on these identified IP

17437
09:54:49,360 --> 09:54:52,400
addresses to see if there were any

17438
09:54:50,800 --> 09:54:53,840
lateral movement or post compromise

17439
09:54:52,400 --> 09:54:56,080
actions that they might have performed

17440
09:54:53,840 --> 09:54:59,276
on them. In this case, I'll change the

17441
09:54:56,080 --> 09:55:02,040
display filter to IP.ADR for address and

17442
09:54:59,276 --> 09:55:04,960
set that to equal to 10.0.0.1.

17443
09:55:02,040 --> 09:55:06,400
0.1. And if I run this, well, we can

17444
09:55:04,960 --> 09:55:09,080
identify a number of ports that the

17445
09:55:06,400 --> 09:55:11,276
attacker tried probing on the 10.0.0.1

17446
09:55:09,080 --> 09:55:13,200
endpoint. By the looks of it, we can see

17447
09:55:11,276 --> 09:55:15,120
a number of incomplete TCP handshake

17448
09:55:13,200 --> 09:55:17,276
attempts and a number of reset flags

17449
09:55:15,120 --> 09:55:22,276
that were set as well. Specifically for

17450
09:55:17,276 --> 09:55:24,640
port 445, 139, and port 80 as

17451
09:55:22,276 --> 09:55:26,720
well. And so when we were looking at the

17452
09:55:24,640 --> 09:55:29,520
protocol hierarchy, we also saw some

17453
09:55:26,720 --> 09:55:31,436
SMTP traffic. And considering this is

17454
09:55:29,520 --> 09:55:33,040
unencrypted traffic, we can also take a

17455
09:55:31,436 --> 09:55:34,800
look to see if we can uncover anything

17456
09:55:33,040 --> 09:55:37,520
interesting. So in this case for the

17457
09:55:34,800 --> 09:55:38,720
display filter, I'll choose SMTP in

17458
09:55:37,520 --> 09:55:41,360
which we get a number of packets

17459
09:55:38,720 --> 09:55:43,200
returned. And if I scroll to the top

17460
09:55:41,360 --> 09:55:45,436
under info, I can see an authentication

17461
09:55:43,200 --> 09:55:46,880
login packet. So this is interesting. So

17462
09:55:45,436 --> 09:55:50,320
I'm going to right click on this and

17463
09:55:46,880 --> 09:55:52,000
click on follow TCP stream. And in this

17464
09:55:50,320 --> 09:55:54,080
case, we can get an entire conversation

17465
09:55:52,000 --> 09:55:56,800
view of what was received in blue and

17466
09:55:54,080 --> 09:55:58,720
what was sent in red.

17467
09:55:56,800 --> 09:56:01,480
Particularly we can see under the off

17468
09:55:58,720 --> 09:56:04,000
login here some B 64 encoded

17469
09:56:01,480 --> 09:56:06,240
data and so what I'm going to do is copy

17470
09:56:04,000 --> 09:56:08,840
this entire conversation here of B 64

17471
09:56:06,240 --> 09:56:11,200
data for this authentication

17472
09:56:08,840 --> 09:56:13,840
login and I'll head over to the ever

17473
09:56:11,200 --> 09:56:15,596
useful cyersh I'm going to paste in that

17474
09:56:13,840 --> 09:56:17,560
conversation here and just clean it up a

17475
09:56:15,596 --> 09:56:19,916
bit by removing these

17476
09:56:17,560 --> 09:56:21,720
numbers and now I'm just going to drag

17477
09:56:19,916 --> 09:56:24,160
over from base

17478
09:56:21,720 --> 09:56:25,520
64 and we can immediately see the

17479
09:56:24,160 --> 09:56:28,000
username that was entered with this

17480
09:56:25,520 --> 09:56:30,120
email address as well as the password

17481
09:56:28,000 --> 09:56:32,160
that the attacker tried as

17482
09:56:30,120 --> 09:56:34,560
well. And in this case, it looks like

17483
09:56:32,160 --> 09:56:36,080
the authentication failed. However, we

17484
09:56:34,560 --> 09:56:37,840
might have identified some potentially

17485
09:56:36,080 --> 09:56:38,880
compromised user credentials. And

17486
09:56:37,840 --> 09:56:40,800
obviously, we don't have the

17487
09:56:38,880 --> 09:56:42,240
organizational context here, but this

17488
09:56:40,800 --> 09:56:43,916
kind of thing is of course worth noting

17489
09:56:42,240 --> 09:56:46,560
as well and might expand the scope of

17490
09:56:43,916 --> 09:56:48,560
the investigation. And so a very common

17491
09:56:46,560 --> 09:56:50,640
goal for attackers once they gain access

17492
09:56:48,560 --> 09:56:52,240
is to perform actions on objectives and

17493
09:56:50,640 --> 09:56:54,480
excfiltrate data from a compromised

17494
09:56:52,240 --> 09:56:56,320
system or abuse services in some way to

17495
09:56:54,480 --> 09:56:58,560
escalate privileges and gain access to

17496
09:56:56,320 --> 09:57:00,320
an active directory domain controller.

17497
09:56:58,560 --> 09:57:02,400
In both cases, this can typically be

17498
09:57:00,320 --> 09:57:04,320
done through SMB or the server message

17499
09:57:02,400 --> 09:57:06,800
block protocol which enables file

17500
09:57:04,320 --> 09:57:08,480
transfers between Windows hosts. And in

17501
09:57:06,800 --> 09:57:10,000
an AD environment, Windows hosts and

17502
09:57:08,480 --> 09:57:11,596
servers will commonly communicate with

17503
09:57:10,000 --> 09:57:14,000
the domain controller as part of normal

17504
09:57:11,596 --> 09:57:15,756
system operations. However, certain

17505
09:57:14,000 --> 09:57:18,120
types of activity like file transfers

17506
09:57:15,756 --> 09:57:20,480
over SMB can be

17507
09:57:18,120 --> 09:57:22,080
suspicious. And fortunately, Wireshark

17508
09:57:20,480 --> 09:57:24,880
makes it very easy for us to view

17509
09:57:22,080 --> 09:57:26,800
objects transferred over SMB. And like

17510
09:57:24,880 --> 09:57:29,680
we did with HTTP, well, I'm going to

17511
09:57:26,800 --> 09:57:32,080
head over to file under export objects.

17512
09:57:29,680 --> 09:57:34,840
In this case, instead of HTTP, I'm going

17513
09:57:32,080 --> 09:57:37,200
to select SMB for server message

17514
09:57:34,840 --> 09:57:38,960
block. And so at the top here, we can

17515
09:57:37,200 --> 09:57:41,756
see a number of files related to group

17516
09:57:38,960 --> 09:57:45,080
policy objects or GPOS as specified by

17517
09:57:41,756 --> 09:57:46,960
GPT.in. ini or gpt

17518
09:57:45,080 --> 09:57:48,320
tempmplate.inf. And these files are

17519
09:57:46,960 --> 09:57:49,916
actually quite common to see in an

17520
09:57:48,320 --> 09:57:51,680
active directory environment and they

17521
09:57:49,916 --> 09:57:53,436
allow administrators to manage settings

17522
09:57:51,680 --> 09:57:56,160
and configuration centrally for users

17523
09:57:53,436 --> 09:57:58,720
and computers within the domain. But

17524
09:57:56,160 --> 09:58:01,436
Windows executable or DL files within

17525
09:57:58,720 --> 09:58:02,960
SMB traffic can be very suspicious. It

17526
09:58:01,436 --> 09:58:04,320
could also be benign, for example, in

17527
09:58:02,960 --> 09:58:06,880
the case of Windows Server Update

17528
09:58:04,320 --> 09:58:08,480
Service. But randomly named DLL files

17529
09:58:06,880 --> 09:58:10,800
like these are pretty suspicious and

17530
09:58:08,480 --> 09:58:12,320
warrant further investigation. And it

17531
09:58:10,800 --> 09:58:15,916
looks like we have six potentially

17532
09:58:12,320 --> 09:58:18,320
suspicious DLL or DL.cfg files and they

17533
09:58:15,916 --> 09:58:20,400
were all transferred to the 10.0.0.6

17534
09:58:18,320 --> 09:58:21,756
host. And in the case of this PECAP

17535
09:58:20,400 --> 09:58:24,560
file, well, I'll pull the curtain a bit

17536
09:58:21,756 --> 09:58:26,160
here and say the 10.0.0.6 is the domain

17537
09:58:24,560 --> 09:58:27,756
controller of this network. And

17538
09:58:26,160 --> 09:58:29,276
typically when investigating a file like

17539
09:58:27,756 --> 09:58:31,680
this, well, we would know the IP address

17540
09:58:29,276 --> 09:58:33,880
of the domain controller as well. And so

17541
09:58:31,680 --> 09:58:36,640
what I'll do is go up to text filter

17542
09:58:33,880 --> 09:58:38,400
here, and I will just search for DLL.

17543
09:58:36,640 --> 09:58:40,960
And this will list just the six files

17544
09:58:38,400 --> 09:58:42,596
here. And I will just save each of these

17545
09:58:40,960 --> 09:58:44,880
files one by

17546
09:58:42,596 --> 09:58:46,360
one. And I'll just make a directory for

17547
09:58:44,880 --> 09:58:51,320
them called

17548
09:58:46,360 --> 09:58:54,756
SMB. Then I will move every file with a

17549
09:58:51,320 --> 09:58:57,360
DLL into the SMB

17550
09:58:54,756 --> 09:58:59,680
folder. And from here I'm going to run a

17551
09:58:57,360 --> 09:59:01,120
file on all of these files. And we can

17552
09:58:59,680 --> 09:59:03,756
see that half of them here are in fact

17553
09:59:01,120 --> 09:59:06,160
Windows DLS. And all of the CFG files

17554
09:59:03,756 --> 09:59:08,640
here appear to just be data binaries.

17555
09:59:06,160 --> 09:59:11,436
And so if I run Shaw 256 sum on all of

17556
09:59:08,640 --> 09:59:13,840
the files as well, well, we can see that

17557
09:59:11,436 --> 09:59:16,080
all of the DLL files all have the same

17558
09:59:13,840 --> 09:59:18,080
hash. And if you did note this in your

17559
09:59:16,080 --> 09:59:20,720
documentation, well, this is the exact

17560
09:59:18,080 --> 09:59:22,880
same hash of the initial CACbot DLL file

17561
09:59:20,720 --> 09:59:25,360
that we discovered over HTTP at the

17562
09:59:22,880 --> 09:59:27,360
beginning of the infection. And so in a

17563
09:59:25,360 --> 09:59:29,040
real world scenario, we would typically

17564
09:59:27,360 --> 09:59:30,596
want to direct our focus now to the

17565
09:59:29,040 --> 09:59:34,000
system or the host that received this

17566
09:59:30,596 --> 09:59:35,840
malware. In our case, the 10.0.0.6 or

17567
09:59:34,000 --> 09:59:37,276
the domain controller.

17568
09:59:35,840 --> 09:59:39,276
And we would do this either through our

17569
09:59:37,276 --> 09:59:41,040
SIM system and correlate logs that way

17570
09:59:39,276 --> 09:59:43,360
or through various EDR logs or

17571
09:59:41,040 --> 09:59:44,800
additional PECAPS from this host itself

17572
09:59:43,360 --> 09:59:46,800
as it seems very likely that the

17573
09:59:44,800 --> 09:59:50,080
attacker attempted to move laterally and

17574
09:59:46,800 --> 09:59:52,480
continue compromising the network.

17575
09:59:50,080 --> 09:59:54,320
And so to sum up our analysis, we were

17576
09:59:52,480 --> 09:59:55,756
able to start from a highle view and

17577
09:59:54,320 --> 09:59:58,000
look through our statistics and

17578
09:59:55,756 --> 09:59:59,840
conversations and protocols in order to

17579
09:59:58,000 --> 10:00:01,276
carve through the pcap and focus on

17580
09:59:59,840 --> 10:00:03,360
interesting packet streams and

17581
10:00:01,276 --> 10:00:05,160
lowhanging fruit to discover the initial

17582
10:00:03,360 --> 10:00:07,276
vector of malware infection and

17583
10:00:05,160 --> 10:00:08,880
compromise. And as we started to

17584
10:00:07,276 --> 10:00:10,480
identify the specific type of malware

17585
10:00:08,880 --> 10:00:12,000
infection that we were dealing with, we

17586
10:00:10,480 --> 10:00:13,840
were able to identify several post

17587
10:00:12,000 --> 10:00:15,360
compromise artifacts and indications of

17588
10:00:13,840 --> 10:00:17,756
host discovery and lateral movement

17589
10:00:15,360 --> 10:00:19,276
within the network. There were also a

17590
10:00:17,756 --> 10:00:21,596
number of other indicators associated

17591
10:00:19,276 --> 10:00:23,436
with CACbot within this pcap file itself

17592
10:00:21,596 --> 10:00:25,520
related to things like TLS certificates

17593
10:00:23,436 --> 10:00:27,040
and VNC activity. However, those

17594
10:00:25,520 --> 10:00:28,640
investigations are a bit out of scope

17595
10:00:27,040 --> 10:00:30,640
for this section, but I will include the

17596
10:00:28,640 --> 10:00:32,720
write up from unit 42 if you'd like to

17597
10:00:30,640 --> 10:00:34,320
investigate them further. And

17598
10:00:32,720 --> 10:00:36,320
admittedly, this was quite an involved

17599
10:00:34,320 --> 10:00:38,000
walkthrough and I wanted to cover all of

17600
10:00:36,320 --> 10:00:39,596
the important methodology steps and

17601
10:00:38,000 --> 10:00:42,160
features that we have available to us as

17602
10:00:39,596 --> 10:00:44,160
analysts within Wireshark. And obviously

17603
10:00:42,160 --> 10:00:45,680
we can't cover every single scenario and

17604
10:00:44,160 --> 10:00:47,276
indicator that you might come across in

17605
10:00:45,680 --> 10:00:49,276
the field. Which is why it's more

17606
10:00:47,276 --> 10:00:51,040
important to build up a methodology of

17607
10:00:49,276 --> 10:00:52,720
approaching pecaps from a high level

17608
10:00:51,040 --> 10:00:55,120
first and leveraging things like

17609
10:00:52,720 --> 10:00:56,560
statistics and aggregations to identify

17610
10:00:55,120 --> 10:00:59,200
interesting conversations and top

17611
10:00:56,560 --> 10:01:00,800
talkers or IP addresses. From there we

17612
10:00:59,200 --> 10:01:02,800
can zoom in and do more in-depth

17613
10:01:00,800 --> 10:01:04,320
analysis on these conversations, right?

17614
10:01:02,800 --> 10:01:06,240
Like what protocols are they speaking?

17615
10:01:04,320 --> 10:01:09,120
What ports are they talking to? Can we

17616
10:01:06,240 --> 10:01:11,756
follow any of the TCP or HCP streams? Or

17617
10:01:09,120 --> 10:01:13,596
what objects can we extract? Right. And

17618
10:01:11,756 --> 10:01:14,880
so as we identify more information and

17619
10:01:13,596 --> 10:01:16,880
start putting the puzzle pieces

17620
10:01:14,880 --> 10:01:18,720
together, we can zoom back out and

17621
10:01:16,880 --> 10:01:21,360
identify other hosts or conversations of

17622
10:01:18,720 --> 10:01:22,960
interest and repeat the process. And so

17623
10:01:21,360 --> 10:01:24,320
in the challenge following, you'll be

17624
10:01:22,960 --> 10:01:25,840
put to the test to see if you can

17625
10:01:24,320 --> 10:01:27,680
complete a network traffic analysis

17626
10:01:25,840 --> 10:01:29,276
investigation on your own. But don't

17627
10:01:27,680 --> 10:01:31,200
worry, I will be here the whole way if

17628
10:01:29,276 --> 10:01:35,040
you need a walk through. And so with

17629
10:01:31,200 --> 10:01:36,320
that, I will see you in the next video.

17630
10:01:35,040 --> 10:01:38,720
Now that we've gone through network

17631
10:01:36,320 --> 10:01:41,276
traffic analysis, let's shift our focus

17632
10:01:38,720 --> 10:01:43,360
over to network intrusions and how we

17633
10:01:41,276 --> 10:01:46,320
can detect and prevent network threats

17634
10:01:43,360 --> 10:01:47,840
both proactively and reactively. As I've

17635
10:01:46,320 --> 10:01:50,560
mentioned earlier in the course,

17636
10:01:47,840 --> 10:01:53,520
intrusion detection systems or IDS and

17637
10:01:50,560 --> 10:01:55,436
intrusion prevention systems or IPS are

17638
10:01:53,520 --> 10:01:57,840
important components in network security

17639
10:01:55,436 --> 10:02:00,000
that SOCKS use to proactively monitor

17640
10:01:57,840 --> 10:02:02,800
and actively prevent network intrusions

17641
10:02:00,000 --> 10:02:05,040
and attacks. And so at a high level, an

17642
10:02:02,800 --> 10:02:07,596
IDS or an intrusion detection system is

17643
10:02:05,040 --> 10:02:09,200
a device or a software application that

17644
10:02:07,596 --> 10:02:11,040
monitors the network or system

17645
10:02:09,200 --> 10:02:13,040
activities for malicious traffic or

17646
10:02:11,040 --> 10:02:15,200
actions or policy violations based on

17647
10:02:13,040 --> 10:02:16,640
predefined rules or known malware

17648
10:02:15,200 --> 10:02:18,800
signatures or through things like

17649
10:02:16,640 --> 10:02:20,720
anomaly and behavior-based detection.

17650
10:02:18,800 --> 10:02:22,640
And IDS's are primarily designed to

17651
10:02:20,720 --> 10:02:24,880
alert and identify and report any of

17652
10:02:22,640 --> 10:02:26,560
these policy violations. And they can do

17653
10:02:24,880 --> 10:02:28,000
this through monitoring and analysis.

17654
10:02:26,560 --> 10:02:30,080
Right? Right. So, an IDS is going to

17655
10:02:28,000 --> 10:02:31,680
continuously monitor network traffic and

17656
10:02:30,080 --> 10:02:33,680
actually do things like open up and

17657
10:02:31,680 --> 10:02:35,200
analyze data packets and log files to

17658
10:02:33,680 --> 10:02:37,360
detect abnormal patterns that might

17659
10:02:35,200 --> 10:02:39,360
indicate a potential attack. And when

17660
10:02:37,360 --> 10:02:41,360
suspicious activity is detected, well,

17661
10:02:39,360 --> 10:02:43,680
these IDS's can generate alerts and

17662
10:02:41,360 --> 10:02:45,200
notify the sock of potential threats.

17663
10:02:43,680 --> 10:02:46,800
And these alerts can be configured to

17664
10:02:45,200 --> 10:02:48,560
provide detailed information about the

17665
10:02:46,800 --> 10:02:50,400
nature and the source of the threat or

17666
10:02:48,560 --> 10:02:52,320
the network or the endpoint and could

17667
10:02:50,400 --> 10:02:54,240
potentially conduct some automated IoC

17668
10:02:52,320 --> 10:02:55,840
extraction. And typically all of these

17669
10:02:54,240 --> 10:02:57,680
alerts will be forwarded to the SIM

17670
10:02:55,840 --> 10:02:59,520
system. And the information that will be

17671
10:02:57,680 --> 10:03:01,436
forwarded will be through logs. So an

17672
10:02:59,520 --> 10:03:03,360
IDS is going to log all of its monitored

17673
10:03:01,436 --> 10:03:04,800
events which can be very useful in

17674
10:03:03,360 --> 10:03:06,720
investigations or incident response

17675
10:03:04,800 --> 10:03:08,160
scenarios and will assist us with things

17676
10:03:06,720 --> 10:03:10,000
like correlation and compliance

17677
10:03:08,160 --> 10:03:12,000
reporting and also provide future threat

17678
10:03:10,000 --> 10:03:14,080
detection capabilities with the IoC's

17679
10:03:12,000 --> 10:03:16,000
and signatures that it detects. And

17680
10:03:14,080 --> 10:03:18,240
typically an IDS is going to be deployed

17681
10:03:16,000 --> 10:03:20,080
out of band. So essentially not in line

17682
10:03:18,240 --> 10:03:21,436
with the network traffic. This is

17683
10:03:20,080 --> 10:03:23,756
because it doesn't need to sit in

17684
10:03:21,436 --> 10:03:25,916
between and actually intercept and drop

17685
10:03:23,756 --> 10:03:28,480
specific packets. It can do all of its

17686
10:03:25,916 --> 10:03:30,080
monitoring passively. And since they

17687
10:03:28,480 --> 10:03:31,916
operate passively, well, they're a lot

17688
10:03:30,080 --> 10:03:33,520
easier to scale and less of a burden on

17689
10:03:31,916 --> 10:03:34,880
the network performance and throughput

17690
10:03:33,520 --> 10:03:37,240
since there isn't that single choke

17691
10:03:34,880 --> 10:03:39,916
point of having an ID system in between

17692
10:03:37,240 --> 10:03:42,480
traffic. On the other hand, an intrusion

17693
10:03:39,916 --> 10:03:44,480
prevention system or an IPS is more of a

17694
10:03:42,480 --> 10:03:46,160
proactive security solution that's

17695
10:03:44,480 --> 10:03:48,560
designed to detect and prevent

17696
10:03:46,160 --> 10:03:50,640
identified threats in real time. And so

17697
10:03:48,560 --> 10:03:52,320
unlike an IDS, which is primarily a

17698
10:03:50,640 --> 10:03:54,320
monitoring and alerting tool, well, an

17699
10:03:52,320 --> 10:03:56,320
IPS can take a step further and actually

17700
10:03:54,320 --> 10:03:58,360
take immediate action to block or

17701
10:03:56,320 --> 10:04:00,480
mitigate malicious activity as it's

17702
10:03:58,360 --> 10:04:02,480
occurring. And so it does this through

17703
10:04:00,480 --> 10:04:04,160
traffic inspection. So an IPS is going

17704
10:04:02,480 --> 10:04:06,080
to inspect all of the network traffic at

17705
10:04:04,160 --> 10:04:07,680
a deeper level and actually analyze

17706
10:04:06,080 --> 10:04:09,756
packet contents as it sits in between

17707
10:04:07,680 --> 10:04:11,596
the traffic and intercepts them. And

17708
10:04:09,756 --> 10:04:13,200
when it detects suspicious activity or

17709
10:04:11,596 --> 10:04:15,120
anything that violates its predefined

17710
10:04:13,200 --> 10:04:16,800
rules, well, an IPS can block the

17711
10:04:15,120 --> 10:04:18,560
offending packets and actually drop them

17712
10:04:16,800 --> 10:04:20,880
from the network and prevent them from

17713
10:04:18,560 --> 10:04:22,160
reaching their intended destination. And

17714
10:04:20,880 --> 10:04:23,596
similarly, they can terminate

17715
10:04:22,160 --> 10:04:25,120
connections that are deemed harmful or

17716
10:04:23,596 --> 10:04:26,916
anything that goes against its rules,

17717
10:04:25,120 --> 10:04:29,596
which can stop any ongoing

17718
10:04:26,916 --> 10:04:31,756
attacks. And similar to an IDS, well, an

17719
10:04:29,596 --> 10:04:33,200
IPS can also generate alerts and log

17720
10:04:31,756 --> 10:04:35,276
events for any analysis and

17721
10:04:33,200 --> 10:04:37,436
recordkeeping purposes.

17722
10:04:35,276 --> 10:04:39,360
And so an IPS is typically going to need

17723
10:04:37,436 --> 10:04:41,360
to be deployed inline because it needs

17724
10:04:39,360 --> 10:04:43,436
to actively inspect and control the

17725
10:04:41,360 --> 10:04:44,960
traffic flow. And so a consideration

17726
10:04:43,436 --> 10:04:46,800
here is that it can actually introduce

17727
10:04:44,960 --> 10:04:49,756
some latency since it needs to actively

17728
10:04:46,800 --> 10:04:51,756
process and filter traffic in real time.

17729
10:04:49,756 --> 10:04:54,276
And so diving even deeper, well there

17730
10:04:51,756 --> 10:04:56,480
are two main types of IDS or IPS

17731
10:04:54,276 --> 10:04:59,360
systems. And the first here is a

17732
10:04:56,480 --> 10:05:00,960
network-based IDS or IPS. And these

17733
10:04:59,360 --> 10:05:02,960
systems will operate of course on the

17734
10:05:00,960 --> 10:05:04,800
network level. And so they can inspect

17735
10:05:02,960 --> 10:05:05,800
and analyze all of the traffic flowing

17736
10:05:04,800 --> 10:05:08,000
through the

17737
10:05:05,800 --> 10:05:11,200
network. On the other hand, we have

17738
10:05:08,000 --> 10:05:13,436
hostbased ids and IPS systems as well.

17739
10:05:11,200 --> 10:05:15,520
And these operate as the name suggests

17740
10:05:13,436 --> 10:05:17,680
at the host level and they can focus on

17741
10:05:15,520 --> 10:05:20,400
individual systems or endpoints rather

17742
10:05:17,680 --> 10:05:22,320
than the entire network. And so these

17743
10:05:20,400 --> 10:05:24,320
appliances can monitor activities on the

17744
10:05:22,320 --> 10:05:26,080
actual host. So things like file system

17745
10:05:24,320 --> 10:05:28,160
changes or login or application

17746
10:05:26,080 --> 10:05:30,400
behavior. It can look into processes

17747
10:05:28,160 --> 10:05:32,720
being spawned or files being accessed or

17748
10:05:30,400 --> 10:05:34,560
any registry changes. And of course, in

17749
10:05:32,720 --> 10:05:36,160
these cases, well, it can alert and log

17750
10:05:34,560 --> 10:05:39,120
and actually block malicious host

17751
10:05:36,160 --> 10:05:41,200
actions from taking place. And so with

17752
10:05:39,120 --> 10:05:43,756
all of these network and hostbased IDS

17753
10:05:41,200 --> 10:05:45,360
and IPS appliances, well, we often have

17754
10:05:43,756 --> 10:05:46,436
various means for detecting and

17755
10:05:45,360 --> 10:05:48,320
preventing

17756
10:05:46,436 --> 10:05:50,400
threats. For example, we have

17757
10:05:48,320 --> 10:05:52,000
signaturebased detection. And this

17758
10:05:50,400 --> 10:05:54,080
involves comparing network traffic or

17759
10:05:52,000 --> 10:05:56,276
host activities against a database of

17760
10:05:54,080 --> 10:05:58,560
known attack patterns or what we call

17761
10:05:56,276 --> 10:06:00,240
signatures. And when a match is found,

17762
10:05:58,560 --> 10:06:03,276
an alert can be triggered indicating a

17763
10:06:00,240 --> 10:06:04,880
potential threat. And so signature-based

17764
10:06:03,276 --> 10:06:06,800
detection is really effective at

17765
10:06:04,880 --> 10:06:08,320
identifying known threats, but it can

17766
10:06:06,800 --> 10:06:10,000
struggle with detecting things like zero

17767
10:06:08,320 --> 10:06:11,680
days or variance of known exploits

17768
10:06:10,000 --> 10:06:13,000
because it's comparing all of its data

17769
10:06:11,680 --> 10:06:14,960
against a

17770
10:06:13,000 --> 10:06:17,040
database. On the other hand, we have

17771
10:06:14,960 --> 10:06:19,200
behavior-based detection. And

17772
10:06:17,040 --> 10:06:21,040
behavior-based detection focuses on

17773
10:06:19,200 --> 10:06:23,680
identifying abnormal or suspicious

17774
10:06:21,040 --> 10:06:25,840
behavior within a network or a host. And

17775
10:06:23,680 --> 10:06:28,160
rather than relying on predefined rules,

17776
10:06:25,840 --> 10:06:30,436
these systems analyze deviations from a

17777
10:06:28,160 --> 10:06:32,560
normal pattern of activity or a

17778
10:06:30,436 --> 10:06:34,240
baseline. And so because it's not

17779
10:06:32,560 --> 10:06:36,320
focused on hard-coded signatures or

17780
10:06:34,240 --> 10:06:38,080
rules, well, it has a better chance of

17781
10:06:36,320 --> 10:06:39,436
detecting previously unseen threats

17782
10:06:38,080 --> 10:06:41,120
because it's looking at the actual

17783
10:06:39,436 --> 10:06:42,640
behavior on the endpoint or the network

17784
10:06:41,120 --> 10:06:44,240
itself.

17785
10:06:42,640 --> 10:06:46,320
But the key here is that you need to

17786
10:06:44,240 --> 10:06:48,000
have an effective baseline in place.

17787
10:06:46,320 --> 10:06:49,680
Otherwise, these systems are prone to

17788
10:06:48,000 --> 10:06:52,200
generating a lot of false positives if

17789
10:06:49,680 --> 10:06:54,480
the normal behavior is not accurately

17790
10:06:52,200 --> 10:06:56,480
defined. We also have rule-based

17791
10:06:54,480 --> 10:06:58,400
detection. And so rule-based detection,

17792
10:06:56,480 --> 10:07:00,400
as we've talked about earlier, involves

17793
10:06:58,400 --> 10:07:02,400
the creation and enforcement of specific

17794
10:07:00,400 --> 10:07:05,200
rules or policies that can govern

17795
10:07:02,400 --> 10:07:06,800
acceptable network or host behavior. And

17796
10:07:05,200 --> 10:07:08,720
so rulebased detection is highly

17797
10:07:06,800 --> 10:07:10,480
customizable, right? So we can tailor it

17798
10:07:08,720 --> 10:07:12,640
specific to the security requirements of

17799
10:07:10,480 --> 10:07:14,560
our organization. The downside here is

17800
10:07:12,640 --> 10:07:16,400
that it requires a lot of upkeep and

17801
10:07:14,560 --> 10:07:17,320
maintenance to remain effective against

17802
10:07:16,400 --> 10:07:19,756
ongoing

17803
10:07:17,320 --> 10:07:21,436
threats. And so when we look into Snort

17804
10:07:19,756 --> 10:07:23,560
in the next lessons, we're typically

17805
10:07:21,436 --> 10:07:25,596
going to focus here on rulebased

17806
10:07:23,560 --> 10:07:27,680
detection. And the last thing I'll cover

17807
10:07:25,596 --> 10:07:29,680
here on the slide is the diagram on the

17808
10:07:27,680 --> 10:07:32,160
right. And this is what's referred to as

17809
10:07:29,680 --> 10:07:34,320
the known unknown matrix, also known as

17810
10:07:32,160 --> 10:07:35,840
the Johari window. And this is a

17811
10:07:34,320 --> 10:07:37,680
framework that's used to understand the

17812
10:07:35,840 --> 10:07:39,840
knowledge about information and how we

17813
10:07:37,680 --> 10:07:41,680
actually categorize it. And so in the

17814
10:07:39,840 --> 10:07:43,120
context of a sock, it can help us

17815
10:07:41,680 --> 10:07:45,596
categorize and understand different

17816
10:07:43,120 --> 10:07:47,200
types of threats and detection methods.

17817
10:07:45,596 --> 10:07:49,596
Right? So this matrix is obviously

17818
10:07:47,200 --> 10:07:52,080
divided into four quadrants. And in the

17819
10:07:49,596 --> 10:07:53,680
top left, we have the known known. And

17820
10:07:52,080 --> 10:07:55,680
these can be thought of as threats or

17821
10:07:53,680 --> 10:07:58,160
vulnerabilities that are both known to

17822
10:07:55,680 --> 10:07:59,756
the organization and attackers. And so

17823
10:07:58,160 --> 10:08:01,520
information in this quadrant is well

17824
10:07:59,756 --> 10:08:03,436
understood and documented. And our

17825
10:08:01,520 --> 10:08:05,840
defenses can be specifically tailored to

17826
10:08:03,436 --> 10:08:08,000
address these threats. And in the top

17827
10:08:05,840 --> 10:08:09,596
right, we have the known unknowns. And

17828
10:08:08,000 --> 10:08:11,520
these are threats or vulnerabilities

17829
10:08:09,596 --> 10:08:13,400
that are known to the organization but

17830
10:08:11,520 --> 10:08:15,276
not necessarily to the public or to the

17831
10:08:13,400 --> 10:08:17,200
attackers. And this can include things

17832
10:08:15,276 --> 10:08:18,880
like internal vulnerabilities that the

17833
10:08:17,200 --> 10:08:21,596
organization is aware of but have not

17834
10:08:18,880 --> 10:08:23,680
been exploited yet. In the bottom left

17835
10:08:21,596 --> 10:08:25,040
we have the unknown known and these are

17836
10:08:23,680 --> 10:08:26,756
threats or vulnerabilities that are

17837
10:08:25,040 --> 10:08:28,800
known to the attackers but not the

17838
10:08:26,756 --> 10:08:30,320
organization. And obviously this is a

17839
10:08:28,800 --> 10:08:31,596
critical area to focus on as it

17840
10:08:30,320 --> 10:08:34,400
represents blind spots in our

17841
10:08:31,596 --> 10:08:36,320
organization defenses. And lastly, we

17842
10:08:34,400 --> 10:08:37,756
have the unknown unknowns. And these are

17843
10:08:36,320 --> 10:08:39,596
threats that are unknown to both the

17844
10:08:37,756 --> 10:08:41,200
organization and attackers. So these can

17845
10:08:39,596 --> 10:08:42,560
be new emerging threats or zero-day

17846
10:08:41,200 --> 10:08:45,276
vulnerabilities that have not been

17847
10:08:42,560 --> 10:08:47,360
discovered yet. And so to completely

17848
10:08:45,276 --> 10:08:49,040
generalize this nuanced concept that

17849
10:08:47,360 --> 10:08:50,720
probably shouldn't be generalized, well,

17850
10:08:49,040 --> 10:08:52,400
we can think of signaturebased detection

17851
10:08:50,720 --> 10:08:54,800
as highly effective against known

17852
10:08:52,400 --> 10:08:57,520
threats. So the known known, but it kind

17853
10:08:54,800 --> 10:08:59,200
of fails against unknown threats. On the

17854
10:08:57,520 --> 10:09:01,276
other hand, behavior-based detection is

17855
10:08:59,200 --> 10:09:02,640
really good at identifying anomalies.

17856
10:09:01,276 --> 10:09:04,960
And so, it's really good at detecting

17857
10:09:02,640 --> 10:09:07,240
known unknowns and some unknown knowns,

17858
10:09:04,960 --> 10:09:09,276
but it can also generate a lot of false

17859
10:09:07,240 --> 10:09:11,120
positives. And lastly, rulebased

17860
10:09:09,276 --> 10:09:13,040
detection can balance known and unknown

17861
10:09:11,120 --> 10:09:15,720
threats, but struggles on completely new

17862
10:09:13,040 --> 10:09:18,560
threats because it relies on predefined

17863
10:09:15,720 --> 10:09:20,880
rules. Okay, let's shift our focus and

17864
10:09:18,560 --> 10:09:23,436
talk a little bit about Snort. And so

17865
10:09:20,880 --> 10:09:27,040
Snort is an open-source network-based

17866
10:09:23,436 --> 10:09:28,640
IDS and IPS system managed by Cisco and

17867
10:09:27,040 --> 10:09:30,960
it's a pretty popular choice in the

17868
10:09:28,640 --> 10:09:32,800
industry and is also integrated into a

17869
10:09:30,960 --> 10:09:34,560
number of security solutions as well

17870
10:09:32,800 --> 10:09:36,480
primarily due to its effectiveness in

17871
10:09:34,560 --> 10:09:37,640
real-time traffic analysis and packet

17872
10:09:36,480 --> 10:09:39,840
logging

17873
10:09:37,640 --> 10:09:41,916
capabilities. And so Snort is really

17874
10:09:39,840 --> 10:09:43,520
versatile and is capable of detecting a

17875
10:09:41,916 --> 10:09:45,840
wide range of network attacks and

17876
10:09:43,520 --> 10:09:48,160
probes. And we also have the power to

17877
10:09:45,840 --> 10:09:50,640
ingest a wide range of community curated

17878
10:09:48,160 --> 10:09:52,320
rules and also create our own custom

17879
10:09:50,640 --> 10:09:53,680
rules. And so the list is basically

17880
10:09:52,320 --> 10:09:56,160
endless when it comes to what we can

17881
10:09:53,680 --> 10:09:58,960
detect with Snort. And so Snort was

17882
10:09:56,160 --> 10:10:00,720
originally created back in 1998. And

17883
10:09:58,960 --> 10:10:03,040
since then, it's evolved into one of the

17884
10:10:00,720 --> 10:10:05,200
most widely deployed IDs and IPS

17885
10:10:03,040 --> 10:10:06,720
solutions globally. And over the years,

17886
10:10:05,200 --> 10:10:08,400
Snort has undergone more and more

17887
10:10:06,720 --> 10:10:09,916
development and has gained a large

17888
10:10:08,400 --> 10:10:11,756
community of developers that are

17889
10:10:09,916 --> 10:10:13,276
maintaining the rules to keep Snort's

17890
10:10:11,756 --> 10:10:15,520
detections up to date with the latest

17891
10:10:13,276 --> 10:10:17,596
and greatest attacks out there. And so,

17892
10:10:15,520 --> 10:10:20,160
the two major versions of Snort in use

17893
10:10:17,596 --> 10:10:22,880
today are the more common Snort 2, but

17894
10:10:20,160 --> 10:10:24,800
also Snort 3.0. And there are some

17895
10:10:22,880 --> 10:10:26,720
notable differences between the two like

17896
10:10:24,800 --> 10:10:27,916
multi-threaded support and scalability

17897
10:10:26,720 --> 10:10:29,680
improvements and also different

17898
10:10:27,916 --> 10:10:31,916
configuration systems using Lua and

17899
10:10:29,680 --> 10:10:34,240
Snort 3. But in these lessons, we'll

17900
10:10:31,916 --> 10:10:36,400
focus on Snort 2 due to its widespread

17901
10:10:34,240 --> 10:10:38,640
use and accessibility of rule sets and

17902
10:10:36,400 --> 10:10:40,000
also detailed documentation and also the

17903
10:10:38,640 --> 10:10:41,840
likelihood that you'll encounter it in

17904
10:10:40,000 --> 10:10:43,680
professional environments because not

17905
10:10:41,840 --> 10:10:46,320
every organization or security solution

17906
10:10:43,680 --> 10:10:48,240
has begun migrating to Snort 3. And so

17907
10:10:46,320 --> 10:10:49,840
having a familiarity with Snort 2 is

17908
10:10:48,240 --> 10:10:52,240
very useful to have and will give you a

17909
10:10:49,840 --> 10:10:54,160
great foundation to migrate if needed.

17910
10:10:52,240 --> 10:10:56,720
And so Snort can operate in three

17911
10:10:54,160 --> 10:10:58,480
primary modes. The first is the sniffer

17912
10:10:56,720 --> 10:10:59,916
mode. And so in this mode, Snort is

17913
10:10:58,480 --> 10:11:02,000
going to read network packets and

17914
10:10:59,916 --> 10:11:04,160
display them on the console. And so this

17915
10:11:02,000 --> 10:11:05,680
is very similar to TCP dump with a bit

17916
10:11:04,160 --> 10:11:07,520
more functionality. So something like

17917
10:11:05,680 --> 10:11:10,720
T-Shark or Wireshark in the command line

17918
10:11:07,520 --> 10:11:13,040
as well. The second mode is the packet

17919
10:11:10,720 --> 10:11:15,120
logger mode. And so again like with TCP

17920
10:11:13,040 --> 10:11:17,360
dump, Snort can log the packets into

17921
10:11:15,120 --> 10:11:19,040
files on a disk. And so of course this

17922
10:11:17,360 --> 10:11:21,916
is obviously useful for us if we want to

17923
10:11:19,040 --> 10:11:23,680
do offline analysis later on. And so the

17924
10:11:21,916 --> 10:11:25,200
third mode is the most advanced mode and

17925
10:11:23,680 --> 10:11:26,800
the mode that we'll focus on in this

17926
10:11:25,200 --> 10:11:28,960
course is the network intrusion

17927
10:11:26,800 --> 10:11:30,800
detection and prevention mode. And so

17928
10:11:28,960 --> 10:11:32,720
this is where Snort actively monitors

17929
10:11:30,800 --> 10:11:34,720
the network traffic against defined

17930
10:11:32,720 --> 10:11:36,880
rules and can take actions like generate

17931
10:11:34,720 --> 10:11:39,200
alerts or block or drop traffic to

17932
10:11:36,880 --> 10:11:41,360
prevent potential intrusions. And these

17933
10:11:39,200 --> 10:11:43,120
predefined rules can be ingested through

17934
10:11:41,360 --> 10:11:45,040
community rule sets or through threat

17935
10:11:43,120 --> 10:11:46,720
intelligence capabilities or developed

17936
10:11:45,040 --> 10:11:48,640
in-house with custom rules which we're

17937
10:11:46,720 --> 10:11:50,560
going to take a look at. And so rules

17938
10:11:48,640 --> 10:11:53,360
really are the main core of how Snort

17939
10:11:50,560 --> 10:11:55,360
operates. And similar to firewall rules,

17940
10:11:53,360 --> 10:11:57,276
Snort rules allow the system to inspect

17941
10:11:55,360 --> 10:12:00,800
network traffic and then make decisions

17942
10:11:57,276 --> 10:12:00,800
or take actions based on the

17943
10:12:00,916 --> 10:12:05,276
criteria. And so let's go ahead and

17944
10:12:03,200 --> 10:12:07,520
install Snort for the first time. And so

17945
10:12:05,276 --> 10:12:09,040
I've just opened up the terminal. And in

17946
10:12:07,520 --> 10:12:12,480
this case, I'm just going to run

17947
10:12:09,040 --> 10:12:13,840
pseudoapp install snort and then hit

17948
10:12:12,480 --> 10:12:15,040
enter. You might need to enter your

17949
10:12:13,840 --> 10:12:17,276
password here if you haven't done so

17950
10:12:15,040 --> 10:12:20,840
already. And when we're prompted here,

17951
10:12:17,276 --> 10:12:23,756
we can just hit capital Y and hit

17952
10:12:20,840 --> 10:12:25,200
enter. So when we're installing Snort,

17953
10:12:23,756 --> 10:12:28,160
you're going to see this configuration

17954
10:12:25,200 --> 10:12:30,080
screen pop up. And so in this case, it's

17955
10:12:28,160 --> 10:12:32,720
asking us for the address range of our

17956
10:12:30,080 --> 10:12:35,276
local network. And so this is going to

17957
10:12:32,720 --> 10:12:37,040
depend on your current VM setup. And so

17958
10:12:35,276 --> 10:12:39,276
to find out this information, I'm going

17959
10:12:37,040 --> 10:12:42,720
to press control shift and t to open up

17960
10:12:39,276 --> 10:12:44,240
a new terminal tab.

17961
10:12:42,720 --> 10:12:45,800
And in this case, I'm just going to run

17962
10:12:44,240 --> 10:12:48,240
the if config

17963
10:12:45,800 --> 10:12:49,360
command. You can also use the newer IP

17964
10:12:48,240 --> 10:12:50,960
command to figure out the same

17965
10:12:49,360 --> 10:12:53,960
information, but I guess I just have old

17966
10:12:50,960 --> 10:12:57,040
habits here. And if I look under my

17967
10:12:53,960 --> 10:12:59,596
ENP03 interface, again, yours might be

17968
10:12:57,040 --> 10:13:02,436
named differently, but I can see this

17969
10:12:59,596 --> 10:13:05,520
inet of

17970
10:13:02,436 --> 10:13:07,360
192.168.1.4 and this is my IP address.

17971
10:13:05,520 --> 10:13:12,040
Additionally, I can see the net mask

17972
10:13:07,360 --> 10:13:12,040
here or the subnet mask of 255.255.25.

17973
10:13:12,120 --> 10:13:16,880
255.0. And so this means I am on the

17974
10:13:17,560 --> 10:13:21,840
192.168.1.0/24 network. And we could

17975
10:13:20,080 --> 10:13:24,640
also run the IP command and give it the

17976
10:13:21,840 --> 10:13:26,276
A and the S argument. And in this case,

17977
10:13:24,640 --> 10:13:29,240
if we look under

17978
10:13:26,276 --> 10:13:31,756
ENTP0S3, well, we will see

17979
10:13:29,240 --> 10:13:33,680
192.168.1.4, which is my IP address, as

17980
10:13:31,756 --> 10:13:35,680
well as the slash notation or the cider

17981
10:13:33,680 --> 10:13:37,680
notation of the network that I'm on. So,

17982
10:13:35,680 --> 10:13:40,000
in this case, we can copy this, but make

17983
10:13:37,680 --> 10:13:42,480
sure if you're on a /24 that you change

17984
10:13:40,000 --> 10:13:43,916
this to a zero. And so, I'm going to

17985
10:13:42,480 --> 10:13:46,276
head back over to my screen here with

17986
10:13:43,916 --> 10:13:48,640
the configuring snort

17987
10:13:46,276 --> 10:13:51,360
window and just type in the address

17988
10:13:48,640 --> 10:13:54,320
range for my local network. And from

17989
10:13:51,360 --> 10:13:54,320
here, I can just hit

17990
10:13:59,640 --> 10:14:03,916
okay. All right, it's successfully

17991
10:14:01,916 --> 10:14:07,360
installed. So if I clear this and then

17992
10:14:03,916 --> 10:14:09,480
run snort with the tactac version, well

17993
10:14:07,360 --> 10:14:11,756
you can see I'm pulling back version

17994
10:14:09,480 --> 10:14:13,596
2.9.20. And we can also see that along

17995
10:14:11,756 --> 10:14:15,596
with the installation, it made sure we

17996
10:14:13,596 --> 10:14:18,080
had the following dependencies. So we

17997
10:14:15,596 --> 10:14:19,520
have lib pcap here. And we're actually

17998
10:14:18,080 --> 10:14:21,276
used to seeing this dependency because

17999
10:14:19,520 --> 10:14:23,360
this is the interface for user level

18000
10:14:21,276 --> 10:14:25,276
packet capture and it gives Snort the

18001
10:14:23,360 --> 10:14:26,800
capability to capture network packets

18002
10:14:25,276 --> 10:14:28,720
which of course Snort needs to inspect

18003
10:14:26,800 --> 10:14:30,320
and analyze the traffic. And we're

18004
10:14:28,720 --> 10:14:31,640
already used to this library from using

18005
10:14:30,320 --> 10:14:34,560
TCP dump and

18006
10:14:31,640 --> 10:14:36,480
wireshark. We also have PCRE here and

18007
10:14:34,560 --> 10:14:38,640
this stands for Pearl compatible regular

18008
10:14:36,480 --> 10:14:40,640
expressions. And so this library or

18009
10:14:38,640 --> 10:14:42,320
package gives us the ability to use

18010
10:14:40,640 --> 10:14:44,960
things like pattern matching and regular

18011
10:14:42,320 --> 10:14:46,800
expressions within our snort rules. And

18012
10:14:44,960 --> 10:14:48,400
lastly here we have zib and this is just

18013
10:14:46,800 --> 10:14:50,560
a compression library used for data

18014
10:14:48,400 --> 10:14:52,480
compression and decompression.

18015
10:14:50,560 --> 10:14:54,800
So before we jump into the configuration

18016
10:14:52,480 --> 10:14:56,720
files, in a typical organizational

18017
10:14:54,800 --> 10:14:58,240
deployment, well, Snort's listening

18018
10:14:56,720 --> 10:15:00,080
network interface will operate in

18019
10:14:58,240 --> 10:15:01,840
promiscuous mode. So it can effectively

18020
10:15:00,080 --> 10:15:04,080
monitor and analyze all of the network

18021
10:15:01,840 --> 10:15:05,680
traffic. Promiscuous mode is a network

18022
10:15:04,080 --> 10:15:07,436
interface configuration where the

18023
10:15:05,680 --> 10:15:08,960
network card captures all of the packets

18024
10:15:07,436 --> 10:15:11,200
on the network regardless of their

18025
10:15:08,960 --> 10:15:13,200
destination address. Right? So normally

18026
10:15:11,200 --> 10:15:14,960
a network interface card or a nick is

18027
10:15:13,200 --> 10:15:17,200
only going to process packets addressed

18028
10:15:14,960 --> 10:15:18,640
to it. If we turn on promiscuous mode,

18029
10:15:17,200 --> 10:15:20,800
well, we can actually process and

18030
10:15:18,640 --> 10:15:22,240
intercept and log all of the network

18031
10:15:20,800 --> 10:15:24,040
packets traveling through the network,

18032
10:15:22,240 --> 10:15:26,080
even if they're not destined for our IP

18033
10:15:24,040 --> 10:15:27,436
address. But we don't really need to

18034
10:15:26,080 --> 10:15:29,200
worry about this configuration at the

18035
10:15:27,436 --> 10:15:30,720
moment because for this lab exercise,

18036
10:15:29,200 --> 10:15:32,480
we're going to keep everything local to

18037
10:15:30,720 --> 10:15:35,276
simplify the setup and avoid us needing

18038
10:15:32,480 --> 10:15:37,436
to spin up multiple VMs. Okay, so I'm

18039
10:15:35,276 --> 10:15:39,276
just going to clear this out. And so the

18040
10:15:37,436 --> 10:15:41,916
main configuration files that we need to

18041
10:15:39,276 --> 10:15:44,080
know about to use and operate and well

18042
10:15:41,916 --> 10:15:46,160
configure Snort are typically found in

18043
10:15:44,080 --> 10:15:49,360
the Etsy/Snort directory after we

18044
10:15:46,160 --> 10:15:51,640
install it. So if I just CD over to that

18045
10:15:49,360 --> 10:15:55,520
directory, it's under Etsy and then

18046
10:15:51,640 --> 10:15:57,436
Snort. And if I run an ls with an al,

18047
10:15:55,520 --> 10:15:58,756
well, we can see a number of files and a

18048
10:15:57,436 --> 10:16:02,240
directory here for

18049
10:15:58,756 --> 10:16:04,080
rules. And so this snort.com file, this

18050
10:16:02,240 --> 10:16:05,840
is the primary configuration file for

18051
10:16:04,080 --> 10:16:07,520
Snort. and it's going to define all of

18052
10:16:05,840 --> 10:16:10,160
our main settings and components and

18053
10:16:07,520 --> 10:16:12,800
variables for Snort's operation. And we

18054
10:16:10,160 --> 10:16:14,480
also have this rules directory here. And

18055
10:16:12,800 --> 10:16:16,320
so this directory contains all of the

18056
10:16:14,480 --> 10:16:18,240
predefined rule files that Snort is

18057
10:16:16,320 --> 10:16:21,040
going to use to detect specific patterns

18058
10:16:18,240 --> 10:16:23,200
of malicious activity. So if I run ls

18059
10:16:21,040 --> 10:16:25,916
with attack a under the rules directory

18060
10:16:23,200 --> 10:16:28,040
here, well, we can see a large list of

18061
10:16:25,916 --> 10:16:30,480
default rules that come shipped with

18062
10:16:28,040 --> 10:16:31,400
Snort. For example, if I just cat out

18063
10:16:30,480 --> 10:16:33,360
one of these

18064
10:16:31,400 --> 10:16:36,560
files, for example, I'll pick the

18065
10:16:33,360 --> 10:16:36,560
backdoor.ules rules

18066
10:16:37,000 --> 10:16:41,200
file. Well, we can see a number of rules

18067
10:16:39,596 --> 10:16:42,720
that have been defined. And this might

18068
10:16:41,200 --> 10:16:44,320
look like gibberish at the moment, but

18069
10:16:42,720 --> 10:16:45,680
we will go through the structure of a

18070
10:16:44,320 --> 10:16:48,720
rule. And we're going to look into

18071
10:16:45,680 --> 10:16:50,640
writing our own rules as well. And so

18072
10:16:48,720 --> 10:16:52,640
before we do anything, it's going to be

18073
10:16:50,640 --> 10:16:54,480
best practice for us to make a copy of

18074
10:16:52,640 --> 10:16:56,000
the configuration file in case we make

18075
10:16:54,480 --> 10:16:57,596
any mistakes or if we want to revert

18076
10:16:56,000 --> 10:17:00,080
back to the default configuration in

18077
10:16:57,596 --> 10:17:02,480
case we run into issues.

18078
10:17:00,080 --> 10:17:05,360
And so if you remember snort.com is the

18079
10:17:02,480 --> 10:17:07,436
main configuration file. We can also see

18080
10:17:05,360 --> 10:17:09,360
that only root can read and write to it

18081
10:17:07,436 --> 10:17:10,436
and only members in the snort group can

18082
10:17:09,360 --> 10:17:13,120
read this

18083
10:17:10,436 --> 10:17:15,040
file. And so if we want to make a copy,

18084
10:17:13,120 --> 10:17:16,756
we're going to need to run pseudo. And

18085
10:17:15,040 --> 10:17:19,200
then I'm just going to provide the copy

18086
10:17:16,756 --> 10:17:21,756
command. In this case, I'm going to copy

18087
10:17:19,200 --> 10:17:23,240
the snort.com file and I'm just going to

18088
10:17:21,756 --> 10:17:25,840
name it

18089
10:17:23,240 --> 10:17:29,800
snort.com.back or bak, which is a common

18090
10:17:25,840 --> 10:17:29,800
syntax for backup files.

18091
10:17:30,000 --> 10:17:33,640
So you can see here we have this

18092
10:17:31,520 --> 10:17:35,840
configuration backup file

18093
10:17:33,640 --> 10:17:37,200
now. So now let's open up the

18094
10:17:35,840 --> 10:17:39,360
configuration file and take a look

18095
10:17:37,200 --> 10:17:43,000
around. And to do this I'm going to run

18096
10:17:39,360 --> 10:17:45,200
pseudo and then nano

18097
10:17:43,000 --> 10:17:47,360
snort.com. And we're now taking a look

18098
10:17:45,200 --> 10:17:48,720
at the configuration file. And if we

18099
10:17:47,360 --> 10:17:50,000
scroll down we can see all of the

18100
10:17:48,720 --> 10:17:52,080
different things that we can set and

18101
10:17:50,000 --> 10:17:54,000
configure within this file. So we can

18102
10:17:52,080 --> 10:17:55,840
set things like the network variables or

18103
10:17:54,000 --> 10:17:57,840
the decoder information or base

18104
10:17:55,840 --> 10:18:00,640
detection engines or pre-processors or

18105
10:17:57,840 --> 10:18:02,240
output plugins. Under seven here we can

18106
10:18:00,640 --> 10:18:03,560
customize our rule set which we're going

18107
10:18:02,240 --> 10:18:05,840
to do in a

18108
10:18:03,560 --> 10:18:07,916
second. First here I'm going to scroll

18109
10:18:05,840 --> 10:18:09,400
down to set the network variable section

18110
10:18:07,916 --> 10:18:11,756
or step one

18111
10:18:09,400 --> 10:18:13,680
here. And so this is where we can

18112
10:18:11,756 --> 10:18:15,596
specify the subnet that Snort is going

18113
10:18:13,680 --> 10:18:17,276
to monitor. And if you remember we

18114
10:18:15,596 --> 10:18:19,120
actually did this and we configured our

18115
10:18:17,276 --> 10:18:21,756
home network while we were installing

18116
10:18:19,120 --> 10:18:23,916
Snort. So in my case that /24 network

18117
10:18:21,756 --> 10:18:26,400
that I provided is set to the home net

18118
10:18:23,916 --> 10:18:28,000
variable. And this any statement here

18119
10:18:26,400 --> 10:18:29,680
means that the variable will include all

18120
10:18:28,000 --> 10:18:31,596
of the IP addresses in the network

18121
10:18:29,680 --> 10:18:34,080
range. And so we could just leave this

18122
10:18:31,596 --> 10:18:36,960
as is. But if we wanted to change this

18123
10:18:34,080 --> 10:18:40,400
value or hardcode it, well I can just

18124
10:18:36,960 --> 10:18:40,400
delete the variable here and put

18125
10:18:41,800 --> 10:18:46,800
192.168.1.0/24. Similarly, we have the

18126
10:18:43,916 --> 10:18:48,240
external net variable as well. And as

18127
10:18:46,800 --> 10:18:50,560
the comment says here, we can just leave

18128
10:18:48,240 --> 10:18:52,560
this as any. And the reason being is

18129
10:18:50,560 --> 10:18:54,720
that we ideally don't want to confine

18130
10:18:52,560 --> 10:18:56,880
the external or internetf facing network

18131
10:18:54,720 --> 10:18:58,400
space to a particular subnet as of

18132
10:18:56,880 --> 10:18:59,916
course attacks can come from anywhere.

18133
10:18:58,400 --> 10:19:01,680
And so we don't want to tell Snort to

18134
10:18:59,916 --> 10:19:02,916
only consider a specific network range

18135
10:19:01,680 --> 10:19:04,880
as

18136
10:19:02,916 --> 10:19:06,640
external. And we could leave all of

18137
10:19:04,880 --> 10:19:08,240
these remaining variables just as they

18138
10:19:06,640 --> 10:19:10,480
are. But essentially, if we wanted to,

18139
10:19:08,240 --> 10:19:12,320
we could list specific hosts or IPs that

18140
10:19:10,480 --> 10:19:14,240
relate to critical or important servers

18141
10:19:12,320 --> 10:19:16,560
or resources on the network, right? like

18142
10:19:14,240 --> 10:19:17,880
HTTP or web servers or email servers or

18143
10:19:16,560 --> 10:19:20,800
DNS

18144
10:19:17,880 --> 10:19:22,960
servers. And at the bottom here, we can

18145
10:19:20,800 --> 10:19:25,160
see this rule path variable which

18146
10:19:22,960 --> 10:19:27,120
currently points to

18147
10:19:25,160 --> 10:19:28,480
etsy/snort/rules. And this was the rules

18148
10:19:27,120 --> 10:19:29,916
folder that we were quickly taking a

18149
10:19:28,480 --> 10:19:31,680
look at. And so we can just leave this

18150
10:19:29,916 --> 10:19:34,480
as is because this is where we're going

18151
10:19:31,680 --> 10:19:36,080
to place all of our custom rules. And so

18152
10:19:34,480 --> 10:19:38,120
I'm going to scroll all the way down now

18153
10:19:36,080 --> 10:19:41,200
to section

18154
10:19:38,120 --> 10:19:44,320
7. And in section 7, this is where we

18155
10:19:41,200 --> 10:19:46,320
can customize our rule set.

18156
10:19:44,320 --> 10:19:48,320
And this first specification here, you

18157
10:19:46,320 --> 10:19:51,680
can see we're including our rule path

18158
10:19:48,320 --> 10:19:53,840
and then the local rrules file. And so

18159
10:19:51,680 --> 10:19:56,480
this is a specific file name to contain

18160
10:19:53,840 --> 10:19:58,640
and write all of our custom rules in.

18161
10:19:56,480 --> 10:20:00,880
And as we scroll down, we can see a

18162
10:19:58,640 --> 10:20:02,640
number of rules in white here that have

18163
10:20:00,880 --> 10:20:05,120
not been commented out. And so these are

18164
10:20:02,640 --> 10:20:06,960
active rules. And anything in blue here

18165
10:20:05,120 --> 10:20:08,800
or with the pound sign at the beginning

18166
10:20:06,960 --> 10:20:10,800
of the line, well, these rules have been

18167
10:20:08,800 --> 10:20:12,160
commented out or deactivated. And so

18168
10:20:10,800 --> 10:20:13,680
Snort is not going to look at any of

18169
10:20:12,160 --> 10:20:16,480
these rules, but it will parse through

18170
10:20:13,680 --> 10:20:18,160
and look at these rules. And so because

18171
10:20:16,480 --> 10:20:20,080
we want to start writing custom rules

18172
10:20:18,160 --> 10:20:21,520
and learn how we can write custom rules,

18173
10:20:20,080 --> 10:20:23,040
well, we don't want these default ones

18174
10:20:21,520 --> 10:20:24,400
getting in the way. And so let's go

18175
10:20:23,040 --> 10:20:27,756
ahead and comment out all of these

18176
10:20:24,400 --> 10:20:29,916
default rules. So to do this, let's find

18177
10:20:27,756 --> 10:20:31,560
the first line of a custom rule. In this

18178
10:20:29,916 --> 10:20:33,840
case, it's this

18179
10:20:31,560 --> 10:20:35,596
attack-responses.ruules file. And I'm

18180
10:20:33,840 --> 10:20:38,240
just going to hold the shift key and

18181
10:20:35,596 --> 10:20:40,640
then arrow down to start highlighting

18182
10:20:38,240 --> 10:20:42,400
all of these lines.

18183
10:20:40,640 --> 10:20:44,240
And while still holding shift and the

18184
10:20:42,400 --> 10:20:46,720
down arrow key, I'm going to go all the

18185
10:20:44,240 --> 10:20:46,720
way to the

18186
10:20:50,840 --> 10:20:54,800
bottom. Then with all of these lines

18187
10:20:53,120 --> 10:20:56,480
selected, I'm going to let go of the

18188
10:20:54,800 --> 10:20:58,560
shift key and then I'm going to press

18189
10:20:56,480 --> 10:21:01,436
the escape key and the number three at

18190
10:20:58,560 --> 10:21:03,480
the same time to add a pound sign or the

18191
10:21:01,436 --> 10:21:05,680
comment symbol to the beginning of each

18192
10:21:03,480 --> 10:21:08,960
line. And in this case, you can see that

18193
10:21:05,680 --> 10:21:10,640
we've commented out all of these rules.

18194
10:21:08,960 --> 10:21:13,436
And so now all we need to do is just

18195
10:21:10,640 --> 10:21:15,120
press controll and x to escape. And then

18196
10:21:13,436 --> 10:21:17,520
when we're prompted to save the modified

18197
10:21:15,120 --> 10:21:19,240
buffer, we're just going to hit yes or

18198
10:21:17,520 --> 10:21:21,680
the y

18199
10:21:19,240 --> 10:21:23,840
key. And so now we can test our

18200
10:21:21,680 --> 10:21:25,756
configuration changes. And as always,

18201
10:21:23,840 --> 10:21:27,596
it's best practice that if we make any

18202
10:21:25,756 --> 10:21:29,200
changes to a configuration file, well,

18203
10:21:27,596 --> 10:21:31,436
we should test the changes to check if

18204
10:21:29,200 --> 10:21:33,520
we've broken anything. And so to test

18205
10:21:31,436 --> 10:21:37,040
our configuration file, we can just run

18206
10:21:33,520 --> 10:21:40,080
pseudo snort with the capital T option

18207
10:21:37,040 --> 10:21:41,520
to test and then the C argument to

18208
10:21:40,080 --> 10:21:44,080
specify the location of our

18209
10:21:41,520 --> 10:21:47,960
configuration file. In this case, it's

18210
10:21:44,080 --> 10:21:50,480
under Etsy snort

18211
10:21:47,960 --> 10:21:52,640
snort.com. And if we run this, we should

18212
10:21:50,480 --> 10:21:54,560
get the test output. And we can see here

18213
10:21:52,640 --> 10:21:56,960
that Snort successfully validated the

18214
10:21:54,560 --> 10:21:58,800
configuration and there were no issues.

18215
10:21:56,960 --> 10:22:01,400
If I scroll up here, we should be able

18216
10:21:58,800 --> 10:22:03,276
to find the amount of rules that were

18217
10:22:01,400 --> 10:22:05,040
detected. And you can see under

18218
10:22:03,276 --> 10:22:07,520
initializing rule chains, well,

18219
10:22:05,040 --> 10:22:09,040
currently we have zero snort rules read.

18220
10:22:07,520 --> 10:22:10,596
This is because we commented out all of

18221
10:22:09,040 --> 10:22:12,640
those rules, which is

18222
10:22:10,596 --> 10:22:14,800
perfect. All right, so now that we're

18223
10:22:12,640 --> 10:22:16,720
all set up here, let's take a very quick

18224
10:22:14,800 --> 10:22:18,560
look at the three main modes that Snore

18225
10:22:16,720 --> 10:22:20,720
offers. And if you recall those modes

18226
10:22:18,560 --> 10:22:23,276
are the sniffer mode, so much like TCP

18227
10:22:20,720 --> 10:22:25,596
dump or the packet logger mode where we

18228
10:22:23,276 --> 10:22:27,596
can actually save packets to a file and

18229
10:22:25,596 --> 10:22:29,400
also the IDS IPS mode which we're going

18230
10:22:27,596 --> 10:22:32,000
to focus on in the later

18231
10:22:29,400 --> 10:22:34,000
lessons. And so to run snort in the

18232
10:22:32,000 --> 10:22:36,160
sniffer mode, we just need to run pseudo

18233
10:22:34,000 --> 10:22:38,080
snort and then just simply provide the

18234
10:22:36,160 --> 10:22:42,520
name of the interface much like TCP

18235
10:22:38,080 --> 10:22:44,960
dump. In this case, ENP03 for

18236
10:22:42,520 --> 10:22:46,960
myself. And now that it's running, well,

18237
10:22:44,960 --> 10:22:48,400
we can make some network requests. So,

18238
10:22:46,960 --> 10:22:50,200
in another tab here, I'm just going to

18239
10:22:48,400 --> 10:22:52,480
curl

18240
10:22:50,200 --> 10:22:54,000
google.com. And if I hop back over,

18241
10:22:52,480 --> 10:22:55,840
well, we can see all of the packets that

18242
10:22:54,000 --> 10:22:58,400
were logged. And we can see basically

18243
10:22:55,840 --> 10:23:00,240
the packet header here. And so, I'll

18244
10:22:58,400 --> 10:23:02,320
just cancel out of that. And so, to

18245
10:23:00,240 --> 10:23:03,756
cancel out of this, I press C. And you

18246
10:23:02,320 --> 10:23:05,120
might run into this bug where it just

18247
10:23:03,756 --> 10:23:08,080
seems to be hanging after you tried to

18248
10:23:05,120 --> 10:23:09,436
cancel it. In this case, I'm going to

18249
10:23:08,080 --> 10:23:11,120
send over some more packets to

18250
10:23:09,436 --> 10:23:13,200
google.com basically by curling the

18251
10:23:11,120 --> 10:23:14,480
google.com URL again. And for some

18252
10:23:13,200 --> 10:23:16,880
reason, doing that seems to stop

18253
10:23:14,480 --> 10:23:18,560
whatever is hanging.

18254
10:23:16,880 --> 10:23:20,400
And so this time I'm going to run snort

18255
10:23:18,560 --> 10:23:22,160
again in packet sniffer mode. And in

18256
10:23:20,400 --> 10:23:24,480
this case I'm going to provide the tac e

18257
10:23:22,160 --> 10:23:27,276
argument to allow us to see the protocol

18258
10:23:24,480 --> 10:23:29,840
headers like the IP or the TCP headers.

18259
10:23:27,276 --> 10:23:32,400
And so if I run this again, I'm going to

18260
10:23:29,840 --> 10:23:34,000
curl google.com once again and hop back

18261
10:23:32,400 --> 10:23:35,960
over. Well, we can start to see things

18262
10:23:34,000 --> 10:23:38,360
like the TCP header with the time to

18263
10:23:35,960 --> 10:23:40,480
live, the type of

18264
10:23:38,360 --> 10:23:41,756
service, even things like the sequence

18265
10:23:40,480 --> 10:23:44,560
number and acknowledgement number and

18266
10:23:41,756 --> 10:23:45,840
the window size.

18267
10:23:44,560 --> 10:23:47,916
So, I'm going to cancel this out once

18268
10:23:45,840 --> 10:23:49,436
again. And of course, it's hanging. I'm

18269
10:23:47,916 --> 10:23:50,560
going to curl google.com, send some more

18270
10:23:49,436 --> 10:23:52,960
packets over, and apparently

18271
10:23:50,560 --> 10:23:55,040
everything's fine. The last mode here

18272
10:23:52,960 --> 10:23:57,040
I'll show you is TACD. And much like

18273
10:23:55,040 --> 10:24:00,960
with TCB dump, this is going to allow us

18274
10:23:57,040 --> 10:24:00,960
to get the payload output in hex and

18275
10:24:01,240 --> 10:24:07,040
ASI. And this time, I'll curl

18276
10:24:03,276 --> 10:24:07,040
example.com with the HTTP

18277
10:24:08,680 --> 10:24:12,560
protocol. And if we scroll up, we can

18278
10:24:10,800 --> 10:24:14,400
see the actual packet. In this case, we

18279
10:24:12,560 --> 10:24:16,880
have the response or the HTML response

18280
10:24:14,400 --> 10:24:18,560
from the example.com website. If we

18281
10:24:16,880 --> 10:24:20,000
scroll up to the first response packet,

18282
10:24:18,560 --> 10:24:21,480
well, we can even see things like the

18283
10:24:20,000 --> 10:24:23,680
HTTP

18284
10:24:21,480 --> 10:24:25,360
headers. And for example, here is our

18285
10:24:23,680 --> 10:24:29,680
actual request, our get request that we

18286
10:24:25,360 --> 10:24:29,680
made with the curl utility as a user

18287
10:24:31,720 --> 10:24:36,960
agent. All right. So that was much like

18288
10:24:34,880 --> 10:24:39,360
when we passed the capital X argument to

18289
10:24:36,960 --> 10:24:41,360
TCP dump. And in fact, we can actually

18290
10:24:39,360 --> 10:24:42,960
provide this capital X argument to Snort

18291
10:24:41,360 --> 10:24:44,640
itself. And this will dump the full

18292
10:24:42,960 --> 10:24:46,916
packet details including the hex and

18293
10:24:44,640 --> 10:24:49,360
ASI. So it's pretty much the same

18294
10:24:46,916 --> 10:24:51,436
command. And so let's quickly cover the

18295
10:24:49,360 --> 10:24:53,120
packet logger mode with Snort as well.

18296
10:24:51,436 --> 10:24:55,520
And so once again, this is quite similar

18297
10:24:53,120 --> 10:24:57,436
to TCP dump where we can capture packets

18298
10:24:55,520 --> 10:24:59,400
using Snort and then output them to a

18299
10:24:57,436 --> 10:25:01,680
file for later offline

18300
10:24:59,400 --> 10:25:03,276
analysis. And so to use the packet

18301
10:25:01,680 --> 10:25:05,436
logger mode, well, I'm just going to run

18302
10:25:03,276 --> 10:25:07,120
the same command but provide the TAC L

18303
10:25:05,436 --> 10:25:08,800
argument.

18304
10:25:07,120 --> 10:25:12,160
And the default output folder here is

18305
10:25:08,800 --> 10:25:13,596
going to be under var log snort. But we

18306
10:25:12,160 --> 10:25:15,436
can also configure the default output

18307
10:25:13,596 --> 10:25:17,360
directory in the snort.config file as

18308
10:25:15,436 --> 10:25:20,000
well. Or in this case, we can specify a

18309
10:25:17,360 --> 10:25:21,360
location within the command line itself.

18310
10:25:20,000 --> 10:25:23,276
And in this case, I'm just going to hop

18311
10:25:21,360 --> 10:25:25,916
over to the home directory and make a

18312
10:25:23,276 --> 10:25:28,840
sample directory here called logs. And

18313
10:25:25,916 --> 10:25:30,800
I'll just hop inside that

18314
10:25:28,840 --> 10:25:32,960
directory. And this time I'm going to

18315
10:25:30,800 --> 10:25:34,800
provide the tac l argument to snort and

18316
10:25:32,960 --> 10:25:37,120
just provide a period to specify the

18317
10:25:34,800 --> 10:25:39,520
current working directory.

18318
10:25:37,120 --> 10:25:41,960
And so now that we're sniffing, I'm

18319
10:25:39,520 --> 10:25:44,080
going to make another curl

18320
10:25:41,960 --> 10:25:45,596
request. And in this case, we can't

18321
10:25:44,080 --> 10:25:46,880
actually see the packets logged to the

18322
10:25:45,596 --> 10:25:48,720
console because they're being logged to

18323
10:25:46,880 --> 10:25:50,320
this file. And so I'm going to cancel

18324
10:25:48,720 --> 10:25:52,880
out now. And again, I'm going to have to

18325
10:25:50,320 --> 10:25:54,960
curl so we can quit properly. And then

18326
10:25:52,880 --> 10:25:57,756
if I run an ls, well, we can see this

18327
10:25:54,960 --> 10:25:59,240
snort log here with the Unix timestamp

18328
10:25:57,756 --> 10:26:01,520
as part of the file

18329
10:25:59,240 --> 10:26:03,436
name. And since we run snort with

18330
10:26:01,520 --> 10:26:04,756
pseudo, well, this log file is also

18331
10:26:03,436 --> 10:26:07,120
going to be owned by

18332
10:26:04,756 --> 10:26:09,520
root. And so we can read in this file

18333
10:26:07,120 --> 10:26:11,840
using snort just by running pseudo snort

18334
10:26:09,520 --> 10:26:14,040
with the tac r flag. And in this case I

18335
10:26:11,840 --> 10:26:16,320
will just provide the name of the log

18336
10:26:14,040 --> 10:26:18,240
file. And if we scroll up we can start

18337
10:26:16,320 --> 10:26:19,916
to see some of these packets. And there

18338
10:26:18,240 --> 10:26:21,880
is also going to be a number of details

18339
10:26:19,916 --> 10:26:25,520
at the bottom

18340
10:26:21,880 --> 10:26:29,436
here. Similarly we can also run pseudo

18341
10:26:25,520 --> 10:26:31,520
tcp dump with the same tac r flag and

18342
10:26:29,436 --> 10:26:32,640
provide the same log file. And so you

18343
10:26:31,520 --> 10:26:34,240
can see here that we can open up

18344
10:26:32,640 --> 10:26:36,840
everything that we captured in Snort

18345
10:26:34,240 --> 10:26:39,120
well into something like TCP dump or

18346
10:26:36,840 --> 10:26:41,200
WireArk. And so this was a great start

18347
10:26:39,120 --> 10:26:43,040
into the introduction and installation

18348
10:26:41,200 --> 10:26:45,040
configuration and overview of the basic

18349
10:26:43,040 --> 10:26:46,320
Snort features. And so in the next

18350
10:26:45,040 --> 10:26:48,720
lesson, we're going to spend all our

18351
10:26:46,320 --> 10:26:50,720
time with the IDS and IPS features and

18352
10:26:48,720 --> 10:26:53,916
understanding and building out rules and

18353
10:26:50,720 --> 10:26:55,916
catching some real attacks.

18354
10:26:53,916 --> 10:26:57,916
In this lesson and the remaining Snort

18355
10:26:55,916 --> 10:27:00,800
lessons, we're going to focus on its

18356
10:26:57,916 --> 10:27:02,160
bread and butter, the IDS and IPS mode.

18357
10:27:00,800 --> 10:27:04,800
And so with this mode, we're going to

18358
10:27:02,160 --> 10:27:07,200
leverage predefined rules to process an

18359
10:27:04,800 --> 10:27:09,436
action network traffic. And so to be

18360
10:27:07,200 --> 10:27:11,040
able to write effective Snort rules, we

18361
10:27:09,436 --> 10:27:13,200
first need to understand the generic

18362
10:27:11,040 --> 10:27:14,800
rule syntax and its components. And

18363
10:27:13,200 --> 10:27:17,680
fortunately, the structure in Snort

18364
10:27:14,800 --> 10:27:17,680
version 2 is pretty

18365
10:27:17,720 --> 10:27:22,880
straightforward. And so here's an

18366
10:27:19,596 --> 10:27:25,360
example of a Snort rule. And snore rules

18367
10:27:22,880 --> 10:27:27,596
are divided into two logical sections.

18368
10:27:25,360 --> 10:27:29,560
On the left here we have the rule header

18369
10:27:27,596 --> 10:27:32,000
and on the right we have the rule

18370
10:27:29,560 --> 10:27:33,840
options. And so all of the text up to

18371
10:27:32,000 --> 10:27:36,160
the first parenthesis there is the rule

18372
10:27:33,840 --> 10:27:37,960
header. And the section enclosed within

18373
10:27:36,160 --> 10:27:40,160
parenthesis is the rule

18374
10:27:37,960 --> 10:27:42,080
options. And the rule header contains

18375
10:27:40,160 --> 10:27:44,640
things like the rules action, the

18376
10:27:42,080 --> 10:27:47,680
protocol, the source and destination IP

18377
10:27:44,640 --> 10:27:49,756
addresses and ports as well. And the

18378
10:27:47,680 --> 10:27:51,520
rule option section contains things like

18379
10:27:49,756 --> 10:27:54,160
the alert message. So what's going to be

18380
10:27:51,520 --> 10:27:55,436
logged when this alert is fired and also

18381
10:27:54,160 --> 10:27:56,880
which parts of the packet should be

18382
10:27:55,436 --> 10:27:59,436
inspected to determine if the rule

18383
10:27:56,880 --> 10:28:01,120
action should take place. And we can get

18384
10:27:59,436 --> 10:28:03,276
pretty granular here with the details or

18385
10:28:01,120 --> 10:28:05,276
conditions that trigger the rule. We can

18386
10:28:03,276 --> 10:28:07,360
do things like content matching or look

18387
10:28:05,276 --> 10:28:10,000
at the packet size or specific flags

18388
10:28:07,360 --> 10:28:11,596
within the protocol headers. And so to

18389
10:28:10,000 --> 10:28:14,000
break down the components of this rule

18390
10:28:11,596 --> 10:28:16,160
here, you can see we first have the word

18391
10:28:14,000 --> 10:28:18,240
alert. And this is what is known as the

18392
10:28:16,160 --> 10:28:20,200
rule action. And so this specifies the

18393
10:28:18,240 --> 10:28:22,640
action to be taken when the rule is

18394
10:28:20,200 --> 10:28:24,960
matched. In this case, alert means that

18395
10:28:22,640 --> 10:28:26,640
well, an alert is going to be generated.

18396
10:28:24,960 --> 10:28:29,000
But we also have different actions,

18397
10:28:26,640 --> 10:28:31,120
right? We have log where we just log the

18398
10:28:29,000 --> 10:28:33,120
traffic. And if we're running sore in

18399
10:28:31,120 --> 10:28:35,436
that IPS mode, well, we can drop the

18400
10:28:33,120 --> 10:28:37,276
packet which will block the packet from

18401
10:28:35,436 --> 10:28:39,840
reaching its destination as well as log

18402
10:28:37,276 --> 10:28:41,756
the traffic as well. And with reject, we

18403
10:28:39,840 --> 10:28:42,960
can also terminate the packet session as

18404
10:28:41,756 --> 10:28:45,680
well.

18405
10:28:42,960 --> 10:28:47,360
So next we have the specific protocol

18406
10:28:45,680 --> 10:28:49,596
and this obviously specifies the

18407
10:28:47,360 --> 10:28:51,520
protocol that the rule applies to and in

18408
10:28:49,596 --> 10:28:53,160
this case it's ICMP since we want to

18409
10:28:51,520 --> 10:28:56,480
detect pings in this

18410
10:28:53,160 --> 10:28:58,960
example. But we also have other options.

18411
10:28:56,480 --> 10:29:02,640
So we can look at the IP protocol or TCP

18412
10:28:58,960 --> 10:29:04,960
or UDP as well. Under the source IP we

18413
10:29:02,640 --> 10:29:08,000
have any any and this basically means

18414
10:29:04,960 --> 10:29:10,080
any IP address and any port. And so this

18415
10:29:08,000 --> 10:29:12,640
rule is going to apply from any packets

18416
10:29:10,080 --> 10:29:14,560
from any source IP address or any port.

18417
10:29:12,640 --> 10:29:16,240
And since we're looking at ICMP traffic

18418
10:29:14,560 --> 10:29:18,436
here, well obviously port numbers are

18419
10:29:16,240 --> 10:29:20,960
not relevant. So that's why we just say

18420
10:29:18,436 --> 10:29:23,120
any. In this case, we have the direction

18421
10:29:20,960 --> 10:29:24,560
of travel. And so this indicates the

18422
10:29:23,120 --> 10:29:26,160
actual direction of the packet's

18423
10:29:24,560 --> 10:29:28,480
traffic. So in this case, it's

18424
10:29:26,160 --> 10:29:29,916
specifying from source to destination

18425
10:29:28,480 --> 10:29:30,756
because we have this arrow pointing to

18426
10:29:29,916 --> 10:29:33,200
the

18427
10:29:30,756 --> 10:29:34,800
right. And so we have two options for

18428
10:29:33,200 --> 10:29:38,200
the direction here. we have from source

18429
10:29:34,800 --> 10:29:40,640
to destination or this birectional data

18430
10:29:38,200 --> 10:29:42,240
flow and obviously on the other side of

18431
10:29:40,640 --> 10:29:46,040
this arrow here we have the destination

18432
10:29:42,240 --> 10:29:48,640
IP address so 8.8.8.8 8 as well as the

18433
10:29:46,040 --> 10:29:50,800
port. Now when we start looking into the

18434
10:29:48,640 --> 10:29:52,720
rule options, we have things like

18435
10:29:50,800 --> 10:29:54,080
message here and in this case this

18436
10:29:52,720 --> 10:29:56,000
provides the message that will be

18437
10:29:54,080 --> 10:29:57,360
included within the alert. And so in

18438
10:29:56,000 --> 10:30:00,080
this case, we can put in a description

18439
10:29:57,360 --> 10:30:02,960
of what the rule is detecting. We have

18440
10:30:00,080 --> 10:30:05,040
an SID here and this is the snort ID and

18441
10:30:02,960 --> 10:30:06,560
it's a unique identifier for the rule.

18442
10:30:05,040 --> 10:30:08,360
And this is helpful for managing and

18443
10:30:06,560 --> 10:30:10,880
referencing rules within the snort

18444
10:30:08,360 --> 10:30:12,720
configuration. And so as best practice,

18445
10:30:10,880 --> 10:30:14,960
we want to start our custom rules after

18446
10:30:12,720 --> 10:30:17,040
the number 1 million. This is because

18447
10:30:14,960 --> 10:30:18,800
that any SID lower than this is

18448
10:30:17,040 --> 10:30:21,120
typically reserved for rules that are

18449
10:30:18,800 --> 10:30:23,120
shipped by default with Snort. And as a

18450
10:30:21,120 --> 10:30:25,756
general rule, SID should not overlap and

18451
10:30:23,120 --> 10:30:27,360
should be unique for each rule. And

18452
10:30:25,756 --> 10:30:29,520
lastly here, in the case of this rule,

18453
10:30:27,360 --> 10:30:31,276
we have Rev 1, and this is the revision

18454
10:30:29,520 --> 10:30:33,840
number. And this can be used to track

18455
10:30:31,276 --> 10:30:35,360
changes to the rule over time, right? So

18456
10:30:33,840 --> 10:30:37,120
if we make a change to this rule, for

18457
10:30:35,360 --> 10:30:38,400
example, change the IP address here,

18458
10:30:37,120 --> 10:30:40,320
well, we might want to increment the

18459
10:30:38,400 --> 10:30:42,320
revision number as two so we can track

18460
10:30:40,320 --> 10:30:45,276
changes accordingly. So we have more of

18461
10:30:42,320 --> 10:30:47,276
a version control over our rule. And so

18462
10:30:45,276 --> 10:30:50,080
to summarize, this rule is going to

18463
10:30:47,276 --> 10:30:53,880
generate an alert for any MP traffic

18464
10:30:50,080 --> 10:30:56,000
from any source to the IP address of

18465
10:30:53,880 --> 10:30:57,200
8.8.8.8. And I think once we start to

18466
10:30:56,000 --> 10:30:58,960
break down the different components

18467
10:30:57,200 --> 10:31:01,840
here, this rule becomes a lot more easy

18468
10:30:58,960 --> 10:31:03,520
to digest.

18469
10:31:01,840 --> 10:31:05,520
So now that we've defined our first

18470
10:31:03,520 --> 10:31:08,160
rule, let's go ahead and add it to our

18471
10:31:05,520 --> 10:31:10,000
rule configuration and test it out. And

18472
10:31:08,160 --> 10:31:12,080
so to do this, let's head over to our

18473
10:31:10,000 --> 10:31:13,596
local.rules file. If you remember, this

18474
10:31:12,080 --> 10:31:15,436
is the default file within our Snort

18475
10:31:13,596 --> 10:31:18,160
configuration that we can use to place

18476
10:31:15,436 --> 10:31:20,560
our rules in. And so to alter this file,

18477
10:31:18,160 --> 10:31:22,160
I'm going to run pseudo nano and then

18478
10:31:20,560 --> 10:31:24,240
within the snort directory, I'm going to

18479
10:31:22,160 --> 10:31:26,120
go under the rules folder and then into

18480
10:31:24,240 --> 10:31:28,480
that local rules

18481
10:31:26,120 --> 10:31:30,560
file. And you can see in this case this

18482
10:31:28,480 --> 10:31:32,400
file is intentionally blank and does not

18483
10:31:30,560 --> 10:31:35,120
come with any signatures. And we can put

18484
10:31:32,400 --> 10:31:36,640
our local additions within this file.

18485
10:31:35,120 --> 10:31:38,240
And so let's go ahead and put the rule

18486
10:31:36,640 --> 10:31:40,880
that we just covered on this first line

18487
10:31:38,240 --> 10:31:43,520
here. And so to follow along here, the

18488
10:31:40,880 --> 10:31:46,240
action is going to be alert. The

18489
10:31:43,520 --> 10:31:48,480
protocol is going to be ICMP. For the

18490
10:31:46,240 --> 10:31:51,040
source IP address, we'll have any and

18491
10:31:48,480 --> 10:31:53,276
port as well since it's ICMP traffic.

18492
10:31:51,040 --> 10:31:55,596
For the direction, I'm going to use the

18493
10:31:53,276 --> 10:31:58,120
dash and then the right arrow sign to

18494
10:31:55,596 --> 10:32:00,400
specify it's going from source to

18495
10:31:58,120 --> 10:32:02,040
destination. For the destination IP

18496
10:32:00,400 --> 10:32:04,756
address, we'll just use

18497
10:32:02,040 --> 10:32:07,680
8.8.8.8, which is one of Google's DNS

18498
10:32:04,756 --> 10:32:10,520
servers. For the port, of course, any as

18499
10:32:07,680 --> 10:32:12,800
well. And now we get into the rule

18500
10:32:10,520 --> 10:32:14,800
options. And so I'm going to put the

18501
10:32:12,800 --> 10:32:17,596
parenthesis here and put the rule

18502
10:32:14,800 --> 10:32:19,840
options inside this parenthesis. And in

18503
10:32:17,596 --> 10:32:21,276
this case, we have that key value pair.

18504
10:32:19,840 --> 10:32:22,720
And so for the key here, I'm going to

18505
10:32:21,276 --> 10:32:25,040
have the message component or the

18506
10:32:22,720 --> 10:32:27,680
message object and make sure to put a

18507
10:32:25,040 --> 10:32:30,400
colon after each name. And I'm going to

18508
10:32:27,680 --> 10:32:32,320
wrap the value here in quotes. And so

18509
10:32:30,400 --> 10:32:35,400
for each option that we include, we have

18510
10:32:32,320 --> 10:32:37,840
to finish it or end it off with a

18511
10:32:35,400 --> 10:32:40,400
semicolon. So for the next option here,

18512
10:32:37,840 --> 10:32:42,000
I'm going to specify the snort ID or the

18513
10:32:40,400 --> 10:32:43,756
SID.

18514
10:32:42,000 --> 10:32:45,276
And in this case, because it's not a

18515
10:32:43,756 --> 10:32:47,756
string, we don't have to wrap it in

18516
10:32:45,276 --> 10:32:51,200
these quotes here. Because for the SID,

18517
10:32:47,756 --> 10:32:52,360
I'm just going to put 1 million1. And

18518
10:32:51,200 --> 10:32:54,640
make sure to close that with a

18519
10:32:52,360 --> 10:32:57,756
semicolon. And lastly here, I'll include

18520
10:32:54,640 --> 10:32:59,596
the revision number with rev for rev.

18521
10:32:57,756 --> 10:33:01,360
And again, this is not a string, so we

18522
10:32:59,596 --> 10:33:03,640
can just put the number one. And make

18523
10:33:01,360 --> 10:33:06,000
sure to close that off with another

18524
10:33:03,640 --> 10:33:07,840
semicolon. And so in this case, our rule

18525
10:33:06,000 --> 10:33:10,080
is looking pretty good. And so I'm going

18526
10:33:07,840 --> 10:33:11,840
to save this by pressing Crl and X. and

18527
10:33:10,080 --> 10:33:14,840
then save the modified buffer with the

18528
10:33:11,840 --> 10:33:17,120
capital Y and then hit

18529
10:33:14,840 --> 10:33:18,560
enter. And so I'll mention that in a

18530
10:33:17,120 --> 10:33:20,640
typical deployment, Snort is going to

18531
10:33:18,560 --> 10:33:22,080
run as a service which allows it to

18532
10:33:20,640 --> 10:33:23,520
operate in the background and provide

18533
10:33:22,080 --> 10:33:25,436
that real-time network intrusion

18534
10:33:23,520 --> 10:33:26,800
detection and prevention. But since

18535
10:33:25,436 --> 10:33:27,916
we're just learning and testing here,

18536
10:33:26,800 --> 10:33:29,596
we're not going to configure that kind

18537
10:33:27,916 --> 10:33:31,276
of deployment and rather we can start

18538
10:33:29,596 --> 10:33:33,680
Snort manually from the command line to

18539
10:33:31,276 --> 10:33:35,916
run and test it. And so when we run

18540
10:33:33,680 --> 10:33:38,040
snort, the primary argument that we're

18541
10:33:35,916 --> 10:33:41,916
going to need to remember and make note

18542
10:33:38,040 --> 10:33:44,436
of is the capital A. And the capital A

18543
10:33:41,916 --> 10:33:47,640
specifies the alert mode that we want to

18544
10:33:44,436 --> 10:33:50,960
use. And so if I just run man snort

18545
10:33:47,640 --> 10:33:53,360
here and scroll down a bit, we can see

18546
10:33:50,960 --> 10:33:54,880
for capital A, we have alert mode. And

18547
10:33:53,360 --> 10:33:57,436
we have different values that we can

18548
10:33:54,880 --> 10:33:59,200
use. For example, full as the alert mode

18549
10:33:57,436 --> 10:34:01,040
is going to provide all of the possible

18550
10:33:59,200 --> 10:34:03,680
information about the alert. And this is

18551
10:34:01,040 --> 10:34:05,360
also the default alert mode. If we use

18552
10:34:03,680 --> 10:34:07,040
fast as the alert mode, well, this is

18553
10:34:05,360 --> 10:34:08,800
going to show alerts in a more condensed

18554
10:34:07,040 --> 10:34:10,880
format. And so it's going to show the

18555
10:34:08,800 --> 10:34:12,880
alert message and timestamp, source and

18556
10:34:10,880 --> 10:34:15,596
destination IP, and port numbers kind of

18557
10:34:12,880 --> 10:34:16,880
in a more SIS log style. If we use none,

18558
10:34:15,596 --> 10:34:18,000
well, we're not going to get any alerts.

18559
10:34:16,880 --> 10:34:19,916
It's basically going to turn off

18560
10:34:18,000 --> 10:34:22,000
alerting. And what's not mentioned here

18561
10:34:19,916 --> 10:34:23,520
is we can also use console. And this is

18562
10:34:22,000 --> 10:34:25,360
going to allow us to see alerts in that

18563
10:34:23,520 --> 10:34:27,916
fast mode, but directly within our

18564
10:34:25,360 --> 10:34:29,756
console when we run snort. And so I'm

18565
10:34:27,916 --> 10:34:32,080
going to press Q to quit here. And let's

18566
10:34:29,756 --> 10:34:34,640
go ahead and set up snort. So I'm going

18567
10:34:32,080 --> 10:34:35,916
to provide tac a here. And in this case

18568
10:34:34,640 --> 10:34:37,560
I'm going to use console because I want

18569
10:34:35,916 --> 10:34:40,000
to see the alerts in the console as they

18570
10:34:37,560 --> 10:34:40,000
appear. We can also use the tac l ar ar

18571
10:34:40,000 --> 10:34:40,080
ar ar ar ar ar ar ar ar ar ar ar ar ar

18572
10:34:40,000 --> 10:34:40,080
ar ar ar ar ar ar ar ar ar ar ar ar ar

18573
10:34:40,080 --> 10:34:42,320
ar ar ar ar ar ar ar ar ar ar ar

18574
10:34:40,080 --> 10:34:44,240
argument to specify the log directory of

18575
10:34:42,320 --> 10:34:46,200
where the alerts will be logged. In this

18576
10:34:44,240 --> 10:34:48,720
case we can use the default of var log

18577
10:34:46,200 --> 10:34:51,756
snort. And we also need to provide our

18578
10:34:48,720 --> 10:34:54,080
interface for capture. In this case I

18579
10:34:51,756 --> 10:34:56,000
will use03.

18580
10:34:54,080 --> 10:34:58,000
And lastly, if you remember, we need to

18581
10:34:56,000 --> 10:35:00,080
specify our configuration file with the

18582
10:34:58,000 --> 10:35:02,360
C argument. In this case, it's under

18583
10:35:00,080 --> 10:35:04,720
Etsy snort and then

18584
10:35:02,360 --> 10:35:06,640
snort.com. And I will quickly sneak in

18585
10:35:04,720 --> 10:35:08,640
the Q argument here to make sure that we

18586
10:35:06,640 --> 10:35:10,240
run in quiet mode because if we don't,

18587
10:35:08,640 --> 10:35:12,240
it's going to display an annoying banner

18588
10:35:10,240 --> 10:35:14,120
and initialization information that we

18589
10:35:12,240 --> 10:35:16,480
don't actually need in this

18590
10:35:14,120 --> 10:35:18,160
instance. So once we run this, it's

18591
10:35:16,480 --> 10:35:20,320
going to be pretty uneventful because we

18592
10:35:18,160 --> 10:35:22,596
don't actually have any output yet.

18593
10:35:20,320 --> 10:35:25,276
However, in a new

18594
10:35:22,596 --> 10:35:26,436
tab, I'm going to test out our rule by

18595
10:35:25,276 --> 10:35:28,400
pinging

18596
10:35:26,436 --> 10:35:31,040
8.8.8.8. Well, actually, first, let's

18597
10:35:28,400 --> 10:35:34,240
try pinging a different IP address. For

18598
10:35:31,040 --> 10:35:34,240
example, if I ping

18599
10:35:35,000 --> 10:35:40,080
8.8.4.4, well, you can see we're getting

18600
10:35:37,800 --> 10:35:41,880
replies. But if I hop back over to our

18601
10:35:40,080 --> 10:35:44,160
snort output, well, we still have

18602
10:35:41,880 --> 10:35:47,160
nothing. So, what if I try pinging

18603
10:35:44,160 --> 10:35:47,160
8.8.8.8?

18604
10:35:47,200 --> 10:35:49,916
And assuming we set up our rule

18605
10:35:48,560 --> 10:35:51,800
correctly, well, we're going to get a

18606
10:35:49,916 --> 10:35:54,800
match and get alerts for every

18607
10:35:51,800 --> 10:35:56,240
ping. If I hop back over, well, we can

18608
10:35:54,800 --> 10:35:58,276
start to see all of this traffic has

18609
10:35:56,240 --> 10:36:00,080
been

18610
10:35:58,276 --> 10:36:02,480
detected. And in this case, we're

18611
10:36:00,080 --> 10:36:04,560
getting a timestamp of the alert. We're

18612
10:36:02,480 --> 10:36:06,640
getting the SID or the SID of the alert

18613
10:36:04,560 --> 10:36:09,040
as well. We're getting the message that

18614
10:36:06,640 --> 10:36:10,480
we specified or the description. We're

18615
10:36:09,040 --> 10:36:12,240
also seeing things like the traffic

18616
10:36:10,480 --> 10:36:15,840
direction. So, we have the source IP

18617
10:36:12,240 --> 10:36:17,520
address of our IP going to 8.8.8.8. And

18618
10:36:15,840 --> 10:36:19,200
so you can see this fast option mode or

18619
10:36:17,520 --> 10:36:20,840
in this case the console option mode is

18620
10:36:19,200 --> 10:36:23,040
really useful for us to get a quick

18621
10:36:20,840 --> 10:36:24,720
output. Okay, so let's do another

18622
10:36:23,040 --> 10:36:27,200
example here. And first I'm going to

18623
10:36:24,720 --> 10:36:28,560
quit snort. And if it's hanging up like

18624
10:36:27,200 --> 10:36:30,640
this again, I'm just going to issue some

18625
10:36:28,560 --> 10:36:32,240
more ping commands. It might just be my

18626
10:36:30,640 --> 10:36:34,480
machine and the demo gods raining down

18627
10:36:32,240 --> 10:36:36,320
on me. All right, so let's do another

18628
10:36:34,480 --> 10:36:38,320
example here. This time let's work with

18629
10:36:36,320 --> 10:36:40,000
the TCP protocol, which is a much more

18630
10:36:38,320 --> 10:36:41,840
common protocol for these rules as the

18631
10:36:40,000 --> 10:36:44,320
attack surface is much larger than say

18632
10:36:41,840 --> 10:36:46,480
something like ICMP. And so I'm going to

18633
10:36:44,320 --> 10:36:49,756
open up our local rules file again. And

18634
10:36:46,480 --> 10:36:51,120
that's under rules, local.ruules. And so

18635
10:36:49,756 --> 10:36:53,756
I'm going to delete our first rule here

18636
10:36:51,120 --> 10:36:55,596
just by pressing control and K. And in

18637
10:36:53,756 --> 10:36:58,520
this case, let's alert on any traffic

18638
10:36:55,596 --> 10:37:00,880
that is going to a destination port of

18639
10:36:58,520 --> 10:37:02,480
4444. In this case, the IP addresses

18640
10:37:00,880 --> 10:37:05,520
don't matter. We just want to monitor

18641
10:37:02,480 --> 10:37:07,880
any outgoing quad 4 port traffic. And so

18642
10:37:05,520 --> 10:37:10,436
to do this well, we want to specify an

18643
10:37:07,880 --> 10:37:13,040
alert under the TCP

18644
10:37:10,436 --> 10:37:16,160
protocol, any source IP address, and

18645
10:37:13,040 --> 10:37:18,080
also any source port. For the direction,

18646
10:37:16,160 --> 10:37:21,560
we want to specify any outgoing IP

18647
10:37:18,080 --> 10:37:24,000
address going to port

18648
10:37:21,560 --> 10:37:25,840
444. For the options here, well, I just

18649
10:37:24,000 --> 10:37:28,720
want to put a message of connection to

18650
10:37:25,840 --> 10:37:31,360
remote IP on port 444. You can basically

18651
10:37:28,720 --> 10:37:32,880
put whatever you want here. For the SID,

18652
10:37:31,360 --> 10:37:34,880
I'm just going to increment our last one

18653
10:37:32,880 --> 10:37:36,400
by one, even though we deleted it. And

18654
10:37:34,880 --> 10:37:39,320
the revision number is going to be one

18655
10:37:36,400 --> 10:37:41,520
as well. And so I'm going to save these

18656
10:37:39,320 --> 10:37:43,916
changes. And so to test out that our

18657
10:37:41,520 --> 10:37:46,240
rule is working, we can use the hping 3

18658
10:37:43,916 --> 10:37:50,400
command to send a specifically crafted

18659
10:37:46,240 --> 10:37:52,000
packet over to example.com on port 4444.

18660
10:37:50,400 --> 10:37:53,840
And so you can imagine that instead of

18661
10:37:52,000 --> 10:37:55,360
example.com, well, this can be an

18662
10:37:53,840 --> 10:37:56,960
attacker's controlled server listening

18663
10:37:55,360 --> 10:37:59,276
for any incoming connections on that

18664
10:37:56,960 --> 10:38:00,560
port. And if you don't have hping 3

18665
10:37:59,276 --> 10:38:04,756
installed, well, we can just run

18666
10:38:00,560 --> 10:38:06,880
pseudoapp install hping

18667
10:38:04,756 --> 10:38:08,480
3. All right, perfect. So, I'm going to

18668
10:38:06,880 --> 10:38:10,520
get our command ready. And so, I'm going

18669
10:38:08,480 --> 10:38:12,880
to run pseudo hping

18670
10:38:10,520 --> 10:38:15,040
3. For the count, I'm just going to put

18671
10:38:12,880 --> 10:38:17,320
one. We just need to make one request.

18672
10:38:15,040 --> 10:38:19,960
Under port here, it's going to be

18673
10:38:17,320 --> 10:38:23,400
444. I'm going to put s just for a sin

18674
10:38:19,960 --> 10:38:24,960
flag. And then specify

18675
10:38:23,400 --> 10:38:26,960
example.com. All right. All right. And

18676
10:38:24,960 --> 10:38:28,680
back over with Snort, I'm just going to

18677
10:38:26,960 --> 10:38:30,560
run the exact same

18678
10:38:28,680 --> 10:38:32,400
command. All right. So, now that we're

18679
10:38:30,560 --> 10:38:34,800
listening and monitoring, I'm just going

18680
10:38:32,400 --> 10:38:38,596
to run this hping 3 command to send a

18681
10:38:34,800 --> 10:38:40,480
SIN flag over to port 444 on

18682
10:38:38,596 --> 10:38:43,276
example.com. All right. We can see it

18683
10:38:40,480 --> 10:38:44,640
was transmitted. And back over on Snort,

18684
10:38:43,276 --> 10:38:46,880
you can see that we logged this one

18685
10:38:44,640 --> 10:38:49,120
alert here. And just to showcase that it

18686
10:38:46,880 --> 10:38:50,720
is working well, I can change this to

18687
10:38:49,120 --> 10:38:52,640
basically any other port. And we're

18688
10:38:50,720 --> 10:38:54,560
still not going to get any results. It's

18689
10:38:52,640 --> 10:38:56,560
only going to be on quad 4 here. All

18690
10:38:54,560 --> 10:38:59,276
right. So, I'm going to cancel that out

18691
10:38:56,560 --> 10:39:00,560
and send another ping just so we can

18692
10:38:59,276 --> 10:39:03,040
close it out. I don't know why that's

18693
10:39:00,560 --> 10:39:05,436
not working. And so, this wasn't a

18694
10:39:03,040 --> 10:39:07,276
particularly complex example, but for

18695
10:39:05,436 --> 10:39:09,040
instance, the metas-ploit framework is a

18696
10:39:07,276 --> 10:39:10,720
popular penetration testing tool, and

18697
10:39:09,040 --> 10:39:13,436
the default Metas-ploit payloads will

18698
10:39:10,720 --> 10:39:15,120
typically use port 444 by default when

18699
10:39:13,436 --> 10:39:17,436
attempting to establish reverse shells

18700
10:39:15,120 --> 10:39:19,520
on a target system. And also, various

18701
10:39:17,436 --> 10:39:20,880
malware intro have historically used

18702
10:39:19,520 --> 10:39:22,640
this port for command and control

18703
10:39:20,880 --> 10:39:24,400
communications. And so you can see how

18704
10:39:22,640 --> 10:39:26,320
we can start to monitor lowhanging fruit

18705
10:39:24,400 --> 10:39:27,520
like this. And typically this type of

18706
10:39:26,320 --> 10:39:29,360
thing will already be caught in the

18707
10:39:27,520 --> 10:39:31,200
default and community rules, but I just

18708
10:39:29,360 --> 10:39:33,596
wanted to show at the most basic level

18709
10:39:31,200 --> 10:39:35,120
how we can create something similar. And

18710
10:39:33,596 --> 10:39:36,640
so with this rule, we're basically

18711
10:39:35,120 --> 10:39:38,880
trying to see from the perspective of

18712
10:39:36,640 --> 10:39:40,880
the sock, what does the network activity

18713
10:39:38,880 --> 10:39:42,480
look like and can we write any rules to

18714
10:39:40,880 --> 10:39:44,000
log it or mitigate it and prevent it

18715
10:39:42,480 --> 10:39:45,520
from occurring. And this is basically

18716
10:39:44,000 --> 10:39:47,436
the essence of network security

18717
10:39:45,520 --> 10:39:48,756
monitoring and network traffic analysis

18718
10:39:47,436 --> 10:39:51,200
coming

18719
10:39:48,756 --> 10:39:53,360
together. Before we move on to some more

18720
10:39:51,200 --> 10:39:55,840
rule creation examples, let's briefly

18721
10:39:53,360 --> 10:39:57,520
talk about community rules. And so

18722
10:39:55,840 --> 10:39:59,200
community rules refer to all the rules

18723
10:39:57,520 --> 10:40:01,040
that have been submitted by members of

18724
10:39:59,200 --> 10:40:03,120
the open source community or the Snort

18725
10:40:01,040 --> 10:40:04,960
integrators or developers. And these

18726
10:40:03,120 --> 10:40:06,880
rules are freely available to use for

18727
10:40:04,960 --> 10:40:09,200
all Snort users and are governed by the

18728
10:40:06,880 --> 10:40:10,800
general public license. And so on

18729
10:40:09,200 --> 10:40:12,800
snort.org here, we can go under

18730
10:40:10,800 --> 10:40:15,520
downloads and then scroll down to the

18731
10:40:12,800 --> 10:40:17,040
rules section here. And I'm not going to

18732
10:40:15,520 --> 10:40:18,960
actually ingest all of these community

18733
10:40:17,040 --> 10:40:20,800
rules, but just to show the general

18734
10:40:18,960 --> 10:40:22,080
process, I'll make a quick directory to

18735
10:40:20,800 --> 10:40:25,200
store them in, and then we can take a

18736
10:40:22,080 --> 10:40:27,200
look at a couple. And so for version 2.9

18737
10:40:25,200 --> 10:40:29,240
here, I'm going to rightclick and copy

18738
10:40:27,200 --> 10:40:32,000
the link to the community

18739
10:40:29,240 --> 10:40:33,680
rules.tar.gz file. And so typically,

18740
10:40:32,000 --> 10:40:36,720
we'd want to download and extract this

18741
10:40:33,680 --> 10:40:38,240
file within the etsy snort rules folder.

18742
10:40:36,720 --> 10:40:40,276
But for this quick example, I'll just

18743
10:40:38,240 --> 10:40:43,480
make a sample

18744
10:40:40,276 --> 10:40:46,000
directory and then run wget with

18745
10:40:43,480 --> 10:40:48,320
pseudo and paste in that link so we can

18746
10:40:46,000 --> 10:40:48,320
download

18747
10:40:48,840 --> 10:40:54,480
it. If I run an ls, you can see that we

18748
10:40:51,756 --> 10:40:56,960
downloaded this tar zip file. And so to

18749
10:40:54,480 --> 10:41:00,320
extract it, I'll just run pseudo tar

18750
10:40:56,960 --> 10:41:02,960
with the x, z, v, and f arguments and

18751
10:41:00,320 --> 10:41:04,480
then provide the name of the file. And

18752
10:41:02,960 --> 10:41:06,640
if I go into the community rules

18753
10:41:04,480 --> 10:41:08,720
directory and run ls, well, we can see

18754
10:41:06,640 --> 10:41:10,756
this community.ruules file, which we can

18755
10:41:08,720 --> 10:41:12,880
then move over into our base

18756
10:41:10,756 --> 10:41:14,880
directory. And if I just cut out this

18757
10:41:12,880 --> 10:41:16,800
file to view it and pipe it over to

18758
10:41:14,880 --> 10:41:19,200
less, well, we can start taking a look

18759
10:41:16,800 --> 10:41:21,080
at some of these rules. And you can see

18760
10:41:19,200 --> 10:41:22,960
that all of these rules are really well

18761
10:41:21,080 --> 10:41:25,276
documented. So, we have things like

18762
10:41:22,960 --> 10:41:26,720
reference URLs that we can return to. We

18763
10:41:25,276 --> 10:41:28,560
have different things like class types

18764
10:41:26,720 --> 10:41:30,880
and different metadata about the rule

18765
10:41:28,560 --> 10:41:34,000
itself. And some of this metadata might

18766
10:41:30,880 --> 10:41:35,756
include things like CVE numbers or MITER

18767
10:41:34,000 --> 10:41:37,276
ids. And so if there was something in

18768
10:41:35,756 --> 10:41:38,960
particular that we wanted to find or

18769
10:41:37,276 --> 10:41:40,916
test, well, we could locate the rule

18770
10:41:38,960 --> 10:41:42,880
within this file and understand how it's

18771
10:41:40,916 --> 10:41:44,640
detected. You can see that a lot of

18772
10:41:42,880 --> 10:41:46,480
these rules are looking at the actual

18773
10:41:44,640 --> 10:41:48,560
content contained within the packets

18774
10:41:46,480 --> 10:41:51,200
themselves. So you can see specific

18775
10:41:48,560 --> 10:41:53,680
values in bytes or hex or different

18776
10:41:51,200 --> 10:41:55,520
regular expressions as well. And these

18777
10:41:53,680 --> 10:41:57,120
are specific patterns and signatures

18778
10:41:55,520 --> 10:41:58,960
that can be found within the packets to

18779
10:41:57,120 --> 10:42:01,680
alert on. And this is really how Snort's

18780
10:41:58,960 --> 10:42:04,000
rulebased detection works in the sock.

18781
10:42:01,680 --> 10:42:05,480
So next, let's take a look at logs

18782
10:42:04,000 --> 10:42:08,960
specifically in the

18783
10:42:05,480 --> 10:42:08,960
var/log/ snort

18784
10:42:09,640 --> 10:42:13,360
directory. And you can see here we have

18785
10:42:11,840 --> 10:42:15,436
files created from when we were doing

18786
10:42:13,360 --> 10:42:16,960
testing. In this case, we have the alert

18787
10:42:15,436 --> 10:42:18,640
fast file which includes all of the

18788
10:42:16,960 --> 10:42:21,596
alerts from when we specified the fast

18789
10:42:18,640 --> 10:42:23,840
alert mode. We also have the snore log

18790
10:42:21,596 --> 10:42:25,756
files with these specific timestamps

18791
10:42:23,840 --> 10:42:27,596
appended to the end of them. And these

18792
10:42:25,756 --> 10:42:29,916
include the actual raw traffic or the

18793
10:42:27,596 --> 10:42:31,840
captured pcaps from when a rule fired.

18794
10:42:29,916 --> 10:42:33,840
And so specifically, let's find the most

18795
10:42:31,840 --> 10:42:36,720
recent one here, which should refer to

18796
10:42:33,840 --> 10:42:39,080
our quad 4 port rule. And what I can

18797
10:42:36,720 --> 10:42:41,880
actually do here is just run pseudo

18798
10:42:39,080 --> 10:42:44,160
wire and then paste in the name of this

18799
10:42:41,880 --> 10:42:45,680
file. And you can see that wireark is

18800
10:42:44,160 --> 10:42:47,120
going to open up here. And in this case,

18801
10:42:45,680 --> 10:42:48,800
it's going to show us the captured

18802
10:42:47,120 --> 10:42:51,360
packet. In this case, we had a single

18803
10:42:48,800 --> 10:42:53,360
packet that fired off this rule. But we

18804
10:42:51,360 --> 10:42:55,360
can see that the destination port here

18805
10:42:53,360 --> 10:42:57,040
is quad 4.

18806
10:42:55,360 --> 10:42:59,040
And so obviously this is not the best

18807
10:42:57,040 --> 10:43:00,120
example, but you can see how absolutely

18808
10:42:59,040 --> 10:43:02,240
useful this can be during

18809
10:43:00,120 --> 10:43:04,160
investigations. If we can get an alert

18810
10:43:02,240 --> 10:43:05,916
and then get the actual raw data and

18811
10:43:04,160 --> 10:43:07,756
packets that were captured to fire off

18812
10:43:05,916 --> 10:43:11,080
the alert, well, this incredibly

18813
10:43:07,756 --> 10:43:13,040
expedites our analysis and response

18814
10:43:11,080 --> 10:43:15,400
capabilities. And so I'm just going to

18815
10:43:13,040 --> 10:43:17,276
remove all of the files within this

18816
10:43:15,400 --> 10:43:19,520
directory. And then I'm going to run

18817
10:43:17,276 --> 10:43:22,000
snort again, but this time I'm going to

18818
10:43:19,520 --> 10:43:24,240
log some alerts.

18819
10:43:22,000 --> 10:43:26,880
And so in order to log alerts, we can

18820
10:43:24,240 --> 10:43:28,080
run snort again just like we did before.

18821
10:43:26,880 --> 10:43:31,120
But in this case, I'm going to change

18822
10:43:28,080 --> 10:43:33,040
the alert mode to either full or fast.

18823
10:43:31,120 --> 10:43:34,800
And if you recall, full here is going to

18824
10:43:33,040 --> 10:43:37,276
provide the full decoded header and the

18825
10:43:34,800 --> 10:43:38,960
alert message. If I just run fast here,

18826
10:43:37,276 --> 10:43:40,880
it's going to show the alert message and

18827
10:43:38,960 --> 10:43:43,840
timestamp and source and destination in

18828
10:43:40,880 --> 10:43:45,200
that SIS log style. And fast is the

18829
10:43:43,840 --> 10:43:46,960
preferred method here if we want to

18830
10:43:45,200 --> 10:43:48,880
actually log these alerts and then

18831
10:43:46,960 --> 10:43:51,276
forward them to a SIM, for example, for

18832
10:43:48,880 --> 10:43:52,960
correlation. And so I'm going to run

18833
10:43:51,276 --> 10:43:54,960
this and then I'm going to head back

18834
10:43:52,960 --> 10:43:57,880
over to our other tab here and I'm going

18835
10:43:54,960 --> 10:44:00,480
to send a number of SIN flags over to

18836
10:43:57,880 --> 10:44:03,480
example.com. And each time I do this, it

18837
10:44:00,480 --> 10:44:06,160
should be triggering and generating an

18838
10:44:03,480 --> 10:44:07,596
alert. And if I hop back over here,

18839
10:44:06,160 --> 10:44:10,800
well, you can see we're not getting any

18840
10:44:07,596 --> 10:44:12,160
output this time. But if I cancel this,

18841
10:44:10,800 --> 10:44:13,840
and I'm going to need to send one more

18842
10:44:12,160 --> 10:44:17,680
packet because Snort is being weird for

18843
10:44:13,840 --> 10:44:20,560
me. And if I run an ls, well, we can see

18844
10:44:17,680 --> 10:44:23,080
we have the captured raw packets. We

18845
10:44:20,560 --> 10:44:25,880
also have this alert file that's been

18846
10:44:23,080 --> 10:44:28,080
populated. And so if I cat out the alert

18847
10:44:25,880 --> 10:44:30,080
file, well, we can see all of these

18848
10:44:28,080 --> 10:44:31,840
alerts that were logged. And so once

18849
10:44:30,080 --> 10:44:33,120
we're generating these alerts, well, we

18850
10:44:31,840 --> 10:44:34,960
can have these logs dynamically

18851
10:44:33,120 --> 10:44:36,960
forwarded into our SIM and create alerts

18852
10:44:34,960 --> 10:44:38,560
on our dashboard. And this is what us as

18853
10:44:36,960 --> 10:44:41,200
sock analysts will typically investigate

18854
10:44:38,560 --> 10:44:43,040
and respond to when they come in.

18855
10:44:41,200 --> 10:44:45,680
And because Snore is also capturing the

18856
10:44:43,040 --> 10:44:46,880
raw pecaps themselves, well, we can then

18857
10:44:45,680 --> 10:44:48,960
use what we learned from the network

18858
10:44:46,880 --> 10:44:50,640
traffic analysis section to dive into

18859
10:44:48,960 --> 10:44:53,360
these files and understand what happened

18860
10:44:50,640 --> 10:44:54,720
and gather IoC's. So, you can really

18861
10:44:53,360 --> 10:44:56,480
start to see how network traffic

18862
10:44:54,720 --> 10:44:58,800
analysis and network security monitoring

18863
10:44:56,480 --> 10:45:00,640
tie together, right? So, by setting up

18864
10:44:58,800 --> 10:45:03,040
rules and capturing alerts, we can then

18865
10:45:00,640 --> 10:45:05,276
forward them to our SIM. And so, lastly

18866
10:45:03,040 --> 10:45:07,756
here, let's see Snort in action as an

18867
10:45:05,276 --> 10:45:09,596
intrusion prevention system. So, so far

18868
10:45:07,756 --> 10:45:11,436
we've been monitoring and alerting, but

18869
10:45:09,596 --> 10:45:14,240
we can actually block or drop packets

18870
10:45:11,436 --> 10:45:16,960
that match our rules as well. And so, to

18871
10:45:14,240 --> 10:45:18,960
configure Snort as an IPS, we need to

18872
10:45:16,960 --> 10:45:20,960
use the drop action within our rules

18873
10:45:18,960 --> 10:45:23,200
instead of alert. And this will actively

18874
10:45:20,960 --> 10:45:24,400
block the traffic that matches our rule.

18875
10:45:23,200 --> 10:45:26,880
And so, to do this, I'm going to head

18876
10:45:24,400 --> 10:45:29,840
back over to Etsy Snort and I'm going to

18877
10:45:26,880 --> 10:45:31,320
run pseudo nano and locate our local

18878
10:45:29,840 --> 10:45:33,840
rules

18879
10:45:31,320 --> 10:45:36,080
file. And so, in this example, I'm going

18880
10:45:33,840 --> 10:45:38,240
to kill this one here. Let's create a

18881
10:45:36,080 --> 10:45:41,160
very simple rule that will drop FTP

18882
10:45:38,240 --> 10:45:44,360
traffic after it's been detected on port

18883
10:45:41,160 --> 10:45:46,720
21. And also, let's get real here for a

18884
10:45:44,360 --> 10:45:48,800
second. We don't have to be experts and

18885
10:45:46,720 --> 10:45:50,640
memorize every single field and header

18886
10:45:48,800 --> 10:45:52,400
when we're creating snort rules. And

18887
10:45:50,640 --> 10:45:54,400
although the syntax is pretty consistent

18888
10:45:52,400 --> 10:45:56,160
and easy to grasp, well, a tool like

18889
10:45:54,400 --> 10:45:59,040
Snorpy here can be really useful for us

18890
10:45:56,160 --> 10:46:01,040
when making complex rules. And Snorpy is

18891
10:45:59,040 --> 10:46:02,960
a web-based snort rule creator which

18892
10:46:01,040 --> 10:46:04,800
makes it very simple and easy for us to

18893
10:46:02,960 --> 10:46:06,480
create custom Snort rules. And I'll

18894
10:46:04,800 --> 10:46:08,480
include a link to the hosted instance of

18895
10:46:06,480 --> 10:46:10,320
Snorpie here along with its GitHub

18896
10:46:08,480 --> 10:46:12,880
repository because you can run and host

18897
10:46:10,320 --> 10:46:14,800
this yourself. And so you can see how

18898
10:46:12,880 --> 10:46:16,720
simple it is. It's just a very simple

18899
10:46:14,800 --> 10:46:19,276
point-and-click GUI based tool that

18900
10:46:16,720 --> 10:46:21,360
allows us to generate rules on the fly.

18901
10:46:19,276 --> 10:46:22,800
And so under action here, remember we

18902
10:46:21,360 --> 10:46:25,200
want to drop the packet. So I'm going to

18903
10:46:22,800 --> 10:46:26,880
click on drop. Under the protocol here,

18904
10:46:25,200 --> 10:46:28,120
we're dealing with FTP. So I'm going to

18905
10:46:26,880 --> 10:46:30,960
choose

18906
10:46:28,120 --> 10:46:32,960
TCP. Under the source IP address, well,

18907
10:46:30,960 --> 10:46:36,240
we want to monitor any IP on our home

18908
10:46:32,960 --> 10:46:37,840
network. So I'm going to put any for the

18909
10:46:36,240 --> 10:46:39,520
source port. Remember this can be an

18910
10:46:37,840 --> 10:46:42,320
ephemeral port as well. So we want to

18911
10:46:39,520 --> 10:46:44,480
put any. But for the destination, we

18912
10:46:42,320 --> 10:46:46,800
want to make sure the port is 21 and

18913
10:46:44,480 --> 10:46:48,720
also any for the destination IP address

18914
10:46:46,800 --> 10:46:52,240
because we want to monitor any external

18915
10:46:48,720 --> 10:46:54,080
FTP communication. Under the snort ID,

18916
10:46:52,240 --> 10:46:56,160
well I can just put 1 million and one

18917
10:46:54,080 --> 10:46:59,120
again. And the revision number, I'll

18918
10:46:56,160 --> 10:47:01,276
just put one as well. For the rule

18919
10:46:59,120 --> 10:47:03,756
message, I'm just going to put a brief

18920
10:47:01,276 --> 10:47:06,240
description of what we're doing here.

18921
10:47:03,756 --> 10:47:07,520
And with that, our rule is ready to go.

18922
10:47:06,240 --> 10:47:09,596
So, I'm going to click on this to copy

18923
10:47:07,520 --> 10:47:11,680
it to the clipboard and head back over

18924
10:47:09,596 --> 10:47:12,840
to our rules file. And I'm going to

18925
10:47:11,680 --> 10:47:15,436
paste it in

18926
10:47:12,840 --> 10:47:17,120
here. And when we do paste this in, it

18927
10:47:15,436 --> 10:47:19,276
included a couple extra spaces. So, I'm

18928
10:47:17,120 --> 10:47:21,120
going to make sure to remove those. And

18929
10:47:19,276 --> 10:47:23,200
one quirk with Snorpy is that we weren't

18930
10:47:21,120 --> 10:47:25,200
able to change the birectional flow of

18931
10:47:23,200 --> 10:47:27,040
traffic. And in this case, I want to

18932
10:47:25,200 --> 10:47:28,756
change the direction here from source to

18933
10:47:27,040 --> 10:47:31,120
destination to

18934
10:47:28,756 --> 10:47:33,200
birectional because I want to detect and

18935
10:47:31,120 --> 10:47:37,040
drop any traffic flowing to or from an

18936
10:47:33,200 --> 10:47:38,960
FTP server. And so we'll just save that.

18937
10:47:37,040 --> 10:47:41,360
And so now that we've created a rule to

18938
10:47:38,960 --> 10:47:43,840
drop traffic, we can now run Snort in

18939
10:47:41,360 --> 10:47:45,520
inline mode. And again, typically within

18940
10:47:43,840 --> 10:47:47,040
a production deployment where we're

18941
10:47:45,520 --> 10:47:48,800
going to be running Snort as more of a

18942
10:47:47,040 --> 10:47:50,880
service, we can actually configure this

18943
10:47:48,800 --> 10:47:53,360
by default in the snort.com file rather

18944
10:47:50,880 --> 10:47:55,520
than do it through the command line. And

18945
10:47:53,360 --> 10:47:58,120
so to run it in inline mode, we can just

18946
10:47:55,520 --> 10:48:00,560
run pseudo snort with the quiet option.

18947
10:47:58,120 --> 10:48:01,960
Here I'm going to provide console for

18948
10:48:00,560 --> 10:48:04,160
the alert

18949
10:48:01,960 --> 10:48:06,200
output. I'm going to specify our

18950
10:48:04,160 --> 10:48:09,480
interface here. So

18951
10:48:06,200 --> 10:48:12,240
emp3 as well as our configuration

18952
10:48:09,480 --> 10:48:14,240
file. And in this case, the capital Q

18953
10:48:12,240 --> 10:48:16,560
argument here is going to tell Snort to

18954
10:48:14,240 --> 10:48:18,880
run in inline mode. And inline mode is

18955
10:48:16,560 --> 10:48:20,720
required for IPS functionality and is

18956
10:48:18,880 --> 10:48:23,400
going to allow Snort to drop or modify

18957
10:48:20,720 --> 10:48:25,596
packets in real time. And so if I run

18958
10:48:23,400 --> 10:48:28,720
this, well, we're going to get an error

18959
10:48:25,596 --> 10:48:30,880
message. And you can see here, pcap daq

18960
10:48:28,720 --> 10:48:32,320
does not support inline. And this means

18961
10:48:30,880 --> 10:48:34,400
that the data acquisition model that

18962
10:48:32,320 --> 10:48:37,276
we're using by default or the libid pcap

18963
10:48:34,400 --> 10:48:39,360
module does not support inline mode. And

18964
10:48:37,276 --> 10:48:42,596
so to resolve this issue, we need to use

18965
10:48:39,360 --> 10:48:45,200
a DAQ that supports inline mode like AF

18966
10:48:42,596 --> 10:48:47,596
packet. Additionally, we need at least

18967
10:48:45,200 --> 10:48:49,756
two network interfaces for Snort IPS to

18968
10:48:47,596 --> 10:48:52,480
work as the AF packet module creates a

18969
10:48:49,756 --> 10:48:53,756
bridge between them. And so the steps to

18970
10:48:52,480 --> 10:48:55,360
do this are going to be dependent on

18971
10:48:53,756 --> 10:48:56,800
your hypervisor. And you don't have to

18972
10:48:55,360 --> 10:48:59,080
follow along if you don't want to, but

18973
10:48:56,800 --> 10:49:01,120
I'm going to quickly set this up to

18974
10:48:59,080 --> 10:49:03,040
demonstrate. And so in my case, I'm

18975
10:49:01,120 --> 10:49:04,800
running Virtual Box. And so I'm going to

18976
10:49:03,040 --> 10:49:07,520
rightclick and stop my machine here

18977
10:49:04,800 --> 10:49:09,480
because it has to be powered off. And

18978
10:49:07,520 --> 10:49:11,916
I'm going to open up the settings

18979
10:49:09,480 --> 10:49:14,160
here and head down to the network

18980
10:49:11,916 --> 10:49:16,320
settings. And in this case, I'm just

18981
10:49:14,160 --> 10:49:19,436
going to go over to the adapter 2 tab

18982
10:49:16,320 --> 10:49:21,276
and check off enable network adapter.

18983
10:49:19,436 --> 10:49:23,040
And I'm going to go down to NAT network

18984
10:49:21,276 --> 10:49:24,436
and make sure it's on the same one as my

18985
10:49:23,040 --> 10:49:27,120
first adapter

18986
10:49:24,436 --> 10:49:29,240
here. And so I'm going to press okay and

18987
10:49:27,120 --> 10:49:32,320
restart my

18988
10:49:29,240 --> 10:49:33,916
VM. Now I can run if config again. And

18989
10:49:32,320 --> 10:49:36,800
in this case you can see I have an

18990
10:49:33,916 --> 10:49:39,080
additional interface. So I have ENTP03

18991
10:49:36,800 --> 10:49:44,800
which is my default one but I also have

18992
10:49:39,080 --> 10:49:44,800
ENTP08 now. So now I can run snort once

18993
10:49:45,720 --> 10:49:50,240
again. And now what I need to modify

18994
10:49:48,160 --> 10:49:50,916
here is the data acquisition unit that

18995
10:49:50,240 --> 10:49:53,436
we're

18996
10:49:50,916 --> 10:49:57,480
using. In this case, I'll do two dashes

18997
10:49:53,436 --> 10:49:59,916
here with DAQ and specify the AF packet

18998
10:49:57,480 --> 10:50:01,756
utility. And now for our interface,

18999
10:49:59,916 --> 10:50:04,120
well, I actually need to bridge the two

19000
10:50:01,756 --> 10:50:06,720
that I just set up. And so I will leave

19001
10:50:04,120 --> 10:50:09,240
ENP0S3 here, but with a colon, I will

19002
10:50:06,720 --> 10:50:11,276
bridge it over to

19003
10:50:09,240 --> 10:50:13,360
ENTP0S8. And if you don't already have

19004
10:50:11,276 --> 10:50:16,400
it, make sure to include the capital Q

19005
10:50:13,360 --> 10:50:18,800
argument to run Snort in inline mode. If

19006
10:50:16,400 --> 10:50:20,160
I just hit enter here, well, you can see

19007
10:50:18,800 --> 10:50:22,080
we have nothing on the screen right

19008
10:50:20,160 --> 10:50:24,960
away. But if I try to connect to a

19009
10:50:22,080 --> 10:50:27,640
public FTP server, well, I can just run

19010
10:50:24,960 --> 10:50:31,240
FTP

19011
10:50:27,640 --> 10:50:33,520
test.rebex.net and try to connect to

19012
10:50:31,240 --> 10:50:35,276
it. You can see that apparently we were

19013
10:50:33,520 --> 10:50:36,800
connected, but now it's just hanging. It

19014
10:50:35,276 --> 10:50:39,200
should be prompting me for username and

19015
10:50:36,800 --> 10:50:41,436
password. If I head back over to Snort

19016
10:50:39,200 --> 10:50:43,436
here, you can see we did get an alert.

19017
10:50:41,436 --> 10:50:46,520
In this case, a drop action took place

19018
10:50:43,436 --> 10:50:49,120
to drop the FTP traffic based on port

19019
10:50:46,520 --> 10:50:50,916
21. And if we hop back over, well, you

19020
10:50:49,120 --> 10:50:52,960
can see the connection was

19021
10:50:50,916 --> 10:50:55,276
terminated. And just to prove that this

19022
10:50:52,960 --> 10:50:57,960
is working, I can press Ctrl + C here to

19023
10:50:55,276 --> 10:51:00,160
cancel out Snort and try to connect

19024
10:50:57,960 --> 10:51:02,800
normally. And in this case, we are being

19025
10:51:00,160 --> 10:51:02,800
prompted for our

19026
10:51:02,840 --> 10:51:11,040
username. And we can connect just fine.

19027
10:51:07,436 --> 10:51:11,040
However, if I turn Snort back

19028
10:51:11,480 --> 10:51:16,360
on, suddenly we can no longer connect

19029
10:51:14,000 --> 10:51:18,560
and we are logging that drop

19030
10:51:16,360 --> 10:51:20,720
packet. And so you can see by setting

19031
10:51:18,560 --> 10:51:22,400
Snort to drop or reject traffic, well,

19032
10:51:20,720 --> 10:51:24,000
we can actually prevent malicious

19033
10:51:22,400 --> 10:51:27,120
connections and protect the network in

19034
10:51:24,000 --> 10:51:29,040
real time. And so that was a lot of

19035
10:51:27,120 --> 10:51:30,880
information and a very long video. And

19036
10:51:29,040 --> 10:51:33,040
so feel free to review your notes or the

19037
10:51:30,880 --> 10:51:34,800
rule syntax. And in the next video,

19038
10:51:33,040 --> 10:51:36,800
we'll use what we learned to detect some

19039
10:51:34,800 --> 10:51:37,800
real threats. So, I will see you in the

19040
10:51:36,800 --> 10:51:40,560
next

19041
10:51:37,800 --> 10:51:41,916
video. All right, and welcome back. And

19042
10:51:40,560 --> 10:51:43,276
in this video, we're going to take a

19043
10:51:41,916 --> 10:51:45,040
look at some more intrusion detection

19044
10:51:43,276 --> 10:51:46,880
and prevention techniques within Snort

19045
10:51:45,040 --> 10:51:48,800
and actually feed in some real malicious

19046
10:51:46,880 --> 10:51:51,276
traffic and write custom detection rules

19047
10:51:48,800 --> 10:51:52,800
to alert on them. And so, first here,

19048
10:51:51,276 --> 10:51:54,800
I'm going to undo what I did in the last

19049
10:51:52,800 --> 10:51:56,800
video. I'm just going to head over to

19050
10:51:54,800 --> 10:51:58,320
the network settings here and uncheck

19051
10:51:56,800 --> 10:52:00,720
adapter 2 because we're not going to

19052
10:51:58,320 --> 10:52:02,560
need it for this lesson.

19053
10:52:00,720 --> 10:52:04,560
And in this lesson, let's go through

19054
10:52:02,560 --> 10:52:06,756
creating some custom detection rules for

19055
10:52:04,560 --> 10:52:09,680
a variety of real malicious

19056
10:52:06,756 --> 10:52:11,436
pcaps. And so to simulate us detecting

19057
10:52:09,680 --> 10:52:13,040
traffic for our rules, we don't have to

19058
10:52:11,436 --> 10:52:15,276
set up a lab environment and simulate

19059
10:52:13,040 --> 10:52:16,880
live traffic. We can simply use Snort's

19060
10:52:15,276 --> 10:52:19,360
option for reading in pre-established

19061
10:52:16,880 --> 10:52:21,360
PCAP files. And as we read in these

19062
10:52:19,360 --> 10:52:23,040
packet captures, we can leverage Snort's

19063
10:52:21,360 --> 10:52:25,040
alerting and detection functionalities

19064
10:52:23,040 --> 10:52:26,480
to evaluate our custom rules and make

19065
10:52:25,040 --> 10:52:28,720
sure that we can catch the malicious

19066
10:52:26,480 --> 10:52:30,240
traffic. And in this lab, we'll focus on

19067
10:52:28,720 --> 10:52:31,840
detection rules since it's easier to

19068
10:52:30,240 --> 10:52:33,840
showcase and we can pipe the alerts

19069
10:52:31,840 --> 10:52:35,436
right into our console. And obviously,

19070
10:52:33,840 --> 10:52:37,200
we won't be able to cover every single

19071
10:52:35,436 --> 10:52:39,120
scenario here, but hopefully by covering

19072
10:52:37,200 --> 10:52:40,800
some initial examples, you'll start to

19073
10:52:39,120 --> 10:52:42,320
get a feel for writing simple rules

19074
10:52:40,800 --> 10:52:43,840
which can be paired with the resources

19075
10:52:42,320 --> 10:52:45,000
I'll include at the end of this section

19076
10:52:43,840 --> 10:52:47,360
for further

19077
10:52:45,000 --> 10:52:49,320
practice. And so, let's head over to the

19078
10:52:47,360 --> 10:52:51,520
desktop and over to the network security

19079
10:52:49,320 --> 10:52:54,800
folder. In this case, let's head to the

19080
10:52:51,520 --> 10:52:55,840
snort directory and then under pcaps.

19081
10:52:54,800 --> 10:52:57,720
And this is where we're going to find

19082
10:52:55,840 --> 10:52:59,840
all of the example pcaps for this

19083
10:52:57,720 --> 10:53:02,160
lesson. And so I'm going to open a

19084
10:52:59,840 --> 10:53:05,610
terminal here. And in this case, to

19085
10:53:02,160 --> 10:53:08,709
start off, let's open up 1.pcap in

19086
10:53:05,610 --> 10:53:08,709
[Applause]

19087
10:53:09,000 --> 10:53:13,040
Wireshark. And if you remember this pcap

19088
10:53:11,360 --> 10:53:14,640
file, well maybe you don't just by first

19089
10:53:13,040 --> 10:53:16,640
glance here, but this is the same one

19090
10:53:14,640 --> 10:53:18,800
that we used to both learn TCP dump and

19091
10:53:16,640 --> 10:53:20,000
wire sharkark. So this is the pcap from

19092
10:53:18,800 --> 10:53:22,720
that system that was infected with

19093
10:53:20,000 --> 10:53:25,160
Lokibot that made the HTTP request to

19094
10:53:22,720 --> 10:53:29,560
download the malicious audiodg.exe

19095
10:53:25,160 --> 10:53:31,596
Trojan. And if I just run HTTP contains

19096
10:53:29,560 --> 10:53:33,320
audiod, we should be able to pull back

19097
10:53:31,596 --> 10:53:35,720
that request. Yeah, there we

19098
10:53:33,320 --> 10:53:39,360
go. Alternatively, I can go under

19099
10:53:35,720 --> 10:53:42,080
statistics under HTTP under requests and

19100
10:53:39,360 --> 10:53:44,880
we can also find the same audiodg.exe

19101
10:53:42,080 --> 10:53:46,880
executable download. And so in this

19102
10:53:44,880 --> 10:53:49,200
case, let's see if we can use this as an

19103
10:53:46,880 --> 10:53:51,360
example to create a snort rule that can

19104
10:53:49,200 --> 10:53:53,080
alert us on any.exe files that were

19105
10:53:51,360 --> 10:53:55,596
downloaded over

19106
10:53:53,080 --> 10:53:57,720
HTTP. And to do this, let's use the same

19107
10:53:55,596 --> 10:54:01,200
Snorpie tool that I'll link down

19108
10:53:57,720 --> 10:54:03,040
below. So let's set the action to alert.

19109
10:54:01,200 --> 10:54:05,840
Under protocol, it's going to be TCP

19110
10:54:03,040 --> 10:54:07,916
because we're dealing with HTTP traffic.

19111
10:54:05,840 --> 10:54:09,596
For the source port and IP, well, this

19112
10:54:07,916 --> 10:54:11,436
can basically be anything because we

19113
10:54:09,596 --> 10:54:13,120
want to monitor our entire home network

19114
10:54:11,436 --> 10:54:15,680
and any ephemeral port that these

19115
10:54:13,120 --> 10:54:17,756
connections originate from. For the

19116
10:54:15,680 --> 10:54:21,436
destination, well, we will have any once

19117
10:54:17,756 --> 10:54:24,436
again an 80 for the port. Here, as best

19118
10:54:21,436 --> 10:54:27,480
practice, I will put in an

19119
10:54:24,436 --> 10:54:29,756
SID and a revision

19120
10:54:27,480 --> 10:54:34,520
number. For the message, I will just

19121
10:54:29,756 --> 10:54:37,360
include http URI contains.exe.

19122
10:54:34,520 --> 10:54:38,720
exe. All right. So, at this stage, our

19123
10:54:37,360 --> 10:54:40,720
rule is not going to match anything

19124
10:54:38,720 --> 10:54:41,916
specific to executables, right? In this

19125
10:54:40,720 --> 10:54:44,800
case, we're just going to match anything

19126
10:54:41,916 --> 10:54:47,040
on port 80, which isn't ideal. So, this

19127
10:54:44,800 --> 10:54:48,400
is where content matches come into play.

19128
10:54:47,040 --> 10:54:51,116
So, I'm going to press the green plus

19129
10:54:48,400 --> 10:54:52,480
button here to add a content match. And

19130
10:54:51,116 --> 10:54:54,720
in this case, we need to choose what

19131
10:54:52,480 --> 10:54:56,560
field we're matching the content off of.

19132
10:54:54,720 --> 10:54:58,560
Because we want to match any.exe

19133
10:54:56,560 --> 10:55:01,520
extensions within the URL, I'm going to

19134
10:54:58,560 --> 10:55:03,680
click on the URI option here.

19135
10:55:01,520 --> 10:55:05,040
I'm also going to click on no case here.

19136
10:55:03,680 --> 10:55:06,800
And this is going to make sure the rule

19137
10:55:05,040 --> 10:55:08,640
is case insensitive because attackers

19138
10:55:06,800 --> 10:55:10,596
might try something like .exe with a

19139
10:55:08,640 --> 10:55:12,880
capital X or two capital E's for

19140
10:55:10,596 --> 10:55:15,240
example. And for the actual content to

19141
10:55:12,880 --> 10:55:17,436
match, I'm just going to type

19142
10:55:15,240 --> 10:55:20,160
in.exe. And to confirm this, I'm going

19143
10:55:17,436 --> 10:55:22,320
to press the green check icon. And so we

19144
10:55:20,160 --> 10:55:23,840
have our rule written here. And you can

19145
10:55:22,320 --> 10:55:26,880
see that it automatically converted the

19146
10:55:23,840 --> 10:55:29,040
dot here to this hex value of 2E, which

19147
10:55:26,880 --> 10:55:30,560
refers to the dot. We didn't actually

19148
10:55:29,040 --> 10:55:31,680
need to do this, but it's good practice.

19149
10:55:30,560 --> 10:55:34,160
And you're going to see a lot of hex

19150
10:55:31,680 --> 10:55:35,916
values within these content signatures.

19151
10:55:34,160 --> 10:55:38,400
And so this rule in theory is going to

19152
10:55:35,916 --> 10:55:41,160
alert when it detects any HTTP traffic

19153
10:55:38,400 --> 10:55:43,800
where the URI contains the

19154
10:55:41,160 --> 10:55:46,360
string.exe. And so if I copy this to our

19155
10:55:43,800 --> 10:55:48,880
clipboard, we can close out Wireshark

19156
10:55:46,360 --> 10:55:51,840
here. I'm going to edit our local rules

19157
10:55:48,880 --> 10:55:54,200
file which is located in Etsy snort

19158
10:55:51,840 --> 10:55:56,400
rules and then

19159
10:55:54,200 --> 10:55:58,800
local.ru. And I'm going to delete our

19160
10:55:56,400 --> 10:56:01,276
previous example here for FTP and paste

19161
10:55:58,800 --> 10:56:03,400
in this new rule that we created. And

19162
10:56:01,276 --> 10:56:06,400
I'll remove any white space as

19163
10:56:03,400 --> 10:56:08,000
well. Great. So if I save this, we

19164
10:56:06,400 --> 10:56:10,160
should be good now to run snort and test

19165
10:56:08,000 --> 10:56:11,240
out our rule. So to do this, we can run

19166
10:56:10,160 --> 10:56:13,596
pseudo

19167
10:56:11,240 --> 10:56:16,160
snort and specify the name of our

19168
10:56:13,596 --> 10:56:16,160
configuration

19169
10:56:16,596 --> 10:56:21,116
file. We want to run in quiet mode as

19170
10:56:19,116 --> 10:56:23,520
well. And in this case, we want to read

19171
10:56:21,116 --> 10:56:25,160
in the pcap.

19172
10:56:23,520 --> 10:56:28,080
In this case, it's going to be

19173
10:56:25,160 --> 10:56:29,916
1.pcap. And for the alert mode, we want

19174
10:56:28,080 --> 10:56:31,840
to specify console so we get all of the

19175
10:56:29,916 --> 10:56:33,400
alerts in our console output. So we

19176
10:56:31,840 --> 10:56:36,800
don't have to go around digging for

19177
10:56:33,400 --> 10:56:38,480
them. And if I run this, well, we get

19178
10:56:36,800 --> 10:56:41,840
two results. So our rule matched two

19179
10:56:38,480 --> 10:56:44,116
packets from this pcap file. And if I ls

19180
10:56:41,840 --> 10:56:46,080
in the var log snort

19181
10:56:44,116 --> 10:56:48,320
directory, well, we can see a number of

19182
10:56:46,080 --> 10:56:49,360
alerts from our previous testing. In

19183
10:56:48,320 --> 10:56:51,560
this case, I'm going to remove

19184
10:56:49,360 --> 10:56:53,840
everything currently in varlog

19185
10:56:51,560 --> 10:56:55,596
snort. And then I'm going to run snort

19186
10:56:53,840 --> 10:56:59,400
once again and we should get these same

19187
10:56:55,596 --> 10:57:01,916
two alerts. Now if I ls that log

19188
10:56:59,400 --> 10:57:04,400
directory, we should get this snort.log

19189
10:57:01,916 --> 10:57:06,480
file with our specified Unix timestamp.

19190
10:57:04,400 --> 10:57:09,200
And from here we can dump or decode the

19191
10:57:06,480 --> 10:57:13,596
packets that we matched. So I can run

19192
10:57:09,200 --> 10:57:13,596
pseudo snort and read in that log

19193
10:57:13,880 --> 10:57:19,360
file provide the quiet option and then

19194
10:57:16,480 --> 10:57:21,276
tacd here to decode the packets. And we

19195
10:57:19,360 --> 10:57:23,520
can see the raw packets as well as their

19196
10:57:21,276 --> 10:57:26,240
ASI and hex output and start to

19197
10:57:23,520 --> 10:57:28,160
understand how they matched. And if you

19198
10:57:26,240 --> 10:57:30,240
remember from our initial analysis, we

19199
10:57:28,160 --> 10:57:33,080
had this Bing API endpoint that made a

19200
10:57:30,240 --> 10:57:35,200
request to that audiod.exe

19201
10:57:33,080 --> 10:57:38,756
executable. And our second packet here

19202
10:57:35,200 --> 10:57:41,040
is the actual download of

19203
10:57:38,756 --> 10:57:42,960
audiodg.exe. All right. Nice. So we were

19204
10:57:41,040 --> 10:57:44,560
able to create a custom rule to catch

19205
10:57:42,960 --> 10:57:46,520
the request or download of any

19206
10:57:44,560 --> 10:57:49,040
executable files based on the file

19207
10:57:46,520 --> 10:57:51,116
extension. And so before we run the next

19208
10:57:49,040 --> 10:57:54,596
example, I'm just going to once again

19209
10:57:51,116 --> 10:57:57,040
clear out our varlog snort

19210
10:57:54,596 --> 10:57:58,880
directory. Okay, so in our first

19211
10:57:57,040 --> 10:58:01,116
example, we were able to detect the

19212
10:57:58,880 --> 10:58:04,160
downloaded files due to the.exe

19213
10:58:01,116 --> 10:58:06,160
extension included in the request URI.

19214
10:58:04,160 --> 10:58:08,560
But what if the file extension is not

19215
10:58:06,160 --> 10:58:10,720
included in the URI or it's obscured by

19216
10:58:08,560 --> 10:58:12,400
other means? Well, we might need to rely

19217
10:58:10,720 --> 10:58:13,840
on different detection methods to

19218
10:58:12,400 --> 10:58:16,000
identify potentially malicious

19219
10:58:13,840 --> 10:58:17,916
downloads. And one approach is to

19220
10:58:16,000 --> 10:58:19,160
inspect the content type headers in the

19221
10:58:17,916 --> 10:58:21,200
HTTP

19222
10:58:19,160 --> 10:58:23,360
responses. So for example, many

19223
10:58:21,200 --> 10:58:25,240
executable files are transmitted with

19224
10:58:23,360 --> 10:58:28,880
the following content type of

19225
10:58:25,240 --> 10:58:31,596
application XMS download. And we can use

19226
10:58:28,880 --> 10:58:35,360
this string to trigger alerts. So I'm

19227
10:58:31,596 --> 10:58:35,360
going to open up 1.pcap again in

19228
10:58:35,400 --> 10:58:39,436
Wireshark. And if I find the same

19229
10:58:44,520 --> 10:58:49,560
audgent type of

19230
10:58:47,640 --> 10:58:52,000
application/x-m

19231
10:58:49,560 --> 10:58:53,916
download and as mentioned earlier this

19232
10:58:52,000 --> 10:58:56,080
mime type is commonly associated with

19233
10:58:53,916 --> 10:58:57,840
the.exe file extension and is used by

19234
10:58:56,080 --> 10:58:59,756
web servers to tell browsers and other

19235
10:58:57,840 --> 10:59:01,840
client applications that the file being

19236
10:58:59,756 --> 10:59:04,480
transmitted is a Windows executable so

19237
10:59:01,840 --> 10:59:07,200
it can be handled correctly. So, let's

19238
10:59:04,480 --> 10:59:10,000
create a snort rule that can detect HTTP

19239
10:59:07,200 --> 10:59:12,240
responses containing the application XMS

19240
10:59:10,000 --> 10:59:14,160
download mime type. So, I'm going to

19241
10:59:12,240 --> 10:59:16,880
open up our local rules file again and

19242
10:59:14,160 --> 10:59:18,400
make some changes to our initial rule.

19243
10:59:16,880 --> 10:59:20,960
In this case, I'm going to remove all of

19244
10:59:18,400 --> 10:59:24,400
our options here and I'm going to change

19245
10:59:20,960 --> 10:59:26,000
the value of our message slightly.

19246
10:59:24,400 --> 10:59:28,400
And if you think about the direction of

19247
10:59:26,000 --> 10:59:30,000
travel here, in the initial example, we

19248
10:59:28,400 --> 10:59:32,080
were looking at any destination IP

19249
10:59:30,000 --> 10:59:33,840
addresses of port 80 because we were

19250
10:59:32,080 --> 10:59:36,080
looking for when the client made a

19251
10:59:33,840 --> 10:59:37,916
request to the web server. In this case,

19252
10:59:36,080 --> 10:59:39,596
we're looking at a response header. So,

19253
10:59:37,916 --> 10:59:41,200
we kind of want to reverse this, right?

19254
10:59:39,596 --> 10:59:42,560
So, we want to put any for the

19255
10:59:41,200 --> 10:59:44,400
destination port because that can be

19256
10:59:42,560 --> 10:59:46,000
referring to a client's ephemeral port

19257
10:59:44,400 --> 10:59:47,436
and from the source of the traffic,

19258
10:59:46,000 --> 10:59:50,800
well, we want that to be the web server

19259
10:59:47,436 --> 10:59:52,480
on port 80. So for the options here, we

19260
10:59:50,800 --> 10:59:54,080
want to specify the content that we're

19261
10:59:52,480 --> 10:59:56,480
matching. And we can do that with the

19262
10:59:54,080 --> 10:59:58,320
content object. And within the quotes

19263
10:59:56,480 --> 11:00:00,080
here, we want to paste in the string

19264
10:59:58,320 --> 11:00:02,560
containing the exact header that we want

19265
11:00:00,080 --> 11:00:06,520
to match. In this case, it's going to be

19266
11:00:02,560 --> 11:00:09,116
content- type with the colon of

19267
11:00:06,520 --> 11:00:10,640
application/x-ms download. And now we

19268
11:00:09,116 --> 11:00:13,360
need to specify what field we're

19269
11:00:10,640 --> 11:00:15,320
searching for to match this header. In

19270
11:00:13,360 --> 11:00:18,800
this case, we can use the

19271
11:00:15,320 --> 11:00:19,880
http header field. and make sure to end

19272
11:00:18,800 --> 11:00:21,596
that with a

19273
11:00:19,880 --> 11:00:22,916
semicolon. All right, so I'm going to

19274
11:00:21,596 --> 11:00:25,360
save this rule

19275
11:00:22,916 --> 11:00:28,000
here. And now we can try running snort

19276
11:00:25,360 --> 11:00:30,160
again on the same 1.pcap file and see

19277
11:00:28,000 --> 11:00:30,160
what

19278
11:00:30,840 --> 11:00:35,040
happens. All right, so I'm going to hit

19279
11:00:32,720 --> 11:00:37,480
enter here. And it looks like I might

19280
11:00:35,040 --> 11:00:40,320
have messed something

19281
11:00:37,480 --> 11:00:42,480
up. Ah, I forgot the semicolon after the

19282
11:00:40,320 --> 11:00:43,680
message. So again, if you miss one of

19283
11:00:42,480 --> 11:00:46,000
these semicolons, you're going to get a

19284
11:00:43,680 --> 11:00:49,040
syntax error. And let me just make sure.

19285
11:00:46,000 --> 11:00:50,320
Yep, I missed one here as well. Okay, so

19286
11:00:49,040 --> 11:00:51,916
don't be like me and make sure you have

19287
11:00:50,320 --> 11:00:52,916
all your semicolons. I think this looks

19288
11:00:51,916 --> 11:00:56,000
good

19289
11:00:52,916 --> 11:00:57,596
now. So if I run this again, but we can

19290
11:00:56,000 --> 11:01:00,320
see we actually did manage to make an

19291
11:00:57,596 --> 11:01:02,240
alert here. And in this case, the packet

19292
11:01:00,320 --> 11:01:04,080
direction was from the web server going

19293
11:01:02,240 --> 11:01:04,840
over to our client and stemming from

19294
11:01:04,080 --> 11:01:07,200
port

19295
11:01:04,840 --> 11:01:10,480
80. And from here once again we can

19296
11:01:07,200 --> 11:01:10,480
decode the raw packets that were

19297
11:01:12,280 --> 11:01:15,460
[Applause]

19298
11:01:25,800 --> 11:01:29,916
captured. Awesome. So we were able to

19299
11:01:28,000 --> 11:01:31,080
create a second rule to match on a

19300
11:01:29,916 --> 11:01:33,360
different part of the

19301
11:01:31,080 --> 11:01:35,200
packet. So let's go through a third

19302
11:01:33,360 --> 11:01:36,640
example here. And before we do this, I'm

19303
11:01:35,200 --> 11:01:39,276
going to clear out the varlog snort

19304
11:01:36,640 --> 11:01:39,276
directory once

19305
11:01:41,640 --> 11:01:46,240
again. So for a third example, it's

19306
11:01:44,400 --> 11:01:48,276
still possible for attackers to spoof

19307
11:01:46,240 --> 11:01:50,480
the file extension and the content type

19308
11:01:48,276 --> 11:01:52,880
header. And these are common techniques

19309
11:01:50,480 --> 11:01:54,800
that attackers use to bypass checks or

19310
11:01:52,880 --> 11:01:56,640
rules like these, especially in web

19311
11:01:54,800 --> 11:01:58,400
server file uploads and in our case over

19312
11:01:56,640 --> 11:02:00,320
network traffic.

19313
11:01:58,400 --> 11:02:02,240
And so for this example, let's focus on

19314
11:02:00,320 --> 11:02:04,400
detecting the file signature or the

19315
11:02:02,240 --> 11:02:07,000
magic bytes of a Windows executable

19316
11:02:04,400 --> 11:02:09,200
within the body or payload of an HTTP

19317
11:02:07,000 --> 11:02:11,276
packet. Specifically, we want to

19318
11:02:09,200 --> 11:02:13,276
identify that hex signature or that MZ

19319
11:02:11,276 --> 11:02:16,320
marker which is indicative of the start

19320
11:02:13,276 --> 11:02:18,000
of a Windows executable file. If you

19321
11:02:16,320 --> 11:02:20,400
remember this Wikipedia article listing

19322
11:02:18,000 --> 11:02:22,640
all the file signatures and magic bytes,

19323
11:02:20,400 --> 11:02:24,560
if I do a search for MZ, well, we can

19324
11:02:22,640 --> 11:02:26,640
see the actual hex value that makes up

19325
11:02:24,560 --> 11:02:28,480
this file signature.

19326
11:02:26,640 --> 11:02:30,240
We can also see the file types that it's

19327
11:02:28,480 --> 11:02:32,400
associated with. For example, the ones

19328
11:02:30,240 --> 11:02:35,436
that we saw are an executable file along

19329
11:02:32,400 --> 11:02:37,360
with a Windows DL. And so to create a

19330
11:02:35,436 --> 11:02:39,200
snort rule that can detect the MZ marker

19331
11:02:37,360 --> 11:02:43,436
in the payload, we need to look for the

19332
11:02:39,200 --> 11:02:43,436
hexadimal pattern of 4D

19333
11:02:43,960 --> 11:02:48,400
5A. And so to write this rule, well, we

19334
11:02:46,960 --> 11:02:51,116
can base this basically off of our

19335
11:02:48,400 --> 11:02:54,400
previous one. We can specify an alert

19336
11:02:51,116 --> 11:02:56,880
for TCP packets on any destination IP

19337
11:02:54,400 --> 11:02:58,480
with the port 80. Because remember in

19338
11:02:56,880 --> 11:03:00,880
this case we're matching any responses

19339
11:02:58,480 --> 11:03:02,720
from the web server. And so for the

19340
11:03:00,880 --> 11:03:05,200
direction we're going to specify the

19341
11:03:02,720 --> 11:03:06,960
destination of any any. And in the

19342
11:03:05,200 --> 11:03:09,360
options here I'm just going to include a

19343
11:03:06,960 --> 11:03:09,360
relevant

19344
11:03:10,840 --> 11:03:15,720
description. And in this case we want to

19345
11:03:13,116 --> 11:03:18,000
specify that we're matching file

19346
11:03:15,720 --> 11:03:19,840
data. And this keyword is going to tell

19347
11:03:18,000 --> 11:03:23,360
Snort to inspect the contents of the

19348
11:03:19,840 --> 11:03:25,276
files transmitted over the network.

19349
11:03:23,360 --> 11:03:28,320
Additionally, we want to specify the

19350
11:03:25,276 --> 11:03:28,320
actual content that we're

19351
11:03:29,640 --> 11:03:33,680
matching. And so within our string here,

19352
11:03:32,320 --> 11:03:36,720
I'm going to specify that we're putting

19353
11:03:33,680 --> 11:03:38,320
in hex values. And so to do this, I'm

19354
11:03:36,720 --> 11:03:39,160
going to enclose everything within these

19355
11:03:38,320 --> 11:03:41,360
pipe

19356
11:03:39,160 --> 11:03:43,916
characters. And within these pipes, I'm

19357
11:03:41,360 --> 11:03:47,200
going to paste in the 45A, which refers

19358
11:03:43,916 --> 11:03:48,960
to MZ in hex. Lastly, here we can take

19359
11:03:47,200 --> 11:03:51,360
advantage of the depth feature within

19360
11:03:48,960 --> 11:03:52,480
our options. And when I type this, it's

19361
11:03:51,360 --> 11:03:53,800
probably going to move over to the left.

19362
11:03:52,480 --> 11:03:56,320
Okay, so hopefully you can still see

19363
11:03:53,800 --> 11:03:58,560
that. And the depth option here is going

19364
11:03:56,320 --> 11:04:00,596
to specify how far into the packet snort

19365
11:03:58,560 --> 11:04:02,800
should look to match the specified

19366
11:04:00,596 --> 11:04:04,800
content. In this case, we can just put

19367
11:04:02,800 --> 11:04:06,640
two here to specify that we only want

19368
11:04:04,800 --> 11:04:08,560
Snort to look in the first two bytes of

19369
11:04:06,640 --> 11:04:11,756
the payload. In this case, matching the

19370
11:04:08,560 --> 11:04:13,360
MZ in hex. And so we can really start to

19371
11:04:11,756 --> 11:04:16,000
see the power of Snort here and its

19372
11:04:13,360 --> 11:04:17,520
different pattern matching capabilities.

19373
11:04:16,000 --> 11:04:20,400
And so as best practice here, I'm going

19374
11:04:17,520 --> 11:04:20,400
to close this out with a

19375
11:04:20,680 --> 11:04:25,680
SID and a revision of

19376
11:04:23,320 --> 11:04:28,400
one. And so this looks good to me. So

19377
11:04:25,680 --> 11:04:30,320
I'm going to save this. And to test out

19378
11:04:28,400 --> 11:04:32,080
that our rule is going to work, well,

19379
11:04:30,320 --> 11:04:35,560
I'm just going to run Snort once again

19380
11:04:32,080 --> 11:04:37,840
on this 1.pcap file and see what

19381
11:04:35,560 --> 11:04:40,560
happens. And you can see we did in fact

19382
11:04:37,840 --> 11:04:42,960
get a hit. And if we open up the log

19383
11:04:40,560 --> 11:04:42,960
file in

19384
11:04:46,040 --> 11:04:51,480
Wireshark, we can see all of the

19385
11:04:47,916 --> 11:04:54,720
relevant packets that stem from this

19386
11:04:51,480 --> 11:04:56,880
capture. If I follow the TCP stream,

19387
11:04:54,720 --> 11:04:59,400
well, we do in fact see the MZ file

19388
11:04:56,880 --> 11:05:01,596
signature at the start of this

19389
11:04:59,400 --> 11:05:02,720
file. Excellent. So that was three

19390
11:05:01,596 --> 11:05:04,960
different ways and three different

19391
11:05:02,720 --> 11:05:07,400
custom rules that we wrote to match a

19392
11:05:04,960 --> 11:05:09,840
malicious file transfer over

19393
11:05:07,400 --> 11:05:11,436
HTTP. And so before we move on here, I'm

19394
11:05:09,840 --> 11:05:13,276
just going to clear out my varlog snort

19395
11:05:11,436 --> 11:05:15,520
directory and let's take a look at the

19396
11:05:13,276 --> 11:05:15,520
next

19397
11:05:15,800 --> 11:05:20,756
example. And so for this example, let's

19398
11:05:18,480 --> 11:05:23,360
open up the 2.pcap file within

19399
11:05:20,756 --> 11:05:25,520
Wireshark. And if you recall, this is

19400
11:05:23,360 --> 11:05:27,276
the pcap that we analyzed with TCP dump

19401
11:05:25,520 --> 11:05:29,840
earlier that contained the cobalt strike

19402
11:05:27,276 --> 11:05:32,320
activity. And during our analysis, well,

19403
11:05:29,840 --> 11:05:34,200
we identified a malicious SS load DLL

19404
11:05:32,320 --> 11:05:36,560
that was using a unique user agent

19405
11:05:34,200 --> 11:05:38,420
string. To demonstrate this, we can

19406
11:05:36,560 --> 11:05:39,880
search for the user

19407
11:05:38,420 --> 11:05:43,800
[Applause]

19408
11:05:39,880 --> 11:05:46,640
agent that contains SS

19409
11:05:43,800 --> 11:05:49,200
load. And if I open up the packet here,

19410
11:05:46,640 --> 11:05:50,276
we can see the user agent of SS load

19411
11:05:49,200 --> 11:05:52,960
version

19412
11:05:50,276 --> 11:05:54,720
1.1. So this time, let's create a rule

19413
11:05:52,960 --> 11:05:57,040
for this string that can detect an alert

19414
11:05:54,720 --> 11:05:58,640
on this type of activity.

19415
11:05:57,040 --> 11:06:00,640
And we already created some rules based

19416
11:05:58,640 --> 11:06:02,720
on HTTP traffic before. So this should

19417
11:06:00,640 --> 11:06:04,640
be quite simple. I'm going to open up

19418
11:06:02,720 --> 11:06:06,596
our local rules file, comment our

19419
11:06:04,640 --> 11:06:08,640
previous rule out, and start a new one

19420
11:06:06,596 --> 11:06:10,840
here. This time I'm going to keep it

19421
11:06:08,640 --> 11:06:13,560
very open and just alert

19422
11:06:10,840 --> 11:06:15,520
anything under the content

19423
11:06:13,560 --> 11:06:17,276
here. This is going to be the same

19424
11:06:15,520 --> 11:06:18,880
process as matching the content type

19425
11:06:17,276 --> 11:06:21,680
earlier. In this case, I'm going to

19426
11:06:18,880 --> 11:06:23,436
paste in the user agent. And under the

19427
11:06:21,680 --> 11:06:24,916
field that we're matching, I'm just

19428
11:06:23,436 --> 11:06:28,960
going to specify

19429
11:06:24,916 --> 11:06:30,640
HTTP header. And by using HTTP header

19430
11:06:28,960 --> 11:06:32,720
here, Snort is going to inspect the

19431
11:06:30,640 --> 11:06:34,480
traffic to determine if it is HTTP

19432
11:06:32,720 --> 11:06:37,116
traffic regardless of the port that it's

19433
11:06:34,480 --> 11:06:39,116
on. And so this allows us to catch HTTP

19434
11:06:37,116 --> 11:06:40,800
traffic on any non-standard ports as

19435
11:06:39,116 --> 11:06:43,000
well, which is sometimes common for

19436
11:06:40,800 --> 11:06:45,360
attackers and command and control

19437
11:06:43,000 --> 11:06:47,276
servers. I'm going to add the no case

19438
11:06:45,360 --> 11:06:48,880
option as well, just in case we run

19439
11:06:47,276 --> 11:06:50,880
across this user agent in a lowercase

19440
11:06:48,880 --> 11:06:53,680
format. And then I'll just close it out

19441
11:06:50,880 --> 11:06:56,080
with a SID and a revision number. So I'm

19442
11:06:53,680 --> 11:06:58,560
good with that. I'm going to save and

19443
11:06:56,080 --> 11:07:01,480
let's try running snort again this time

19444
11:06:58,560 --> 11:07:03,840
under the 2.pcap file and see what

19445
11:07:01,480 --> 11:07:06,320
happens. All right, so we detected a

19446
11:07:03,840 --> 11:07:08,520
number of alerts here. In fact, we

19447
11:07:06,320 --> 11:07:10,640
detected nine different

19448
11:07:08,520 --> 11:07:12,880
alerts. And if I head back over to

19449
11:07:10,640 --> 11:07:16,640
Wireshark and put in that same display

19450
11:07:12,880 --> 11:07:18,880
filter of HTTP user agent contains SS

19451
11:07:16,640 --> 11:07:20,680
load.

19452
11:07:18,880 --> 11:07:22,880
Well, in this case, we also get nine

19453
11:07:20,680 --> 11:07:25,480
packets, meaning that we successfully

19454
11:07:22,880 --> 11:07:27,520
match the user agent via the

19455
11:07:25,480 --> 11:07:28,960
headers. All right, before our last

19456
11:07:27,520 --> 11:07:30,916
example here, I'm going to once again

19457
11:07:28,960 --> 11:07:33,200
clear out our Snort log

19458
11:07:30,916 --> 11:07:35,596
directory. And then for this example,

19459
11:07:33,200 --> 11:07:37,000
let's move away from the HTTP protocol

19460
11:07:35,596 --> 11:07:40,880
and look at

19461
11:07:37,000 --> 11:07:43,400
SSH. And so 3.pcap here is a packet

19462
11:07:40,880 --> 11:07:45,520
capture containing an SSH brute

19463
11:07:43,400 --> 11:07:48,520
force. So I can open this up in

19464
11:07:45,520 --> 11:07:48,520
Wireshark.

19465
11:07:49,436 --> 11:07:53,596
And if we look at the statistics under

19466
11:07:51,436 --> 11:07:56,800
the protocol hierarchy, well, we can see

19467
11:07:53,596 --> 11:07:58,756
we have a large number of SSH traffic.

19468
11:07:56,800 --> 11:08:00,720
And if we look at the capture file

19469
11:07:58,756 --> 11:08:02,960
properties, well, all of this traffic

19470
11:08:00,720 --> 11:08:04,680
was contained in 25 seconds, which is

19471
11:08:02,960 --> 11:08:06,720
already suspicious of a brute force

19472
11:08:04,680 --> 11:08:08,640
attack. But of course, like we've been

19473
11:08:06,720 --> 11:08:10,800
doing, let's create a custom snort rule

19474
11:08:08,640 --> 11:08:13,520
that can detect on potential SSH brute

19475
11:08:10,800 --> 11:08:16,080
force attempts. And so, let's use Snorpy

19476
11:08:13,520 --> 11:08:18,080
for this rule. Under action, I'm going

19477
11:08:16,080 --> 11:08:19,720
to choose alert obviously and the

19478
11:08:18,080 --> 11:08:22,000
protocol is going to be

19479
11:08:19,720 --> 11:08:23,240
TCP. For the source here, I'm going to

19480
11:08:22,000 --> 11:08:26,080
put any

19481
11:08:23,240 --> 11:08:28,800
any. And the destination is going to be

19482
11:08:26,080 --> 11:08:31,520
any destination IP with port 22

19483
11:08:28,800 --> 11:08:33,840
specifying SSH traffic. I'll put in a

19484
11:08:31,520 --> 11:08:35,916
SID and a revision number as well as a

19485
11:08:33,840 --> 11:08:37,000
rule message indicating a potential SSH

19486
11:08:35,916 --> 11:08:39,916
brute force

19487
11:08:37,000 --> 11:08:42,560
attack. When we go under the TCP options

19488
11:08:39,916 --> 11:08:44,880
here, I'm going to click on direction

19489
11:08:42,560 --> 11:08:46,560
and click on to server. And this can

19490
11:08:44,880 --> 11:08:48,720
specify the actual flow direction that

19491
11:08:46,560 --> 11:08:51,596
the rule will apply to. And so if we

19492
11:08:48,720 --> 11:08:54,040
click to server here and under TCP

19493
11:08:51,596 --> 11:08:56,080
state, I'm going to also select

19494
11:08:54,040 --> 11:08:57,840
established. And this means that the

19495
11:08:56,080 --> 11:08:59,436
rule is only going to trigger on traffic

19496
11:08:57,840 --> 11:09:02,320
going to the server side of an

19497
11:08:59,436 --> 11:09:04,520
established connection. And lastly here,

19498
11:09:02,320 --> 11:09:06,640
we can choose the threshold tracking

19499
11:09:04,520 --> 11:09:09,040
type. And you can see we have a number

19500
11:09:06,640 --> 11:09:10,560
of different options to choose from. And

19501
11:09:09,040 --> 11:09:12,720
the threshold option is going to

19502
11:09:10,560 --> 11:09:15,520
generate an alert every single time our

19503
11:09:12,720 --> 11:09:17,360
network traffic matches our threshold.

19504
11:09:15,520 --> 11:09:20,080
So for example, if we set our count to

19505
11:09:17,360 --> 11:09:21,756
five and our time period is 60 seconds,

19506
11:09:20,080 --> 11:09:23,596
well, it will give us an alert on the

19507
11:09:21,756 --> 11:09:25,436
fifth event and then the 10th event and

19508
11:09:23,596 --> 11:09:27,080
so on as long as it's within that

19509
11:09:25,436 --> 11:09:29,916
60-second

19510
11:09:27,080 --> 11:09:31,680
period. If we were to choose both here,

19511
11:09:29,916 --> 11:09:34,080
well, this is only going to generate one

19512
11:09:31,680 --> 11:09:35,436
alert within our set threshold period.

19513
11:09:34,080 --> 11:09:37,680
For example, if we exceeded our

19514
11:09:35,436 --> 11:09:39,276
threshold within that 60-second period,

19515
11:09:37,680 --> 11:09:41,400
well, we're only going to get a single

19516
11:09:39,276 --> 11:09:43,680
alert within that 60-second

19517
11:09:41,400 --> 11:09:45,116
period. And so, to cut down on the

19518
11:09:43,680 --> 11:09:46,480
number of duplicate alerts that we're

19519
11:09:45,116 --> 11:09:49,200
generating, well, I'm going to select

19520
11:09:46,480 --> 11:09:50,800
both here. And this is because we're

19521
11:09:49,200 --> 11:09:53,116
going to set up some options that can

19522
11:09:50,800 --> 11:09:56,080
detect if we've had more than five SSH

19523
11:09:53,116 --> 11:09:58,880
connection attempts within 30 seconds.

19524
11:09:56,080 --> 11:10:00,560
Under track by here, we can choose the

19525
11:09:58,880 --> 11:10:02,960
actual field that we're tracking the

19526
11:10:00,560 --> 11:10:05,116
threshold off of. So in this case I can

19527
11:10:02,960 --> 11:10:06,916
choose by source to specify the source

19528
11:10:05,116 --> 11:10:09,436
IP address of the

19529
11:10:06,916 --> 11:10:12,240
connection. Under count here we can set

19530
11:10:09,436 --> 11:10:14,756
a count of five. And under seconds well

19531
11:10:12,240 --> 11:10:17,040
we can specify something like 30 for 30

19532
11:10:14,756 --> 11:10:18,480
seconds. And I also just realized I

19533
11:10:17,040 --> 11:10:19,756
messed up the SID here. So I'm going to

19534
11:10:18,480 --> 11:10:22,276
add a couple more zeros to make sure

19535
11:10:19,756 --> 11:10:24,640
we're past that 1 million mark for best

19536
11:10:22,276 --> 11:10:26,560
practice. And so how this rule is going

19537
11:10:24,640 --> 11:10:28,560
to work is well snort is going to

19538
11:10:26,560 --> 11:10:31,756
inspect the TCP SIN packets going

19539
11:10:28,560 --> 11:10:33,276
towards port 22 or SSH. It's then going

19540
11:10:31,756 --> 11:10:35,040
to track the number of connection

19541
11:10:33,276 --> 11:10:37,116
attempts from a single source IP

19542
11:10:35,040 --> 11:10:38,720
address. And if there are more than five

19543
11:10:37,116 --> 11:10:41,116
connection attempts from the same source

19544
11:10:38,720 --> 11:10:43,360
IP within 30 seconds, it's going to

19545
11:10:41,116 --> 11:10:45,520
generate an alert. So, I'm going to copy

19546
11:10:43,360 --> 11:10:48,080
this rule over to our terminal here and

19547
11:10:45,520 --> 11:10:49,680
paste it into our local rule file. I'll

19548
11:10:48,080 --> 11:10:52,080
comment out our previous one and paste

19549
11:10:49,680 --> 11:10:52,080
this rule

19550
11:10:54,596 --> 11:10:59,756
in. And now I'm just going to run snort

19551
11:10:57,200 --> 11:11:02,276
on the 3.pcap file. and we should get

19552
11:10:59,756 --> 11:11:04,640
some alerts from brute force

19553
11:11:02,276 --> 11:11:06,560
attempts. And you can see because we set

19554
11:11:04,640 --> 11:11:09,320
that 30- secondond period, we're only

19555
11:11:06,560 --> 11:11:11,960
getting one alert. If I were to change

19556
11:11:09,320 --> 11:11:15,800
this and actually edit the

19557
11:11:11,960 --> 11:11:18,960
threshold instead of both here to

19558
11:11:15,800 --> 11:11:20,160
threshold and run the same rule again,

19559
11:11:18,960 --> 11:11:21,756
well, this time we're going to get an

19560
11:11:20,160 --> 11:11:24,080
alert for every single attempt within

19561
11:11:21,756 --> 11:11:26,240
that 30 secondond period. Or to put it

19562
11:11:24,080 --> 11:11:28,320
another way, anytime a single source IP

19563
11:11:26,240 --> 11:11:29,640
address exceeded five SSH connections

19564
11:11:28,320 --> 11:11:31,916
within 30

19565
11:11:29,640 --> 11:11:34,080
seconds. And so this was a very

19566
11:11:31,916 --> 11:11:35,840
simplified example. And in a real world

19567
11:11:34,080 --> 11:11:37,436
scenario, you might want to fine-tune

19568
11:11:35,840 --> 11:11:39,116
the threshold values like the count and

19569
11:11:37,436 --> 11:11:41,080
the seconds based on your baseline

19570
11:11:39,116 --> 11:11:43,276
traffic patterns so you can reduce false

19571
11:11:41,080 --> 11:11:44,880
positives. And also there are built-in

19572
11:11:43,276 --> 11:11:46,480
brute force detection methods like fail

19573
11:11:44,880 --> 11:11:48,160
to ban. But I just wanted to showcase

19574
11:11:46,480 --> 11:11:51,200
how it could be done with snort rules as

19575
11:11:48,160 --> 11:11:52,560
well. And so that was a great exercise I

19576
11:11:51,200 --> 11:11:54,800
think into various rules and

19577
11:11:52,560 --> 11:11:57,436
methodologies around creating and tuning

19578
11:11:54,800 --> 11:11:59,116
rules with Snort. And any other IDS or

19579
11:11:57,436 --> 11:12:01,436
IPS system that you interact with like

19580
11:11:59,116 --> 11:12:03,916
Siraata or Zeke is going to have very

19581
11:12:01,436 --> 11:12:05,680
similar syntax and approaches. And if

19582
11:12:03,916 --> 11:12:06,840
you want to dive into more complex rules

19583
11:12:05,680 --> 11:12:08,880
and look into things like

19584
11:12:06,840 --> 11:12:10,640
pre-processors, well definitely look

19585
11:12:08,880 --> 11:12:12,480
into the community rules and the default

19586
11:12:10,640 --> 11:12:13,916
rules that we looked at earlier. And you

19587
11:12:12,480 --> 11:12:15,276
could learn a lot about thresholds and

19588
11:12:13,916 --> 11:12:17,756
counts and various fields that you can

19589
11:12:15,276 --> 11:12:19,520
define as well through these rules. And

19590
11:12:17,756 --> 11:12:21,276
so now I think it's time that we use

19591
11:12:19,520 --> 11:12:22,720
what we learned to go through a quick

19592
11:12:21,276 --> 11:12:24,960
challenge and combine what we learned

19593
11:12:22,720 --> 11:12:26,720
through PACAP analysis to then go ahead

19594
11:12:24,960 --> 11:12:28,360
and create custom detection rules and

19595
11:12:26,720 --> 11:12:30,480
improve our team's detection

19596
11:12:28,360 --> 11:12:32,960
capabilities. And so with that, I will

19597
11:12:30,480 --> 11:12:34,560
see you in the next video. Now that

19598
11:12:32,960 --> 11:12:36,240
we've wrapped up the network security

19599
11:12:34,560 --> 11:12:38,240
section, let's take a look at some

19600
11:12:36,240 --> 11:12:39,840
additional resources that you can use to

19601
11:12:38,240 --> 11:12:42,000
continue practicing network traffic

19602
11:12:39,840 --> 11:12:43,276
analysis and custom rule writing for

19603
11:12:42,000 --> 11:12:45,040
network security monitoring and

19604
11:12:43,276 --> 11:12:46,880
prevention. And I will have all these

19605
11:12:45,040 --> 11:12:48,596
links down below, but I'll quickly walk

19606
11:12:46,880 --> 11:12:52,360
through some of them as

19607
11:12:48,596 --> 11:12:54,080
well. And so the first one here is

19608
11:12:52,360 --> 11:12:56,480
malwareanalysis.net. And this is a

19609
11:12:54,080 --> 11:12:58,960
fantastic blog and resource by Brad of

19610
11:12:56,480 --> 11:13:01,200
Unit 42 of Palo Alto Networks that

19611
11:12:58,960 --> 11:13:03,596
focuses on well network traffic related

19612
11:13:01,200 --> 11:13:06,480
to malware infections. And if we go to

19613
11:13:03,596 --> 11:13:08,640
the archive here, it contains hundreds

19614
11:13:06,480 --> 11:13:10,560
of realistic pecaps from actual malware

19615
11:13:08,640 --> 11:13:12,160
infections in the wild. and it's an

19616
11:13:10,560 --> 11:13:14,160
amazing resource if you want to continue

19617
11:13:12,160 --> 11:13:16,480
practicing your network traffic analysis

19618
11:13:14,160 --> 11:13:17,916
and detection engineering skills. I will

19619
11:13:16,480 --> 11:13:19,596
list a disclaimer here to be careful

19620
11:13:17,916 --> 11:13:21,360
with these samples because they do in

19621
11:13:19,596 --> 11:13:22,880
fact contain real malware samples. So,

19622
11:13:21,360 --> 11:13:25,276
as best practice, keep everything

19623
11:13:22,880 --> 11:13:27,040
contained within your lab VM. And I

19624
11:13:25,276 --> 11:13:28,640
fully credit this resource here for

19625
11:13:27,040 --> 11:13:30,240
providing some of the pecaps that we use

19626
11:13:28,640 --> 11:13:32,960
during the wire shark section because

19627
11:13:30,240 --> 11:13:34,480
they really are just that good.

19628
11:13:32,960 --> 11:13:36,960
Another great resource here is from

19629
11:13:34,480 --> 11:13:38,880
Chris Sanders who is a master of packet

19630
11:13:36,960 --> 11:13:41,040
analysis and an author of some fantastic

19631
11:13:38,880 --> 11:13:43,360
books like practical packet analysis and

19632
11:13:41,040 --> 11:13:45,040
applied network security monitoring. And

19633
11:13:43,360 --> 11:13:47,116
he's also provided a list or a

19634
11:13:45,040 --> 11:13:48,800
repository here of packet captures from

19635
11:13:47,116 --> 11:13:51,200
over the years and you can download them

19636
11:13:48,800 --> 11:13:51,200
here from

19637
11:13:51,720 --> 11:13:56,800
GitHub within the Wireark wiki. Well,

19638
11:13:54,880 --> 11:13:59,360
they also have a list of sample capture

19639
11:13:56,800 --> 11:13:59,360
files as

19640
11:14:00,276 --> 11:14:05,040
well. Additionally, this resource here

19641
11:14:02,560 --> 11:14:07,116
from netresc has compiled a list of

19642
11:14:05,040 --> 11:14:09,400
publicly available pcap files which is

19643
11:14:07,116 --> 11:14:11,596
all freely

19644
11:14:09,400 --> 11:14:13,436
available. We can also take a look at

19645
11:14:11,596 --> 11:14:15,360
the zeke repository which is another

19646
11:14:13,436 --> 11:14:17,200
type of network security monitoring tool

19647
11:14:15,360 --> 11:14:19,276
as they also list some sample packet

19648
11:14:17,200 --> 11:14:20,720
captures and traces as well. And these

19649
11:14:19,276 --> 11:14:24,200
are the trace files that are used by the

19650
11:14:20,720 --> 11:14:24,200
zeke test suite.

19651
11:14:26,320 --> 11:14:30,720
And lastly here, Security Onion has

19652
11:14:28,560 --> 11:14:32,560
compiled a list of public pcaps for

19653
11:14:30,720 --> 11:14:33,840
their Security Onion test tool. And

19654
11:14:32,560 --> 11:14:35,680
these are some that we already covered

19655
11:14:33,840 --> 11:14:37,720
here, but also another great list of new

19656
11:14:35,680 --> 11:14:40,240
resources as

19657
11:14:37,720 --> 11:14:41,756
well. And so there's definitely no

19658
11:14:40,240 --> 11:14:43,360
shortage of PECAP files for you to get

19659
11:14:41,756 --> 11:14:45,116
your hands on and start dissecting and

19660
11:14:43,360 --> 11:14:47,040
analyzing and creating detection rules

19661
11:14:45,116 --> 11:14:48,640
for. And so I hope these lists are

19662
11:14:47,040 --> 11:14:50,080
useful to you and that you were able to

19663
11:14:48,640 --> 11:14:51,596
learn quite a bit about everything from

19664
11:14:50,080 --> 11:14:53,360
the structure of packets to how

19665
11:14:51,596 --> 11:14:55,880
computers talk to each other all the way

19666
11:14:53,360 --> 11:14:58,320
to network traffic analysis and security

19667
11:14:55,880 --> 11:14:59,840
monitoring. And so as a foreoding

19668
11:14:58,320 --> 11:15:01,520
sentiment to the next section of this

19669
11:14:59,840 --> 11:15:03,360
course, well, no matter how

19670
11:15:01,520 --> 11:15:04,720
comprehensive our packet captures are

19671
11:15:03,360 --> 11:15:06,560
and where our capture tools are

19672
11:15:04,720 --> 11:15:08,160
positioned, they can't provide a

19673
11:15:06,560 --> 11:15:10,000
complete picture of the actions and

19674
11:15:08,160 --> 11:15:12,400
behaviors and modifications occurring on

19675
11:15:10,000 --> 11:15:14,000
the endpoint alone. And so while they

19676
11:15:12,400 --> 11:15:15,840
can reveal remotely issued commands that

19677
11:15:14,000 --> 11:15:17,840
were not encrypted if an attacker

19678
11:15:15,840 --> 11:15:20,000
utilizes encrypted protocols or encrypts

19679
11:15:17,840 --> 11:15:22,560
its transmissions in some way while our

19680
11:15:20,000 --> 11:15:24,080
pecaps become ineffective and also any

19681
11:15:22,560 --> 11:15:25,680
changes on our actual system or

19682
11:15:24,080 --> 11:15:27,520
workstation. So things like spawn

19683
11:15:25,680 --> 11:15:30,400
processes or events and registry

19684
11:15:27,520 --> 11:15:32,320
modifications all remain undetected. And

19685
11:15:30,400 --> 11:15:34,240
so because of this it's often beneficial

19686
11:15:32,320 --> 11:15:36,160
during investigations to pair our

19687
11:15:34,240 --> 11:15:38,080
network analysis and endpoint security

19688
11:15:36,160 --> 11:15:40,000
capabilities to get a full picture of

19689
11:15:38,080 --> 11:15:41,756
what's going on at the endpoint level.

19690
11:15:40,000 --> 11:15:43,720
And so with that, I will see you in the

19691
11:15:41,756 --> 11:15:45,916
next domain of this

19692
11:15:43,720 --> 11:15:47,040
course. All righty, everyone. Good job

19693
11:15:45,916 --> 11:15:49,116
for getting through that network

19694
11:15:47,040 --> 11:15:51,116
security section. I know that one can be

19695
11:15:49,116 --> 11:15:52,960
quite long. Uh there's a lot of sort of

19696
11:15:51,116 --> 11:15:54,160
stuff thrown at you, uh you know, all

19697
11:15:52,960 --> 11:15:56,320
throughout the different tools that we

19698
11:15:54,160 --> 11:15:58,400
touch on and cover. Uh but again, very

19699
11:15:56,320 --> 11:16:00,880
important aspects for any sock analyst

19700
11:15:58,400 --> 11:16:02,400
to know. Um and so with that, we are

19701
11:16:00,880 --> 11:16:04,080
sort of going to move things over to the

19702
11:16:02,400 --> 11:16:06,320
endpoint now, which is my favorite

19703
11:16:04,080 --> 11:16:09,200
domain and my favorite section of the

19704
11:16:06,320 --> 11:16:11,436
sock 101 course. Uh we're going to talk

19705
11:16:09,200 --> 11:16:12,800
all about um not only how we can

19706
11:16:11,436 --> 11:16:14,000
simulate malware, right? So we're

19707
11:16:12,800 --> 11:16:16,080
actually going to be creating malware

19708
11:16:14,000 --> 11:16:17,916
and uh simulating different attacks at

19709
11:16:16,080 --> 11:16:19,360
the endpoint level, but of course we're

19710
11:16:17,916 --> 11:16:20,800
going to learn uh and understand

19711
11:16:19,360 --> 11:16:23,040
different techniques and methodologies

19712
11:16:20,800 --> 11:16:24,720
and tools that we have uh to analyze

19713
11:16:23,040 --> 11:16:26,560
those artifacts as they're being

19714
11:16:24,720 --> 11:16:28,320
generated on the system in real time.

19715
11:16:26,560 --> 11:16:29,916
And so I really think the endpoint

19716
11:16:28,320 --> 11:16:32,000
security section really picks the course

19717
11:16:29,916 --> 11:16:33,840
up uh sort of turns it up a notch and

19718
11:16:32,000 --> 11:16:35,840
really uh deep dives into you know

19719
11:16:33,840 --> 11:16:37,756
performing live incident response but

19720
11:16:35,840 --> 11:16:39,436
also just learning all those different

19721
11:16:37,756 --> 11:16:41,116
operating system and operating system

19722
11:16:39,436 --> 11:16:43,596
level components as it relates to

19723
11:16:41,116 --> 11:16:45,596
Windows and Linux uh and also working

19724
11:16:43,596 --> 11:16:47,520
with an enterprisegrade EDR solution

19725
11:16:45,596 --> 11:16:48,880
which I'm very excited to do. Um

19726
11:16:47,520 --> 11:16:50,800
unfortunately we are going to have to

19727
11:16:48,880 --> 11:16:52,400
cap off this section pretty early. Uh if

19728
11:16:50,800 --> 11:16:53,596
you take a look at the time, we are

19729
11:16:52,400 --> 11:16:55,680
getting close to the end here

19730
11:16:53,596 --> 11:16:58,080
unfortunately, but I just wanted to sort

19731
11:16:55,680 --> 11:17:01,436
of uh remind you all once again to check

19732
11:16:58,080 --> 11:17:03,276
out the full uh sock 101 course on TCM

19733
11:17:01,436 --> 11:17:05,360
uh to get, you know, your hands on all

19734
11:17:03,276 --> 11:17:06,720
these different exciting domains. And so

19735
11:17:05,360 --> 11:17:09,040
again, we'll have the link down in the

19736
11:17:06,720 --> 11:17:10,880
description below for you to register uh

19737
11:17:09,040 --> 11:17:12,240
and take the full course because uh if

19738
11:17:10,880 --> 11:17:14,320
you made it this far, you're clearly

19739
11:17:12,240 --> 11:17:15,756
enjoying it at least to some degree. So

19740
11:17:14,320 --> 11:17:17,436
again, I highly encourage you to check

19741
11:17:15,756 --> 11:17:20,000
out the full course and get all of those

19742
11:17:17,436 --> 11:17:22,000
offerings.

19743
11:17:20,000 --> 11:17:24,080
Welcome to the endpoint security section

19744
11:17:22,000 --> 11:17:26,240
of this course. And in this section,

19745
11:17:24,080 --> 11:17:28,640
we're going to expand the surface of our

19746
11:17:26,240 --> 11:17:31,520
monitoring and analysis capabilities and

19747
11:17:28,640 --> 11:17:34,000
well include endpoint devices as well.

19748
11:17:31,520 --> 11:17:35,596
And so, as a sock analyst, understanding

19749
11:17:34,000 --> 11:17:37,436
endpoint security is going to be an

19750
11:17:35,596 --> 11:17:38,720
important focus for us because we're

19751
11:17:37,436 --> 11:17:40,200
almost always going to be dealing with

19752
11:17:38,720 --> 11:17:42,560
endpoints in incident response

19753
11:17:40,200 --> 11:17:44,560
scenarios. And as we discussed back in

19754
11:17:42,560 --> 11:17:46,320
the fishing analysis section, whether

19755
11:17:44,560 --> 11:17:48,320
you agree with it or not, humans are

19756
11:17:46,320 --> 11:17:50,720
often seen as the weakest link by

19757
11:17:48,320 --> 11:17:52,720
attackers. and as such are often

19758
11:17:50,720 --> 11:17:55,160
specifically targeted by attackers for

19759
11:17:52,720 --> 11:17:57,040
their initial access or foothold into an

19760
11:17:55,160 --> 11:17:58,960
organization. And we can think about

19761
11:17:57,040 --> 11:18:00,800
endpoints as simply an extension of

19762
11:17:58,960 --> 11:18:02,720
users. Right? So whether it be

19763
11:18:00,800 --> 11:18:05,276
workstations in the form of desktops or

19764
11:18:02,720 --> 11:18:06,960
laptops or mobile devices or even

19765
11:18:05,276 --> 11:18:09,160
endpoints in the form of servers like

19766
11:18:06,960 --> 11:18:11,436
web servers or database servers or FTP

19767
11:18:09,160 --> 11:18:13,116
servers, all of these systems or

19768
11:18:11,436 --> 11:18:15,200
endpoints need to be hardened and

19769
11:18:13,116 --> 11:18:16,960
monitored as these are the targets that

19770
11:18:15,200 --> 11:18:18,960
often serve as these entry points for

19771
11:18:16,960 --> 11:18:21,276
attackers into the network.

19772
11:18:18,960 --> 11:18:23,200
And by truly understanding the endpoint,

19773
11:18:21,276 --> 11:18:25,116
we're going to be much more effective at

19774
11:18:23,200 --> 11:18:27,680
identifying what's normal or abnormal on

19775
11:18:25,116 --> 11:18:30,320
workstations and servers, or being able

19776
11:18:27,680 --> 11:18:32,240
to correlate network traffic activities,

19777
11:18:30,320 --> 11:18:34,720
or being able to map an attacker's

19778
11:18:32,240 --> 11:18:37,000
tactics and techniques, and ultimately

19779
11:18:34,720 --> 11:18:39,436
respond to incidents more

19780
11:18:37,000 --> 11:18:40,720
effectively. And so, this section will

19781
11:18:39,436 --> 11:18:43,200
provide you with the knowledge and

19782
11:18:40,720 --> 11:18:45,116
hands-on skills needed to effectively

19783
11:18:43,200 --> 11:18:47,756
monitor and analyze endpoint security

19784
11:18:45,116 --> 11:18:49,596
events. And we're also going to cover

19785
11:18:47,756 --> 11:18:51,916
endpoint events and logs in much more

19786
11:18:49,596 --> 11:18:54,080
detail during the SIM or the security

19787
11:18:51,916 --> 11:18:55,596
information and event management domain

19788
11:18:54,080 --> 11:18:57,200
as well as the processes and

19789
11:18:55,596 --> 11:18:58,756
methodologies for responding to

19790
11:18:57,200 --> 11:19:00,960
incidents in the incident response

19791
11:18:58,756 --> 11:19:03,040
section. And so there's going to be some

19792
11:19:00,960 --> 11:19:04,880
natural overlap here, but understanding

19793
11:19:03,040 --> 11:19:06,880
the fundamentals and components of

19794
11:19:04,880 --> 11:19:08,720
operating systems and endpoints and how

19795
11:19:06,880 --> 11:19:10,640
we can enhance their security is going

19796
11:19:08,720 --> 11:19:12,960
to be very helpful before we dive into

19797
11:19:10,640 --> 11:19:14,720
these topics. And so with that, let's

19798
11:19:12,960 --> 11:19:16,400
jump into our domain objectives for this

19799
11:19:14,720 --> 11:19:18,080
section.

19800
11:19:16,400 --> 11:19:19,916
And so first we of course want to

19801
11:19:18,080 --> 11:19:21,240
understand the fundamentals of endpoint

19802
11:19:19,916 --> 11:19:23,436
security

19803
11:19:21,240 --> 11:19:25,200
monitoring. And so we want to explore

19804
11:19:23,436 --> 11:19:27,596
different things like endpoint types and

19805
11:19:25,200 --> 11:19:29,200
controls and detection strategies. So we

19806
11:19:27,596 --> 11:19:31,436
want to answer questions like what types

19807
11:19:29,200 --> 11:19:32,960
of endpoints exist in our environment

19808
11:19:31,436 --> 11:19:35,116
and what security controls can we

19809
11:19:32,960 --> 11:19:37,880
implement at the host level and how do

19810
11:19:35,116 --> 11:19:40,240
sock analysts detect malicious endpoint

19811
11:19:37,880 --> 11:19:42,000
activity. And to do this we want to

19812
11:19:40,240 --> 11:19:43,916
understand the core operating system

19813
11:19:42,000 --> 11:19:45,840
components as well as their functions.

19814
11:19:43,916 --> 11:19:48,160
And so we want to dive into what normal

19815
11:19:45,840 --> 11:19:50,800
looks like in regards to processes and

19816
11:19:48,160 --> 11:19:51,960
events and logs or network activity and

19817
11:19:50,800 --> 11:19:54,480
the Windows

19818
11:19:51,960 --> 11:19:56,320
registry. We want to develop practical

19819
11:19:54,480 --> 11:19:58,160
skills in extracting insights from

19820
11:19:56,320 --> 11:19:59,680
system internals. So we're going to

19821
11:19:58,160 --> 11:20:02,000
actually take a look at the CIS internal

19822
11:19:59,680 --> 11:20:04,000
suite and use it to analyze systems and

19823
11:20:02,000 --> 11:20:07,276
extract valuable data and improve our

19824
11:20:04,000 --> 11:20:09,200
endpoint logging capabilities.

19825
11:20:07,276 --> 11:20:11,116
And all of our learning in this section

19826
11:20:09,200 --> 11:20:12,800
is going to converge into a practical

19827
11:20:11,116 --> 11:20:15,680
project to deploy and configure a

19828
11:20:12,800 --> 11:20:17,520
unified endpoint detection solution. And

19829
11:20:15,680 --> 11:20:19,276
so this section is going to be a lot of

19830
11:20:17,520 --> 11:20:20,720
fun to cover and go through and it's

19831
11:20:19,276 --> 11:20:22,640
really going to set us up for success

19832
11:20:20,720 --> 11:20:24,160
during the rest of the course. And so

19833
11:20:22,640 --> 11:20:26,200
with this introduction out of the way, I

19834
11:20:24,160 --> 11:20:29,200
will see you in the next

19835
11:20:26,200 --> 11:20:31,360
video. I suppose we should first define

19836
11:20:29,200 --> 11:20:34,320
and answer the question of what even is

19837
11:20:31,360 --> 11:20:36,480
an endpoint? And so in simple terms, an

19838
11:20:34,320 --> 11:20:37,916
endpoint is any physical hardware or

19839
11:20:36,480 --> 11:20:39,916
device that connects to our

19840
11:20:37,916 --> 11:20:42,400
organization's network. And in the

19841
11:20:39,916 --> 11:20:44,000
context of security operations, while

19842
11:20:42,400 --> 11:20:45,596
endpoints are great tools that we can

19843
11:20:44,000 --> 11:20:47,680
use for business productivity or

19844
11:20:45,596 --> 11:20:49,680
communications or use them to stand up

19845
11:20:47,680 --> 11:20:51,596
and configure servers, well, they can

19846
11:20:49,680 --> 11:20:54,160
also serve as a potential point of entry

19847
11:20:51,596 --> 11:20:55,520
for security threats. And endpoints can

19848
11:20:54,160 --> 11:20:57,840
include a wide range of different

19849
11:20:55,520 --> 11:20:59,756
devices. So, we might have various

19850
11:20:57,840 --> 11:21:00,840
desktops or laptops that employees use

19851
11:20:59,756 --> 11:21:03,040
for their day-to-day business

19852
11:21:00,840 --> 11:21:04,720
operations, or maybe laptops that

19853
11:21:03,040 --> 11:21:06,436
external stakeholders or third party

19854
11:21:04,720 --> 11:21:08,800
contractors bring in and connect to our

19855
11:21:06,436 --> 11:21:10,160
network. And workstations are common

19856
11:21:08,800 --> 11:21:12,480
targets for attackers due to their

19857
11:21:10,160 --> 11:21:14,480
widespread use and often direct access

19858
11:21:12,480 --> 11:21:15,840
to sensitive information. So, we can

19859
11:21:14,480 --> 11:21:17,360
think about attacks like fishing that

19860
11:21:15,840 --> 11:21:19,360
often attempt to install malicious

19861
11:21:17,360 --> 11:21:21,596
software or remote access Trojans onto

19862
11:21:19,360 --> 11:21:23,596
an employes workstation.

19863
11:21:21,596 --> 11:21:25,040
And so of course along with workstations

19864
11:21:23,596 --> 11:21:27,080
there's been an increasing rise of

19865
11:21:25,040 --> 11:21:28,960
mobile devices and tablets within the

19866
11:21:27,080 --> 11:21:30,640
workplace. And these are additional

19867
11:21:28,960 --> 11:21:32,640
endpoints that the sock also needs to

19868
11:21:30,640 --> 11:21:34,400
track and secure within the organization

19869
11:21:32,640 --> 11:21:36,800
as they can also be subject to fishing

19870
11:21:34,400 --> 11:21:38,720
and malware attacks. And due to their

19871
11:21:36,800 --> 11:21:40,320
portability they're also susceptible to

19872
11:21:38,720 --> 11:21:42,520
physical threats like being lost or

19873
11:21:40,320 --> 11:21:46,000
stolen which can lead to unauthorized

19874
11:21:42,520 --> 11:21:47,840
access. And so we also have servers,

19875
11:21:46,000 --> 11:21:49,276
right? And when we think of servers,

19876
11:21:47,840 --> 11:21:51,116
well, these are endpoints that host

19877
11:21:49,276 --> 11:21:53,596
various resources and business functions

19878
11:21:51,116 --> 11:21:56,040
like applications or data or services

19879
11:21:53,596 --> 11:21:58,000
that are essential to the organization's

19880
11:21:56,040 --> 11:22:00,000
operation, right? So we might have

19881
11:21:58,000 --> 11:22:02,276
internal or external email servers or

19882
11:22:00,000 --> 11:22:04,400
web servers, database servers or file

19883
11:22:02,276 --> 11:22:06,320
servers. And all of these additional

19884
11:22:04,400 --> 11:22:08,160
endpoints require hardening measures and

19885
11:22:06,320 --> 11:22:10,320
security controls to prevent things like

19886
11:22:08,160 --> 11:22:13,116
breaches and data exfiltration and

19887
11:22:10,320 --> 11:22:15,360
unauthorized access into the network.

19888
11:22:13,116 --> 11:22:16,800
We also have things like IoT devices,

19889
11:22:15,360 --> 11:22:18,720
right? So, these can include our smart

19890
11:22:16,800 --> 11:22:20,800
devices like sensors and cameras and

19891
11:22:18,720 --> 11:22:22,320
printers and any other appliance that's

19892
11:22:20,800 --> 11:22:24,240
often overlooked as part of the

19893
11:22:22,320 --> 11:22:25,756
organization's attack surface, but are

19894
11:22:24,240 --> 11:22:27,360
becoming more and more common due to

19895
11:22:25,756 --> 11:22:30,080
their smart features and ease of use

19896
11:22:27,360 --> 11:22:31,596
within the workplace. And often, it can

19897
11:22:30,080 --> 11:22:33,200
be hard to get long-term support for

19898
11:22:31,596 --> 11:22:35,116
these devices, meaning that they can

19899
11:22:33,200 --> 11:22:37,400
quickly lose access to security updates

19900
11:22:35,116 --> 11:22:39,756
with no way of patching or remediating

19901
11:22:37,400 --> 11:22:41,436
vulnerabilities. And while not IoT

19902
11:22:39,756 --> 11:22:43,040
devices themselves, we can also think of

19903
11:22:41,436 --> 11:22:45,116
some other categories of endpoints like

19904
11:22:43,040 --> 11:22:46,480
OT or operational technology which are

19905
11:22:45,116 --> 11:22:48,720
endpoints that are used to manage

19906
11:22:46,480 --> 11:22:50,480
industrial operations or IC or

19907
11:22:48,720 --> 11:22:52,240
industrial control systems and also

19908
11:22:50,480 --> 11:22:54,360
SCADA equipment which all come with

19909
11:22:52,240 --> 11:22:56,400
their own attack surface and hardening

19910
11:22:54,360 --> 11:22:58,160
challenges. We also need to think about

19911
11:22:56,400 --> 11:23:00,160
all of our networking appliances like

19912
11:22:58,160 --> 11:23:02,000
routers and switches and firewalls that

19913
11:23:00,160 --> 11:23:04,320
form the backbone of the organization's

19914
11:23:02,000 --> 11:23:05,756
network infrastructure. And since these

19915
11:23:04,320 --> 11:23:07,840
endpoints often run custom or

19916
11:23:05,756 --> 11:23:09,200
proprietary operating systems, it can

19917
11:23:07,840 --> 11:23:10,800
sometimes be difficult to install

19918
11:23:09,200 --> 11:23:12,480
endpoint agents or monitor things

19919
11:23:10,800 --> 11:23:14,200
effectively. But we will talk about this

19920
11:23:12,480 --> 11:23:16,720
later on in the

19921
11:23:14,200 --> 11:23:17,916
course. And so with this abundance of

19922
11:23:16,720 --> 11:23:19,756
endpoints growing throughout an

19923
11:23:17,916 --> 11:23:21,276
organization's environment, well, we

19924
11:23:19,756 --> 11:23:22,960
need a way to implement security

19925
11:23:21,276 --> 11:23:24,720
controls to monitor and alert on

19926
11:23:22,960 --> 11:23:27,276
malicious activity or behavior occurring

19927
11:23:24,720 --> 11:23:28,960
on the host or operating system level.

19928
11:23:27,276 --> 11:23:30,880
And over the years, a lot of research

19929
11:23:28,960 --> 11:23:32,080
and development has gone into evolving

19930
11:23:30,880 --> 11:23:34,320
endpoint security monitoring

19931
11:23:32,080 --> 11:23:36,160
capabilities. and vendors have invented

19932
11:23:34,320 --> 11:23:38,360
many exciting acronyms to sell the

19933
11:23:36,160 --> 11:23:40,560
latest and greatest hostbased security

19934
11:23:38,360 --> 11:23:42,320
solutions. And so let's quickly go

19935
11:23:40,560 --> 11:23:44,240
through the most prominent controls or

19936
11:23:42,320 --> 11:23:45,840
solutions that you might see out there.

19937
11:23:44,240 --> 11:23:47,436
And as we think about the concept of

19938
11:23:45,840 --> 11:23:49,360
defense in depth, some of these

19939
11:23:47,436 --> 11:23:51,116
capabilities pair handinand quite well

19940
11:23:49,360 --> 11:23:52,960
together or have a lot of overlap with

19941
11:23:51,116 --> 11:23:54,800
each other. And so the goal for an

19942
11:23:52,960 --> 11:23:56,480
organization is to assess which controls

19943
11:23:54,800 --> 11:23:58,160
align to their specific threat model and

19944
11:23:56,480 --> 11:23:59,756
environment and prioritize their

19945
11:23:58,160 --> 11:24:02,560
implementation based on that relevance

19946
11:23:59,756 --> 11:24:04,160
along with available resources. And I'll

19947
11:24:02,560 --> 11:24:06,000
also mention that the area of endpoint

19948
11:24:04,160 --> 11:24:07,276
security can get messy in terms of, you

19949
11:24:06,000 --> 11:24:09,276
know, where do you draw the line between

19950
11:24:07,276 --> 11:24:10,640
what an EDR can do and a hostbased

19951
11:24:09,276 --> 11:24:12,880
intrusion detection or prevention

19952
11:24:10,640 --> 11:24:14,640
system, for example, or how EDR can

19953
11:24:12,880 --> 11:24:16,400
integrate with UBA. Yeah, I told you

19954
11:24:14,640 --> 11:24:17,756
there would be a lot of acronyms here.

19955
11:24:16,400 --> 11:24:19,436
Or some vendors might have their own

19956
11:24:17,756 --> 11:24:21,040
standalone products. So, it's always

19957
11:24:19,436 --> 11:24:22,640
been very hard to compare specific

19958
11:24:21,040 --> 11:24:24,000
vendor offerings between each other

19959
11:24:22,640 --> 11:24:26,276
because they can all do different things

19960
11:24:24,000 --> 11:24:28,400
and are always evolving to include more

19961
11:24:26,276 --> 11:24:30,320
capabilities. Which is why I always like

19962
11:24:28,400 --> 11:24:32,800
to say it's not ever about the specific

19963
11:24:30,320 --> 11:24:34,640
tool or solution, but what the tool or

19964
11:24:32,800 --> 11:24:36,596
solution aims to accomplish and what

19965
11:24:34,640 --> 11:24:39,360
security controls it's aimed to

19966
11:24:36,596 --> 11:24:41,840
enforce. And so first here we have anti

19967
11:24:39,360 --> 11:24:43,916
virus or anti-malware. And this refers

19968
11:24:41,840 --> 11:24:46,400
to software designed to detect, prevent,

19969
11:24:43,916 --> 11:24:49,200
and remove malicious software or malware

19970
11:24:46,400 --> 11:24:50,800
from computers and networks. An anti

19971
11:24:49,200 --> 11:24:52,480
virus software typically works by

19972
11:24:50,800 --> 11:24:54,240
scanning files and programs on your

19973
11:24:52,480 --> 11:24:56,880
computer for various patterns or

19974
11:24:54,240 --> 11:24:59,040
signatures that match known malware. And

19975
11:24:56,880 --> 11:25:00,640
the traditional concept of antivirus has

19976
11:24:59,040 --> 11:25:02,720
evolved into newer solutions, which

19977
11:25:00,640 --> 11:25:04,560
we'll talk about soon, that move beyond

19978
11:25:02,720 --> 11:25:06,960
the reliance of constant hard-coded

19979
11:25:04,560 --> 11:25:08,560
signature updates. And these newer

19980
11:25:06,960 --> 11:25:10,080
solutions can employ advanced detection

19981
11:25:08,560 --> 11:25:11,840
methods like behavior analysis or

19982
11:25:10,080 --> 11:25:13,960
huristics and machine learning

19983
11:25:11,840 --> 11:25:15,840
algorithms to detect threats more

19984
11:25:13,960 --> 11:25:17,960
effectively. Which kind of brings us

19985
11:25:15,840 --> 11:25:20,960
into endpoint detection and response or

19986
11:25:17,960 --> 11:25:22,560
EDR. And this is a technology focused on

19987
11:25:20,960 --> 11:25:24,800
monitoring and responding to threats on

19988
11:25:22,560 --> 11:25:26,560
endpoints in real time. And EDR

19989
11:25:24,800 --> 11:25:28,480
solutions provide visibility into our

19990
11:25:26,560 --> 11:25:30,240
different endpoint activities and can

19991
11:25:28,480 --> 11:25:32,276
detect suspicious behavior and

19992
11:25:30,240 --> 11:25:34,800
facilitate a more rapid incident

19993
11:25:32,276 --> 11:25:36,720
response. And so EDR implementations

19994
11:25:34,800 --> 11:25:38,960
will typically require the deployment of

19995
11:25:36,720 --> 11:25:40,880
an agent on each endpoint. And this

19996
11:25:38,960 --> 11:25:43,040
agent is what collects and transmits the

19997
11:25:40,880 --> 11:25:45,080
telemetry data to a centralized EDR

19998
11:25:43,040 --> 11:25:47,436
server or console where it can then be

19999
11:25:45,080 --> 11:25:48,960
analyzed. And this agent monitors

20000
11:25:47,436 --> 11:25:50,800
various aspects of the endpoint

20001
11:25:48,960 --> 11:25:52,960
behavior. So things like process

20002
11:25:50,800 --> 11:25:55,000
execution or file system changes or

20003
11:25:52,960 --> 11:25:57,360
registry modifications and even network

20004
11:25:55,000 --> 11:25:59,040
connections. And so while antivirus or

20005
11:25:57,360 --> 11:26:00,640
anti-malware software focuses on

20006
11:25:59,040 --> 11:26:03,436
preventing and removing known types of

20007
11:26:00,640 --> 11:26:05,520
malware, EDR extends the capabilities to

20008
11:26:03,436 --> 11:26:07,200
detect and respond to a broader range of

20009
11:26:05,520 --> 11:26:08,960
security threats by analyzing the

20010
11:26:07,200 --> 11:26:10,116
actions and behavior within endpoint

20011
11:26:08,960 --> 11:26:12,160
devices

20012
11:26:10,116 --> 11:26:14,880
themselves. And so this kind of brings

20013
11:26:12,160 --> 11:26:17,276
us to XDR or extended detection and

20014
11:26:14,880 --> 11:26:18,960
response. And to be honest, it's a bit

20015
11:26:17,276 --> 11:26:20,880
of a marketing buzzword because it can

20016
11:26:18,960 --> 11:26:23,360
mean a ton of different things. And so

20017
11:26:20,880 --> 11:26:25,200
to generalize, XDR is really about the

20018
11:26:23,360 --> 11:26:27,360
integration of multiple data points and

20019
11:26:25,200 --> 11:26:29,040
other security solutions to have a more

20020
11:26:27,360 --> 11:26:31,680
autonomous and quicker response to

20021
11:26:29,040 --> 11:26:33,436
routine threats. And in some cases can

20022
11:26:31,680 --> 11:26:35,116
even take automated action like blocking

20023
11:26:33,436 --> 11:26:36,880
signins on compromised users or

20024
11:26:35,116 --> 11:26:38,800
isolating endpoints from the network or

20025
11:26:36,880 --> 11:26:41,360
forcing password changes or blocking web

20026
11:26:38,800 --> 11:26:43,596
traffic or policy enforcement. And so

20027
11:26:41,360 --> 11:26:45,436
XDR can expand the capabilities of an

20028
11:26:43,596 --> 11:26:46,960
EDR and include other layers of

20029
11:26:45,436 --> 11:26:49,720
operation like looking at the broader

20030
11:26:46,960 --> 11:26:52,000
network traffic or email or cloud

20031
11:26:49,720 --> 11:26:54,240
environments. We also have data loss

20032
11:26:52,000 --> 11:26:56,080
prevention or DLP. And this is a

20033
11:26:54,240 --> 11:26:57,916
strategy and set of technologies that

20034
11:26:56,080 --> 11:26:59,880
aim to protect sensitive data from

20035
11:26:57,916 --> 11:27:02,320
unauthorized access or use and

20036
11:26:59,880 --> 11:27:04,320
transmission. Right? So DLP solutions

20037
11:27:02,320 --> 11:27:07,116
can monitor and control data while it's

20038
11:27:04,320 --> 11:27:08,480
in motion or at rest and even in use to

20039
11:27:07,116 --> 11:27:10,640
prevent data breaches and ensure

20040
11:27:08,480 --> 11:27:12,320
compliance with regulations.

20041
11:27:10,640 --> 11:27:14,080
And so these solutions can detect

20042
11:27:12,320 --> 11:27:16,560
sensitive data in different forms like

20043
11:27:14,080 --> 11:27:17,840
text or files or images and emails all

20044
11:27:16,560 --> 11:27:20,400
across different locations like

20045
11:27:17,840 --> 11:27:22,080
endpoints and servers. And they can

20046
11:27:20,400 --> 11:27:24,000
implement holistic access controls

20047
11:27:22,080 --> 11:27:25,756
around sensitive data or do things like

20048
11:27:24,000 --> 11:27:27,276
dynamic data masking on things like

20049
11:27:25,756 --> 11:27:29,360
social security numbers or credit card

20050
11:27:27,276 --> 11:27:31,360
numbers. And most of all monitoring the

20051
11:27:29,360 --> 11:27:33,116
data transfer activities. So, for

20052
11:27:31,360 --> 11:27:34,960
example, if an employee attempts to send

20053
11:27:33,116 --> 11:27:36,960
an email containing credit card numbers

20054
11:27:34,960 --> 11:27:38,560
or tries to upload sensitive financial

20055
11:27:36,960 --> 11:27:40,640
reports to a personal cloud storage

20056
11:27:38,560 --> 11:27:42,800
service, well, a data loss prevention

20057
11:27:40,640 --> 11:27:44,040
solution can kick in and intervene based

20058
11:27:42,800 --> 11:27:46,800
on predefined

20059
11:27:44,040 --> 11:27:49,756
policies. We also have user and entity

20060
11:27:46,800 --> 11:27:51,756
behavior analytics or UBA. Or you might

20061
11:27:49,756 --> 11:27:53,436
see this as UEBA, which is slightly

20062
11:27:51,756 --> 11:27:55,040
different, but we can generalize here.

20063
11:27:53,436 --> 11:27:56,880
And this involves monitoring and

20064
11:27:55,040 --> 11:27:58,720
analyzing user behavior patterns to

20065
11:27:56,880 --> 11:28:00,640
detect anomalous or suspicious

20066
11:27:58,720 --> 11:28:03,200
activities that can indicate things like

20067
11:28:00,640 --> 11:28:05,200
insider threats or compromised accounts.

20068
11:28:03,200 --> 11:28:06,800
And the big thing about UBA here is its

20069
11:28:05,200 --> 11:28:08,880
ability to use machine learning and

20070
11:28:06,800 --> 11:28:10,720
statistical analysis to identify

20071
11:28:08,880 --> 11:28:13,360
deviations from normal behavior or a

20072
11:28:10,720 --> 11:28:15,520
predefined baseline. And so it can build

20073
11:28:13,360 --> 11:28:17,756
a profile and context on normal user

20074
11:28:15,520 --> 11:28:19,596
behavior based on historical data and

20075
11:28:17,756 --> 11:28:21,276
real-time observations. And so it can

20076
11:28:19,596 --> 11:28:23,276
track things like a user or endpoint's

20077
11:28:21,276 --> 11:28:24,640
typical login times or access patterns

20078
11:28:23,276 --> 11:28:26,480
or how much data is typically

20079
11:28:24,640 --> 11:28:28,480
transferred from that endpoint. And it

20080
11:28:26,480 --> 11:28:30,400
can also consider the context around the

20081
11:28:28,480 --> 11:28:32,560
user, right? So the user roles or access

20082
11:28:30,400 --> 11:28:34,080
privileges or the actual geographic

20083
11:28:32,560 --> 11:28:36,880
location that the user is accessing

20084
11:28:34,080 --> 11:28:39,040
from. And so the goal of user and entity

20085
11:28:36,880 --> 11:28:40,720
behavioral analytics is to identify

20086
11:28:39,040 --> 11:28:42,640
potential insider threats or account

20087
11:28:40,720 --> 11:28:44,480
compromises or data exfiltration

20088
11:28:42,640 --> 11:28:45,916
attempts or just in general other

20089
11:28:44,480 --> 11:28:48,560
malicious activities that traditional

20090
11:28:45,916 --> 11:28:50,000
security controls might overlook.

20091
11:28:48,560 --> 11:28:51,640
And this brings us to something we're

20092
11:28:50,000 --> 11:28:54,320
more familiar with from the last

20093
11:28:51,640 --> 11:28:56,720
section. In this case, we have hostbased

20094
11:28:54,320 --> 11:28:58,640
intrusion detection systems or HIDs and

20095
11:28:56,720 --> 11:29:01,116
hostbased intrusion prevention systems

20096
11:28:58,640 --> 11:29:02,960
or HIPS. And these are security measures

20097
11:29:01,116 --> 11:29:04,880
that of course focus on monitoring and

20098
11:29:02,960 --> 11:29:06,756
protecting individual devices or the

20099
11:29:04,880 --> 11:29:08,960
hosts from malicious

20100
11:29:06,756 --> 11:29:10,320
activities, right? And so a HIDS is

20101
11:29:08,960 --> 11:29:12,240
going to operate by monitoring and

20102
11:29:10,320 --> 11:29:14,480
analyzing the internal activity on a

20103
11:29:12,240 --> 11:29:16,800
host like the system logs and files and

20104
11:29:14,480 --> 11:29:18,116
processes and configurations to detect

20105
11:29:16,800 --> 11:29:20,400
any policy

20106
11:29:18,116 --> 11:29:21,840
violations. And of course a HIPS on the

20107
11:29:20,400 --> 11:29:23,596
other hand can take it a step further

20108
11:29:21,840 --> 11:29:25,756
and automatically take actions like

20109
11:29:23,596 --> 11:29:27,520
blocking network traffic or terminating

20110
11:29:25,756 --> 11:29:29,520
malicious processes or modifying

20111
11:29:27,520 --> 11:29:31,436
firewall rules based on these predefined

20112
11:29:29,520 --> 11:29:33,360
rules. And there's going to be a lot of

20113
11:29:31,436 --> 11:29:35,520
overlap here into things like EDR and

20114
11:29:33,360 --> 11:29:37,756
XDR because typically these solutions

20115
11:29:35,520 --> 11:29:40,000
can also take these automated actions

20116
11:29:37,756 --> 11:29:42,240
and do things like quarantine devices or

20117
11:29:40,000 --> 11:29:45,360
kill malicious processes or prevent

20118
11:29:42,240 --> 11:29:47,436
specific file access. And lastly here we

20119
11:29:45,360 --> 11:29:49,360
have a hostbased firewall. And a

20120
11:29:47,436 --> 11:29:50,640
hostbased firewall is a type of firewall

20121
11:29:49,360 --> 11:29:52,560
that operates of course at the

20122
11:29:50,640 --> 11:29:54,480
individual host level to control

20123
11:29:52,560 --> 11:29:56,720
incoming and outgoing traffic based on

20124
11:29:54,480 --> 11:29:58,560
predetermined security rules. And so

20125
11:29:56,720 --> 11:30:00,400
unlike network firewalls that typically

20126
11:29:58,560 --> 11:30:02,320
protect an entire network by filtering

20127
11:30:00,400 --> 11:30:04,000
traffic at the perimeter, hostbased

20128
11:30:02,320 --> 11:30:06,320
firewalls are installed and configured

20129
11:30:04,000 --> 11:30:08,720
on individual devices to provide more

20130
11:30:06,320 --> 11:30:10,080
granular control over traffic flows and

20131
11:30:08,720 --> 11:30:12,916
protect the host system from any

20132
11:30:10,080 --> 11:30:15,680
unauthorized traffic or

20133
11:30:12,916 --> 11:30:17,756
access. So we can further break down the

20134
11:30:15,680 --> 11:30:19,480
main methodologies and components used

20135
11:30:17,756 --> 11:30:21,916
to detect different types of host

20136
11:30:19,480 --> 11:30:23,596
activities, focusing specifically on the

20137
11:30:21,916 --> 11:30:25,680
key aspects that are targeted by these

20138
11:30:23,596 --> 11:30:27,276
endpoint security tools. And we're going

20139
11:30:25,680 --> 11:30:28,960
to use this to sort of guide us through

20140
11:30:27,276 --> 11:30:30,640
this section as we explore how to

20141
11:30:28,960 --> 11:30:33,276
monitor and analyze these activities on

20142
11:30:30,640 --> 11:30:36,000
various operating systems. And so

20143
11:30:33,276 --> 11:30:38,000
firstly here we have process execution.

20144
11:30:36,000 --> 11:30:40,160
And this involves monitoring the running

20145
11:30:38,000 --> 11:30:42,160
processes, right? So which processes are

20146
11:30:40,160 --> 11:30:44,320
running on the endpoint any executable

20147
11:30:42,160 --> 11:30:46,400
files and applications. And so we can

20148
11:30:44,320 --> 11:30:48,560
analyze a list of running processes like

20149
11:30:46,400 --> 11:30:50,240
executable files and applications along

20150
11:30:48,560 --> 11:30:52,800
with their metadata, right? So things

20151
11:30:50,240 --> 11:30:54,160
like their process ids or parent process

20152
11:30:52,800 --> 11:30:55,640
or command line arguments that were

20153
11:30:54,160 --> 11:30:58,000
passed along with the

20154
11:30:55,640 --> 11:30:59,596
executable. And so we can use baselines

20155
11:30:58,000 --> 11:31:01,360
to quickly determine and detect

20156
11:30:59,596 --> 11:31:03,680
suspicious activity like a high number

20157
11:31:01,360 --> 11:31:05,916
of processes being spawned or an

20158
11:31:03,680 --> 11:31:08,400
unusually high CPU or memory drain from

20159
11:31:05,916 --> 11:31:10,240
specific processes. Additionally, we can

20160
11:31:08,400 --> 11:31:11,916
leverage reputation databases to

20161
11:31:10,240 --> 11:31:13,916
evaluate the trustworthiness and

20162
11:31:11,916 --> 11:31:16,000
reputation of processes based on factors

20163
11:31:13,916 --> 11:31:18,800
like digital signatures or file origins

20164
11:31:16,000 --> 11:31:20,400
or historical behavior or by analyzing

20165
11:31:18,800 --> 11:31:22,320
the parent child relationships of

20166
11:31:20,400 --> 11:31:24,400
processes. And so these refer to

20167
11:31:22,320 --> 11:31:26,400
examining the hierarchical connections

20168
11:31:24,400 --> 11:31:28,320
between various processes. So for

20169
11:31:26,400 --> 11:31:31,436
example, is the winword process spawning

20170
11:31:28,320 --> 11:31:33,116
command.exe or PowerShell.exe or other

20171
11:31:31,436 --> 11:31:34,880
strange interconnections or dependencies

20172
11:31:33,116 --> 11:31:37,756
of processes that aren't present in

20173
11:31:34,880 --> 11:31:39,840
normal system activities.

20174
11:31:37,756 --> 11:31:41,436
We can also look at file system changes,

20175
11:31:39,840 --> 11:31:42,880
right? So we can track changes made to

20176
11:31:41,436 --> 11:31:44,640
files and directories on the endpoint

20177
11:31:42,880 --> 11:31:46,320
and detect things like unauthorized file

20178
11:31:44,640 --> 11:31:48,960
access or the presence of known

20179
11:31:46,320 --> 11:31:50,720
malicious files. And so we have things

20180
11:31:48,960 --> 11:31:52,560
like file integrity monitoring that can

20181
11:31:50,720 --> 11:31:54,720
monitor file systems for changes like

20182
11:31:52,560 --> 11:31:56,720
creation or modification or deletion of

20183
11:31:54,720 --> 11:31:58,560
files and directories. And this might

20184
11:31:56,720 --> 11:32:00,560
involve maintaining a cryptographic hash

20185
11:31:58,560 --> 11:32:02,160
or a check sum of files and comparing

20186
11:32:00,560 --> 11:32:05,040
them against current values to detect

20187
11:32:02,160 --> 11:32:06,960
any alterations or just analyzing file

20188
11:32:05,040 --> 11:32:08,640
access behavior. Right? So if we have a

20189
11:32:06,960 --> 11:32:10,320
rapid creation or modification of

20190
11:32:08,640 --> 11:32:12,240
multiple files, well that might indicate

20191
11:32:10,320 --> 11:32:13,840
a ransomware attack. Or if there are

20192
11:32:12,240 --> 11:32:15,756
attempts to offiscate file properties

20193
11:32:13,840 --> 11:32:17,596
like clearing out logs or events or

20194
11:32:15,756 --> 11:32:20,080
altering metadata, well we can alert on

20195
11:32:17,596 --> 11:32:21,680
that as well. We also have network

20196
11:32:20,080 --> 11:32:22,960
connections and we're obviously very

20197
11:32:21,680 --> 11:32:24,720
familiar with this from the last

20198
11:32:22,960 --> 11:32:26,320
section, right? So we can monitor

20199
11:32:24,720 --> 11:32:28,720
network traffic and connections going to

20200
11:32:26,320 --> 11:32:30,000
and from the endpoint. And at the host

20201
11:32:28,720 --> 11:32:31,916
level, well, we could take a look at

20202
11:32:30,000 --> 11:32:33,840
what processes are making which network

20203
11:32:31,916 --> 11:32:36,000
connections. We can see the associative

20204
11:32:33,840 --> 11:32:37,436
files or executables. And this can all

20205
11:32:36,000 --> 11:32:39,520
help us in detecting things like command

20206
11:32:37,436 --> 11:32:41,080
and control communication by malware or

20207
11:32:39,520 --> 11:32:43,800
remote access

20208
11:32:41,080 --> 11:32:46,000
Trojan. And lastly here we have registry

20209
11:32:43,800 --> 11:32:47,596
modifications. And so the Windows

20210
11:32:46,000 --> 11:32:49,200
registry, for example, is a common

20211
11:32:47,596 --> 11:32:51,040
target for attackers who want to

20212
11:32:49,200 --> 11:32:53,360
establish persistence mechanisms or

20213
11:32:51,040 --> 11:32:55,560
create back doors or evade detection by

20214
11:32:53,360 --> 11:32:57,916
disabling antivirus or EDR software, for

20215
11:32:55,560 --> 11:33:00,000
example. And so we can monitor these

20216
11:32:57,916 --> 11:33:02,160
registries in real time and capture any

20217
11:33:00,000 --> 11:33:04,720
modifications or creations of keys and

20218
11:33:02,160 --> 11:33:06,560
values within the registry.

20219
11:33:04,720 --> 11:33:08,640
And so with all of these common activity

20220
11:33:06,560 --> 11:33:10,400
and detection methods, you can sort of

20221
11:33:08,640 --> 11:33:12,160
start to see how much of understanding

20222
11:33:10,400 --> 11:33:14,400
what is suspicious or abnormal on

20223
11:33:12,160 --> 11:33:16,160
endpoints relies on having a great

20224
11:33:14,400 --> 11:33:18,880
understanding of our baseline activities

20225
11:33:16,160 --> 11:33:20,080
and what is normal. And that's the

20226
11:33:18,880 --> 11:33:21,756
direction that I want to take this

20227
11:33:20,080 --> 11:33:23,116
section. So, we're going to start

20228
11:33:21,756 --> 11:33:24,800
looking at different ways that we can

20229
11:33:23,116 --> 11:33:27,116
analyze various operating system

20230
11:33:24,800 --> 11:33:29,116
components like processes and file

20231
11:33:27,116 --> 11:33:30,960
activity or logs or the Windows

20232
11:33:29,116 --> 11:33:32,400
registry, which is going to come in

20233
11:33:30,960 --> 11:33:34,436
handy, of course, when we need to jump

20234
11:33:32,400 --> 11:33:36,560
onto an endpoint in an incident response

20235
11:33:34,436 --> 11:33:38,640
scenario. And so, let's start to get

20236
11:33:36,560 --> 11:33:41,916
into all of this fun stuff. And so, I

20237
11:33:38,640 --> 11:33:44,160
will see you in the next video.

20238
11:33:41,916 --> 11:33:46,160
So, let's do something a bit fun here

20239
11:33:44,160 --> 11:33:48,960
and create a very simple piece of

20240
11:33:46,160 --> 11:33:51,360
malware to compromise our Windows VM

20241
11:33:48,960 --> 11:33:53,916
from a simulated attacker on our Abuntu

20242
11:33:51,360 --> 11:33:55,596
VM. And this is so we can have a live

20243
11:33:53,916 --> 11:33:56,880
attack to showcase how we can

20244
11:33:55,596 --> 11:33:58,480
investigate different endpoint

20245
11:33:56,880 --> 11:34:00,596
components like network traffic and

20246
11:33:58,480 --> 11:34:02,800
processes as they're occurring in real

20247
11:34:00,596 --> 11:34:04,640
time. And obviously, we're not going to

20248
11:34:02,800 --> 11:34:07,040
be creating malware and compromising

20249
11:34:04,640 --> 11:34:09,040
ourselves within the sock. This is just

20250
11:34:07,040 --> 11:34:10,880
so we can set up a very simple example

20251
11:34:09,040 --> 11:34:13,596
to demonstrate the concepts covered in

20252
11:34:10,880 --> 11:34:15,916
future lessons. And so to accomplish

20253
11:34:13,596 --> 11:34:18,160
this, we're going to need to install and

20254
11:34:15,916 --> 11:34:20,400
use the Metas-ploit framework. And

20255
11:34:18,160 --> 11:34:22,160
Metas-ploit is a widely used penetration

20256
11:34:20,400 --> 11:34:23,840
testing tool that provides a

20257
11:34:22,160 --> 11:34:26,160
comprehensive platform for developing

20258
11:34:23,840 --> 11:34:28,640
and testing and executing exploits

20259
11:34:26,160 --> 11:34:30,720
against a variety of systems. And

20260
11:34:28,640 --> 11:34:32,560
Metas-ploit includes a vast library of

20261
11:34:30,720 --> 11:34:34,640
pre-built exploits and payloads that we

20262
11:34:32,560 --> 11:34:37,040
can use. and it will specifically allow

20263
11:34:34,640 --> 11:34:38,560
us to achieve a reverse shell and set up

20264
11:34:37,040 --> 11:34:40,160
something similar to a command and

20265
11:34:38,560 --> 11:34:42,160
control operation over our Windows

20266
11:34:40,160 --> 11:34:44,400
system. And don't worry if some of this

20267
11:34:42,160 --> 11:34:46,400
seems out of scope or confusing. Right?

20268
11:34:44,400 --> 11:34:48,400
Your goal in sock 101 is not to learn

20269
11:34:46,400 --> 11:34:50,400
how to compromise machines, but this is

20270
11:34:48,400 --> 11:34:52,480
giving us a very simplified gist into

20271
11:34:50,400 --> 11:34:54,160
what the attacker side might look like

20272
11:34:52,480 --> 11:34:56,240
and with the added benefit of course of

20273
11:34:54,160 --> 11:34:57,520
setting up our lab for this section. And

20274
11:34:56,240 --> 11:34:59,520
if you're interested in the type of

20275
11:34:57,520 --> 11:35:01,276
actions we perform in this lesson, well,

20276
11:34:59,520 --> 11:35:03,520
definitely take the practical ethical

20277
11:35:01,276 --> 11:35:05,360
hacking course if you haven't already.

20278
11:35:03,520 --> 11:35:06,720
And so to install Metas-ploit, well,

20279
11:35:05,360 --> 11:35:07,916
first make sure you're on your Auntu

20280
11:35:06,720 --> 11:35:10,320
machine, right? And we're going to open

20281
11:35:07,916 --> 11:35:12,000
up the Linux terminal here. And we're

20282
11:35:10,320 --> 11:35:13,756
just going to follow the documentation

20283
11:35:12,000 --> 11:35:16,160
on the Rapid 7 website, which I'll have

20284
11:35:13,756 --> 11:35:18,916
linked down below. And within the

20285
11:35:16,160 --> 11:35:21,116
documentation here, if we scroll

20286
11:35:18,916 --> 11:35:22,800
down, we're going to see this section

20287
11:35:21,116 --> 11:35:25,276
for installing the Metas-ploit framework

20288
11:35:22,800 --> 11:35:27,116
on Linux. And specifically, we can copy

20289
11:35:25,276 --> 11:35:28,480
this command here. And of course, we

20290
11:35:27,116 --> 11:35:30,400
want to make sure what commands we're

20291
11:35:28,480 --> 11:35:31,756
copying and running on our system. But

20292
11:35:30,400 --> 11:35:33,916
in this case, you can see we're curling

20293
11:35:31,756 --> 11:35:35,916
the repository, specifically an install

20294
11:35:33,916 --> 11:35:37,436
file here, and then we're simply running

20295
11:35:35,916 --> 11:35:38,800
the install file. And if we really

20296
11:35:37,436 --> 11:35:40,480
wanted to, we could take a look at the

20297
11:35:38,800 --> 11:35:41,916
actual script here, the installation

20298
11:35:40,480 --> 11:35:43,756
script, and make sure we're not running

20299
11:35:41,916 --> 11:35:45,840
anything malicious. And so what I'm

20300
11:35:43,756 --> 11:35:47,880
going to do is copy this command, head

20301
11:35:45,840 --> 11:35:49,840
over to my

20302
11:35:47,880 --> 11:35:52,080
terminal, and I'm going to paste this

20303
11:35:49,840 --> 11:35:55,200
in. And from here, it's going to kick

20304
11:35:52,080 --> 11:35:56,400
off the installation.

20305
11:35:55,200 --> 11:35:58,720
And of course, we're going to need our

20306
11:35:56,400 --> 11:35:58,720
password

20307
11:35:58,840 --> 11:36:02,640
here. And this might take a second to

20308
11:36:01,116 --> 11:36:05,560
install as it needs to update a number

20309
11:36:02,640 --> 11:36:07,276
of packages and install some

20310
11:36:05,560 --> 11:36:09,520
dependencies. All right. And it looks

20311
11:36:07,276 --> 11:36:12,320
like we're good to go. And so now we can

20312
11:36:09,520 --> 11:36:13,640
simply just type in MSF console to start

20313
11:36:12,320 --> 11:36:15,596
the

20314
11:36:13,640 --> 11:36:17,200
tool. And you can see we're going to get

20315
11:36:15,596 --> 11:36:19,520
a prompt here to ask us if we want to

20316
11:36:17,200 --> 11:36:22,240
use and set up a new database. And so to

20317
11:36:19,520 --> 11:36:24,080
do this, we can just type in y or yes to

20318
11:36:22,240 --> 11:36:26,800
run the initial configuration script and

20319
11:36:24,080 --> 11:36:26,800
create the initial

20320
11:36:27,880 --> 11:36:32,040
database. And so again, this might take

20321
11:36:29,916 --> 11:36:34,160
another

20322
11:36:32,040 --> 11:36:37,200
second. Excellent. So once we see that

20323
11:36:34,160 --> 11:36:38,880
MSF6 prompt there, we're good to go.

20324
11:36:37,200 --> 11:36:40,720
And so now that we have the metas-ploit

20325
11:36:38,880 --> 11:36:42,720
framework installed, we can use it to

20326
11:36:40,720 --> 11:36:44,640
create an interpreter payload, which is

20327
11:36:42,720 --> 11:36:46,240
a very highly versatile payload and

20328
11:36:44,640 --> 11:36:48,320
handler that can provide us with an

20329
11:36:46,240 --> 11:36:50,320
interactive shell using in-memory DL

20330
11:36:48,320 --> 11:36:51,596
injection. And that's a lot of words and

20331
11:36:50,320 --> 11:36:53,040
we don't need to understand what it's

20332
11:36:51,596 --> 11:36:54,640
doing under the hood because we're going

20333
11:36:53,040 --> 11:36:56,720
to start digging into that after we get

20334
11:36:54,640 --> 11:36:58,640
our malware going. And so let's take a

20335
11:36:56,720 --> 11:37:00,320
look at our VM networking because first

20336
11:36:58,640 --> 11:37:03,116
we need to make sure that our Linux and

20337
11:37:00,320 --> 11:37:04,880
Windows VM are on the same network.

20338
11:37:03,116 --> 11:37:06,720
And this is dependent on the hypervisor

20339
11:37:04,880 --> 11:37:08,480
you're using, but assuming you've placed

20340
11:37:06,720 --> 11:37:09,840
them both within the same network. In my

20341
11:37:08,480 --> 11:37:12,080
case, I can go under settings here in

20342
11:37:09,840 --> 11:37:13,596
virtual box under network. And you can

20343
11:37:12,080 --> 11:37:15,880
see I've attached them to this NAT

20344
11:37:13,596 --> 11:37:18,480
network that I've titled

20345
11:37:15,880 --> 11:37:20,560
TCM. And so next, since we're going to

20346
11:37:18,480 --> 11:37:22,560
be creating a payload that executes on

20347
11:37:20,560 --> 11:37:24,320
our Windows machine, we need to know

20348
11:37:22,560 --> 11:37:25,756
where to tell it to connect back to,

20349
11:37:24,320 --> 11:37:28,800
right? So in other words, what is our

20350
11:37:25,756 --> 11:37:30,240
Ubuntu Linux's machine IP address? And

20351
11:37:28,800 --> 11:37:33,596
so I'm going to press control shift and

20352
11:37:30,240 --> 11:37:36,400
t to open up a new terminal tab here.

20353
11:37:33,596 --> 11:37:39,116
And I'm just going to run if config on

20354
11:37:36,400 --> 11:37:41,800
my ENP0S3 interface. I have the IP

20355
11:37:39,116 --> 11:37:43,680
address of

20356
11:37:41,800 --> 11:37:44,800
192.168.1.4. So I'm going to make sure I

20357
11:37:43,680 --> 11:37:47,436
write this down because I'm going to

20358
11:37:44,800 --> 11:37:49,320
need it in a second. And so now that we

20359
11:37:47,436 --> 11:37:51,680
know our IP address, we can create our

20360
11:37:49,320 --> 11:37:53,596
payload. And Metas-ploit bundles with

20361
11:37:51,680 --> 11:37:56,000
something called MSF Venom, which is a

20362
11:37:53,596 --> 11:37:57,520
payload generation tool and utility that

20363
11:37:56,000 --> 11:38:00,800
we're going to use to create our actual

20364
11:37:57,520 --> 11:38:02,080
payload using a very simple syntax. And

20365
11:38:00,800 --> 11:38:03,800
so again, I'm going to open up another

20366
11:38:02,080 --> 11:38:06,640
terminal tab

20367
11:38:03,800 --> 11:38:09,596
here. And in this case, I'm currently in

20368
11:38:06,640 --> 11:38:11,276
my home/TCM directory. And for

20369
11:38:09,596 --> 11:38:14,200
organization sake, I'm going to create a

20370
11:38:11,276 --> 11:38:16,400
new directory here just called

20371
11:38:14,200 --> 11:38:17,680
malware. And I'm going to CD into that

20372
11:38:16,400 --> 11:38:20,200
directory because this is where I'm

20373
11:38:17,680 --> 11:38:23,360
going to drop the payload that we

20374
11:38:20,200 --> 11:38:25,960
generate. And so to run MSF Venom, I'm

20375
11:38:23,360 --> 11:38:28,000
just going to type in MSF

20376
11:38:25,960 --> 11:38:30,240
Venom. And from here, I'm going to

20377
11:38:28,000 --> 11:38:32,160
provide the P option. And this is going

20378
11:38:30,240 --> 11:38:34,240
to specify the type of payload that we

20379
11:38:32,160 --> 11:38:36,320
want to use. And in this case, there's a

20380
11:38:34,240 --> 11:38:37,596
syntax that we want to follow for this.

20381
11:38:36,320 --> 11:38:39,360
Since we're going to be executing our

20382
11:38:37,596 --> 11:38:41,916
payload on a Windows system, well, I'm

20383
11:38:39,360 --> 11:38:43,596
going to type in Windows here. And after

20384
11:38:41,916 --> 11:38:45,200
Windows, I'm going to put a slash here.

20385
11:38:43,596 --> 11:38:47,200
And now we can specify the type of

20386
11:38:45,200 --> 11:38:49,880
handler that we want. In this case, it's

20387
11:38:47,200 --> 11:38:52,000
going to be that interpreter

20388
11:38:49,880 --> 11:38:54,000
handler. And lastly, I'm going to put

20389
11:38:52,000 --> 11:38:55,680
another slash here. Then I'm going to

20390
11:38:54,000 --> 11:38:57,916
provide the type of payload. In this

20391
11:38:55,680 --> 11:38:59,680
case, we want to create a reverse TCP

20392
11:38:57,916 --> 11:39:00,960
connection or that reverse shell from

20393
11:38:59,680 --> 11:39:03,360
the target machine back to our

20394
11:39:00,960 --> 11:39:05,520
attacker's machine. So, I can just type

20395
11:39:03,360 --> 11:39:05,520
in

20396
11:39:06,916 --> 11:39:10,560
reverse_TCP. And so, this means that

20397
11:39:08,880 --> 11:39:12,640
when the payload is executed on the

20398
11:39:10,560 --> 11:39:14,240
target system or our Windows system, it

20399
11:39:12,640 --> 11:39:16,640
will initiate a connection back to our

20400
11:39:14,240 --> 11:39:18,520
specified host, allowing us to gain

20401
11:39:16,640 --> 11:39:20,640
access and control over the target

20402
11:39:18,520 --> 11:39:22,000
machine. And so, we're not done yet.

20403
11:39:20,640 --> 11:39:23,680
There are a couple other options that we

20404
11:39:22,000 --> 11:39:26,320
want to include.

20405
11:39:23,680 --> 11:39:27,916
We need to specify the listening host.

20406
11:39:26,320 --> 11:39:29,756
In our case, it's going to be our Linux

20407
11:39:27,916 --> 11:39:31,916
machine's IP address or our attacker

20408
11:39:29,756 --> 11:39:35,916
machine. And I'll do that with the LHOST

20409
11:39:31,916 --> 11:39:35,916
option and set that to

20410
11:39:36,436 --> 11:39:40,080
192.168.1.4. And so remember, your IP

20411
11:39:38,640 --> 11:39:42,200
address might be different. That's why

20412
11:39:40,080 --> 11:39:44,960
we did that check first with if

20413
11:39:42,200 --> 11:39:47,200
config. Next, we have the Lport option,

20414
11:39:44,960 --> 11:39:49,360
and this specifies the listening port in

20415
11:39:47,200 --> 11:39:50,560
which we'll receive the connection from.

20416
11:39:49,360 --> 11:39:54,560
In this case, I'm just going to choose

20417
11:39:50,560 --> 11:39:56,000
the default of quad 4.

20418
11:39:54,560 --> 11:39:58,560
under F here. This is where we can

20419
11:39:56,000 --> 11:40:00,080
choose the file output of our payload or

20420
11:39:58,560 --> 11:40:02,160
the file type that we want the payload

20421
11:40:00,080 --> 11:40:03,596
to be. In this case, I want it to be an

20422
11:40:02,160 --> 11:40:05,960
executable since we're running it on a

20423
11:40:03,596 --> 11:40:08,560
Windows system. So, I'm going to type in

20424
11:40:05,960 --> 11:40:10,480
.exe. And then lastly, we have the O

20425
11:40:08,560 --> 11:40:12,320
option. And this provides our output

20426
11:40:10,480 --> 11:40:15,756
file. And in this case, I'm just going

20427
11:40:12,320 --> 11:40:15,756
to call our malware

20428
11:40:15,880 --> 11:40:20,000
notmalware.exe. And with all this ready,

20429
11:40:17,916 --> 11:40:22,720
we should be good to go. So, I'm just

20430
11:40:20,000 --> 11:40:25,436
going to hit enter here. And it might

20431
11:40:22,720 --> 11:40:25,436
take a second to

20432
11:40:26,756 --> 11:40:31,360
generate. There we go. We can see that

20433
11:40:28,880 --> 11:40:33,756
the file was saved as notmalware.exe.

20434
11:40:31,360 --> 11:40:36,596
And if I run an ls here, we can see our

20435
11:40:33,756 --> 11:40:38,640
file. And if I run a file command on

20436
11:40:36,596 --> 11:40:40,040
notmalware.exe, we can see that it's a

20437
11:40:38,640 --> 11:40:42,480
PE32

20438
11:40:40,040 --> 11:40:43,916
executable. And interestingly, when we

20439
11:40:42,480 --> 11:40:46,000
create this payload, it's going to

20440
11:40:43,916 --> 11:40:47,840
create itself as a known good or trusted

20441
11:40:46,000 --> 11:40:49,596
binary by default. And it actually

20442
11:40:47,840 --> 11:40:52,160
impersonates the Apache benchmark

20443
11:40:49,596 --> 11:40:53,436
utility or ab.exe. exe. And this is

20444
11:40:52,160 --> 11:40:54,880
going to come into play later when we

20445
11:40:53,436 --> 11:40:57,040
start looking into the process of the

20446
11:40:54,880 --> 11:40:58,480
executable itself. And we might wonder

20447
11:40:57,040 --> 11:41:01,040
why our malware is being classified as

20448
11:40:58,480 --> 11:41:02,480
Apache benchmark. But this is all done

20449
11:41:01,040 --> 11:41:04,160
so that we can create somewhat of a

20450
11:41:02,480 --> 11:41:05,916
Trojan horse. Whereas when an

20451
11:41:04,160 --> 11:41:07,436
investigator or different scanning

20452
11:41:05,916 --> 11:41:08,960
utilities look this over, they're going

20453
11:41:07,436 --> 11:41:11,916
to see what looks like to be a benign

20454
11:41:08,960 --> 11:41:14,000
Apache benchmark utility. And so now we

20455
11:41:11,916 --> 11:41:15,680
can set up our interpreter listener to

20456
11:41:14,000 --> 11:41:18,640
catch the eventual shell that comes back

20457
11:41:15,680 --> 11:41:21,200
to us. And so over in our first tab here

20458
11:41:18,640 --> 11:41:22,480
where we have metas-ploit open and if

20459
11:41:21,200 --> 11:41:25,916
you did happen to close it, you can just

20460
11:41:22,480 --> 11:41:28,160
run MSF console again, we can now set up

20461
11:41:25,916 --> 11:41:29,840
and execute our listener. And so to do

20462
11:41:28,160 --> 11:41:31,276
this, we're going to type in the use

20463
11:41:29,840 --> 11:41:33,596
command here. And we're going to select

20464
11:41:31,276 --> 11:41:35,840
the type of handler we want to use. In

20465
11:41:33,596 --> 11:41:37,756
this case, it's going to be exploit. And

20466
11:41:35,840 --> 11:41:39,520
I can just tab there to autocomplete.

20467
11:41:37,756 --> 11:41:41,320
I'm going to type in multi and then

20468
11:41:39,520 --> 11:41:43,276
another slash for

20469
11:41:41,320 --> 11:41:45,116
handler. And so I'm just going to run

20470
11:41:43,276 --> 11:41:47,520
that. And you can see that the handler

20471
11:41:45,116 --> 11:41:50,000
was configured. So next we want to set

20472
11:41:47,520 --> 11:41:51,840
the payload. And so again, we want to

20473
11:41:50,000 --> 11:41:53,240
match the same payload that we used when

20474
11:41:51,840 --> 11:41:55,360
we generated our

20475
11:41:53,240 --> 11:41:56,916
malware. And so to do this, I'm going to

20476
11:41:55,360 --> 11:41:58,880
write set

20477
11:41:56,916 --> 11:42:01,276
payload. And I'm going to set that to

20478
11:41:58,880 --> 11:42:01,276
again

20479
11:42:04,680 --> 11:42:07,436
Windows/terprepter/reverse_tcp. And

20480
11:42:05,840 --> 11:42:09,560
again, you can autocomplete that as well

20481
11:42:07,436 --> 11:42:11,840
with

20482
11:42:09,560 --> 11:42:14,640
tab. All right, we're almost there. We

20483
11:42:11,840 --> 11:42:17,756
need to set our LHOST again to either

20484
11:42:14,640 --> 11:42:21,276
again our IP address or we can use our

20485
11:42:17,756 --> 11:42:21,276
interface. Right? So I can type in

20486
11:42:21,320 --> 11:42:25,640
ENP03 and it will automatically convert

20487
11:42:23,596 --> 11:42:28,000
that to whatever my current IP address

20488
11:42:25,640 --> 11:42:31,200
is. And lastly, we want to set our

20489
11:42:28,000 --> 11:42:32,480
listening port with Lport to quad 4. We

20490
11:42:31,200 --> 11:42:33,840
actually don't need to do this because

20491
11:42:32,480 --> 11:42:35,360
this is the default port that my

20492
11:42:33,840 --> 11:42:36,960
interpreter will listen from, but

20493
11:42:35,360 --> 11:42:38,200
obviously it's good practice to manually

20494
11:42:36,960 --> 11:42:41,436
set

20495
11:42:38,200 --> 11:42:43,840
this. And so now that we're ready to go,

20496
11:42:41,436 --> 11:42:45,640
we can just type in literally exploit

20497
11:42:43,840 --> 11:42:47,520
and this is going to run our

20498
11:42:45,640 --> 11:42:48,720
listener. We're not going to connect to

20499
11:42:47,520 --> 11:42:50,400
our machine yet, right? We didn't even

20500
11:42:48,720 --> 11:42:53,320
get the malware over there, but it's

20501
11:42:50,400 --> 11:42:55,276
going to run our listener and payload

20502
11:42:53,320 --> 11:42:57,756
handler. And you can see that we've

20503
11:42:55,276 --> 11:42:59,480
started a reverse TCP handler on our IP

20504
11:42:57,756 --> 11:43:01,916
address on port

20505
11:42:59,480 --> 11:43:04,720
4444. And with that, we are ready to

20506
11:43:01,916 --> 11:43:06,400
catch our shell. And so now that we have

20507
11:43:04,720 --> 11:43:08,640
our payload created and we're listening

20508
11:43:06,400 --> 11:43:11,040
for the connection, we can transfer it

20509
11:43:08,640 --> 11:43:12,880
over to our Windows machine. And so on

20510
11:43:11,040 --> 11:43:15,360
Ubuntu, let's host this payload using

20511
11:43:12,880 --> 11:43:17,116
the Python HTTP server so that it can be

20512
11:43:15,360 --> 11:43:19,276
publicly accessed and downloaded from

20513
11:43:17,116 --> 11:43:20,800
our Windows client. Again, we're sort of

20514
11:43:19,276 --> 11:43:22,960
taking a peak behind the curtain here so

20515
11:43:20,800 --> 11:43:24,320
we can compromise ourselves easily. In

20516
11:43:22,960 --> 11:43:26,000
theory, we could think of an attacker

20517
11:43:24,320 --> 11:43:27,436
sending this over as a fishing email

20518
11:43:26,000 --> 11:43:30,160
that contains our payload as an

20519
11:43:27,436 --> 11:43:31,596
attachment or downloaded from a link.

20520
11:43:30,160 --> 11:43:33,276
And so to do this, make sure you're in

20521
11:43:31,596 --> 11:43:35,040
the same directory that we created our

20522
11:43:33,276 --> 11:43:39,640
malware in. And then I'm going to run

20523
11:43:35,040 --> 11:43:41,520
Python 3 with the M option here for

20524
11:43:39,640 --> 11:43:45,480
http.server. And I'm going to select the

20525
11:43:41,520 --> 11:43:47,596
port of 8000 to listen on and host our

20526
11:43:45,480 --> 11:43:51,080
server. And so now we're ready. We're

20527
11:43:47,596 --> 11:43:53,520
serving HTTP on port

20528
11:43:51,080 --> 11:43:56,160
8000. And so from here, I've started up

20529
11:43:53,520 --> 11:43:57,916
my Windows machine as well. Right? So I

20530
11:43:56,160 --> 11:44:00,560
have both machines running. I have my

20531
11:43:57,916 --> 11:44:03,596
Linux machine and my Windows machine or

20532
11:44:00,560 --> 11:44:05,756
our victim in this case. And so now on

20533
11:44:03,596 --> 11:44:07,040
Windows, we can open up Edge or you

20534
11:44:05,756 --> 11:44:10,720
know, Internet Explorer, whatever you

20535
11:44:07,040 --> 11:44:12,960
want to use. I'm going to paste in HTTP

20536
11:44:10,720 --> 11:44:17,000
the IP address of my Linux machine and

20537
11:44:12,960 --> 11:44:19,276
then with a colon here, specify port

20538
11:44:17,000 --> 11:44:21,200
8000. And if we open that, you can see

20539
11:44:19,276 --> 11:44:24,400
we get the directory listing. And this

20540
11:44:21,200 --> 11:44:25,756
is our Python HTTP server in action. And

20541
11:44:24,400 --> 11:44:27,040
so this is going to list all of the

20542
11:44:25,756 --> 11:44:30,200
files in the directory that we're

20543
11:44:27,040 --> 11:44:32,160
serving from. And of course, we can see

20544
11:44:30,200 --> 11:44:33,960
notmalware.exe. And if we click on this,

20545
11:44:32,160 --> 11:44:36,160
it's going to download to our local

20546
11:44:33,960 --> 11:44:37,916
system. And we can see in the top right

20547
11:44:36,160 --> 11:44:39,756
here that this is not a commonly

20548
11:44:37,916 --> 11:44:41,360
downloaded file. And so Microsoft is

20549
11:44:39,756 --> 11:44:43,596
trying to warn us here to be cautious

20550
11:44:41,360 --> 11:44:45,596
around downloading this file. But what

20551
11:44:43,596 --> 11:44:48,080
we can do is just click on the three

20552
11:44:45,596 --> 11:44:49,840
dots here for more actions. And then we

20553
11:44:48,080 --> 11:44:52,000
can go over to keep because we want to

20554
11:44:49,840 --> 11:44:53,680
keep this file. And again, we're going

20555
11:44:52,000 --> 11:44:55,116
to get another warning from Smart Screen

20556
11:44:53,680 --> 11:44:57,520
here. So, Microsoft really doesn't want

20557
11:44:55,116 --> 11:44:59,040
us to download this file. And so, you

20558
11:44:57,520 --> 11:45:01,000
can see all of the built-in protections

20559
11:44:59,040 --> 11:45:03,116
that are seeing our payload as

20560
11:45:01,000 --> 11:45:04,400
suspicious. And realistically, an

20561
11:45:03,116 --> 11:45:06,160
attacker would put more work into

20562
11:45:04,400 --> 11:45:08,000
obiscation and methods to get around

20563
11:45:06,160 --> 11:45:09,436
simple detection like this. And, you

20564
11:45:08,000 --> 11:45:11,276
know, obviously, we didn't create any

20565
11:45:09,436 --> 11:45:12,800
advanced malware or anything. And this

20566
11:45:11,276 --> 11:45:15,276
would definitely get picked up by most

20567
11:45:12,800 --> 11:45:18,000
antivirus solutions. And so, this is not

20568
11:45:15,276 --> 11:45:19,436
an AV evasion course by any means. And

20569
11:45:18,000 --> 11:45:21,520
so, I'm going to click on show more

20570
11:45:19,436 --> 11:45:22,960
here. and I'm going to click on keep

20571
11:45:21,520 --> 11:45:25,200
anyway. So, we're basically saying,

20572
11:45:22,960 --> 11:45:26,560
"Please let us keep this malware." All

20573
11:45:25,200 --> 11:45:28,800
right. So, now that we finally

20574
11:45:26,560 --> 11:45:30,360
downloaded the malware, let's open up a

20575
11:45:28,800 --> 11:45:32,000
command prompt as

20576
11:45:30,360 --> 11:45:34,240
administrator. And so, we're going to

20577
11:45:32,000 --> 11:45:35,916
simulate an administrator user falling

20578
11:45:34,240 --> 11:45:37,640
victim to this malware, giving our

20579
11:45:35,916 --> 11:45:39,596
attacker full compromise over the

20580
11:45:37,640 --> 11:45:41,276
system. Or we could assume that the

20581
11:45:39,596 --> 11:45:43,116
attacker was able to gain an initial

20582
11:45:41,276 --> 11:45:45,520
user shell and then from that foothold

20583
11:45:43,116 --> 11:45:46,800
escalate privileges as administrator.

20584
11:45:45,520 --> 11:45:50,320
And so, I'm going to click on the start

20585
11:45:46,800 --> 11:45:51,596
menu here and then type in cmd.

20586
11:45:50,320 --> 11:45:53,080
And then on the command prompt

20587
11:45:51,596 --> 11:45:55,800
application here, I'm going to

20588
11:45:53,080 --> 11:45:57,756
rightclick and then select run as

20589
11:45:55,800 --> 11:45:58,916
administrator and just say yes to the

20590
11:45:57,756 --> 11:46:01,520
UAC

20591
11:45:58,916 --> 11:46:03,400
here. And we now have a command prompt

20592
11:46:01,520 --> 11:46:05,116
running as

20593
11:46:03,400 --> 11:46:08,480
administrator. All right. So I'm going

20594
11:46:05,116 --> 11:46:08,480
to head over to the C

20595
11:46:09,160 --> 11:46:13,116
directory over to users and then the

20596
11:46:11,596 --> 11:46:15,756
user I configured for this machine is

20597
11:46:13,116 --> 11:46:18,320
called TCM. And then I'm going to go to

20598
11:46:15,756 --> 11:46:21,960
my users downloads directory. And if I

20599
11:46:18,320 --> 11:46:23,916
run a dur here, well, we can see

20600
11:46:21,960 --> 11:46:27,000
notmalware.exe. And so all I'm going to

20601
11:46:23,916 --> 11:46:28,480
do is just type in

20602
11:46:27,000 --> 11:46:30,880
notmalware.exe. And then I'm going to

20603
11:46:28,480 --> 11:46:34,000
hit enter to run that. And as soon as I

20604
11:46:30,880 --> 11:46:34,000
do, I'm going to hop back over to

20605
11:46:35,240 --> 11:46:38,960
Abuntu. All right, I'm going to go back

20606
11:46:37,040 --> 11:46:40,400
to our metas-ploit shell here. And you

20607
11:46:38,960 --> 11:46:43,116
can see that we did open up a

20608
11:46:40,400 --> 11:46:44,720
interpreter session. And specifically,

20609
11:46:43,116 --> 11:46:46,880
we can see that it was opened up on our

20610
11:46:44,720 --> 11:46:49,116
listening port over to the attackers

20611
11:46:46,880 --> 11:46:52,080
machine. This is our Windows IP address

20612
11:46:49,116 --> 11:46:54,640
on this ephemeral port here. And so we

20613
11:46:52,080 --> 11:46:56,080
successfully caught a reverse shell. And

20614
11:46:54,640 --> 11:46:57,596
so this is going to be the general

20615
11:46:56,080 --> 11:46:59,200
process for setting up the following

20616
11:46:57,596 --> 11:47:00,800
lessons. Right? So we're going to want

20617
11:46:59,200 --> 11:47:02,160
to keep this active reverse shell

20618
11:47:00,800 --> 11:47:03,840
connection so we can look into network

20619
11:47:02,160 --> 11:47:05,840
and process activities on our Windows

20620
11:47:03,840 --> 11:47:06,960
host. And if for any reason you need to,

20621
11:47:05,840 --> 11:47:08,560
you know, close out everything and

20622
11:47:06,960 --> 11:47:10,400
restart it, well, just follow these

20623
11:47:08,560 --> 11:47:11,596
steps once again. Make sure to set up,

20624
11:47:10,400 --> 11:47:12,960
you know, we've already transferred the

20625
11:47:11,596 --> 11:47:14,800
payload over, so you don't need to do

20626
11:47:12,960 --> 11:47:16,640
that again. You just need to set up

20627
11:47:14,800 --> 11:47:18,640
metas-ploit here. set the payload and

20628
11:47:16,640 --> 11:47:20,800
options and then just simply execute the

20629
11:47:18,640 --> 11:47:22,560
program on Windows. And so now that

20630
11:47:20,800 --> 11:47:23,800
we've compromised ourselves, I will see

20631
11:47:22,560 --> 11:47:26,480
you in the next

20632
11:47:23,800 --> 11:47:28,560
lesson. Again, a big thank you to Flare

20633
11:47:26,480 --> 11:47:31,040
Academy for sponsoring our 12 hours of

20634
11:47:28,560 --> 11:47:33,116
sock 101. Cyber threats are evolving

20635
11:47:31,040 --> 11:47:35,040
fast. And staying ahead is not just an

20636
11:47:33,116 --> 11:47:37,040
advantage, it's a necessity. And that's

20637
11:47:35,040 --> 11:47:39,040
where Flare Academy comes in. Flare

20638
11:47:37,040 --> 11:47:41,436
Academy is an educational hub designed

20639
11:47:39,040 --> 11:47:43,040
to democratize cyber security knowledge.

20640
11:47:41,436 --> 11:47:45,040
Backed by the Flair research team and

20641
11:47:43,040 --> 11:47:46,960
leading threat intelligence experts,

20642
11:47:45,040 --> 11:47:48,880
they provide accessible training,

20643
11:47:46,960 --> 11:47:51,116
collaborative discussions, and cutting

20644
11:47:48,880 --> 11:47:53,436
edge resources. With the support of

20645
11:47:51,116 --> 11:47:55,596
Flair's industry-leading research team,

20646
11:47:53,436 --> 11:47:57,520
members gain access to hands-on insights

20647
11:47:55,596 --> 11:47:59,360
and training while connecting with peers

20648
11:47:57,520 --> 11:48:01,040
and experts to tackle the toughest and

20649
11:47:59,360 --> 11:48:02,640
newest challenges together. This is

20650
11:48:01,040 --> 11:48:04,000
through practical sessions designed to

20651
11:48:02,640 --> 11:48:06,080
solve real world cyber security

20652
11:48:04,000 --> 11:48:08,160
challenges. The opportunity to engage

20653
11:48:06,080 --> 11:48:09,596
with industry leaders, researchers, and

20654
11:48:08,160 --> 11:48:11,276
fellow professionals to grow your

20655
11:48:09,596 --> 11:48:13,276
skills, community meetups to share

20656
11:48:11,276 --> 11:48:15,116
insights and experiences in both virtual

20657
11:48:13,276 --> 11:48:16,960
and in-person events, and exclusive

20658
11:48:15,116 --> 11:48:18,960
research and tools such as access to

20659
11:48:16,960 --> 11:48:20,880
cutting edge reports, tooling, and

20660
11:48:18,960 --> 11:48:22,800
intelligence from Flair's experts

20661
11:48:20,880 --> 11:48:24,240
tailored specifically for the community.

20662
11:48:22,800 --> 11:48:25,840
With Flare, you can learn and grow

20663
11:48:24,240 --> 11:48:27,756
through in-depth training sessions on

20664
11:48:25,840 --> 11:48:29,916
credential management, reconnaissance

20665
11:48:27,756 --> 11:48:31,756
techniques, OSENT, and much more.

20666
11:48:29,916 --> 11:48:33,680
Delivered by industry leaders like Jason

20667
11:48:31,756 --> 11:48:35,596
Hadex, and backed by Flair's research

20668
11:48:33,680 --> 11:48:38,000
team. You'll get exclusive access to

20669
11:48:35,596 --> 11:48:39,596
expertly crafted solutions, playbooks,

20670
11:48:38,000 --> 11:48:41,040
and session materials designed to

20671
11:48:39,596 --> 11:48:42,480
address real world cyber security

20672
11:48:41,040 --> 11:48:44,240
challenges. You'll be able to

20673
11:48:42,480 --> 11:48:46,320
participate in expert-led discussions

20674
11:48:44,240 --> 11:48:48,560
and Q&A channels and stay ahead of

20675
11:48:46,320 --> 11:48:50,160
emerging threats with exclusive reports,

20676
11:48:48,560 --> 11:48:52,080
feeds, and insights from Flair's

20677
11:48:50,160 --> 11:48:53,840
comprehensive cyber crime intelligence.

20678
11:48:52,080 --> 11:48:56,000
And verified members gain access to

20679
11:48:53,840 --> 11:48:57,756
premium resources and private insights

20680
11:48:56,000 --> 11:48:59,596
while contributing to a community that

20681
11:48:57,756 --> 11:49:01,276
thrives on shared knowledge. And so, if

20682
11:48:59,596 --> 11:49:04,880
you're ready to level up, join Flare

20683
11:49:01,276 --> 11:49:04,880
Academy today through the link in the

20684
11:49:06,040 --> 11:49:10,080
description. All righty, my friends.

20685
11:49:08,400 --> 11:49:11,680
Sadly, we are going to need to cap

20686
11:49:10,080 --> 11:49:13,520
things off for now, but I really hope

20687
11:49:11,680 --> 11:49:15,680
you enjoyed everything we covered up to

20688
11:49:13,520 --> 11:49:17,840
this point. You know, we really only did

20689
11:49:15,680 --> 11:49:19,520
scratch the surface of the full sock 101

20690
11:49:17,840 --> 11:49:21,040
curriculum. And I'm kind of leaving you

20691
11:49:19,520 --> 11:49:22,800
on a bit of a cliffhanger here because

20692
11:49:21,040 --> 11:49:24,320
the endpoint security section is really

20693
11:49:22,800 --> 11:49:25,916
where things start to pick up in the

20694
11:49:24,320 --> 11:49:27,116
course and really where we start to

20695
11:49:25,916 --> 11:49:28,800
correlate some of the different things

20696
11:49:27,116 --> 11:49:30,560
we're seeing on the network side. Uh,

20697
11:49:28,800 --> 11:49:32,400
and also how we can hunt malware and

20698
11:49:30,560 --> 11:49:34,320
different persistence techniques uh and

20699
11:49:32,400 --> 11:49:36,400
even perform a bit of sort of live

20700
11:49:34,320 --> 11:49:38,480
incident response on the endpoint level.

20701
11:49:36,400 --> 11:49:39,756
um and even working with an EDR as well.

20702
11:49:38,480 --> 11:49:41,360
And then of course, as we talked about

20703
11:49:39,756 --> 11:49:43,116
earlier, we start talking about the SIM

20704
11:49:41,360 --> 11:49:44,960
and we start working with Splunk uh and

20705
11:49:43,116 --> 11:49:47,040
how we can ingest logs and work with

20706
11:49:44,960 --> 11:49:48,960
logs and sort of cut them up as well uh

20707
11:49:47,040 --> 11:49:51,040
manually and also using tools like a

20708
11:49:48,960 --> 11:49:52,720
SIM. And of course, we get into threat

20709
11:49:51,040 --> 11:49:54,960
intelligence and how we can collect and

20710
11:49:52,720 --> 11:49:56,800
ingest and use uh sort of the the

20711
11:49:54,960 --> 11:49:59,116
intelligence we're ingesting uh in order

20712
11:49:56,800 --> 11:50:00,720
to make better uh decisions as an

20713
11:49:59,116 --> 11:50:02,480
analyst. And of course we have this

20714
11:50:00,720 --> 11:50:04,000
whole digital forensic section where we

20715
11:50:02,480 --> 11:50:06,000
really deep dive into different forensic

20716
11:50:04,000 --> 11:50:08,240
artifacts on the endpoint uh and also

20717
11:50:06,000 --> 11:50:10,320
how we can triage and work with uh many

20718
11:50:08,240 --> 11:50:12,240
industry standard forensic tools as well

20719
11:50:10,320 --> 11:50:13,680
and we really roll that up into incident

20720
11:50:12,240 --> 11:50:15,200
response as well. So just like we talked

20721
11:50:13,680 --> 11:50:16,640
about at the beginning of the video, we

20722
11:50:15,200 --> 11:50:18,960
really are only scratching the surface

20723
11:50:16,640 --> 11:50:20,560
here. So, um, if you did enjoy

20724
11:50:18,960 --> 11:50:22,320
everything we learned up to this point

20725
11:50:20,560 --> 11:50:24,240
and you want to sort of continue on

20726
11:50:22,320 --> 11:50:26,480
further, I really encourage you to check

20727
11:50:24,240 --> 11:50:27,840
out the TCM Academy uh, and get a

20728
11:50:26,480 --> 11:50:30,320
academy subscription where you can check

20729
11:50:27,840 --> 11:50:32,240
out both the sock 101 and a ton of other

20730
11:50:30,320 --> 11:50:34,400
courses that we offer on the academy

20731
11:50:32,240 --> 11:50:36,720
both in defensive and offensive security

20732
11:50:34,400 --> 11:50:38,480
as well and even programming. And so,

20733
11:50:36,720 --> 11:50:40,160
with all of that, I want to thank you

20734
11:50:38,480 --> 11:50:41,840
yourself for getting up to this point,

20735
11:50:40,160 --> 11:50:43,840
right? Uh, that was a ton of knowledge

20736
11:50:41,840 --> 11:50:45,436
dropped on you in a condensed 12-h hour

20737
11:50:43,840 --> 11:50:47,360
period like that. So, uh, that's not

20738
11:50:45,436 --> 11:50:48,800
easy, right? So kudos to you. Uh I hope

20739
11:50:47,360 --> 11:50:50,240
you took good notes. If anything is

20740
11:50:48,800 --> 11:50:51,840
unclear, you can always go back on the

20741
11:50:50,240 --> 11:50:53,680
chapter sections there and revisit

20742
11:50:51,840 --> 11:50:55,520
certain areas. And of course, again, if

20743
11:50:53,680 --> 11:50:57,200
you did enjoy uh the course and want to

20744
11:50:55,520 --> 11:50:58,880
continue and expand your knowledge, feel

20745
11:50:57,200 --> 11:51:01,276
free to check out the full course at the

20746
11:50:58,880 --> 11:51:03,040
TCM Security Academy. And so, please

20747
11:51:01,276 --> 11:51:04,800
feel free to leave a like on the video

20748
11:51:03,040 --> 11:51:06,160
and subscribe to the channel if you

20749
11:51:04,800 --> 11:51:07,360
haven't already because this is not the

20750
11:51:06,160 --> 11:51:09,840
first time we've dropped one of our

20751
11:51:07,360 --> 11:51:11,436
courses like this on the uh TCM YouTube

20752
11:51:09,840 --> 11:51:13,200
channel, right? So, I love that we get

20753
11:51:11,436 --> 11:51:14,960
to do this every now and then. Uh and so

20754
11:51:13,200 --> 11:51:18,880
with that, thank you again for watching

20755
11:51:14,960 --> 11:51:18,880
and I will catch you next time.

